CCS PCH C Compiler, Version 5.008, 5967               08-Jul-18 16:20

               Filename:   C:\BA\Software_projects\PIC\1520Q\BA1520QTX\BA1520QTX.lst

               ROM used:   28686 bytes (88%)
                           Largest free fragment is 4078
               RAM used:   429 (28%) at main() level
                           627 (41%) worst case
               Stack used: 11 locations (9 in main + 2 for interrupts)
               Stack size: 30

*
0000:  GOTO   6DA4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.1
004A:  GOTO   0054
004E:  BTFSC  F9E.1
0050:  GOTO   0C5A
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   0C64
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   0C6A
006C:  BTFSS  F9D.5
006E:  GOTO   0078
0072:  BTFSC  F9E.5
0074:  GOTO   0C70
0078:  BTFSS  F9D.4
007A:  GOTO   0084
007E:  BTFSC  F9E.4
0080:  GOTO   0CBE
0084:  BTFSS  F7D.0
0086:  GOTO   0090
008A:  BTFSC  F7E.0
008C:  GOTO   0C54
0090:  MOVFF  0E,00
0094:  MOVFF  0F,01
0098:  MOVFF  10,02
009C:  MOVFF  11,03
00A0:  MOVFF  0C,FE9
00A4:  MOVFF  07,FEA
00A8:  BSF    07.7
00AA:  MOVFF  08,FE1
00AE:  MOVFF  09,FE2
00B2:  MOVFF  0A,FD9
00B6:  MOVFF  0B,FDA
00BA:  MOVFF  12,FF3
00BE:  MOVFF  13,FF4
00C2:  MOVFF  14,FFA
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #include <BA1520QTX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
00D2:  MOVFF  FF2,0D
00D6:  BCF    FF2.7
00D8:  CLRF   FF7
00DA:  ADDLW  EC
00DC:  MOVWF  FF6
00DE:  MOVLW  00
00E0:  ADDWFC FF7,F
00E2:  TBLRD*+
00E4:  MOVF   FF5,W
00E6:  BTFSC  0D.7
00E8:  BSF    FF2.7
00EA:  RETURN 0
00EC:  DATA C8,01
00EE:  DATA 00,00
00F0:  DATA 81,0C
00F2:  DATA 00,00
00F4:  DATA 42,06
00F6:  DATA 00,00
00F8:  DATA 0B,00
00FA:  DATA 70,00
00FC:  DATA A4,A7
00FE:  DATA 02,00
0100:  DATA E5,00
0102:  DATA 00,00
0104:  DATA 06,DD
0106:  DATA 1E,00
0108:  DATA 07,00
010A:  DATA 00,00
010C:  MOVFF  FF2,0D
0110:  BCF    FF2.7
0112:  CLRF   FF7
0114:  ADDLW  26
0116:  MOVWF  FF6
0118:  MOVLW  01
011A:  ADDWFC FF7,F
011C:  TBLRD*+
011E:  MOVF   FF5,W
0120:  BTFSC  0D.7
0122:  BSF    FF2.7
0124:  RETURN 0
0126:  DATA 24,41
0128:  DATA 49,20
012A:  DATA 3C,63
012C:  DATA 68,61
012E:  DATA 6E,6E
0130:  DATA 65,6C
0132:  DATA 3E,3C
0134:  DATA 63,72
0136:  DATA 3E,20
0138:  DATA 20,09
013A:  DATA 52,65
013C:  DATA 71,75
013E:  DATA 65,73
0140:  DATA 74,20
0142:  DATA 61,6E
0144:  DATA 61,6C
0146:  DATA 6F,67
0148:  DATA 20,63
014A:  DATA 68,61
014C:  DATA 6E,6E
014E:  DATA 65,6C
0150:  DATA 20,76
0152:  DATA 61,6C
0154:  DATA 75,65
0156:  DATA 20,28
0158:  DATA 31,30
015A:  DATA 20,62
015C:  DATA 69,74
015E:  DATA 73,29
0160:  DATA 0D,0A
0162:  DATA 00,00
0164:  MOVFF  FF2,0D
0168:  BCF    FF2.7
016A:  CLRF   FF7
016C:  ADDLW  7E
016E:  MOVWF  FF6
0170:  MOVLW  01
0172:  ADDWFC FF7,F
0174:  TBLRD*+
0176:  MOVF   FF5,W
0178:  BTFSC  0D.7
017A:  BSF    FF2.7
017C:  RETURN 0
017E:  DATA 24,41
0180:  DATA 54,20
0182:  DATA 3C,6C
0184:  DATA 65,76
0186:  DATA 65,6C
0188:  DATA 3E,3C
018A:  DATA 63,72
018C:  DATA 3E,20
018E:  DATA 20,09
0190:  DATA 53,65
0192:  DATA 74,20
0194:  DATA 61,74
0196:  DATA 74,65
0198:  DATA 6E,75
019A:  DATA 61,74
019C:  DATA 6F,72
019E:  DATA 20,74
01A0:  DATA 6F,20
01A2:  DATA 3C,6C
01A4:  DATA 65,76
01A6:  DATA 65,6C
01A8:  DATA 3E,0D
01AA:  DATA 0A,00
01AC:  MOVFF  FF2,0D
01B0:  BCF    FF2.7
01B2:  CLRF   FF7
01B4:  ADDLW  C6
01B6:  MOVWF  FF6
01B8:  MOVLW  01
01BA:  ADDWFC FF7,F
01BC:  TBLRD*+
01BE:  MOVF   FF5,W
01C0:  BTFSC  0D.7
01C2:  BSF    FF2.7
01C4:  RETURN 0
01C6:  DATA 24,43
01C8:  DATA 46,20
01CA:  DATA 3C,66
01CC:  DATA 72,65
01CE:  DATA 71,3E
01D0:  DATA 3C,63
01D2:  DATA 72,3E
01D4:  DATA 20,20
01D6:  DATA 09,43
01D8:  DATA 68,61
01DA:  DATA 6E,67
01DC:  DATA 65,20
01DE:  DATA 66,72
01E0:  DATA 65,71
01E2:  DATA 75,65
01E4:  DATA 6E,63
01E6:  DATA 79,20
01E8:  DATA 28,32
01EA:  DATA 31,38
01EC:  DATA 35,2E
01EE:  DATA 30,20
01F0:  DATA 2D,20
01F2:  DATA 32,33
01F4:  DATA 30,30
01F6:  DATA 2E,30
01F8:  DATA 20,69
01FA:  DATA 6E,20
01FC:  DATA 30,2E
01FE:  DATA 31,20
0200:  DATA 69,6E
0202:  DATA 63,73
0204:  DATA 29,0D
0206:  DATA 0A,00
0208:  MOVFF  FF2,0D
020C:  BCF    FF2.7
020E:  CLRF   FF7
0210:  ADDLW  22
0212:  MOVWF  FF6
0214:  MOVLW  02
0216:  ADDWFC FF7,F
0218:  TBLRD*+
021A:  MOVF   FF5,W
021C:  BTFSC  0D.7
021E:  BSF    FF2.7
0220:  RETURN 0
0222:  DATA 24,44
0224:  DATA 49,3C
0226:  DATA 63,72
0228:  DATA 3E,20
022A:  DATA 20,09
022C:  DATA 52,65
022E:  DATA 71,75
0230:  DATA 65,73
0232:  DATA 74,20
0234:  DATA 64,69
0236:  DATA 67,69
0238:  DATA 74,61
023A:  DATA 6C,20
023C:  DATA 69,6E
023E:  DATA 70,75
0240:  DATA 74,73
0242:  DATA 0D,0A
0244:  DATA 00,00
0246:  MOVFF  FF2,0D
024A:  BCF    FF2.7
024C:  CLRF   FF7
024E:  ADDLW  60
0250:  MOVWF  FF6
0252:  MOVLW  02
0254:  ADDWFC FF7,F
0256:  TBLRD*+
0258:  MOVF   FF5,W
025A:  BTFSC  0D.7
025C:  BSF    FF2.7
025E:  RETURN 0
0260:  DATA 24,47
0262:  DATA 44,20
0264:  DATA 3C,61
0266:  DATA 64,64
0268:  DATA 72,3E
026A:  DATA 3C,63
026C:  DATA 72,3E
026E:  DATA 20,20
0270:  DATA 09,47
0272:  DATA 65,74
0274:  DATA 20,44
0276:  DATA 32,41
0278:  DATA 20,72
027A:  DATA 65,67
027C:  DATA 69,73
027E:  DATA 74,65
0280:  DATA 72,20
0282:  DATA 63,6F
0284:  DATA 6E,74
0286:  DATA 65,6E
0288:  DATA 74,73
028A:  DATA 0D,0A
028C:  DATA 00,00
028E:  MOVFF  FF2,0D
0292:  BCF    FF2.7
0294:  CLRF   FF7
0296:  ADDLW  A8
0298:  MOVWF  FF6
029A:  MOVLW  02
029C:  ADDWFC FF7,F
029E:  TBLRD*+
02A0:  MOVF   FF5,W
02A2:  BTFSC  0D.7
02A4:  BSF    FF2.7
02A6:  RETURN 0
02A8:  DATA 24,47
02AA:  DATA 46,20
02AC:  DATA 3C,61
02AE:  DATA 64,64
02B0:  DATA 72,3E
02B2:  DATA 3C,63
02B4:  DATA 72,3E
02B6:  DATA 20,20
02B8:  DATA 09,47
02BA:  DATA 65,74
02BC:  DATA 20,46
02BE:  DATA 50,47
02C0:  DATA 41,20
02C2:  DATA 72,65
02C4:  DATA 67,69
02C6:  DATA 73,74
02C8:  DATA 65,72
02CA:  DATA 20,63
02CC:  DATA 6F,6E
02CE:  DATA 74,65
02D0:  DATA 6E,74
02D2:  DATA 73,0D
02D4:  DATA 0A,00
02D6:  MOVFF  FF2,0D
02DA:  BCF    FF2.7
02DC:  CLRF   FF7
02DE:  ADDLW  F0
02E0:  MOVWF  FF6
02E2:  MOVLW  02
02E4:  ADDWFC FF7,F
02E6:  TBLRD*+
02E8:  MOVF   FF5,W
02EA:  BTFSC  0D.7
02EC:  BSF    FF2.7
02EE:  RETURN 0
02F0:  DATA 24,4F
02F2:  DATA 54,20
02F4:  DATA 3C,6F
02F6:  DATA 75,74
02F8:  DATA 70,75
02FA:  DATA 74,3E
02FC:  DATA 3C,63
02FE:  DATA 72,3E
0300:  DATA 20,20
0302:  DATA 09,53
0304:  DATA 65,74
0306:  DATA 20,64
0308:  DATA 69,67
030A:  DATA 69,74
030C:  DATA 61,6C
030E:  DATA 20,6F
0310:  DATA 75,74
0312:  DATA 70,75
0314:  DATA 74,73
0316:  DATA 20,74
0318:  DATA 6F,20
031A:  DATA 48,45
031C:  DATA 58,20
031E:  DATA 76,61
0320:  DATA 6C,75
0322:  DATA 65,0D
0324:  DATA 0A,00
0326:  MOVFF  FF2,0D
032A:  BCF    FF2.7
032C:  CLRF   FF7
032E:  ADDLW  40
0330:  MOVWF  FF6
0332:  MOVLW  03
0334:  ADDWFC FF7,F
0336:  TBLRD*+
0338:  MOVF   FF5,W
033A:  BTFSC  0D.7
033C:  BSF    FF2.7
033E:  RETURN 0
0340:  DATA 24,52
0342:  DATA 44,3C
0344:  DATA 63,72
0346:  DATA 3E,20
0348:  DATA 20,09
034A:  DATA 52,65
034C:  DATA 73,65
034E:  DATA 74,20
0350:  DATA 44,32
0352:  DATA 41,0D
0354:  DATA 0A,00
0356:  MOVFF  FF2,0D
035A:  BCF    FF2.7
035C:  CLRF   FF7
035E:  ADDLW  70
0360:  MOVWF  FF6
0362:  MOVLW  03
0364:  ADDWFC FF7,F
0366:  TBLRD*+
0368:  MOVF   FF5,W
036A:  BTFSC  0D.7
036C:  BSF    FF2.7
036E:  RETURN 0
0370:  DATA 24,53
0372:  DATA 44,20
0374:  DATA 3C,61
0376:  DATA 64,64
0378:  DATA 72,3E
037A:  DATA 20,3C
037C:  DATA 64,61
037E:  DATA 74,61
0380:  DATA 3E,3C
0382:  DATA 63,72
0384:  DATA 3E,20
0386:  DATA 20,09
0388:  DATA 53,65
038A:  DATA 74,20
038C:  DATA 44,32
038E:  DATA 41,20
0390:  DATA 72,65
0392:  DATA 67,69
0394:  DATA 73,74
0396:  DATA 65,72
0398:  DATA 20,3C
039A:  DATA 61,64
039C:  DATA 64,72
039E:  DATA 3E,20
03A0:  DATA 74,6F
03A2:  DATA 20,3C
03A4:  DATA 64,61
03A6:  DATA 74,61
03A8:  DATA 3E,0D
03AA:  DATA 0A,00
03AC:  MOVFF  FF2,0D
03B0:  BCF    FF2.7
03B2:  CLRF   FF7
03B4:  ADDLW  C6
03B6:  MOVWF  FF6
03B8:  MOVLW  03
03BA:  ADDWFC FF7,F
03BC:  TBLRD*+
03BE:  MOVF   FF5,W
03C0:  BTFSC  0D.7
03C2:  BSF    FF2.7
03C4:  RETURN 0
03C6:  DATA 24,53
03C8:  DATA 46,20
03CA:  DATA 3C,61
03CC:  DATA 64,64
03CE:  DATA 72,3E
03D0:  DATA 20,3C
03D2:  DATA 64,61
03D4:  DATA 74,61
03D6:  DATA 3E,3C
03D8:  DATA 63,72
03DA:  DATA 3E,20
03DC:  DATA 20,09
03DE:  DATA 53,65
03E0:  DATA 74,20
03E2:  DATA 46,50
03E4:  DATA 47,41
03E6:  DATA 20,72
03E8:  DATA 65,67
03EA:  DATA 69,73
03EC:  DATA 74,65
03EE:  DATA 72,20
03F0:  DATA 3C,61
03F2:  DATA 64,64
03F4:  DATA 72,3E
03F6:  DATA 20,74
03F8:  DATA 6F,20
03FA:  DATA 3C,64
03FC:  DATA 61,74
03FE:  DATA 61,3E
0400:  DATA 0D,0A
0402:  DATA 00,00
0404:  MOVFF  FF2,0D
0408:  BCF    FF2.7
040A:  CLRF   FF7
040C:  ADDLW  1E
040E:  MOVWF  FF6
0410:  MOVLW  04
0412:  ADDWFC FF7,F
0414:  TBLRD*+
0416:  MOVF   FF5,W
0418:  BTFSC  0D.7
041A:  BSF    FF2.7
041C:  RETURN 0
041E:  DATA 0D,0A
0420:  DATA 0A,4E
0422:  DATA 4F,20
0424:  DATA 54,45
0426:  DATA 4D,50
0428:  DATA 2D,52
042A:  DATA 46,20
042C:  DATA 4F,46
042E:  DATA 46,20
0430:  DATA 0D,0A
0432:  DATA 00,00
0434:  MOVFF  FF2,0D
0438:  BCF    FF2.7
043A:  CLRF   FF7
043C:  ADDLW  4E
043E:  MOVWF  FF6
0440:  MOVLW  04
0442:  ADDWFC FF7,F
0444:  TBLRD*+
0446:  MOVF   FF5,W
0448:  BTFSC  0D.7
044A:  BSF    FF2.7
044C:  RETURN 0
044E:  DATA 44,53
0450:  DATA 20,3C
0452:  DATA 64,61
0454:  DATA 74,61
0456:  DATA 20,73
0458:  DATA 6F,75
045A:  DATA 72,65
045C:  DATA 3E,3C
045E:  DATA 63,72
0460:  DATA 3E,20
0462:  DATA 20,09
0464:  DATA 53,65
0466:  DATA 74,20
0468:  DATA 64,61
046A:  DATA 74,61
046C:  DATA 20,73
046E:  DATA 6F,75
0470:  DATA 72,63
0472:  DATA 65,20
0474:  DATA 28,30
0476:  DATA 2D,31
0478:  DATA 29,0D
047A:  DATA 0A,00
047C:  MOVFF  FF2,0D
0480:  BCF    FF2.7
0482:  CLRF   FF7
0484:  ADDLW  96
0486:  MOVWF  FF6
0488:  MOVLW  04
048A:  ADDWFC FF7,F
048C:  TBLRD*+
048E:  MOVF   FF5,W
0490:  BTFSC  0D.7
0492:  BSF    FF2.7
0494:  RETURN 0
0496:  DATA 44,50
0498:  DATA 20,3C
049A:  DATA 64,61
049C:  DATA 74,61
049E:  DATA 20,70
04A0:  DATA 6F,6C
04A2:  DATA 61,72
04A4:  DATA 69,74
04A6:  DATA 79,3E
04A8:  DATA 3C,63
04AA:  DATA 72,3E
04AC:  DATA 20,20
04AE:  DATA 09,53
04B0:  DATA 65,74
04B2:  DATA 20,64
04B4:  DATA 61,74
04B6:  DATA 61,20
04B8:  DATA 70,6F
04BA:  DATA 6C,61
04BC:  DATA 72,69
04BE:  DATA 74,79
04C0:  DATA 20,28
04C2:  DATA 30,2D
04C4:  DATA 31,29
04C6:  DATA 0D,0A
04C8:  DATA 00,00
04CA:  MOVFF  FF2,0D
04CE:  BCF    FF2.7
04D0:  CLRF   FF7
04D2:  ADDLW  E4
04D4:  MOVWF  FF6
04D6:  MOVLW  04
04D8:  ADDWFC FF7,F
04DA:  TBLRD*+
04DC:  MOVF   FF5,W
04DE:  BTFSC  0D.7
04E0:  BSF    FF2.7
04E2:  RETURN 0
04E4:  DATA 44,45
04E6:  DATA 20,3C
04E8:  DATA 73,65
04EA:  DATA 74,75
04EC:  DATA 70,20
04EE:  DATA 53,4F
04F0:  DATA 51,50
04F2:  DATA 53,4B
04F4:  DATA 3E,3C
04F6:  DATA 63,72
04F8:  DATA 3E,20
04FA:  DATA 20,09
04FC:  DATA 53,65
04FE:  DATA 74,20
0500:  DATA 73,65
0502:  DATA 74,75
0504:  DATA 70,20
0506:  DATA 53,4F
0508:  DATA 51,50
050A:  DATA 53,4B
050C:  DATA 20,28
050E:  DATA 30,2D
0510:  DATA 31,29
0512:  DATA 0D,0A
0514:  DATA 00,00
0516:  MOVFF  FF2,0D
051A:  BCF    FF2.7
051C:  CLRF   FF7
051E:  ADDLW  30
0520:  MOVWF  FF6
0522:  MOVLW  05
0524:  ADDWFC FF7,F
0526:  TBLRD*+
0528:  MOVF   FF5,W
052A:  BTFSC  0D.7
052C:  BSF    FF2.7
052E:  RETURN 0
0530:  DATA 52,50
0532:  DATA 20,3C
0534:  DATA 70,6F
0536:  DATA 77,65
0538:  DATA 72,20
053A:  DATA 68,65
053C:  DATA 69,67
053E:  DATA 68,74
0540:  DATA 3E,3C
0542:  DATA 63,72
0544:  DATA 3E,20
0546:  DATA 20,09
0548:  DATA 53,65
054A:  DATA 74,20
054C:  DATA 70,6F
054E:  DATA 77,65
0550:  DATA 72,20
0552:  DATA 68,65
0554:  DATA 69,67
0556:  DATA 68,74
0558:  DATA 20,28
055A:  DATA 30,2D
055C:  DATA 31,29
055E:  DATA 0D,0A
0560:  DATA 00,00
0562:  MOVFF  FF2,0D
0566:  BCF    FF2.7
0568:  CLRF   FF7
056A:  ADDLW  7C
056C:  MOVWF  FF6
056E:  MOVLW  05
0570:  ADDWFC FF7,F
0572:  TBLRD*+
0574:  MOVF   FF5,W
0576:  BTFSC  0D.7
0578:  BSF    FF2.7
057A:  RETURN 0
057C:  DATA 52,46
057E:  DATA 20,3C
0580:  DATA 70,6F
0582:  DATA 77,65
0584:  DATA 72,20
0586:  DATA 63,6F
0588:  DATA 6D,61
058A:  DATA 6E,64
058C:  DATA 3E,3C
058E:  DATA 63,72
0590:  DATA 3E,20
0592:  DATA 20,09
0594:  DATA 53,65
0596:  DATA 74,20
0598:  DATA 70,6F
059A:  DATA 77,65
059C:  DATA 72,20
059E:  DATA 63,6F
05A0:  DATA 6D,61
05A2:  DATA 6E,64
05A4:  DATA 20,28
05A6:  DATA 30,2D
05A8:  DATA 31,29
05AA:  DATA 0D,0A
05AC:  DATA 00,00
05AE:  MOVFF  FF2,0D
05B2:  BCF    FF2.7
05B4:  CLRF   FF7
05B6:  ADDLW  C8
05B8:  MOVWF  FF6
05BA:  MOVLW  05
05BC:  ADDWFC FF7,F
05BE:  TBLRD*+
05C0:  MOVF   FF5,W
05C2:  BTFSC  0D.7
05C4:  BSF    FF2.7
05C6:  RETURN 0
05C8:  DATA 52,41
05CA:  DATA 20,3C
05CC:  DATA 72,61
05CE:  DATA 6E,64
05D0:  DATA 6F,6D
05D2:  DATA 69,7A
05D4:  DATA 65,72
05D6:  DATA 3E,3C
05D8:  DATA 63,72
05DA:  DATA 3E,20
05DC:  DATA 20,09
05DE:  DATA 53,65
05E0:  DATA 74,20
05E2:  DATA 77,69
05E4:  DATA 74,68
05E6:  DATA 2F,77
05E8:  DATA 69,74
05EA:  DATA 68,6F
05EC:  DATA 75,74
05EE:  DATA 20,72
05F0:  DATA 61,6E
05F2:  DATA 64,6F
05F4:  DATA 6D,69
05F6:  DATA 7A,65
05F8:  DATA 72,20
05FA:  DATA 28,30
05FC:  DATA 2D,31
05FE:  DATA 29,0D
0600:  DATA 0A,00
0602:  MOVFF  FF2,0D
0606:  BCF    FF2.7
0608:  CLRF   FF7
060A:  ADDLW  1C
060C:  MOVWF  FF6
060E:  MOVLW  06
0610:  ADDWFC FF7,F
0612:  TBLRD*+
0614:  MOVF   FF5,W
0616:  BTFSC  0D.7
0618:  BSF    FF2.7
061A:  RETURN 0
061C:  DATA 46,52
061E:  DATA 20,3C
0620:  DATA 66,72
0622:  DATA 65,71
0624:  DATA 75,65
0626:  DATA 6E,63
0628:  DATA 79,3E
062A:  DATA 3C,63
062C:  DATA 72,3E
062E:  DATA 20,20
0630:  DATA 09,53
0632:  DATA 65,74
0634:  DATA 20,66
0636:  DATA 72,65
0638:  DATA 71,75
063A:  DATA 65,6E
063C:  DATA 63,79
063E:  DATA 20,28
0640:  DATA 32,32
0642:  DATA 30,30
0644:  DATA 2E,30
0646:  DATA 2D,32
0648:  DATA 34,30
064A:  DATA 30,2E
064C:  DATA 30,29
064E:  DATA 0D,0A
0650:  DATA 00,00
0652:  MOVFF  FF2,0D
0656:  BCF    FF2.7
0658:  CLRF   FF7
065A:  ADDLW  6C
065C:  MOVWF  FF6
065E:  MOVLW  06
0660:  ADDWFC FF7,F
0662:  TBLRD*+
0664:  MOVF   FF5,W
0666:  BTFSC  0D.7
0668:  BSF    FF2.7
066A:  RETURN 0
066C:  DATA 4D,4F
066E:  DATA 20,3C
0670:  DATA 6D,6F
0672:  DATA 64,65
0674:  DATA 3E,3C
0676:  DATA 63,72
0678:  DATA 3E,20
067A:  DATA 20,09
067C:  DATA 53,65
067E:  DATA 74,20
0680:  DATA 6D,6F
0682:  DATA 64,65
0684:  DATA 20,28
0686:  DATA 30,2D
0688:  DATA 33,29
068A:  DATA 0D,0A
068C:  DATA 00,00
068E:  MOVFF  FF2,0D
0692:  BCF    FF2.7
0694:  CLRF   FF7
0696:  ADDLW  A8
0698:  MOVWF  FF6
069A:  MOVLW  06
069C:  ADDWFC FF7,F
069E:  TBLRD*+
06A0:  MOVF   FF5,W
06A2:  BTFSC  0D.7
06A4:  BSF    FF2.7
06A6:  RETURN 0
06A8:  DATA 49,43
06AA:  DATA 20,3C
06AC:  DATA 62,69
06AE:  DATA 74,72
06B0:  DATA 61,74
06B2:  DATA 65,3E
06B4:  DATA 3C,63
06B6:  DATA 72,3E
06B8:  DATA 20,20
06BA:  DATA 09,53
06BC:  DATA 65,74
06BE:  DATA 20,62
06C0:  DATA 69,72
06C2:  DATA 74,61
06C4:  DATA 74,65
06C6:  DATA 20,28
06C8:  DATA 31,2E
06CA:  DATA 30,30
06CC:  DATA 2D,33
06CE:  DATA 30,2E
06D0:  DATA 30,30
06D2:  DATA 44,42
06D4:  DATA 70,73
06D6:  DATA 29,0D
06D8:  DATA 0A,00
06DA:  MOVFF  FF2,0D
06DE:  BCF    FF2.7
06E0:  CLRF   FF7
06E2:  ADDLW  F4
06E4:  MOVWF  FF6
06E6:  MOVLW  06
06E8:  ADDWFC FF7,F
06EA:  TBLRD*+
06EC:  MOVF   FF5,W
06EE:  BTFSC  0D.7
06F0:  BSF    FF2.7
06F2:  RETURN 0
06F4:  DATA 49,44
06F6:  DATA 20,3C
06F8:  DATA 69,6E
06FA:  DATA 74,65
06FC:  DATA 72,6E
06FE:  DATA 61,6C
0700:  DATA 20,70
0702:  DATA 61,74
0704:  DATA 74,65
0706:  DATA 72,6E
0708:  DATA 3E,3C
070A:  DATA 63,72
070C:  DATA 3E,20
070E:  DATA 20,09
0710:  DATA 53,65
0712:  DATA 74,20
0714:  DATA 69,6E
0716:  DATA 74,65
0718:  DATA 72,6E
071A:  DATA 61,6C
071C:  DATA 20,70
071E:  DATA 61,74
0720:  DATA 74,65
0722:  DATA 72,6E
0724:  DATA 20,28
0726:  DATA 30,2D
0728:  DATA 33,29
072A:  DATA 0D,0A
072C:  DATA 00,00
072E:  MOVFF  FF2,0D
0732:  BCF    FF2.7
0734:  CLRF   FF7
0736:  ADDLW  48
0738:  MOVWF  FF6
073A:  MOVLW  07
073C:  ADDWFC FF7,F
073E:  TBLRD*+
0740:  MOVF   FF5,W
0742:  BTFSC  0D.7
0744:  BSF    FF2.7
0746:  RETURN 0
0748:  DATA 56,45
074A:  DATA 20,3C
074C:  DATA 63,72
074E:  DATA 3E,20
0750:  DATA 20,09
0752:  DATA 64,69
0754:  DATA 73,70
0756:  DATA 6C,61
0758:  DATA 79,20
075A:  DATA 76,65
075C:  DATA 72,73
075E:  DATA 69,6F
0760:  DATA 6E,20
0762:  DATA 69,6E
0764:  DATA 66,6F
0766:  DATA 0D,0A
0768:  DATA 00,00
076A:  MOVFF  FF2,0D
076E:  BCF    FF2.7
0770:  CLRF   FF7
0772:  ADDLW  84
0774:  MOVWF  FF6
0776:  MOVLW  07
0778:  ADDWFC FF7,F
077A:  TBLRD*+
077C:  MOVF   FF5,W
077E:  BTFSC  0D.7
0780:  BSF    FF2.7
0782:  RETURN 0
0784:  DATA 56,53
0786:  DATA 20,3C
0788:  DATA 6D,61
078A:  DATA 6A,6F
078C:  DATA 72,3E
078E:  DATA 2E,3C
0790:  DATA 6D,69
0792:  DATA 6E,6F
0794:  DATA 72,3E
0796:  DATA 20,3C
0798:  DATA 63,72
079A:  DATA 3E,20
079C:  DATA 20,09
079E:  DATA 73,65
07A0:  DATA 74,20
07A2:  DATA 74,68
07A4:  DATA 65,20
07A6:  DATA 73,65
07A8:  DATA 74,75
07AA:  DATA 70,20
07AC:  DATA 66,69
07AE:  DATA 6C,65
07B0:  DATA 20,76
07B2:  DATA 65,72
07B4:  DATA 73,69
07B6:  DATA 6F,6E
07B8:  DATA 0D,0A
07BA:  DATA 00,00
07BC:  MOVFF  FF2,0D
07C0:  BCF    FF2.7
07C2:  CLRF   FF7
07C4:  ADDLW  D6
07C6:  MOVWF  FF6
07C8:  MOVLW  07
07CA:  ADDWFC FF7,F
07CC:  TBLRD*+
07CE:  MOVF   FF5,W
07D0:  BTFSC  0D.7
07D2:  BSF    FF2.7
07D4:  RETURN 0
07D6:  DATA 56,50
07D8:  DATA 20,3C
07DA:  DATA 70,6F
07DC:  DATA 77,65
07DE:  DATA 72,20
07E0:  DATA 6C,65
07E2:  DATA 76,65
07E4:  DATA 6C,3E
07E6:  DATA 3C,63
07E8:  DATA 72,3E
07EA:  DATA 20,20
07EC:  DATA 09,53
07EE:  DATA 65,74
07F0:  DATA 20,70
07F2:  DATA 6F,77
07F4:  DATA 65,72
07F6:  DATA 20,6C
07F8:  DATA 65,76
07FA:  DATA 65,6C
07FC:  DATA 20,28
07FE:  DATA 32,30
0800:  DATA 2D,34
0802:  DATA 30,29
0804:  DATA 0D,0A
0806:  DATA 00,00
0808:  MOVFF  FF2,0D
080C:  BCF    FF2.7
080E:  CLRF   FF7
0810:  ADDLW  22
0812:  MOVWF  FF6
0814:  MOVLW  08
0816:  ADDWFC FF7,F
0818:  TBLRD*+
081A:  MOVF   FF5,W
081C:  BTFSC  0D.7
081E:  BSF    FF2.7
0820:  RETURN 0
0822:  DATA 56,4C
0824:  DATA 20,3C
0826:  DATA 70,6F
0828:  DATA 77,65
082A:  DATA 72,20
082C:  DATA 68,69
082E:  DATA 67,68
0830:  DATA 3E,3C
0832:  DATA 63,72
0834:  DATA 3E,20
0836:  DATA 20,09
0838:  DATA 53,65
083A:  DATA 74,20
083C:  DATA 68,69
083E:  DATA 67,68
0840:  DATA 20,70
0842:  DATA 6F,77
0844:  DATA 65,72
0846:  DATA 20,6C
0848:  DATA 65,76
084A:  DATA 65,6C
084C:  DATA 20,28
084E:  DATA 32,30
0850:  DATA 2D,34
0852:  DATA 30,29
0854:  DATA 0D,0A
0856:  DATA 00,00
0858:  MOVFF  FF2,0D
085C:  BCF    FF2.7
085E:  CLRF   FF7
0860:  ADDLW  72
0862:  MOVWF  FF6
0864:  MOVLW  08
0866:  ADDWFC FF7,F
0868:  TBLRD*+
086A:  MOVF   FF5,W
086C:  BTFSC  0D.7
086E:  BSF    FF2.7
0870:  RETURN 0
0872:  DATA 56,4D
0874:  DATA 20,3C
0876:  DATA 6E,65
0878:  DATA 67,61
087A:  DATA 74,69
087C:  DATA 76,65
087E:  DATA 20,70
0880:  DATA 6F,77
0882:  DATA 65,72
0884:  DATA 20,6C
0886:  DATA 65,76
0888:  DATA 65,6C
088A:  DATA 3E,3C
088C:  DATA 63,72
088E:  DATA 3E,20
0890:  DATA 20,09
0892:  DATA 53,65
0894:  DATA 74,20
0896:  DATA 6E,65
0898:  DATA 67,61
089A:  DATA 74,69
089C:  DATA 76,65
089E:  DATA 20,70
08A0:  DATA 6F,77
08A2:  DATA 65,72
08A4:  DATA 20,6C
08A6:  DATA 65,76
08A8:  DATA 65,6C
08AA:  DATA 0D,0A
08AC:  DATA 00,00
08AE:  MOVFF  FF2,0D
08B2:  BCF    FF2.7
08B4:  CLRF   FF7
08B6:  ADDLW  C8
08B8:  MOVWF  FF6
08BA:  MOVLW  08
08BC:  ADDWFC FF7,F
08BE:  TBLRD*+
08C0:  MOVF   FF5,W
08C2:  BTFSC  0D.7
08C4:  BSF    FF2.7
08C6:  RETURN 0
08C8:  DATA 56,43
08CA:  DATA 20,3C
08CC:  DATA 70,6F
08CE:  DATA 73,65
08D0:  DATA 74,69
08D2:  DATA 76,65
08D4:  DATA 20,70
08D6:  DATA 6F,77
08D8:  DATA 65,72
08DA:  DATA 20,6C
08DC:  DATA 65,76
08DE:  DATA 65,6C
08E0:  DATA 3E,3C
08E2:  DATA 63,72
08E4:  DATA 3E,20
08E6:  DATA 20,09
08E8:  DATA 53,65
08EA:  DATA 74,20
08EC:  DATA 70,6F
08EE:  DATA 73,65
08F0:  DATA 74,69
08F2:  DATA 76,65
08F4:  DATA 20,70
08F6:  DATA 6F,77
08F8:  DATA 65,72
08FA:  DATA 20,6C
08FC:  DATA 65,76
08FE:  DATA 65,6C
0900:  DATA 0D,0A
0902:  DATA 00,00
0904:  MOVFF  FF2,0D
0908:  BCF    FF2.7
090A:  CLRF   FF7
090C:  ADDLW  1E
090E:  MOVWF  FF6
0910:  MOVLW  09
0912:  ADDWFC FF7,F
0914:  TBLRD*+
0916:  MOVF   FF5,W
0918:  BTFSC  0D.7
091A:  BSF    FF2.7
091C:  RETURN 0
091E:  DATA 43,53
0920:  DATA 20,3C
0922:  DATA 63,6C
0924:  DATA 6F,63
0926:  DATA 6B,20
0928:  DATA 70,68
092A:  DATA 61,73
092C:  DATA 65,3E
092E:  DATA 3C,63
0930:  DATA 72,3E
0932:  DATA 20,20
0934:  DATA 09,53
0936:  DATA 65,74
0938:  DATA 20,63
093A:  DATA 6C,6F
093C:  DATA 63,6B
093E:  DATA 20,70
0940:  DATA 68,61
0942:  DATA 73,65
0944:  DATA 20,28
0946:  DATA 30,2D
0948:  DATA 31,29
094A:  DATA 0D,0A
094C:  DATA 00,00
094E:  MOVFF  FF2,0D
0952:  BCF    FF2.7
0954:  CLRF   FF7
0956:  ADDLW  68
0958:  MOVWF  FF6
095A:  MOVLW  09
095C:  ADDWFC FF7,F
095E:  TBLRD*+
0960:  MOVF   FF5,W
0962:  BTFSC  0D.7
0964:  BSF    FF2.7
0966:  RETURN 0
0968:  DATA 55,54
096A:  DATA 20,3C
096C:  DATA 55,41
096E:  DATA 52,54
0970:  DATA 20,54
0972:  DATA 69,6D
0974:  DATA 65,3E
0976:  DATA 3C,63
0978:  DATA 72,3E
097A:  DATA 20,20
097C:  DATA 09,53
097E:  DATA 65,74
0980:  DATA 20,74
0982:  DATA 68,65
0984:  DATA 20,73
0986:  DATA 74,6F
0988:  DATA 70,20
098A:  DATA 74,69
098C:  DATA 6D,65
098E:  DATA 2C,20
0990:  DATA 64,65
0992:  DATA 66,61
0994:  DATA 75,6C
0996:  DATA 74,20
0998:  DATA 31,35
099A:  DATA 20,28
099C:  DATA 30,2D
099E:  DATA 32,34
09A0:  DATA 30,29
09A2:  DATA 0D,0A
09A4:  DATA 00,00
09A6:  MOVFF  FF2,0D
09AA:  BCF    FF2.7
09AC:  CLRF   FF7
09AE:  ADDLW  C0
09B0:  MOVWF  FF6
09B2:  MOVLW  09
09B4:  ADDWFC FF7,F
09B6:  TBLRD*+
09B8:  MOVF   FF5,W
09BA:  BTFSC  0D.7
09BC:  BSF    FF2.7
09BE:  RETURN 0
09C0:  DATA 55,53
09C2:  DATA 20,3C
09C4:  DATA 55,41
09C6:  DATA 52,54
09C8:  DATA 20,53
09CA:  DATA 74,61
09CC:  DATA 74,75
09CE:  DATA 73,3E
09D0:  DATA 3C,63
09D2:  DATA 72,3E
09D4:  DATA 20,20
09D6:  DATA 09,53
09D8:  DATA 65,74
09DA:  DATA 20,74
09DC:  DATA 68,65
09DE:  DATA 20,42
09E0:  DATA 6C,6F
09E2:  DATA 63,6B
09E4:  DATA 20,28
09E6:  DATA 30,2D
09E8:  DATA 31,29
09EA:  DATA 0D,0A
09EC:  DATA 00,00
09EE:  MOVFF  FF2,0D
09F2:  BCF    FF2.7
09F4:  CLRF   FF7
09F6:  ADDLW  08
09F8:  MOVWF  FF6
09FA:  MOVLW  0A
09FC:  ADDWFC FF7,F
09FE:  TBLRD*+
0A00:  MOVF   FF5,W
0A02:  BTFSC  0D.7
0A04:  BSF    FF2.7
0A06:  RETURN 0
0A08:  DATA 42,47
0A0A:  DATA 20,3C
0A0C:  DATA 55,41
0A0E:  DATA 52,54
0A10:  DATA 20,43
0A12:  DATA 68,61
0A14:  DATA 6E,67
0A16:  DATA 65,3E
0A18:  DATA 3C,63
0A1A:  DATA 72,3E
0A1C:  DATA 20,20
0A1E:  DATA 09,53
0A20:  DATA 65,74
0A22:  DATA 20,74
0A24:  DATA 68,65
0A26:  DATA 20,55
0A28:  DATA 41,52
0A2A:  DATA 54,20
0A2C:  DATA 72,65
0A2E:  DATA 66,72
0A30:  DATA 65,73
0A32:  DATA 68,20
0A34:  DATA 72,61
0A36:  DATA 74,65
0A38:  DATA 20,5B
0A3A:  DATA 48,7A
0A3C:  DATA 5D,20
0A3E:  DATA 28,31
0A40:  DATA 2D,32
0A42:  DATA 30,29
0A44:  DATA 0D,0A
0A46:  DATA 00,00
0A48:  MOVFF  FF2,0D
0A4C:  BCF    FF2.7
0A4E:  CLRF   FF7
0A50:  ADDLW  62
0A52:  MOVWF  FF6
0A54:  MOVLW  0A
0A56:  ADDWFC FF7,F
0A58:  TBLRD*+
0A5A:  MOVF   FF5,W
0A5C:  BTFSC  0D.7
0A5E:  BSF    FF2.7
0A60:  RETURN 0
0A62:  DATA 53,56
0A64:  DATA 20,3C
0A66:  DATA 73,61
0A68:  DATA 76,65
0A6A:  DATA 20,61
0A6C:  DATA 6C,6C
0A6E:  DATA 3E,3C
0A70:  DATA 63,72
0A72:  DATA 3E,20
0A74:  DATA 20,09
0A76:  DATA 53,61
0A78:  DATA 76,65
0A7A:  DATA 20,70
0A7C:  DATA 61,72
0A7E:  DATA 61,6D
0A80:  DATA 65,74
0A82:  DATA 65,72
0A84:  DATA 73,0D
0A86:  DATA 00,00
0A88:  MOVFF  FF2,0D
0A8C:  BCF    FF2.7
0A8E:  CLRF   FF7
0A90:  ADDLW  A2
0A92:  MOVWF  FF6
0A94:  MOVLW  0A
0A96:  ADDWFC FF7,F
0A98:  TBLRD*+
0A9A:  MOVF   FF5,W
0A9C:  BTFSC  0D.7
0A9E:  BSF    FF2.7
0AA0:  RETURN 0
0AA2:  DATA 0D,09
0AA4:  DATA 20,48
0AA6:  DATA 45,4C
0AA8:  DATA 50,20
0AAA:  DATA 4C,49
0AAC:  DATA 53,54
0AAE:  DATA 20,0D
0AB0:  DATA 00,00
0AB2:  MOVFF  FF2,0D
0AB6:  BCF    FF2.7
0AB8:  CLRF   FF7
0ABA:  ADDLW  CC
0ABC:  MOVWF  FF6
0ABE:  MOVLW  0A
0AC0:  ADDWFC FF7,F
0AC2:  TBLRD*+
0AC4:  MOVF   FF5,W
0AC6:  BTFSC  0D.7
0AC8:  BSF    FF2.7
0ACA:  RETURN 0
0ACC:  DATA 0D,0A
0ACE:  DATA 46,41
0AD0:  DATA 55,4C
0AD2:  DATA 54,0D
0AD4:  DATA 0A,00
0AD6:  MOVFF  FF2,0D
0ADA:  BCF    FF2.7
0ADC:  CLRF   FF7
0ADE:  ADDLW  F0
0AE0:  MOVWF  FF6
0AE2:  MOVLW  0A
0AE4:  ADDWFC FF7,F
0AE6:  TBLRD*+
0AE8:  MOVF   FF5,W
0AEA:  BTFSC  0D.7
0AEC:  BSF    FF2.7
0AEE:  RETURN 0
0AF0:  DATA 0D,0A
0AF2:  DATA 46,41
0AF4:  DATA 49,4C
0AF6:  DATA 0D,0A
0AF8:  DATA 00,00
0AFA:  MOVFF  FF2,0D
0AFE:  BCF    FF2.7
0B00:  CLRF   FF7
0B02:  ADDLW  14
0B04:  MOVWF  FF6
0B06:  MOVLW  0B
0B08:  ADDWFC FF7,F
0B0A:  TBLRD*+
0B0C:  MOVF   FF5,W
0B0E:  BTFSC  0D.7
0B10:  BSF    FF2.7
0B12:  RETURN 0
0B14:  DATA 42,41
0B16:  DATA 31,35
0B18:  DATA 32,30
0B1A:  DATA 51,54
0B1C:  DATA 58,20
0B1E:  DATA 56,31
0B20:  DATA 2E,30
0B22:  DATA 00,00
0B24:  MOVFF  FF2,0D
0B28:  BCF    FF2.7
0B2A:  CLRF   FF7
0B2C:  ADDLW  3E
0B2E:  MOVWF  FF6
0B30:  MOVLW  0B
0B32:  ADDWFC FF7,F
0B34:  TBLRD*+
0B36:  MOVF   FF5,W
0B38:  BTFSC  0D.7
0B3A:  BSF    FF2.7
0B3C:  RETURN 0
0B3E:  DATA 0D,0A
0B40:  DATA 0A,4F
0B42:  DATA 4B,20
0B44:  DATA 52,65
0B46:  DATA 71,75
0B48:  DATA 65,73
0B4A:  DATA 74,20
0B4C:  DATA 53,74
0B4E:  DATA 61,74
0B50:  DATA 75,73
0B52:  DATA 20,0D
0B54:  DATA 0A,0A
0B56:  DATA 00,00
0B58:  MOVFF  FF2,0D
0B5C:  BCF    FF2.7
0B5E:  CLRF   FF7
0B60:  ADDLW  72
0B62:  MOVWF  FF6
0B64:  MOVLW  0B
0B66:  ADDWFC FF7,F
0B68:  TBLRD*+
0B6A:  MOVF   FF5,W
0B6C:  BTFSC  0D.7
0B6E:  BSF    FF2.7
0B70:  RETURN 0
0B72:  DATA 47,4F
0B74:  DATA 4F,44
0B76:  DATA 00,00
0B78:  MOVFF  FF2,0D
0B7C:  BCF    FF2.7
0B7E:  CLRF   FF7
0B80:  ADDLW  92
0B82:  MOVWF  FF6
0B84:  MOVLW  0B
0B86:  ADDWFC FF7,F
0B88:  TBLRD*+
0B8A:  MOVF   FF5,W
0B8C:  BTFSC  0D.7
0B8E:  BSF    FF2.7
0B90:  RETURN 0
0B92:  DATA 42,41
0B94:  DATA 44,00
0B96:  MOVFF  FF2,0D
0B9A:  BCF    FF2.7
0B9C:  CLRF   FF7
0B9E:  ADDLW  B0
0BA0:  MOVWF  FF6
0BA2:  MOVLW  0B
0BA4:  ADDWFC FF7,F
0BA6:  TBLRD*+
0BA8:  MOVF   FF5,W
0BAA:  BTFSC  0D.7
0BAC:  BSF    FF2.7
0BAE:  RETURN 0
0BB0:  DATA 0D,0A
0BB2:  DATA 4F,4B
0BB4:  DATA 0D,0A
0BB6:  DATA 2A,00
0BB8:  MOVFF  FF2,0D
0BBC:  BCF    FF2.7
0BBE:  CLRF   FF7
0BC0:  ADDLW  D2
0BC2:  MOVWF  FF6
0BC4:  MOVLW  0B
0BC6:  ADDWFC FF7,F
0BC8:  TBLRD*+
0BCA:  MOVF   FF5,W
0BCC:  BTFSC  0D.7
0BCE:  BSF    FF2.7
0BD0:  RETURN 0
0BD2:  DATA 0D,0A
0BD4:  DATA 0A,42
0BD6:  DATA 52,45
0BD8:  DATA 41,4B
0BDA:  DATA 0D,0A
0BDC:  DATA 00,00
0BDE:  MOVFF  FF2,0D
0BE2:  BCF    FF2.7
0BE4:  CLRF   FF7
0BE6:  ADDLW  F8
0BE8:  MOVWF  FF6
0BEA:  MOVLW  0B
0BEC:  ADDWFC FF7,F
0BEE:  TBLRD*+
0BF0:  MOVF   FF5,W
0BF2:  BTFSC  0D.7
0BF4:  BSF    FF2.7
0BF6:  RETURN 0
0BF8:  DATA 50,00
0BFA:  DATA 14,00
0BFC:  DATA 66,00
0BFE:  DATA 15,00
0C00:  DATA 76,00
0C02:  DATA 16,00
0C04:  DATA 7F,00
0C06:  DATA 17,00
0C08:  DATA 8F,00
0C0A:  DATA 18,00
0C0C:  DATA A7,00
0C0E:  DATA 19,00
0C10:  DATA B7,00
0C12:  DATA 1A,00
0C14:  DATA D0,00
0C16:  DATA 1B,00
0C18:  DATA E2,00
0C1A:  DATA 1C,00
0C1C:  DATA 01,01
0C1E:  DATA 1D,00
0C20:  DATA 20,01
0C22:  DATA 1E,00
0C24:  DATA 42,01
0C26:  DATA 1F,00
0C28:  DATA 68,01
0C2A:  DATA 20,00
0C2C:  DATA 90,01
0C2E:  DATA 21,00
0C30:  DATA BE,01
0C32:  DATA 22,00
0C34:  DATA F9,01
0C36:  DATA 23,00
0C38:  DATA 34,02
0C3A:  DATA 24,00
0C3C:  DATA 85,02
0C3E:  DATA 25,00
0C40:  DATA D2,02
0C42:  DATA 26,00
0C44:  DATA 32,03
0C46:  DATA 27,00
0C48:  DATA E0,03
0C4A:  DATA 28,00
0C4C:  DATA ED,03
0C4E:  DATA 29,00
0C50:  DATA FF,03
0C52:  DATA 37,00
*
0D1E:  DATA 0D,54
0D20:  DATA 45,4D
0D22:  DATA 50,3D
0D24:  DATA 25,36
0D26:  DATA 2E,32
0D28:  DATA 66,64
0D2A:  DATA 65,67
0D2C:  DATA 0D,0A
0D2E:  DATA 4F,4B
0D30:  DATA 0A,00
0D32:  DATA 24,41
0D34:  DATA 52,20
0D36:  DATA 25,6C
0D38:  DATA 75,0D
0D3A:  DATA 00,00
0D3C:  DATA 24,43
0D3E:  DATA 50,20
0D40:  DATA 25,75
0D42:  DATA 0D,00
0D44:  DATA 24,44
0D46:  DATA 52,20
0D48:  DATA 25,30
0D4A:  DATA 32,58
0D4C:  DATA 0D,00
0D4E:  DATA 20,0D
0D50:  DATA 0A,24
0D52:  DATA 53,46
0D54:  DATA 20,25
0D56:  DATA 30,32
0D58:  DATA 58,20
0D5A:  DATA 25,30
0D5C:  DATA 32,58
0D5E:  DATA 0D,00
0D60:  DATA 20,0D
0D62:  DATA 0A,24
0D64:  DATA 53,44
0D66:  DATA 20,25
0D68:  DATA 30,32
0D6A:  DATA 58,20
0D6C:  DATA 25,30
0D6E:  DATA 32,58
0D70:  DATA 0D,00
0D72:  DATA 46,52
0D74:  DATA 20,25
0D76:  DATA 6C,75
0D78:  DATA 0D,00
0D7A:  DATA 4D,4F
0D7C:  DATA 20,25
0D7E:  DATA 75,0D
0D80:  DATA 00,00
0D82:  DATA 44,53
0D84:  DATA 20,25
0D86:  DATA 75,0D
0D88:  DATA 00,00
0D8A:  DATA 45,52
0D8C:  DATA 52,20
0D8E:  DATA 44,53
0D90:  DATA 20,25
0D92:  DATA 75,0D
0D94:  DATA 00,00
0D96:  DATA 44,50
0D98:  DATA 20,25
0D9A:  DATA 75,0D
0D9C:  DATA 00,00
0D9E:  DATA 45,52
0DA0:  DATA 52,20
0DA2:  DATA 44,50
0DA4:  DATA 20,25
0DA6:  DATA 75,0D
0DA8:  DATA 00,00
0DAA:  DATA 44,45
0DAC:  DATA 20,25
0DAE:  DATA 75,0D
0DB0:  DATA 00,00
0DB2:  DATA 45,52
0DB4:  DATA 52,20
0DB6:  DATA 44,45
0DB8:  DATA 20,25
0DBA:  DATA 75,0D
0DBC:  DATA 00,00
0DBE:  DATA 52,50
0DC0:  DATA 20,25
0DC2:  DATA 75,0D
0DC4:  DATA 00,00
0DC6:  DATA 45,52
0DC8:  DATA 52,20
0DCA:  DATA 52,50
0DCC:  DATA 20,25
0DCE:  DATA 75,0D
0DD0:  DATA 00,00
0DD2:  DATA 52,46
0DD4:  DATA 20,25
0DD6:  DATA 75,0D
0DD8:  DATA 00,00
0DDA:  DATA 45,52
0DDC:  DATA 52,20
0DDE:  DATA 52,46
0DE0:  DATA 20,25
0DE2:  DATA 75,0D
0DE4:  DATA 00,00
0DE6:  DATA 52,43
0DE8:  DATA 20,25
0DEA:  DATA 6C,75
0DEC:  DATA 0D,00
0DEE:  DATA 52,42
0DF0:  DATA 20,25
0DF2:  DATA 6C,75
0DF4:  DATA 0D,00
0DF6:  DATA 52,41
0DF8:  DATA 20,25
0DFA:  DATA 75,0D
0DFC:  DATA 00,00
0DFE:  DATA 45,52
0E00:  DATA 52,20
0E02:  DATA 52,41
0E04:  DATA 20,25
0E06:  DATA 75,0D
0E08:  DATA 00,00
0E0A:  DATA 55,54
0E0C:  DATA 20,25
0E0E:  DATA 75,0D
0E10:  DATA 00,00
0E12:  DATA 45,52
0E14:  DATA 52,20
0E16:  DATA 55,54
0E18:  DATA 20,25
0E1A:  DATA 75,0D
0E1C:  DATA 00,00
0E1E:  DATA 55,53
0E20:  DATA 20,25
0E22:  DATA 75,0D
0E24:  DATA 00,00
0E26:  DATA 45,52
0E28:  DATA 52,20
0E2A:  DATA 55,53
0E2C:  DATA 20,25
0E2E:  DATA 75,0D
0E30:  DATA 00,00
0E32:  DATA 42,47
0E34:  DATA 20,25
0E36:  DATA 6C,75
0E38:  DATA 0D,00
0E3A:  DATA 45,52
0E3C:  DATA 52,20
0E3E:  DATA 42,47
0E40:  DATA 20,25
0E42:  DATA 6C,75
0E44:  DATA 0D,00
0E46:  DATA 49,44
0E48:  DATA 20,25
0E4A:  DATA 75,0D
0E4C:  DATA 00,00
0E4E:  DATA 45,52
0E50:  DATA 52,20
0E52:  DATA 49,44
0E54:  DATA 20,25
0E56:  DATA 75,0D
0E58:  DATA 00,00
0E5A:  DATA 49,43
0E5C:  DATA 20,25
0E5E:  DATA 6C,75
0E60:  DATA 0D,00
0E62:  DATA 56,45
0E64:  DATA 20,25
0E66:  DATA 73,20
0E68:  DATA 56,53
0E6A:  DATA 20,25
0E6C:  DATA 6C,75
0E6E:  DATA 2E,25
0E70:  DATA 6C,75
0E72:  DATA 20,49
0E74:  DATA 44,3D
0E76:  DATA 25,30
0E78:  DATA 32,6C
0E7A:  DATA 75,20
0E7C:  DATA 44,54
0E7E:  DATA 3D,25
0E80:  DATA 30,32
0E82:  DATA 6C,75
0E84:  DATA 25,30
0E86:  DATA 32,75
0E88:  DATA 0D,00
0E8A:  DATA 56,53
0E8C:  DATA 20,25
0E8E:  DATA 6C,75
0E90:  DATA 25,6C
0E92:  DATA 75,0D
0E94:  DATA 00,00
0E96:  DATA 56,50
0E98:  DATA 20,25
0E9A:  DATA 6C,75
0E9C:  DATA 0D,00
0E9E:  DATA 56,4D
0EA0:  DATA 20,25
0EA2:  DATA 6C,75
0EA4:  DATA 0D,00
0EA6:  DATA 56,43
0EA8:  DATA 20,25
0EAA:  DATA 6C,75
0EAC:  DATA 0D,00
0EAE:  DATA 43,53
0EB0:  DATA 20,25
0EB2:  DATA 75,0D
0EB4:  DATA 00,00
0EB6:  DATA 45,52
0EB8:  DATA 52,20
0EBA:  DATA 43,53
0EBC:  DATA 20,25
0EBE:  DATA 75,0D
0EC0:  DATA 00,00
0EC2:  DATA 43,50
0EC4:  DATA 20,25
0EC6:  DATA 75,0D
0EC8:  DATA 00,00
0ECA:  DATA 45,52
0ECC:  DATA 52,20
0ECE:  DATA 43,50
0ED0:  DATA 20,25
0ED2:  DATA 75,0D
0ED4:  DATA 00,00
0ED6:  DATA 0A,47
0ED8:  DATA 50,20
0EDA:  DATA 25,6C
0EDC:  DATA 75,0D
0EDE:  DATA 0A,00
0EE0:  DATA 0A,47
0EE2:  DATA 52,20
0EE4:  DATA 25,6C
0EE6:  DATA 75,0D
0EE8:  DATA 0A,00
0EEA:  DATA 0D,0A
0EEC:  DATA 49,44
0EEE:  DATA 3D,25
0EF0:  DATA 6C,75
0EF2:  DATA 20,44
0EF4:  DATA 54,3D
0EF6:  DATA 25,30
0EF8:  DATA 32,6C
0EFA:  DATA 75,25
0EFC:  DATA 30,32
0EFE:  DATA 75,0D
0F00:  DATA 00,00
0F02:  DATA 0D,0A
0F04:  DATA 0A,46
0F06:  DATA 52,45
0F08:  DATA 51,3D
0F0A:  DATA 25,6C
0F0C:  DATA 75,2C
0F0E:  DATA 20,52
0F10:  DATA 45,56
0F12:  DATA 3D,25
0F14:  DATA 73,2C
0F16:  DATA 20,46
0F18:  DATA 46,57
0F1A:  DATA 52,3D
0F1C:  DATA 25,6C
0F1E:  DATA 75,2C
0F20:  DATA 20,49
0F22:  DATA 43,3D
0F24:  DATA 25,6C
0F26:  DATA 75,2E
0F28:  DATA 25,6C
0F2A:  DATA 75,4D
0F2C:  DATA 62,70
0F2E:  DATA 73,2C
0F30:  DATA 20,4D
0F32:  DATA 4F,3D
0F34:  DATA 25,75
0F36:  DATA 2C,20
0F38:  DATA 43,53
0F3A:  DATA 3D,25
0F3C:  DATA 75,2C
0F3E:  DATA 20,52
0F40:  DATA 46,3D
0F42:  DATA 25,6C
0F44:  DATA 75,0D
0F46:  DATA 00,00
0F48:  DATA 0D,0A
0F4A:  DATA 0A,44
0F4C:  DATA 45,3D
0F4E:  DATA 25,75
0F50:  DATA 2C,20
0F52:  DATA 52,41
0F54:  DATA 3D,25
0F56:  DATA 75,2C
0F58:  DATA 20,44
0F5A:  DATA 50,3D
0F5C:  DATA 25,75
0F5E:  DATA 2C,20
0F60:  DATA 52,50
0F62:  DATA 3D,25
0F64:  DATA 6C,75
0F66:  DATA 2C,20
0F68:  DATA 44,53
0F6A:  DATA 3D,25
0F6C:  DATA 75,2C
0F6E:  DATA 20,49
0F70:  DATA 44,3D
0F72:  DATA 25,75
0F74:  DATA 2C,20
0F76:  DATA 56,4C
0F78:  DATA 3D,25
0F7A:  DATA 6C,75
0F7C:  DATA 2C,20
0F7E:  DATA 52,42
0F80:  DATA 3D,25
0F82:  DATA 6C,75
0F84:  DATA 2C,20
0F86:  DATA 52,43
0F88:  DATA 3D,25
0F8A:  DATA 6C,75
0F8C:  DATA 2C,20
0F8E:  DATA 43,50
0F90:  DATA 3D,25
0F92:  DATA 75,20
0F94:  DATA 20,0D
0F96:  DATA 00,00
0F98:  DATA 0D,0A
0F9A:  DATA 0A,55
0F9C:  DATA 54,3D
0F9E:  DATA 25,75
0FA0:  DATA 2C,20
0FA2:  DATA 55,53
0FA4:  DATA 3D,25
0FA6:  DATA 75,20
0FA8:  DATA 42,47
0FAA:  DATA 3D,20
0FAC:  DATA 25,6C
0FAE:  DATA 75,20
0FB0:  DATA 5B,48
0FB2:  DATA 7A,5D
0FB4:  DATA 20,25
0FB6:  DATA 6C,75
0FB8:  DATA 20,5B
0FBA:  DATA 6D,53
0FBC:  DATA 65,63
0FBE:  DATA 5D,0D
0FC0:  DATA 00,00
*
10E2:  TSTFSZ 01
10E4:  BRA    10EC
10E6:  TSTFSZ 02
10E8:  BRA    10EE
10EA:  BRA    10FA
10EC:  INCF   02,F
10EE:  MOVFF  00,FEE
10F2:  DECFSZ 01,F
10F4:  BRA    10EE
10F6:  DECFSZ 02,F
10F8:  BRA    10EE
10FA:  GOTO   112E (RETURN)
*
1462:  MOVLB  2
1464:  CLRF   x4C
1466:  CLRF   x4D
1468:  MOVLW  01
146A:  MOVWF  x4E
146C:  CLRF   FDA
146E:  CLRF   FD9
1470:  MOVLW  02
1472:  MOVWF  x51
1474:  MOVLW  44
1476:  MOVWF  x50
1478:  MOVLW  02
147A:  MOVWF  FEA
147C:  MOVLW  48
147E:  MOVWF  FE9
1480:  MOVFF  251,FE2
1484:  MOVFF  250,FE1
1488:  MOVFF  24E,24F
148C:  BCF    FD8.0
148E:  MOVF   FE5,W
1490:  MULWF  FEE
1492:  MOVF   FF3,W
1494:  ADDWFC x4C,F
1496:  MOVF   FF4,W
1498:  ADDWFC x4D,F
149A:  DECFSZ x4F,F
149C:  BRA    148C
149E:  MOVFF  24C,FDE
14A2:  MOVFF  24D,24C
14A6:  CLRF   x4D
14A8:  BTFSC  FD8.0
14AA:  INCF   x4D,F
14AC:  INCF   x50,F
14AE:  BTFSC  FD8.2
14B0:  INCF   x51,F
14B2:  INCF   x4E,F
14B4:  MOVF   x4E,W
14B6:  SUBLW  05
14B8:  BNZ   1478
14BA:  MOVLB  0
14BC:  RETURN 0
14BE:  BTFSC  FD8.1
14C0:  BRA    14CA
14C2:  MOVLW  02
14C4:  MOVWF  FEA
14C6:  MOVLW  56
14C8:  MOVWF  FE9
14CA:  CLRF   00
14CC:  CLRF   01
14CE:  CLRF   02
14D0:  CLRF   03
14D2:  MOVLB  2
14D4:  CLRF   x56
14D6:  CLRF   x57
14D8:  CLRF   x58
14DA:  CLRF   x59
14DC:  MOVF   x55,W
14DE:  IORWF  x54,W
14E0:  IORWF  x53,W
14E2:  IORWF  x52,W
14E4:  BZ    153E
14E6:  MOVLW  20
14E8:  MOVWF  x5A
14EA:  BCF    FD8.0
14EC:  RLCF   x4E,F
14EE:  RLCF   x4F,F
14F0:  RLCF   x50,F
14F2:  RLCF   x51,F
14F4:  RLCF   x56,F
14F6:  RLCF   x57,F
14F8:  RLCF   x58,F
14FA:  RLCF   x59,F
14FC:  MOVF   x55,W
14FE:  SUBWF  x59,W
1500:  BNZ   1512
1502:  MOVF   x54,W
1504:  SUBWF  x58,W
1506:  BNZ   1512
1508:  MOVF   x53,W
150A:  SUBWF  x57,W
150C:  BNZ   1512
150E:  MOVF   x52,W
1510:  SUBWF  x56,W
1512:  BNC   1532
1514:  MOVF   x52,W
1516:  SUBWF  x56,F
1518:  MOVF   x53,W
151A:  BTFSS  FD8.0
151C:  INCFSZ x53,W
151E:  SUBWF  x57,F
1520:  MOVF   x54,W
1522:  BTFSS  FD8.0
1524:  INCFSZ x54,W
1526:  SUBWF  x58,F
1528:  MOVF   x55,W
152A:  BTFSS  FD8.0
152C:  INCFSZ x55,W
152E:  SUBWF  x59,F
1530:  BSF    FD8.0
1532:  RLCF   00,F
1534:  RLCF   01,F
1536:  RLCF   02,F
1538:  RLCF   03,F
153A:  DECFSZ x5A,F
153C:  BRA    14EA
153E:  MOVFF  256,FEF
1542:  MOVFF  257,FEC
1546:  MOVFF  258,FEC
154A:  MOVFF  259,FEC
154E:  MOVLB  0
1550:  RETURN 0
*
197C:  MOVLW  B6
197E:  MOVWF  00
1980:  CLRF   03
1982:  CLRF   02
1984:  CLRF   01
1986:  MOVLB  2
1988:  MOVF   x4E,W
198A:  IORWF  x4F,W
198C:  IORWF  x50,W
198E:  IORWF  x51,W
1990:  BNZ   1996
1992:  CLRF   00
1994:  BRA    19B0
1996:  BCF    FD8.0
1998:  BTFSC  01.7
199A:  BRA    19AE
199C:  RLCF   x4E,F
199E:  RLCF   x4F,F
19A0:  RLCF   x50,F
19A2:  RLCF   x51,F
19A4:  RLCF   03,F
19A6:  RLCF   02,F
19A8:  RLCF   01,F
19AA:  DECFSZ 00,F
19AC:  BRA    1996
19AE:  BCF    01.7
19B0:  MOVLB  0
19B2:  GOTO   1C5E (RETURN)
19B6:  MOVLB  2
19B8:  MOVF   x4E,W
19BA:  BTFSC  FD8.2
19BC:  BRA    1B08
19BE:  MOVWF  x5A
19C0:  MOVF   x52,W
19C2:  BTFSC  FD8.2
19C4:  BRA    1B08
19C6:  SUBWF  x5A,F
19C8:  BNC   19D4
19CA:  MOVLW  7F
19CC:  ADDWF  x5A,F
19CE:  BTFSC  FD8.0
19D0:  BRA    1B08
19D2:  BRA    19E0
19D4:  MOVLW  81
19D6:  SUBWF  x5A,F
19D8:  BTFSS  FD8.0
19DA:  BRA    1B08
19DC:  BTFSC  FD8.2
19DE:  BRA    1B08
19E0:  MOVFF  25A,00
19E4:  CLRF   01
19E6:  CLRF   02
19E8:  CLRF   03
19EA:  CLRF   x59
19EC:  MOVFF  24F,258
19F0:  BSF    x58.7
19F2:  MOVFF  250,257
19F6:  MOVFF  251,256
19FA:  MOVLW  19
19FC:  MOVWF  x5A
19FE:  MOVF   x55,W
1A00:  SUBWF  x56,F
1A02:  BC    1A1E
1A04:  MOVLW  01
1A06:  SUBWF  x57,F
1A08:  BC    1A1E
1A0A:  SUBWF  x58,F
1A0C:  BC    1A1E
1A0E:  SUBWF  x59,F
1A10:  BC    1A1E
1A12:  INCF   x59,F
1A14:  INCF   x58,F
1A16:  INCF   x57,F
1A18:  MOVF   x55,W
1A1A:  ADDWF  x56,F
1A1C:  BRA    1A6E
1A1E:  MOVF   x54,W
1A20:  SUBWF  x57,F
1A22:  BC    1A48
1A24:  MOVLW  01
1A26:  SUBWF  x58,F
1A28:  BC    1A48
1A2A:  SUBWF  x59,F
1A2C:  BC    1A48
1A2E:  INCF   x59,F
1A30:  INCF   x58,F
1A32:  MOVF   x54,W
1A34:  ADDWF  x57,F
1A36:  MOVF   x55,W
1A38:  ADDWF  x56,F
1A3A:  BNC   1A6E
1A3C:  INCF   x57,F
1A3E:  BNZ   1A6E
1A40:  INCF   x58,F
1A42:  BNZ   1A6E
1A44:  INCF   x59,F
1A46:  BRA    1A6E
1A48:  MOVF   x53,W
1A4A:  IORLW  80
1A4C:  SUBWF  x58,F
1A4E:  BC    1A6C
1A50:  MOVLW  01
1A52:  SUBWF  x59,F
1A54:  BC    1A6C
1A56:  INCF   x59,F
1A58:  MOVF   x53,W
1A5A:  IORLW  80
1A5C:  ADDWF  x58,F
1A5E:  MOVF   x54,W
1A60:  ADDWF  x57,F
1A62:  BNC   1A36
1A64:  INCF   x58,F
1A66:  BNZ   1A36
1A68:  INCF   x59,F
1A6A:  BRA    1A36
1A6C:  BSF    03.0
1A6E:  DECFSZ x5A,F
1A70:  BRA    1A74
1A72:  BRA    1A8A
1A74:  BCF    FD8.0
1A76:  RLCF   x56,F
1A78:  RLCF   x57,F
1A7A:  RLCF   x58,F
1A7C:  RLCF   x59,F
1A7E:  BCF    FD8.0
1A80:  RLCF   03,F
1A82:  RLCF   02,F
1A84:  RLCF   01,F
1A86:  RLCF   x5B,F
1A88:  BRA    19FE
1A8A:  BTFSS  x5B.0
1A8C:  BRA    1A9A
1A8E:  BCF    FD8.0
1A90:  RRCF   01,F
1A92:  RRCF   02,F
1A94:  RRCF   03,F
1A96:  RRCF   x5B,F
1A98:  BRA    1A9E
1A9A:  DECF   00,F
1A9C:  BZ    1B08
1A9E:  BTFSC  x5B.7
1AA0:  BRA    1ADE
1AA2:  BCF    FD8.0
1AA4:  RLCF   x56,F
1AA6:  RLCF   x57,F
1AA8:  RLCF   x58,F
1AAA:  RLCF   x59,F
1AAC:  MOVF   x55,W
1AAE:  SUBWF  x56,F
1AB0:  BC    1AC0
1AB2:  MOVLW  01
1AB4:  SUBWF  x57,F
1AB6:  BC    1AC0
1AB8:  SUBWF  x58,F
1ABA:  BC    1AC0
1ABC:  SUBWF  x59,F
1ABE:  BNC   1AF4
1AC0:  MOVF   x54,W
1AC2:  SUBWF  x57,F
1AC4:  BC    1AD0
1AC6:  MOVLW  01
1AC8:  SUBWF  x58,F
1ACA:  BC    1AD0
1ACC:  SUBWF  x59,F
1ACE:  BNC   1AF4
1AD0:  MOVF   x53,W
1AD2:  IORLW  80
1AD4:  SUBWF  x58,F
1AD6:  BC    1ADE
1AD8:  MOVLW  01
1ADA:  SUBWF  x59,F
1ADC:  BNC   1AF4
1ADE:  INCF   03,F
1AE0:  BNZ   1AF4
1AE2:  INCF   02,F
1AE4:  BNZ   1AF4
1AE6:  INCF   01,F
1AE8:  BNZ   1AF4
1AEA:  INCF   00,F
1AEC:  BZ    1B08
1AEE:  RRCF   01,F
1AF0:  RRCF   02,F
1AF2:  RRCF   03,F
1AF4:  MOVFF  24F,25A
1AF8:  MOVF   x53,W
1AFA:  XORWF  x5A,F
1AFC:  BTFSS  x5A.7
1AFE:  BRA    1B04
1B00:  BSF    01.7
1B02:  BRA    1B10
1B04:  BCF    01.7
1B06:  BRA    1B10
1B08:  CLRF   00
1B0A:  CLRF   01
1B0C:  CLRF   02
1B0E:  CLRF   03
1B10:  MOVLB  0
1B12:  RETURN 0
1B14:  MOVLB  2
1B16:  MOVF   x4E,W
1B18:  BTFSC  FD8.2
1B1A:  BRA    1BFE
1B1C:  MOVWF  00
1B1E:  MOVF   x52,W
1B20:  BTFSC  FD8.2
1B22:  BRA    1BFE
1B24:  ADDWF  00,F
1B26:  BNC   1B30
1B28:  MOVLW  81
1B2A:  ADDWF  00,F
1B2C:  BC    1BFE
1B2E:  BRA    1B38
1B30:  MOVLW  7F
1B32:  SUBWF  00,F
1B34:  BNC   1BFE
1B36:  BZ    1BFE
1B38:  MOVFF  24F,256
1B3C:  MOVF   x53,W
1B3E:  XORWF  x56,F
1B40:  BSF    x4F.7
1B42:  BSF    x53.7
1B44:  MOVF   x51,W
1B46:  MULWF  x55
1B48:  MOVFF  FF4,258
1B4C:  MOVF   x50,W
1B4E:  MULWF  x54
1B50:  MOVFF  FF4,03
1B54:  MOVFF  FF3,257
1B58:  MULWF  x55
1B5A:  MOVF   FF3,W
1B5C:  ADDWF  x58,F
1B5E:  MOVF   FF4,W
1B60:  ADDWFC x57,F
1B62:  MOVLW  00
1B64:  ADDWFC 03,F
1B66:  MOVF   x51,W
1B68:  MULWF  x54
1B6A:  MOVF   FF3,W
1B6C:  ADDWF  x58,F
1B6E:  MOVF   FF4,W
1B70:  ADDWFC x57,F
1B72:  MOVLW  00
1B74:  CLRF   02
1B76:  ADDWFC 03,F
1B78:  ADDWFC 02,F
1B7A:  MOVF   x4F,W
1B7C:  MULWF  x55
1B7E:  MOVF   FF3,W
1B80:  ADDWF  x57,F
1B82:  MOVF   FF4,W
1B84:  ADDWFC 03,F
1B86:  MOVLW  00
1B88:  ADDWFC 02,F
1B8A:  MOVF   x4F,W
1B8C:  MULWF  x54
1B8E:  MOVF   FF3,W
1B90:  ADDWF  03,F
1B92:  MOVF   FF4,W
1B94:  ADDWFC 02,F
1B96:  MOVLW  00
1B98:  CLRF   01
1B9A:  ADDWFC 01,F
1B9C:  MOVF   x51,W
1B9E:  MULWF  x53
1BA0:  MOVF   FF3,W
1BA2:  ADDWF  x57,F
1BA4:  MOVF   FF4,W
1BA6:  ADDWFC 03,F
1BA8:  MOVLW  00
1BAA:  ADDWFC 02,F
1BAC:  ADDWFC 01,F
1BAE:  MOVF   x50,W
1BB0:  MULWF  x53
1BB2:  MOVF   FF3,W
1BB4:  ADDWF  03,F
1BB6:  MOVF   FF4,W
1BB8:  ADDWFC 02,F
1BBA:  MOVLW  00
1BBC:  ADDWFC 01,F
1BBE:  MOVF   x4F,W
1BC0:  MULWF  x53
1BC2:  MOVF   FF3,W
1BC4:  ADDWF  02,F
1BC6:  MOVF   FF4,W
1BC8:  ADDWFC 01,F
1BCA:  INCF   00,F
1BCC:  BTFSC  01.7
1BCE:  BRA    1BDA
1BD0:  RLCF   x57,F
1BD2:  RLCF   03,F
1BD4:  RLCF   02,F
1BD6:  RLCF   01,F
1BD8:  DECF   00,F
1BDA:  MOVLW  00
1BDC:  BTFSS  x57.7
1BDE:  BRA    1BF4
1BE0:  INCF   03,F
1BE2:  ADDWFC 02,F
1BE4:  ADDWFC 01,F
1BE6:  MOVF   01,W
1BE8:  BNZ   1BF4
1BEA:  MOVF   02,W
1BEC:  BNZ   1BF4
1BEE:  MOVF   03,W
1BF0:  BNZ   1BF4
1BF2:  INCF   00,F
1BF4:  BTFSC  x56.7
1BF6:  BSF    01.7
1BF8:  BTFSS  x56.7
1BFA:  BCF    01.7
1BFC:  BRA    1C06
1BFE:  CLRF   00
1C00:  CLRF   01
1C02:  CLRF   02
1C04:  CLRF   03
1C06:  MOVLB  0
1C08:  RETURN 0
1C0A:  MOVLB  2
1C0C:  MOVF   x4E,W
1C0E:  SUBLW  B6
1C10:  MOVWF  x4E
1C12:  CLRF   03
1C14:  MOVFF  24F,252
1C18:  BSF    x4F.7
1C1A:  BCF    FD8.0
1C1C:  RRCF   x4F,F
1C1E:  RRCF   x50,F
1C20:  RRCF   x51,F
1C22:  RRCF   03,F
1C24:  RRCF   02,F
1C26:  RRCF   01,F
1C28:  RRCF   00,F
1C2A:  DECFSZ x4E,F
1C2C:  BRA    1C1A
1C2E:  BTFSS  x52.7
1C30:  BRA    1C48
1C32:  COMF   00,F
1C34:  COMF   01,F
1C36:  COMF   02,F
1C38:  COMF   03,F
1C3A:  INCF   00,F
1C3C:  BTFSC  FD8.2
1C3E:  INCF   01,F
1C40:  BTFSC  FD8.2
1C42:  INCF   02,F
1C44:  BTFSC  FD8.2
1C46:  INCF   03,F
1C48:  MOVLB  0
1C4A:  RETURN 0
*
2534:  MOVLW  8E
2536:  MOVWF  00
2538:  MOVFF  244,01
253C:  MOVFF  243,02
2540:  CLRF   03
2542:  BTFSS  01.7
2544:  BRA    2550
2546:  COMF   01,F
2548:  COMF   02,F
254A:  INCF   02,F
254C:  BNZ   2550
254E:  INCF   01,F
2550:  MOVF   01,F
2552:  BNZ   2566
2554:  MOVFF  02,01
2558:  CLRF   02
255A:  MOVLW  08
255C:  SUBWF  00,F
255E:  MOVF   01,F
2560:  BNZ   2566
2562:  CLRF   00
2564:  BRA    2580
2566:  BCF    FD8.0
2568:  BTFSC  01.7
256A:  BRA    2574
256C:  RLCF   02,F
256E:  RLCF   01,F
2570:  DECF   00,F
2572:  BRA    2566
2574:  MOVLB  2
2576:  BTFSS  x44.7
2578:  BRA    257E
257A:  MOVLB  0
257C:  BRA    2580
257E:  BCF    01.7
2580:  MOVLB  0
2582:  GOTO   2830 (RETURN)
2586:  MOVLW  80
2588:  BTFSS  FD8.1
258A:  BRA    2590
258C:  MOVLB  2
258E:  XORWF  x48,F
2590:  MOVLB  2
2592:  CLRF   x4D
2594:  CLRF   x4E
2596:  MOVFF  244,24C
259A:  MOVF   x48,W
259C:  XORWF  x4C,F
259E:  MOVF   x43,W
25A0:  BTFSC  FD8.2
25A2:  BRA    2762
25A4:  MOVWF  x4B
25A6:  MOVWF  00
25A8:  MOVF   x47,W
25AA:  BTFSC  FD8.2
25AC:  BRA    2774
25AE:  SUBWF  x4B,F
25B0:  BTFSC  FD8.2
25B2:  BRA    26BA
25B4:  BNC   2632
25B6:  MOVFF  248,251
25BA:  BSF    x51.7
25BC:  MOVFF  249,250
25C0:  MOVFF  24A,24F
25C4:  CLRF   x4E
25C6:  BCF    FD8.0
25C8:  RRCF   x51,F
25CA:  RRCF   x50,F
25CC:  RRCF   x4F,F
25CE:  RRCF   x4E,F
25D0:  DECFSZ x4B,F
25D2:  BRA    25C4
25D4:  BTFSS  x4C.7
25D6:  BRA    25DE
25D8:  BSF    x4D.0
25DA:  BRA    279C
25DC:  BCF    x4D.0
25DE:  BCF    x4B.0
25E0:  BSF    x4D.4
25E2:  MOVLW  02
25E4:  MOVWF  FEA
25E6:  MOVLW  46
25E8:  MOVWF  FE9
25EA:  BRA    27C2
25EC:  BCF    x4D.4
25EE:  BTFSC  x4C.7
25F0:  BRA    2606
25F2:  BTFSS  x4B.0
25F4:  BRA    261C
25F6:  RRCF   x51,F
25F8:  RRCF   x50,F
25FA:  RRCF   x4F,F
25FC:  RRCF   x4E,F
25FE:  INCF   00,F
2600:  BTFSC  FD8.2
2602:  BRA    2792
2604:  BRA    261C
2606:  BTFSC  x51.7
2608:  BRA    2622
260A:  BCF    FD8.0
260C:  RLCF   x4E,F
260E:  RLCF   x4F,F
2610:  RLCF   x50,F
2612:  RLCF   x51,F
2614:  DECF   00,F
2616:  BTFSC  FD8.2
2618:  BRA    2792
261A:  BRA    2606
261C:  BSF    x4D.6
261E:  BRA    26FA
2620:  BCF    x4D.6
2622:  MOVFF  244,24C
2626:  BTFSS  x44.7
2628:  BRA    262E
262A:  BSF    x51.7
262C:  BRA    2784
262E:  BCF    x51.7
2630:  BRA    2784
2632:  MOVFF  247,24B
2636:  MOVFF  247,00
263A:  MOVF   x43,W
263C:  SUBWF  x4B,F
263E:  MOVFF  244,251
2642:  BSF    x51.7
2644:  MOVFF  245,250
2648:  MOVFF  246,24F
264C:  CLRF   x4E
264E:  BCF    FD8.0
2650:  RRCF   x51,F
2652:  RRCF   x50,F
2654:  RRCF   x4F,F
2656:  RRCF   x4E,F
2658:  DECFSZ x4B,F
265A:  BRA    264C
265C:  BTFSS  x4C.7
265E:  BRA    2666
2660:  BSF    x4D.1
2662:  BRA    279C
2664:  BCF    x4D.1
2666:  BCF    x4B.0
2668:  BSF    x4D.5
266A:  MOVLW  02
266C:  MOVWF  FEA
266E:  MOVLW  4A
2670:  MOVWF  FE9
2672:  BRA    27C2
2674:  BCF    x4D.5
2676:  BTFSC  x4C.7
2678:  BRA    268E
267A:  BTFSS  x4B.0
267C:  BRA    26A4
267E:  RRCF   x51,F
2680:  RRCF   x50,F
2682:  RRCF   x4F,F
2684:  RRCF   x4E,F
2686:  INCF   00,F
2688:  BTFSC  FD8.2
268A:  BRA    2792
268C:  BRA    26A4
268E:  BTFSC  x51.7
2690:  BRA    26AA
2692:  BCF    FD8.0
2694:  RLCF   x4E,F
2696:  RLCF   x4F,F
2698:  RLCF   x50,F
269A:  RLCF   x51,F
269C:  DECF   00,F
269E:  BTFSC  FD8.2
26A0:  BRA    2792
26A2:  BRA    268E
26A4:  BSF    x4D.7
26A6:  BRA    26FA
26A8:  BCF    x4D.7
26AA:  MOVFF  248,24C
26AE:  BTFSS  x48.7
26B0:  BRA    26B6
26B2:  BSF    x51.7
26B4:  BRA    2784
26B6:  BCF    x51.7
26B8:  BRA    2784
26BA:  MOVFF  248,251
26BE:  BSF    x51.7
26C0:  MOVFF  249,250
26C4:  MOVFF  24A,24F
26C8:  BTFSS  x4C.7
26CA:  BRA    26D4
26CC:  BCF    x51.7
26CE:  BSF    x4D.2
26D0:  BRA    279C
26D2:  BCF    x4D.2
26D4:  CLRF   x4E
26D6:  BCF    x4B.0
26D8:  MOVLW  02
26DA:  MOVWF  FEA
26DC:  MOVLW  46
26DE:  MOVWF  FE9
26E0:  BRA    27C2
26E2:  BTFSC  x4C.7
26E4:  BRA    271E
26E6:  MOVFF  244,24C
26EA:  BTFSS  x4B.0
26EC:  BRA    26FA
26EE:  RRCF   x51,F
26F0:  RRCF   x50,F
26F2:  RRCF   x4F,F
26F4:  RRCF   x4E,F
26F6:  INCF   00,F
26F8:  BZ    2792
26FA:  BTFSS  x4E.7
26FC:  BRA    2714
26FE:  INCF   x4F,F
2700:  BNZ   2714
2702:  INCF   x50,F
2704:  BNZ   2714
2706:  INCF   x51,F
2708:  BNZ   2714
270A:  RRCF   x51,F
270C:  RRCF   x50,F
270E:  RRCF   x4F,F
2710:  INCF   00,F
2712:  BZ    2792
2714:  BTFSC  x4D.6
2716:  BRA    2620
2718:  BTFSC  x4D.7
271A:  BRA    26A8
271C:  BRA    2756
271E:  MOVLW  80
2720:  XORWF  x51,F
2722:  BTFSS  x51.7
2724:  BRA    272E
2726:  BRA    279C
2728:  MOVFF  248,24C
272C:  BRA    2742
272E:  MOVFF  244,24C
2732:  MOVF   x51,F
2734:  BNZ   2742
2736:  MOVF   x50,F
2738:  BNZ   2742
273A:  MOVF   x4F,F
273C:  BNZ   2742
273E:  CLRF   00
2740:  BRA    2784
2742:  BTFSC  x51.7
2744:  BRA    2756
2746:  BCF    FD8.0
2748:  RLCF   x4E,F
274A:  RLCF   x4F,F
274C:  RLCF   x50,F
274E:  RLCF   x51,F
2750:  DECFSZ 00,F
2752:  BRA    2742
2754:  BRA    2792
2756:  BTFSS  x4C.7
2758:  BRA    275E
275A:  BSF    x51.7
275C:  BRA    2784
275E:  BCF    x51.7
2760:  BRA    2784
2762:  MOVFF  247,00
2766:  MOVFF  248,251
276A:  MOVFF  249,250
276E:  MOVFF  24A,24F
2772:  BRA    2784
2774:  MOVFF  243,00
2778:  MOVFF  244,251
277C:  MOVFF  245,250
2780:  MOVFF  246,24F
2784:  MOVFF  251,01
2788:  MOVFF  250,02
278C:  MOVFF  24F,03
2790:  BRA    27FA
2792:  CLRF   00
2794:  CLRF   01
2796:  CLRF   02
2798:  CLRF   03
279A:  BRA    27FA
279C:  CLRF   x4E
279E:  COMF   x4F,F
27A0:  COMF   x50,F
27A2:  COMF   x51,F
27A4:  COMF   x4E,F
27A6:  INCF   x4E,F
27A8:  BNZ   27B4
27AA:  INCF   x4F,F
27AC:  BNZ   27B4
27AE:  INCF   x50,F
27B0:  BNZ   27B4
27B2:  INCF   x51,F
27B4:  BTFSC  x4D.0
27B6:  BRA    25DC
27B8:  BTFSC  x4D.1
27BA:  BRA    2664
27BC:  BTFSC  x4D.2
27BE:  BRA    26D2
27C0:  BRA    2728
27C2:  MOVF   FEF,W
27C4:  ADDWF  x4F,F
27C6:  BNC   27D2
27C8:  INCF   x50,F
27CA:  BNZ   27D2
27CC:  INCF   x51,F
27CE:  BTFSC  FD8.2
27D0:  BSF    x4B.0
27D2:  MOVF   FED,F
27D4:  MOVF   FEF,W
27D6:  ADDWF  x50,F
27D8:  BNC   27E0
27DA:  INCF   x51,F
27DC:  BTFSC  FD8.2
27DE:  BSF    x4B.0
27E0:  MOVF   FED,F
27E2:  MOVF   FEF,W
27E4:  BTFSC  FEF.7
27E6:  BRA    27EA
27E8:  XORLW  80
27EA:  ADDWF  x51,F
27EC:  BTFSC  FD8.0
27EE:  BSF    x4B.0
27F0:  BTFSC  x4D.4
27F2:  BRA    25EC
27F4:  BTFSC  x4D.5
27F6:  BRA    2674
27F8:  BRA    26E2
27FA:  MOVLB  0
27FC:  RETURN 0
*
2956:  MOVLW  8E
2958:  MOVWF  00
295A:  MOVLB  1
295C:  MOVF   xC0,W
295E:  SUBWF  00,F
2960:  MOVFF  1C1,02
2964:  MOVFF  1C2,01
2968:  BSF    02.7
296A:  MOVF   00,F
296C:  BZ    2980
296E:  BCF    FD8.0
2970:  MOVF   02,F
2972:  BNZ   2978
2974:  MOVF   01,F
2976:  BZ    2980
2978:  RRCF   02,F
297A:  RRCF   01,F
297C:  DECFSZ 00,F
297E:  BRA    296E
2980:  BTFSS  xC1.7
2982:  BRA    298E
2984:  COMF   01,F
2986:  COMF   02,F
2988:  INCF   01,F
298A:  BTFSC  FD8.2
298C:  INCF   02,F
298E:  MOVLB  0
2990:  GOTO   29F4 (RETURN)
*
2B72:  MOVLB  2
2B74:  MOVF   x35,W
2B76:  XORWF  x37,W
2B78:  ANDLW  80
2B7A:  MOVWF  x39
2B7C:  BTFSS  x35.7
2B7E:  BRA    2B8A
2B80:  COMF   x34,F
2B82:  COMF   x35,F
2B84:  INCF   x34,F
2B86:  BTFSC  FD8.2
2B88:  INCF   x35,F
2B8A:  BTFSS  x37.7
2B8C:  BRA    2B98
2B8E:  COMF   x36,F
2B90:  COMF   x37,F
2B92:  INCF   x36,F
2B94:  BTFSC  FD8.2
2B96:  INCF   x37,F
2B98:  MOVF   x34,W
2B9A:  MULWF  x36
2B9C:  MOVFF  FF3,01
2BA0:  MOVFF  FF4,00
2BA4:  MULWF  x37
2BA6:  MOVF   FF3,W
2BA8:  ADDWF  00,F
2BAA:  MOVF   x35,W
2BAC:  MULWF  x36
2BAE:  MOVF   FF3,W
2BB0:  ADDWFC 00,W
2BB2:  MOVWF  02
2BB4:  BTFSS  x39.7
2BB6:  BRA    2BC2
2BB8:  COMF   01,F
2BBA:  COMF   02,F
2BBC:  INCF   01,F
2BBE:  BTFSC  FD8.2
2BC0:  INCF   02,F
2BC2:  MOVLB  0
2BC4:  RETURN 0
*
318A:  MOVFF  1A4,FEA
318E:  MOVFF  1A3,FE9
3192:  MOVLB  2
3194:  MOVFF  24E,FEF
3198:  INCF   FE9,F
319A:  BTFSC  FD8.2
319C:  INCF   FEA,F
319E:  CLRF   FEF
31A0:  MOVLB  1
31A2:  INCF   xA3,F
31A4:  BTFSC  FD8.2
31A6:  INCF   xA4,F
31A8:  MOVLB  0
31AA:  RETURN 0
31AC:  TBLRD*+
31AE:  MOVFF  FF6,242
31B2:  MOVFF  FF7,243
31B6:  MOVFF  FF5,24E
31BA:  RCALL  318A
31BC:  MOVFF  242,FF6
31C0:  MOVFF  243,FF7
31C4:  MOVLB  2
31C6:  DECFSZ x41,F
31C8:  BRA    31CC
31CA:  BRA    31D0
31CC:  MOVLB  0
31CE:  BRA    31AC
31D0:  MOVLB  0
31D2:  RETURN 0
31D4:  MOVFF  FEA,234
31D8:  MOVFF  FE9,233
31DC:  MOVLB  2
31DE:  SWAPF  x2D,W
31E0:  IORLW  F0
31E2:  MOVWF  x2F
31E4:  ADDWF  x2F,F
31E6:  ADDLW  E2
31E8:  MOVWF  x30
31EA:  ADDLW  32
31EC:  MOVWF  x32
31EE:  MOVF   x2D,W
31F0:  ANDLW  0F
31F2:  ADDWF  x30,F
31F4:  ADDWF  x30,F
31F6:  ADDWF  x32,F
31F8:  ADDLW  E9
31FA:  MOVWF  x31
31FC:  ADDWF  x31,F
31FE:  ADDWF  x31,F
3200:  SWAPF  x2C,W
3202:  ANDLW  0F
3204:  ADDWF  x31,F
3206:  ADDWF  x32,F
3208:  RLCF   x31,F
320A:  RLCF   x32,F
320C:  COMF   x32,F
320E:  RLCF   x32,F
3210:  MOVF   x2C,W
3212:  ANDLW  0F
3214:  ADDWF  x32,F
3216:  RLCF   x2F,F
3218:  MOVLW  07
321A:  MOVWF  x2E
321C:  MOVLW  0A
321E:  DECF   x31,F
3220:  ADDWF  x32,F
3222:  BNC   321E
3224:  DECF   x30,F
3226:  ADDWF  x31,F
3228:  BNC   3224
322A:  DECF   x2F,F
322C:  ADDWF  x30,F
322E:  BNC   322A
3230:  DECF   x2E,F
3232:  ADDWF  x2F,F
3234:  BNC   3230
3236:  MOVLW  02
3238:  MOVWF  FEA
323A:  MOVLW  2E
323C:  MOVWF  FE9
323E:  MOVLW  07
3240:  ANDWF  x33,W
3242:  BCF    x33.6
3244:  ADDWF  FE9,F
3246:  MOVLW  32
3248:  SUBWF  FE9,W
324A:  BTFSC  FD8.2
324C:  BSF    x33.6
324E:  MOVF   FEF,W
3250:  MOVWF  00
3252:  BNZ   3264
3254:  BTFSC  x33.6
3256:  BRA    3264
3258:  BTFSC  x33.4
325A:  BRA    3286
325C:  BTFSC  x33.3
325E:  BRA    3264
3260:  MOVLW  20
3262:  BRA    326A
3264:  BSF    x33.3
3266:  BCF    x33.4
3268:  MOVLW  30
326A:  ADDWF  00,F
326C:  MOVFF  FEA,22D
3270:  MOVFF  FE9,22C
3274:  MOVFF  00,24E
3278:  MOVLB  0
327A:  RCALL  318A
327C:  MOVFF  22D,FEA
3280:  MOVFF  22C,FE9
3284:  MOVLB  2
3286:  MOVF   FEE,W
3288:  BTFSS  x33.6
328A:  BRA    3246
328C:  MOVLB  0
328E:  RETURN 0
*
32F8:  MOVLB  2
32FA:  MOVF   x2F,W
32FC:  CLRF   01
32FE:  SUBWF  x2E,W
3300:  BC    3308
3302:  MOVFF  22E,00
3306:  BRA    3320
3308:  CLRF   00
330A:  MOVLW  08
330C:  MOVWF  x30
330E:  RLCF   x2E,F
3310:  RLCF   00,F
3312:  MOVF   x2F,W
3314:  SUBWF  00,W
3316:  BTFSC  FD8.0
3318:  MOVWF  00
331A:  RLCF   01,F
331C:  DECFSZ x30,F
331E:  BRA    330E
3320:  MOVLB  0
3322:  RETURN 0
3324:  MOVF   01,W
3326:  MOVFF  22C,22E
332A:  MOVLW  64
332C:  MOVLB  2
332E:  MOVWF  x2F
3330:  MOVLB  0
3332:  RCALL  32F8
3334:  MOVFF  00,22C
3338:  MOVF   01,W
333A:  MOVLW  30
333C:  BNZ   334E
333E:  MOVLB  2
3340:  BTFSS  x2D.1
3342:  BRA    3362
3344:  BTFSC  x2D.3
3346:  BRA    3362
3348:  BTFSC  x2D.4
334A:  MOVLW  20
334C:  BRA    3356
334E:  MOVLB  2
3350:  BCF    x2D.3
3352:  BCF    x2D.4
3354:  BSF    x2D.0
3356:  ADDWF  01,F
3358:  MOVFF  01,24E
335C:  MOVLB  0
335E:  RCALL  318A
3360:  MOVLB  2
3362:  MOVFF  22C,22E
3366:  MOVLW  0A
3368:  MOVWF  x2F
336A:  MOVLB  0
336C:  RCALL  32F8
336E:  MOVFF  00,22C
3372:  MOVF   01,W
3374:  MOVLW  30
3376:  BNZ   3388
3378:  MOVLB  2
337A:  BTFSC  x2D.3
337C:  BRA    3392
337E:  BTFSS  x2D.0
3380:  BRA    3392
3382:  BTFSC  x2D.4
3384:  MOVLW  20
3386:  MOVLB  0
3388:  ADDWF  01,F
338A:  MOVFF  01,24E
338E:  RCALL  318A
3390:  MOVLB  2
3392:  MOVLW  30
3394:  ADDWF  x2C,F
3396:  MOVFF  22C,24E
339A:  MOVLB  0
339C:  RCALL  318A
339E:  RETURN 0
*
343E:  CLRF   01
3440:  CLRF   02
3442:  CLRF   00
3444:  CLRF   03
3446:  MOVLB  2
3448:  MOVF   x2D,W
344A:  BNZ   3450
344C:  MOVF   x2C,W
344E:  BZ    3480
3450:  MOVLW  10
3452:  MOVWF  x2E
3454:  BCF    FD8.0
3456:  RLCF   x2A,F
3458:  RLCF   x2B,F
345A:  RLCF   00,F
345C:  RLCF   03,F
345E:  MOVF   x2D,W
3460:  SUBWF  03,W
3462:  BNZ   3468
3464:  MOVF   x2C,W
3466:  SUBWF  00,W
3468:  BNC   3478
346A:  MOVF   x2C,W
346C:  SUBWF  00,F
346E:  BTFSS  FD8.0
3470:  DECF   03,F
3472:  MOVF   x2D,W
3474:  SUBWF  03,F
3476:  BSF    FD8.0
3478:  RLCF   01,F
347A:  RLCF   02,F
347C:  DECFSZ x2E,F
347E:  BRA    3454
3480:  MOVLB  0
3482:  RETURN 0
*
3554:  MOVF   FE9,W
3556:  MOVLB  2
3558:  MOVWF  x46
355A:  MOVF   x45,W
355C:  MOVWF  x48
355E:  BZ    3598
3560:  MOVFF  244,251
3564:  MOVFF  243,250
3568:  MOVFF  242,24F
356C:  MOVFF  241,24E
3570:  CLRF   x55
3572:  CLRF   x54
3574:  MOVLW  20
3576:  MOVWF  x53
3578:  MOVLW  82
357A:  MOVWF  x52
357C:  MOVLB  0
357E:  CALL   1B14
3582:  MOVFF  03,244
3586:  MOVFF  02,243
358A:  MOVFF  01,242
358E:  MOVFF  00,241
3592:  MOVLB  2
3594:  DECFSZ x48,F
3596:  BRA    3560
3598:  MOVFF  244,251
359C:  MOVFF  243,250
35A0:  MOVFF  242,24F
35A4:  MOVFF  241,24E
35A8:  MOVLB  0
35AA:  CALL   1C0A
35AE:  MOVFF  03,244
35B2:  MOVFF  02,243
35B6:  MOVFF  01,242
35BA:  MOVFF  00,241
35BE:  MOVLB  2
35C0:  BTFSS  x44.7
35C2:  BRA    35DE
35C4:  DECF   x46,F
35C6:  BSF    x46.5
35C8:  COMF   x41,F
35CA:  COMF   x42,F
35CC:  COMF   x43,F
35CE:  COMF   x44,F
35D0:  INCF   x41,F
35D2:  BTFSC  FD8.2
35D4:  INCF   x42,F
35D6:  BTFSC  FD8.2
35D8:  INCF   x43,F
35DA:  BTFSC  FD8.2
35DC:  INCF   x44,F
35DE:  MOVLW  3B
35E0:  MOVWF  x4D
35E2:  MOVLW  9A
35E4:  MOVWF  x4C
35E6:  MOVLW  CA
35E8:  MOVWF  x4B
35EA:  CLRF   x4A
35EC:  MOVLW  0A
35EE:  MOVWF  x48
35F0:  MOVF   x45,W
35F2:  BTFSC  FD8.2
35F4:  INCF   x46,F
35F6:  BSF    FD8.1
35F8:  MOVLW  02
35FA:  MOVWF  FEA
35FC:  MOVLW  41
35FE:  MOVWF  FE9
3600:  MOVFF  244,251
3604:  MOVFF  243,250
3608:  MOVFF  242,24F
360C:  MOVFF  241,24E
3610:  MOVFF  24D,255
3614:  MOVFF  24C,254
3618:  MOVFF  24B,253
361C:  MOVFF  24A,252
3620:  MOVLB  0
3622:  CALL   14BE
3626:  MOVF   01,W
3628:  MOVF   00,F
362A:  BNZ   3652
362C:  MOVLB  2
362E:  INCF   x45,W
3630:  SUBWF  x48,W
3632:  BTFSS  FD8.2
3634:  BRA    363A
3636:  MOVLB  0
3638:  BRA    3652
363A:  MOVF   x46,W
363C:  BZ    3658
363E:  ANDLW  0F
3640:  SUBWF  x48,W
3642:  BZ    3646
3644:  BC    36C6
3646:  BTFSC  x46.7
3648:  BRA    36C6
364A:  BTFSC  x46.6
364C:  BRA    3658
364E:  MOVLW  20
3650:  BRA    36BA
3652:  MOVLW  20
3654:  MOVLB  2
3656:  ANDWF  x46,F
3658:  BTFSS  x46.5
365A:  BRA    3678
365C:  BCF    x46.5
365E:  MOVF   x45,W
3660:  BTFSS  FD8.2
3662:  DECF   x46,F
3664:  MOVF   00,W
3666:  MOVWF  x46
3668:  MOVLW  2D
366A:  MOVWF  x4E
366C:  MOVLB  0
366E:  RCALL  318A
3670:  MOVLB  2
3672:  MOVF   x46,W
3674:  MOVWF  00
3676:  CLRF   x46
3678:  MOVF   x45,W
367A:  SUBWF  x48,W
367C:  BNZ   3696
367E:  MOVF   00,W
3680:  MOVWF  x46
3682:  MOVLW  2E
3684:  MOVWF  x4E
3686:  MOVLB  0
3688:  RCALL  318A
368A:  MOVLB  2
368C:  MOVF   x46,W
368E:  MOVWF  00
3690:  MOVLW  20
3692:  ANDWF  x46,F
3694:  MOVLW  00
3696:  MOVLW  30
3698:  BTFSS  x46.5
369A:  BRA    36BA
369C:  BCF    x46.5
369E:  MOVF   x45,W
36A0:  BTFSS  FD8.2
36A2:  DECF   x46,F
36A4:  MOVF   00,W
36A6:  MOVWF  x46
36A8:  MOVLW  2D
36AA:  MOVWF  x4E
36AC:  MOVLB  0
36AE:  RCALL  318A
36B0:  MOVLB  2
36B2:  MOVF   x46,W
36B4:  MOVWF  00
36B6:  CLRF   x46
36B8:  MOVLW  30
36BA:  ADDWF  00,F
36BC:  MOVFF  00,24E
36C0:  MOVLB  0
36C2:  RCALL  318A
36C4:  MOVLB  2
36C6:  BCF    FD8.1
36C8:  MOVFF  24D,251
36CC:  MOVFF  24C,250
36D0:  MOVFF  24B,24F
36D4:  MOVFF  24A,24E
36D8:  CLRF   x55
36DA:  CLRF   x54
36DC:  CLRF   x53
36DE:  MOVLW  0A
36E0:  MOVWF  x52
36E2:  MOVLB  0
36E4:  CALL   14BE
36E8:  MOVFF  03,24D
36EC:  MOVFF  02,24C
36F0:  MOVFF  01,24B
36F4:  MOVFF  00,24A
36F8:  MOVLB  2
36FA:  DECFSZ x48,F
36FC:  BRA    35F6
36FE:  MOVLB  0
3700:  GOTO   3758 (RETURN)
*
37A8:  TBLRD*+
37AA:  MOVF   FF5,F
37AC:  BZ    37C6
37AE:  MOVFF  FF6,22C
37B2:  MOVFF  FF7,22D
37B6:  MOVFF  FF5,24E
37BA:  RCALL  318A
37BC:  MOVFF  22C,FF6
37C0:  MOVFF  22D,FF7
37C4:  BRA    37A8
37C6:  GOTO   4CD4 (RETURN)
*
38AA:  MOVF   FEF,F
38AC:  BZ    38CC
38AE:  MOVFF  FEA,22D
38B2:  MOVFF  FE9,22C
38B6:  MOVFF  FEF,24E
38BA:  RCALL  318A
38BC:  MOVFF  22D,FEA
38C0:  MOVFF  22C,FE9
38C4:  INCF   FE9,F
38C6:  BTFSC  FD8.2
38C8:  INCF   FEA,F
38CA:  BRA    38AA
38CC:  GOTO   55F6 (RETURN)
*
59D0:  MOVFF  FF2,0D
59D4:  BCF    FF2.7
59D6:  ADDWF  FE8,W
59D8:  CLRF   FF7
59DA:  RLCF   FF7,F
59DC:  ADDLW  F5
59DE:  MOVWF  FF6
59E0:  MOVLW  59
59E2:  ADDWFC FF7,F
59E4:  TBLRD*-
59E6:  MOVF   FF5,W
59E8:  MOVWF  FFA
59EA:  TBLRD*
59EC:  MOVF   FF5,W
59EE:  BTFSC  0D.7
59F0:  BSF    FF2.7
59F2:  MOVWF  FF9
59F4:  DATA 84,45
59F6:  DATA B4,44
59F8:  DATA C2,43
59FA:  DATA A0,46
59FC:  DATA 9A,46
59FE:  DATA FC,41
5A00:  DATA A0,46
5A02:  DATA A0,46
5A04:  DATA A0,46
5A06:  DATA A0,46
5A08:  DATA A0,46
5A0A:  DATA 8A,46
5A0C:  DATA A0,46
5A0E:  DATA A0,46
5A10:  DATA A0,46
5A12:  DATA 9C,40
*
60FC:  MOVLB  2
60FE:  BTFSC  x09.7
6100:  BRA    6126
6102:  MOVLW  0F
6104:  MOVWF  00
6106:  SWAPF  x08,W
6108:  ANDWF  00,F
610A:  MOVLW  0A
610C:  SUBWF  00,W
610E:  BC    6116
6110:  MOVLW  30
6112:  ADDWF  00,F
6114:  BRA    611A
6116:  MOVF   x09,W
6118:  ADDWF  00,F
611A:  MOVFF  00,24E
611E:  MOVLB  0
6120:  CALL   318A
6124:  MOVLB  2
6126:  MOVLW  0F
6128:  ANDWF  x08,F
612A:  MOVLW  0A
612C:  SUBWF  x08,W
612E:  BC    6134
6130:  MOVLW  30
6132:  BRA    6138
6134:  BCF    x09.7
6136:  MOVF   x09,W
6138:  ADDWF  x08,F
613A:  MOVFF  208,24E
613E:  MOVLB  0
6140:  CALL   318A
6144:  RETURN 0
*
6D3A:  MOVFF  FF2,0D
6D3E:  BCF    FF2.7
6D40:  ADDWF  FE8,W
6D42:  CLRF   FF7
6D44:  RLCF   FF7,F
6D46:  ADDLW  5F
6D48:  MOVWF  FF6
6D4A:  MOVLW  6D
6D4C:  ADDWFC FF7,F
6D4E:  TBLRD*-
6D50:  MOVF   FF5,W
6D52:  MOVWF  FFA
6D54:  TBLRD*
6D56:  MOVF   FF5,W
6D58:  BTFSC  0D.7
6D5A:  BSF    FF2.7
6D5C:  MOVWF  FF9
6D5E:  DATA DE,6B
6D60:  DATA E4,6B
6D62:  DATA 16,6C
6D64:  DATA 36,6D
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0C9E:  MOVLW  04
0CA0:  MOVLB  2
0CA2:  SUBWF  x71,F
0CA4:  BNC   0CBA
0CA6:  MOVLW  02
0CA8:  MOVWF  FEA
0CAA:  MOVLW  71
0CAC:  MOVWF  FE9
0CAE:  MOVF   FEF,W
0CB0:  BZ    0CBA
0CB2:  BRA    0CB6
0CB4:  NOP   
0CB6:  DECFSZ FEF,F
0CB8:  BRA    0CB4
0CBA:  MOVLB  0
0CBC:  RETURN 0
*
0FC2:  MOVLW  02
0FC4:  MOVWF  FEA
0FC6:  MOVLW  3E
0FC8:  MOVWF  FE9
0FCA:  MOVF   FEF,W
0FCC:  BZ    0FEA
0FCE:  MOVLW  05
0FD0:  MOVWF  01
0FD2:  CLRF   00
0FD4:  DECFSZ 00,F
0FD6:  BRA    0FD4
0FD8:  DECFSZ 01,F
0FDA:  BRA    0FD2
0FDC:  MOVLW  2E
0FDE:  MOVWF  00
0FE0:  DECFSZ 00,F
0FE2:  BRA    0FE0
0FE4:  BRA    0FE6
0FE6:  DECFSZ FEF,F
0FE8:  BRA    0FCE
0FEA:  RETURN 0
.................... //#use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... #define VERSION "BA1520QTX V1.0" 
.................... #define VER 1 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           32000L       // in KHz   //was 10000 changed to 20000 1520Q 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
.................... //#define REFinMUL 		 2L 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... byte bitlow_power_level,bitpower_level;// VERSION 3.3 VP VL Change 29.02.2016 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0x2  //0010 - VOUT A 
.................... #define DAC_NEG_VOLT 0x6  //0110 - VOUT B 
.................... #define DAC_CONT_VOLT 0xA //1010 - VOUT C 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6  //was 6 yehuda 
....................  
.................... #define BINARY_STATUS_LENTGH 26 // requested be the client to be 26 bytes (16.11.16) 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... //UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... UINT  TMR_SendStatus = 0; 
.................... UCHAR  SendStatusFlag = 0; 
.................... UCHAR  TMR_StartStatus = 0; 
.................... UCHAR  StartStatusFlag = 0; 
....................  
.................... UCHAR timerTick_1ms = 0; 
....................  
....................  
....................  
.................... //#bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... //#bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... //#bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... //#bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... //#bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... //#define RS485_EN  PIN_D5 
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define I_SENSE   PIN_B4     //was LED1 
.................... #define LED1      PIN_B5     //was LED2 
....................  
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
.................... #define FPGA_RSTN PIN_C5 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
.................... 	   UINT  cont_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
....................        UINT  cot; 
....................        UINT  rc; 
....................        UINT  rp; 
....................        UCHAR UART_Time; // VERSION 3.3 UT 
....................        UCHAR UART_Status; // VERSION 3.3 US 17.03.2016 
....................        byte bitlow_power_level;// VERSION 3.3  VL Change 21.03.2016 
....................        byte bitpower_level;// VERSION 3.3 VP Change 21.03.2016 
....................        UINT	Block_per_second; // VERSION 3.3  Change 23.03.2016 Data block send speed  
....................        UINT setup_version; // the version of this specific setup 
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT revp;// VERSION 3.3 Revers Power 0-good 1-bad 
.................... SINT current_temperature; 
.................... UINT current_power;// VERSION 3.3  FFWR 02.05.16 
.................... UINT gl_current_power_level = 0; 
.................... UINT gl_current_power_en_value = 0; 
.................... SINT stay_on =0; 
.................... UINT  tx_block_len , TX_Counter = 0; 
.................... UINT  status_tx_index; 
.................... UCHAR status_buffer[BINARY_STATUS_LENTGH];  
....................  
.................... UCHAR ttccp_login = 0; 
....................  
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
.................... void COM1_send_block(UINT len);// VERSION 3.3 VP Change 21.03.2016 
.................... UINT convert_power(UINT analog);// VERSION 3.3 VP Change 30.03.2016 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5314.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5314 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5314(int8 channel, int16 level) 
.................... { 
.................... 	output_low(DA2_SYN); 
*
1130:  BCF    F89.2
.................... 	 
.................... //	if (channel) 
.................... //    output_high(DA2_DAT);    // send to VOUTB 
.................... //	else 
.................... //    output_low(DA2_DAT);    // send to VOUTA 
.................... //channel is 4 bit wide  
.................... //bit 3 - address A1 
.................... //bit 2 - address A0 
.................... //bit 1 - if 1 normal operation, if 0 power down (PD) 
.................... //bit 0 - if 1 only address input regs updated no change in the content, if 0 all updated on complition of write 
.................... 	 
.................... 	#ifdef SW_SPI 
.................... 		if(channel & 0x08)			//send bit 15 - A1 
1132:  MOVLB  2
1134:  BTFSS  x2E.3
1136:  BRA    113C
.................... 		output_high(DA2_DAT); 
1138:  BSF    F89.4
113A:  BRA    113E
.................... 		else  
.................... 		output_low(DA2_DAT); 
113C:  BCF    F89.4
.................... 		output_high(DA2_CLK);   
113E:  BSF    F89.3
.................... 		delay_cycles(15); 
1140:  MOVLW  04
1142:  MOVWF  00
1144:  DECFSZ 00,F
1146:  BRA    1144
1148:  BRA    114A
.................... 		output_low(DA2_CLK); 
114A:  BCF    F89.3
.................... 		delay_cycles(15); 
114C:  MOVLW  04
114E:  MOVWF  00
1150:  DECFSZ 00,F
1152:  BRA    1150
1154:  BRA    1156
.................... 		 
.................... 		if(channel & 0x04)			//send bit 14 - A0 
1156:  BTFSS  x2E.2
1158:  BRA    115E
.................... 		output_high(DA2_DAT); 
115A:  BSF    F89.4
115C:  BRA    1160
.................... 		else  
.................... 		output_low(DA2_DAT); 
115E:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
1160:  BSF    F89.3
.................... 		delay_cycles(15); 
1162:  MOVLW  04
1164:  MOVWF  00
1166:  DECFSZ 00,F
1168:  BRA    1166
116A:  BRA    116C
.................... 		output_low(DA2_CLK); 
116C:  BCF    F89.3
.................... 		delay_cycles(15); 
116E:  MOVLW  04
1170:  MOVWF  00
1172:  DECFSZ 00,F
1174:  BRA    1172
1176:  BRA    1178
.................... 		 
.................... 		if(channel & 0x02)			//send bit 13 - PD - if 1 normal operation, if 0 power down (PD) 
1178:  BTFSS  x2E.1
117A:  BRA    1180
.................... 		output_high(DA2_DAT); 
117C:  BSF    F89.4
117E:  BRA    1182
.................... 		else  
.................... 		output_low(DA2_DAT); 
1180:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
1182:  BSF    F89.3
.................... 		delay_cycles(15); 
1184:  MOVLW  04
1186:  MOVWF  00
1188:  DECFSZ 00,F
118A:  BRA    1188
118C:  BRA    118E
.................... 		output_low(DA2_CLK); 
118E:  BCF    F89.3
.................... 		delay_cycles(15); 
1190:  MOVLW  04
1192:  MOVWF  00
1194:  DECFSZ 00,F
1196:  BRA    1194
1198:  BRA    119A
.................... 		 
.................... 		if(channel & 0x01)			//send bit 12 - LDAC - if 1 only address input regs updated no change in the content, if 0 all updated on complition of write 
119A:  BTFSS  x2E.0
119C:  BRA    11A2
.................... 		output_high(DA2_DAT); 
119E:  BSF    F89.4
11A0:  BRA    11A4
.................... 		else  
.................... 		output_low(DA2_DAT); 
11A2:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
11A4:  BSF    F89.3
.................... 		delay_cycles(15); 
11A6:  MOVLW  04
11A8:  MOVWF  00
11AA:  DECFSZ 00,F
11AC:  BRA    11AA
11AE:  BRA    11B0
.................... 		output_low(DA2_CLK); 
11B0:  BCF    F89.3
.................... 		delay_cycles(15); 
11B2:  MOVLW  04
11B4:  MOVWF  00
11B6:  DECFSZ 00,F
11B8:  BRA    11B6
11BA:  BRA    11BC
.................... 		 
.................... 		 
.................... 		output_high(DA2_CLK);    	//send bit 11 DATA 
11BC:  BSF    F89.3
.................... 		if (level & 0x0200) 
11BE:  ANDLW  00
11C0:  MOVWF  00
11C2:  MOVF   x30,W
11C4:  ANDLW  02
11C6:  MOVWF  03
11C8:  MOVF   00,W
11CA:  IORWF  03,W
11CC:  BZ    11D2
.................... 		output_high(DA2_DAT); 
11CE:  BSF    F89.4
11D0:  BRA    11D4
.................... 		else 
.................... 		output_low(DA2_DAT); 
11D2:  BCF    F89.4
.................... 		delay_cycles(15); 
11D4:  MOVLW  04
11D6:  MOVWF  00
11D8:  DECFSZ 00,F
11DA:  BRA    11D8
11DC:  BRA    11DE
.................... 		output_low(DA2_CLK); 
11DE:  BCF    F89.3
.................... 		delay_cycles(15); 
11E0:  MOVLW  04
11E2:  MOVWF  00
11E4:  DECFSZ 00,F
11E6:  BRA    11E4
11E8:  BRA    11EA
.................... 		 
.................... 		output_high(DA2_CLK);  		//send bit 10 DATA 
11EA:  BSF    F89.3
.................... 		if (level & 0x0100) 
11EC:  ANDLW  00
11EE:  MOVWF  00
11F0:  MOVF   x30,W
11F2:  ANDLW  01
11F4:  MOVWF  03
11F6:  MOVF   00,W
11F8:  IORWF  03,W
11FA:  BZ    1200
.................... 		output_high(DA2_DAT); 
11FC:  BSF    F89.4
11FE:  BRA    1202
.................... 		else 
.................... 		output_low(DA2_DAT); 
1200:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
1202:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 9 DATA 
1204:  BSF    F89.3
.................... 		if (level & 0x0080) 
1206:  MOVF   x2F,W
1208:  ANDLW  80
120A:  MOVWF  00
120C:  CLRF   03
120E:  MOVF   00,W
1210:  IORWF  03,W
1212:  BZ    1218
.................... 		output_high(DA2_DAT); 
1214:  BSF    F89.4
1216:  BRA    121A
.................... 		else 
.................... 		output_low(DA2_DAT); 
1218:  BCF    F89.4
.................... 		delay_cycles(15); 
121A:  MOVLW  04
121C:  MOVWF  00
121E:  DECFSZ 00,F
1220:  BRA    121E
1222:  BRA    1224
.................... 		output_low(DA2_CLK); 
1224:  BCF    F89.3
.................... 		delay_cycles(15); 
1226:  MOVLW  04
1228:  MOVWF  00
122A:  DECFSZ 00,F
122C:  BRA    122A
122E:  BRA    1230
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 8 DATA 
1230:  BSF    F89.3
.................... 		if (level & 0x0040) 
1232:  MOVF   x2F,W
1234:  ANDLW  40
1236:  MOVWF  00
1238:  CLRF   03
123A:  MOVF   00,W
123C:  IORWF  03,W
123E:  BZ    1244
.................... 		output_high(DA2_DAT); 
1240:  BSF    F89.4
1242:  BRA    1246
.................... 		else 
.................... 		output_low(DA2_DAT); 
1244:  BCF    F89.4
.................... 		delay_cycles(15); 
1246:  MOVLW  04
1248:  MOVWF  00
124A:  DECFSZ 00,F
124C:  BRA    124A
124E:  BRA    1250
.................... 		output_low(DA2_CLK); 
1250:  BCF    F89.3
.................... 		delay_cycles(15); 
1252:  MOVLW  04
1254:  MOVWF  00
1256:  DECFSZ 00,F
1258:  BRA    1256
125A:  BRA    125C
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 7 DATA 
125C:  BSF    F89.3
.................... 		if (level & 0x0020) 
125E:  MOVF   x2F,W
1260:  ANDLW  20
1262:  MOVWF  00
1264:  CLRF   03
1266:  MOVF   00,W
1268:  IORWF  03,W
126A:  BZ    1270
.................... 		output_high(DA2_DAT); 
126C:  BSF    F89.4
126E:  BRA    1272
.................... 		else 
.................... 		output_low(DA2_DAT); 
1270:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
1272:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 6 DATA 
1274:  BSF    F89.3
.................... 		if (level & 0x0010) 
1276:  MOVF   x2F,W
1278:  ANDLW  10
127A:  MOVWF  00
127C:  CLRF   03
127E:  MOVF   00,W
1280:  IORWF  03,W
1282:  BZ    1288
.................... 		output_high(DA2_DAT); 
1284:  BSF    F89.4
1286:  BRA    128A
.................... 		else 
.................... 		output_low(DA2_DAT); 
1288:  BCF    F89.4
.................... 		delay_cycles(15); 
128A:  MOVLW  04
128C:  MOVWF  00
128E:  DECFSZ 00,F
1290:  BRA    128E
1292:  BRA    1294
.................... 		output_low(DA2_CLK); 
1294:  BCF    F89.3
.................... 		delay_cycles(15); 
1296:  MOVLW  04
1298:  MOVWF  00
129A:  DECFSZ 00,F
129C:  BRA    129A
129E:  BRA    12A0
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 5 DATA 
12A0:  BSF    F89.3
.................... 		if (level & 0x0008) 
12A2:  MOVF   x2F,W
12A4:  ANDLW  08
12A6:  MOVWF  00
12A8:  CLRF   03
12AA:  MOVF   00,W
12AC:  IORWF  03,W
12AE:  BZ    12B4
.................... 		output_high(DA2_DAT); 
12B0:  BSF    F89.4
12B2:  BRA    12B6
.................... 		else 
.................... 		output_low(DA2_DAT); 
12B4:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
12B6:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 4 DATA 
12B8:  BSF    F89.3
.................... 		if (level & 0x0004) 
12BA:  MOVF   x2F,W
12BC:  ANDLW  04
12BE:  MOVWF  00
12C0:  CLRF   03
12C2:  MOVF   00,W
12C4:  IORWF  03,W
12C6:  BZ    12CC
.................... 		output_high(DA2_DAT); 
12C8:  BSF    F89.4
12CA:  BRA    12CE
.................... 		else 
.................... 		output_low(DA2_DAT); 
12CC:  BCF    F89.4
.................... 		delay_cycles(15); 
12CE:  MOVLW  04
12D0:  MOVWF  00
12D2:  DECFSZ 00,F
12D4:  BRA    12D2
12D6:  BRA    12D8
.................... 		output_low(DA2_CLK); 
12D8:  BCF    F89.3
.................... 		delay_cycles(15); 
12DA:  MOVLW  04
12DC:  MOVWF  00
12DE:  DECFSZ 00,F
12E0:  BRA    12DE
12E2:  BRA    12E4
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 3 DATA 
12E4:  BSF    F89.3
.................... 		if (level & 0x0002) 
12E6:  MOVF   x2F,W
12E8:  ANDLW  02
12EA:  MOVWF  00
12EC:  CLRF   03
12EE:  MOVF   00,W
12F0:  IORWF  03,W
12F2:  BZ    12F8
.................... 		output_high(DA2_DAT); 
12F4:  BSF    F89.4
12F6:  BRA    12FA
.................... 		else 
.................... 		output_low(DA2_DAT); 
12F8:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
12FA:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 2 DATA 
12FC:  BSF    F89.3
.................... 		if (level & 0x0001) 
12FE:  MOVF   x2F,W
1300:  ANDLW  01
1302:  MOVWF  00
1304:  CLRF   03
1306:  MOVF   00,W
1308:  IORWF  03,W
130A:  BZ    1310
.................... 		output_high(DA2_DAT); 
130C:  BSF    F89.4
130E:  BRA    1312
.................... 		else 
.................... 		output_low(DA2_DAT); 
1310:  BCF    F89.4
.................... 		delay_cycles(15); 
1312:  MOVLW  04
1314:  MOVWF  00
1316:  DECFSZ 00,F
1318:  BRA    1316
131A:  BRA    131C
.................... 		output_low(DA2_CLK); 
131C:  BCF    F89.3
.................... 		delay_cycles(15); 
131E:  MOVLW  04
1320:  MOVWF  00
1322:  DECFSZ 00,F
1324:  BRA    1322
1326:  BRA    1328
.................... 		 
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 1 X dont care 
1328:  BSF    F89.3
.................... 		delay_cycles(15); 
132A:  MOVLW  04
132C:  MOVWF  00
132E:  DECFSZ 00,F
1330:  BRA    132E
1332:  BRA    1334
.................... 		output_low(DA2_CLK); 
1334:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 0 X dont care 
1336:  BSF    F89.3
.................... 		delay_cycles(15); 
1338:  MOVLW  04
133A:  MOVWF  00
133C:  DECFSZ 00,F
133E:  BRA    133C
1340:  BRA    1342
.................... 		delay_cycles(15); 
1342:  MOVLW  04
1344:  MOVWF  00
1346:  DECFSZ 00,F
1348:  BRA    1346
134A:  BRA    134C
.................... 		output_low(DA2_CLK); 
134C:  BCF    F89.3
.................... 		delay_cycles(15); 
134E:  MOVLW  04
1350:  MOVWF  00
1352:  DECFSZ 00,F
1354:  BRA    1352
1356:  BRA    1358
.................... 		#else						//this else is for #ifdef SW_SPI above   
.................... 		level = (level << 2) | 0x8000; 
.................... 		SPI2BUF = (AD5314,make8(level,1)); 
.................... 		delay_cycles(15); 
.................... 		SPI2BUF = (AD5314,make8(level,0)); 
.................... 		delay_cycles(15); 
.................... 	#endif 
.................... 	 
.................... 	output_high(DA2_SYN); 
1358:  BSF    F89.2
.................... 	delay_cycles(15); 
135A:  MOVLW  04
135C:  MOVWF  00
135E:  DECFSZ 00,F
1360:  BRA    135E
1362:  BRA    1364
.................... 	output_low(DA2_LAT); 
1364:  BCF    F89.1
.................... 	delay_cycles(15); 
1366:  MOVLW  04
1368:  MOVWF  00
136A:  DECFSZ 00,F
136C:  BRA    136A
136E:  BRA    1370
.................... 	output_high(DA2_LAT); 
1370:  BSF    F89.1
.................... 	delay_cycles(15); 
1372:  MOVLW  04
1374:  MOVWF  00
1376:  DECFSZ 00,F
1378:  BRA    1376
137A:  BRA    137C
137C:  MOVLB  0
137E:  RETURN 0
.................... } 
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
.................... { 
.................... 	UCHAR dout, ix; 
.................... 	output_low(D2A_CSB); 
*
6438:  BCF    F8A.1
.................... 	addr |= 0x80; 
643A:  MOVLB  2
643C:  BSF    x08.7
.................... 	for (ix = 0; ix < 8; ix++, addr <<= 1) 
643E:  CLRF   x0A
6440:  MOVF   x0A,W
6442:  SUBLW  07
6444:  BNC   646C
....................     { 
.................... 		output_bit(D2A_MOSI, (addr & 0x80) != 0); 
6446:  MOVF   x08,W
6448:  ANDLW  80
644A:  BNZ   6450
644C:  BCF    F8C.4
644E:  BRA    6452
6450:  BSF    F8C.4
.................... 		delay_us(1); 
6452:  BRA    6454
6454:  BRA    6456
.................... 		output_high(D2A_SCLK); 
6456:  BSF    F8C.0
.................... 		delay_us(1); 
6458:  BRA    645A
645A:  BRA    645C
.................... 		output_low(D2A_SCLK); 
645C:  BCF    F8C.0
.................... 		delay_us(1); 
645E:  BRA    6460
6460:  BRA    6462
6462:  MOVF   x0A,W
6464:  INCF   x0A,F
6466:  BCF    FD8.0
6468:  RLCF   x08,F
646A:  BRA    6440
.................... 	} 
.................... 	for (ix = 0; ix < 8; ix++) 
646C:  CLRF   x0A
646E:  MOVF   x0A,W
6470:  SUBLW  07
6472:  BNC   648E
....................     { 
.................... 		output_high(D2A_SCLK); 
6474:  BSF    F8C.0
.................... 		delay_us(1); 
6476:  BRA    6478
6478:  BRA    647A
.................... 		output_low(D2A_SCLK); 
647A:  BCF    F8C.0
.................... 		delay_us(1); 
647C:  BRA    647E
647E:  BRA    6480
.................... 		dout <<= 1; 
6480:  BCF    FD8.0
6482:  RLCF   x09,F
.................... 		if (input(D2A_MISO)) 
6484:  BTFSS  F83.1
6486:  BRA    648A
.................... 		dout |= 1; 
6488:  BSF    x09.0
648A:  INCF   x0A,F
648C:  BRA    646E
.................... 	} 
.................... 	output_high(D2A_CSB); 
648E:  BSF    F8A.1
.................... 	return dout; 
6490:  MOVFF  209,01
6494:  MOVLB  0
6496:  GOTO   68F2 (RETURN)
.................... } 
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
.................... { 
.................... 	UCHAR dout, ix; 
.................... 	output_low(D2A_CSB); 
*
5B7C:  BCF    F8A.1
.................... 	//  addr |= 0x80; 
.................... 	for (ix = 0; ix < 8; ix++, addr <<= 1) 
5B7E:  MOVLB  2
5B80:  CLRF   x0B
5B82:  MOVF   x0B,W
5B84:  SUBLW  07
5B86:  BNC   5BAE
....................     { 
.................... 		output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5B88:  MOVF   x08,W
5B8A:  ANDLW  80
5B8C:  BNZ   5B92
5B8E:  BCF    F8C.4
5B90:  BRA    5B94
5B92:  BSF    F8C.4
.................... 		delay_us(1); 
5B94:  BRA    5B96
5B96:  BRA    5B98
.................... 		output_high(D2A_SCLK); 
5B98:  BSF    F8C.0
.................... 		delay_us(1); 
5B9A:  BRA    5B9C
5B9C:  BRA    5B9E
.................... 		output_low(D2A_SCLK); 
5B9E:  BCF    F8C.0
.................... 		delay_us(1); 
5BA0:  BRA    5BA2
5BA2:  BRA    5BA4
5BA4:  MOVF   x0B,W
5BA6:  INCF   x0B,F
5BA8:  BCF    FD8.0
5BAA:  RLCF   x08,F
5BAC:  BRA    5B82
.................... 	} 
.................... 	for (ix = 0; ix < 8; ix++, din <<= 1) 
5BAE:  CLRF   x0B
5BB0:  MOVF   x0B,W
5BB2:  SUBLW  07
5BB4:  BNC   5BDC
....................     { 
.................... 		output_bit(D2A_MOSI, (din & 0x80) != 0); 
5BB6:  MOVF   x09,W
5BB8:  ANDLW  80
5BBA:  BNZ   5BC0
5BBC:  BCF    F8C.4
5BBE:  BRA    5BC2
5BC0:  BSF    F8C.4
.................... 		delay_us(1); 
5BC2:  BRA    5BC4
5BC4:  BRA    5BC6
.................... 		output_high(D2A_SCLK); 
5BC6:  BSF    F8C.0
.................... 		delay_us(1); 
5BC8:  BRA    5BCA
5BCA:  BRA    5BCC
.................... 		output_low(D2A_SCLK); 
5BCC:  BCF    F8C.0
.................... 		delay_us(1); 
5BCE:  BRA    5BD0
5BD0:  BRA    5BD2
5BD2:  MOVF   x0B,W
5BD4:  INCF   x0B,F
5BD6:  BCF    FD8.0
5BD8:  RLCF   x09,F
5BDA:  BRA    5BB0
.................... 	} 
.................... 	output_high(D2A_CSB); 
5BDC:  BSF    F8A.1
.................... 	return dout; 
5BDE:  MOVFF  20A,01
5BE2:  MOVLB  0
5BE4:  RETURN 0
.................... } 
....................  
....................  
.................... #include "ADRF6703.c" 
.................... /* 
.................... 	REGISTERS FRO PLL ADF4350: 
.................... 	Flow= 2185MHz 
.................... 	Fhigh=2400MHz 
.................... 	Steps: 100KHz 
.................... 	Ref : 10MHz 
.................... 	Phase Detector: 10MHz 
.................... 	 
.................... 	REG0 = Calculated 
.................... 	REG1= Calculated 
.................... 	REG2=0x000002 
.................... 	REG3=0x70000b 
.................... 	REG4=0x02a7a4 
.................... 	REG5=0x0000e5 
.................... 	REG6=0x0000e5 
.................... 	REG7=0x1edd06 
.................... 	REg8=0x000007 
.................... 	 
.................... 	Examples for REG0, REG1: 
.................... 	2185MHz 
.................... 	REG0:DA8000 
.................... 	REG1: 8008191 
.................... 	 
.................... 	2300MHz 
.................... 	REG0:E60000 
.................... 	REG1: 8008191 
.................... 	 
.................... */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... //ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... ULONG  PLL_int, PLL_frac, PLL_mod; 
.................... /* 
.................... 	#define PLL_CLK       PIN_C2 
.................... 	#define PLL_DAT       PIN_C3 
.................... 	#define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
.................... { 
.................... 	UCHAR count; 
.................... 	for (count = 8; count ; count--, data <<= 1) 
*
1790:  MOVLW  08
1792:  MOVLB  2
1794:  MOVWF  x38
1796:  MOVF   x38,F
1798:  BZ    17D6
....................     { 
.................... 		if (data & 0X80)                 
179A:  BTFSS  x37.7
179C:  BRA    17A2
.................... 		output_high(PLL_DAT); 
179E:  BSF    F8B.3
17A0:  BRA    17A4
.................... 		else 
.................... 		output_low(PLL_DAT); 
17A2:  BCF    F8B.3
.................... 		delay_us(10); 
17A4:  MOVLW  0C
17A6:  MOVWF  00
17A8:  DECFSZ 00,F
17AA:  BRA    17A8
17AC:  BRA    17AE
17AE:  NOP   
.................... 		output_high(PLL_CLK); 
17B0:  BSF    F8B.2
.................... 		delay_us(10); 
17B2:  MOVLW  0C
17B4:  MOVWF  00
17B6:  DECFSZ 00,F
17B8:  BRA    17B6
17BA:  BRA    17BC
17BC:  NOP   
.................... 		output_low(PLL_CLK); 
17BE:  BCF    F8B.2
.................... 		 
.................... 		delay_us(25); 
17C0:  MOVLW  20
17C2:  MOVWF  00
17C4:  DECFSZ 00,F
17C6:  BRA    17C4
17C8:  BRA    17CA
17CA:  NOP   
17CC:  MOVF   x38,W
17CE:  DECF   x38,F
17D0:  BCF    FD8.0
17D2:  RLCF   x37,F
17D4:  BRA    1796
.................... 	} 
.................... 	output_low(PLL_DAT); 
17D6:  BCF    F8B.3
.................... 	output_low(PLL_CLK); 
17D8:  BCF    F8B.2
17DA:  MOVLB  0
17DC:  RETURN 0
.................... } 
....................  
.................... void PLL_send_word(ULONG prog) 
.................... { 
.................... 	restart_wdt(); 
17DE:  CLRWDT
.................... 	disable_interrupts(GLOBAL); 
17E0:  BCF    FF2.6
17E2:  BCF    FF2.7
17E4:  BTFSC  FF2.7
17E6:  BRA    17E2
.................... 	//PLL_send_bits(make8(prog, 3));               // send LSB 
.................... 	PLL_send_bits(make8(prog, 2));               // send LSB 
17E8:  MOVFF  234,236
17EC:  MOVFF  234,237
17F0:  RCALL  1790
.................... 	PLL_send_bits(make8(prog, 1));               // send middle byte 
17F2:  MOVFF  233,236
17F6:  MOVFF  233,237
17FA:  RCALL  1790
.................... 	PLL_send_bits(make8(prog, 0));               // send MSB 
17FC:  MOVFF  232,236
1800:  MOVFF  232,237
1804:  RCALL  1790
.................... 	delay_us(40); 
1806:  MOVLW  34
1808:  MOVWF  00
180A:  DECFSZ 00,F
180C:  BRA    180A
180E:  BRA    1810
1810:  NOP   
.................... 	output_high(PLL_LAT);                 // latch 24 bits into register 
1812:  BSF    F8B.1
.................... 	delay_us(5); 
1814:  MOVLW  06
1816:  MOVWF  00
1818:  DECFSZ 00,F
181A:  BRA    1818
181C:  NOP   
.................... 	output_low(PLL_LAT);                 // latch 24 bits into register 
181E:  BCF    F8B.1
.................... 	output_low(PLL_DAT);                 // latch 24 bits into register 
1820:  BCF    F8B.3
.................... 	enable_interrupts(GLOBAL); 
1822:  MOVLW  C0
1824:  IORWF  FF2,F
.................... 	restart_wdt(); 
1826:  CLRWDT
1828:  RETURN 0
.................... } 
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... //const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
.................... //const ULONG PLL_REGISTERS[8] = { 0x0001e0L, 0x003201L, 0x000002L, 0x70000bL, 0x02a7a4L, 0x0000e5L, 0x1edd06L, 0x000007L }; 
.................... const ULONG PLL_REGISTERS[8] = { 0x0001c8L, 0x000c81L, 0x000642L, 0x70000bL, 0x02a7a4L, 0x0000e5L, 0x1edd06L, 0x000007L }; 
....................  
.................... void PLL_initialize(void) 
.................... { 
.................... 	ULONG prog; 
.................... 	UCHAR idx, count; 
.................... 	for (count = 0, idx = 7; count < 8; count++, idx--) 
*
2194:  MOVLB  1
2196:  CLRF   xBD
2198:  MOVLW  07
219A:  MOVWF  xBC
219C:  MOVF   xBD,W
219E:  SUBLW  07
21A0:  BNC   2212
....................     { 
.................... 		prog = PLL_REGISTERS[idx]; 
21A2:  MOVF   xBC,W
21A4:  MULLW  04
21A6:  MOVF   FF3,W
21A8:  CLRF   03
21AA:  MOVFF  FF2,1BE
21AE:  BCF    FF2.7
21B0:  MOVLB  0
21B2:  CALL   00D2
21B6:  TBLRD*+
21B8:  MOVFF  FF5,01
21BC:  TBLRD*+
21BE:  MOVFF  FF5,02
21C2:  TBLRD*+
21C4:  MOVFF  FF5,03
21C8:  MOVLB  1
21CA:  BTFSC  xBE.7
21CC:  BSF    FF2.7
21CE:  MOVFF  03,1BB
21D2:  MOVFF  02,1BA
21D6:  MOVFF  01,1B9
21DA:  MOVWF  xB8
.................... 		prog |= (ULONG)idx; 
21DC:  CLRF   01
21DE:  CLRF   02
21E0:  CLRF   03
21E2:  MOVF   xBC,W
21E4:  IORWF  xB8,F
21E6:  MOVF   01,W
21E8:  IORWF  xB9,F
21EA:  MOVF   02,W
21EC:  IORWF  xBA,F
21EE:  MOVF   03,W
21F0:  IORWF  xBB,F
.................... 		PLL_send_word(prog); 
21F2:  MOVFF  1BB,235
21F6:  MOVFF  1BA,234
21FA:  MOVFF  1B9,233
21FE:  MOVFF  1B8,232
2202:  MOVLB  0
2204:  CALL   17DE
2208:  MOVLB  1
220A:  MOVF   xBD,W
220C:  INCF   xBD,F
220E:  DECF   xBC,F
2210:  BRA    219C
.................... 	} 
.................... 	delay_ms(250); 
2212:  MOVLW  FA
2214:  MOVLB  2
2216:  MOVWF  x3E
2218:  MOVLB  0
221A:  CALL   0FC2
.................... 	PLL_send_word(prog); 
221E:  MOVFF  1BB,235
2222:  MOVFF  1BA,234
2226:  MOVFF  1B9,233
222A:  MOVFF  1B8,232
222E:  CALL   17DE
.................... 	delay_ms(250); 
2232:  MOVLW  FA
2234:  MOVLB  2
2236:  MOVWF  x3E
2238:  MOVLB  0
223A:  CALL   0FC2
223E:  GOTO   6EC2 (RETURN)
.................... } 
....................  
.................... //--------- frequency computation functions -------------------- 
.................... //the ADRF software use clock 38.4 clock, here i use 20.0 clock 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
*
1552:  MOVLB  2
1554:  CLRF   x3F
1556:  CLRF   x3E
1558:  CLRF   x3D
155A:  MOVLW  02
155C:  MOVWF  x3C
.................... { 
.................... 	ULONG Fvco, D, RFdiv = 2; 
.................... 	restart_wdt(); 
155E:  CLRWDT
.................... 	D = Frequest; 
1560:  CLRF   x3B
1562:  CLRF   x3A
1564:  MOVFF  233,239
1568:  MOVFF  232,238
.................... 	if (Frequest >= 22000) 
156C:  MOVF   x33,W
156E:  SUBLW  54
1570:  BC    1586
1572:  XORLW  FF
1574:  BNZ   157C
1576:  MOVF   x32,W
1578:  SUBLW  EF
157A:  BC    1586
....................     { 
.................... 		RFdiv = 1; 
157C:  CLRF   x3F
157E:  CLRF   x3E
1580:  CLRF   x3D
1582:  MOVLW  01
1584:  MOVWF  x3C
.................... 	} 
.................... 	restart_wdt(); 
1586:  CLRWDT
.................... 	D = D * RFdiv * FREQ_STEP; 
1588:  MOVFF  23B,247
158C:  MOVFF  23A,246
1590:  MOVFF  239,245
1594:  MOVFF  238,244
1598:  MOVFF  23F,24B
159C:  MOVFF  23E,24A
15A0:  MOVFF  23D,249
15A4:  MOVFF  23C,248
15A8:  MOVLB  0
15AA:  RCALL  1462
15AC:  MOVFF  03,243
15B0:  MOVFF  02,242
15B4:  MOVFF  01,241
15B8:  MOVFF  00,240
15BC:  MOVFF  03,247
15C0:  MOVFF  02,246
15C4:  MOVFF  01,245
15C8:  MOVFF  00,244
15CC:  MOVLB  2
15CE:  CLRF   x4B
15D0:  CLRF   x4A
15D2:  CLRF   x49
15D4:  MOVLW  64
15D6:  MOVWF  x48
15D8:  MOVLB  0
15DA:  RCALL  1462
15DC:  MOVFF  03,23B
15E0:  MOVFF  02,23A
15E4:  MOVFF  01,239
15E8:  MOVFF  00,238
.................... 	restart_wdt(); 
15EC:  CLRWDT
.................... 	PLL_int = D / FREQ_OSC; 
15EE:  BCF    FD8.1
15F0:  MOVFF  23B,251
15F4:  MOVFF  23A,250
15F8:  MOVFF  239,24F
15FC:  MOVFF  238,24E
1600:  MOVLB  2
1602:  CLRF   x55
1604:  CLRF   x54
1606:  MOVLW  7D
1608:  MOVWF  x53
160A:  CLRF   x52
160C:  MOVLB  0
160E:  RCALL  14BE
1610:  MOVFF  03,138
1614:  MOVFF  02,137
1618:  MOVFF  01,136
161C:  MOVFF  00,135
.................... 	restart_wdt(); 
1620:  CLRWDT
.................... 	PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
1622:  MOVFF  138,247
1626:  MOVFF  137,246
162A:  MOVFF  136,245
162E:  MOVFF  135,244
1632:  MOVLB  2
1634:  CLRF   x4B
1636:  CLRF   x4A
1638:  MOVLW  7D
163A:  MOVWF  x49
163C:  CLRF   x48
163E:  MOVLB  0
1640:  RCALL  1462
1642:  MOVF   00,W
1644:  MOVLB  2
1646:  SUBWF  x38,W
1648:  MOVWF  x40
164A:  MOVF   01,W
164C:  SUBWFB x39,W
164E:  MOVWF  x41
1650:  MOVF   02,W
1652:  SUBWFB x3A,W
1654:  MOVWF  x42
1656:  MOVF   03,W
1658:  SUBWFB x3B,W
165A:  MOVWF  x43
165C:  CLRF   x47
165E:  CLRF   x46
1660:  CLRF   x45
1662:  MOVLW  64
1664:  MOVWF  x44
1666:  MOVFF  23F,24B
166A:  MOVFF  23E,24A
166E:  MOVFF  23D,249
1672:  MOVFF  23C,248
1676:  MOVLB  0
1678:  RCALL  1462
167A:  MOVFF  03,247
167E:  MOVFF  02,246
1682:  MOVFF  01,245
1686:  MOVFF  00,244
168A:  BCF    FD8.1
168C:  MOVFF  243,251
1690:  MOVFF  242,250
1694:  MOVFF  241,24F
1698:  MOVFF  240,24E
169C:  MOVFF  03,255
16A0:  MOVFF  02,254
16A4:  MOVFF  01,253
16A8:  MOVFF  00,252
16AC:  RCALL  14BE
16AE:  MOVFF  03,13C
16B2:  MOVFF  02,13B
16B6:  MOVFF  01,13A
16BA:  MOVFF  00,139
.................... 	PLL_mod = (FREQ_MOD << 3) + 1L; 
16BE:  BCF    FD8.1
16C0:  MOVLB  2
16C2:  CLRF   x51
16C4:  CLRF   x50
16C6:  MOVLW  01
16C8:  MOVWF  x4F
16CA:  MOVLW  40
16CC:  MOVWF  x4E
16CE:  MOVFF  23F,255
16D2:  MOVFF  23E,254
16D6:  MOVFF  23D,253
16DA:  MOVFF  23C,252
16DE:  MOVLB  0
16E0:  RCALL  14BE
16E2:  MOVFF  03,243
16E6:  MOVFF  02,242
16EA:  MOVFF  01,241
16EE:  MOVFF  00,240
16F2:  MOVLB  2
16F4:  RLCF   x40,F
16F6:  RLCF   x41,F
16F8:  RLCF   x42,F
16FA:  RLCF   x43,F
16FC:  RLCF   x40,F
16FE:  RLCF   x41,F
1700:  RLCF   x42,F
1702:  RLCF   x43,F
1704:  RLCF   x40,F
1706:  RLCF   x41,F
1708:  RLCF   x42,F
170A:  RLCF   x43,F
170C:  MOVLW  F8
170E:  ANDWF  x40,F
1710:  MOVLW  01
1712:  ADDWF  x40,W
1714:  MOVLB  1
1716:  MOVWF  x3D
1718:  MOVLW  00
171A:  MOVLB  2
171C:  ADDWFC x41,W
171E:  MOVLB  1
1720:  MOVWF  x3E
1722:  MOVLW  00
1724:  MOVLB  2
1726:  ADDWFC x42,W
1728:  MOVLB  1
172A:  MOVWF  x3F
172C:  MOVLW  00
172E:  MOVLB  2
1730:  ADDWFC x43,W
1732:  MOVLB  1
1734:  MOVWF  x40
.................... 	restart_wdt(); 
1736:  CLRWDT
.................... 	PLL_int *= 8L; 
1738:  RLCF   x35,F
173A:  RLCF   x36,F
173C:  RLCF   x37,F
173E:  RLCF   x38,F
1740:  RLCF   x35,F
1742:  RLCF   x36,F
1744:  RLCF   x37,F
1746:  RLCF   x38,F
1748:  RLCF   x35,F
174A:  RLCF   x36,F
174C:  RLCF   x37,F
174E:  RLCF   x38,F
1750:  MOVLW  F8
1752:  ANDWF  x35,F
.................... 	PLL_frac *= 8L; 
1754:  RLCF   x39,F
1756:  RLCF   x3A,F
1758:  RLCF   x3B,F
175A:  RLCF   x3C,F
175C:  RLCF   x39,F
175E:  RLCF   x3A,F
1760:  RLCF   x3B,F
1762:  RLCF   x3C,F
1764:  RLCF   x39,F
1766:  RLCF   x3A,F
1768:  RLCF   x3B,F
176A:  RLCF   x3C,F
176C:  ANDWF  x39,F
.................... 	PLL_frac += 2L; 
176E:  MOVLW  02
1770:  ADDWF  x39,F
1772:  MOVLW  00
1774:  ADDWFC x3A,F
1776:  ADDWFC x3B,F
1778:  ADDWFC x3C,F
.................... 	Fvco++; 
177A:  MOVLW  01
177C:  MOVLB  2
177E:  ADDWF  x34,F
1780:  BTFSC  FD8.0
1782:  INCF   x35,F
1784:  BTFSC  FD8.2
1786:  INCF   x36,F
1788:  BTFSC  FD8.2
178A:  INCF   x37,F
178C:  MOVLB  0
178E:  RETURN 0
.................... } 
....................  
....................  
.................... void PLL_update(void) 
.................... { 
.................... 	//ULONG prog; 
.................... 	restart_wdt(); 
*
182A:  CLRWDT
.................... 	PLL_send_word(PLL_int); 
182C:  MOVFF  138,235
1830:  MOVFF  137,234
1834:  MOVFF  136,233
1838:  MOVFF  135,232
183C:  RCALL  17DE
.................... 	delay_us(20); 
183E:  MOVLW  1A
1840:  MOVWF  00
1842:  DECFSZ 00,F
1844:  BRA    1842
1846:  NOP   
.................... 	restart_wdt(); 
1848:  CLRWDT
.................... 	PLL_send_word(PLL_mod); 
184A:  MOVFF  140,235
184E:  MOVFF  13F,234
1852:  MOVFF  13E,233
1856:  MOVFF  13D,232
185A:  RCALL  17DE
.................... 	delay_us(20); 
185C:  MOVLW  1A
185E:  MOVWF  00
1860:  DECFSZ 00,F
1862:  BRA    1860
1864:  NOP   
.................... 	restart_wdt(); 
1866:  CLRWDT
.................... 	PLL_send_word(PLL_frac); 
1868:  MOVFF  13C,235
186C:  MOVFF  13B,234
1870:  MOVFF  13A,233
1874:  MOVFF  139,232
1878:  RCALL  17DE
187A:  RETURN 0
.................... 	 
.................... } 
....................  
.................... #separate 
.................... void PLL_reset(void) 
.................... { 
.................... 	output_low(PLL_DAT); 
.................... 	output_low(PLL_CLK); 
.................... 	delay_us(1000); 
.................... 	PLL_initialize(); 
.................... } 
....................  
....................  
....................  
.................... #include "BA1520QTX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
.................... { 
.................... 	 
.................... } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0C54:  BCF    F7E.0
0C56:  GOTO   0090
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
.................... { 
....................     timerTick_1ms = 1; 
0C5A:  MOVLW  01
0C5C:  MOVWF  30
.................... 	//    TMR_1mS_Flags = 0xFF; 
.................... 	//    TMR_1mS_Count++; 
.................... 	//    if (++TMR_1mS_Cnt >= 10) { 
.................... 	//        TMR_1mS_Cnt = 0; 
.................... 	//        TMR_10mS_Flags = 0xFF; 
.................... 	//        if (++TMR_10mS_Cnt >= 10) { 
.................... 	//            TMR_10mS_Cnt = 0; 
.................... 	//            TMR_100mS_Flags = 0xFF; 
.................... 	//            if (++TMR_100mS_Cnt >= 10) 
.................... 	//            { 
.................... 	//                TMR_100mS_Cnt = 0; 
.................... 	//                TMR_1sec_Flags = 0xFF; 
.................... 	//            } 
.................... 	//        } 
.................... 	//    } 
.................... } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0C5E:  BCF    F9E.1
0C60:  GOTO   0090
.................... #int_EXT 
.................... void  EXT_isr(void) 
.................... { 
.................... 	 
.................... } 
....................  
.................... //-------------------------------------------------------------------------- 
0C64:  BCF    FF2.1
0C66:  GOTO   0090
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
.................... { 
.................... 	 
.................... } 
....................  
.................... //-------------------------------------------------------------- 
0C6A:  BCF    FF0.0
0C6C:  GOTO   0090
.................... #int_RDA 
.................... void  RDA_isr(void) 
.................... { 
.................... 	int8 x; 
.................... 	x = RCREG1; 
0C70:  MOVFF  FAE,270
.................... 	COM1_rbuf[COM1_rxi] = x; 
0C74:  CLRF   03
0C76:  MOVF   32,W
0C78:  ADDLW  34
0C7A:  MOVWF  FE9
0C7C:  MOVLW  00
0C7E:  ADDWFC 03,W
0C80:  MOVWF  FEA
0C82:  MOVFF  270,FEF
.................... 	if (++COM1_rxi >= COM1_RX_LEN) 
0C86:  INCF   32,F
0C88:  MOVF   32,W
0C8A:  SUBLW  1F
0C8C:  BC    0C90
....................     COM1_rxi = 0; 
0C8E:  CLRF   32
.................... 	if (COM1_rcnt < COM1_RX_LEN) 
0C90:  MOVF   31,W
0C92:  SUBLW  1F
0C94:  BNC   0C98
....................     COM1_rcnt++; 
0C96:  INCF   31,F
.................... } 
....................  
0C98:  BCF    F9E.5
0C9A:  GOTO   0090
.................... #int_TBE // VERSION 3.3 17.1.2016 
.................... void TBE_isr(void) 
.................... { 
....................     disable_interrupts(int_TIMER2); 
*
0CBE:  BCF    F9D.1
....................     output_high(RS485_EN); 
0CC0:  BSF    F8C.5
....................     status_tx_index = 0; 
0CC2:  MOVLB  1
0CC4:  CLRF   x19
0CC6:  CLRF   x18
....................     while (tx_block_len--) 
0CC8:  MOVFF  115,03
0CCC:  MOVF   x14,W
0CCE:  BTFSC  FD8.2
0CD0:  DECF   x15,F
0CD2:  DECF   x14,F
0CD4:  IORWF  03,W
0CD6:  BZ    0D12
....................     { 
....................         output_high(RS485_EN); 
0CD8:  BSF    F8C.5
....................         TXREG1 = status_buffer[status_tx_index++]; 
0CDA:  MOVFF  119,03
0CDE:  MOVF   x18,W
0CE0:  INCF   x18,F
0CE2:  BTFSC  FD8.2
0CE4:  INCF   x19,F
0CE6:  MOVLB  2
0CE8:  MOVWF  x70
0CEA:  MOVLW  1A
0CEC:  ADDWF  x70,W
0CEE:  MOVWF  FE9
0CF0:  MOVLW  01
0CF2:  ADDWFC 03,W
0CF4:  MOVWF  FEA
0CF6:  MOVFF  FEF,FAD
....................         delay_us(500);  
0CFA:  MOVLW  02
0CFC:  MOVWF  x70
0CFE:  MOVLW  F9
0D00:  MOVWF  x71
0D02:  MOVLB  0
0D04:  RCALL  0C9E
0D06:  MOVLB  2
0D08:  DECFSZ x70,F
0D0A:  BRA    0CFE
....................         output_low(RS485_EN); 
0D0C:  BCF    F8C.5
0D0E:  MOVLB  1
0D10:  BRA    0CC8
.................... 	} 
....................     disable_interrupts(int_TBE);     
0D12:  BCF    F9D.4
....................     enable_interrupts(int_TIMER2); 
0D14:  BSF    F9D.1
.................... } 
....................  
....................  
....................  
0D16:  BCF    F9E.4
0D18:  MOVLB  0
0D1A:  GOTO   0090
.................... #include "BA1520QTX_serial.c" 
....................  
....................  
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 0; 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
....................  
.................... UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
.................... bit revp_status; // VERSION 3.3: 2.2.2016  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
.................... { 
.................... 	UCHAR x; 
.................... 	x = COM1_rbuf[COM1_rxo]; 
*
2AC0:  CLRF   03
2AC2:  MOVF   33,W
2AC4:  ADDLW  34
2AC6:  MOVWF  FE9
2AC8:  MOVLW  00
2ACA:  ADDWFC 03,W
2ACC:  MOVWF  FEA
2ACE:  MOVFF  FEF,1D1
.................... 	if (++COM1_rxo >= COM1_RX_LEN) 
2AD2:  INCF   33,F
2AD4:  MOVF   33,W
2AD6:  SUBLW  1F
2AD8:  BC    2ADC
....................     COM1_rxo = 0; 
2ADA:  CLRF   33
.................... 	if (COM1_rcnt) 
2ADC:  MOVF   31,F
2ADE:  BZ    2AE2
....................     COM1_rcnt--; 
2AE0:  DECF   31,F
.................... 	return x; 
2AE2:  MOVLB  1
2AE4:  MOVFF  1D1,01
2AE8:  MOVLB  0
2AEA:  RETURN 0
.................... } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
.................... { 
.................... 	UCHAR x, pos, tab_stop; 
.................... 	disable_interrupts(int_RDA); 
*
2242:  BCF    F9D.5
.................... 	output_high(RS485_EN); 
2244:  BSF    F8C.5
.................... 	delay_us(100); 
2246:  MOVLW  84
2248:  MOVWF  00
224A:  DECFSZ 00,F
224C:  BRA    224A
224E:  BRA    2250
2250:  NOP   
.................... 	pos = 0; 
2252:  MOVLB  2
2254:  CLRF   x6C
.................... 	while (*str) 
2256:  MOVFF  26A,03
225A:  MOVFF  269,FE9
225E:  MOVFF  26A,FEA
2262:  MOVF   FEF,F
2264:  BZ    22F2
....................     { 
.................... 		x = *str++; 
2266:  MOVFF  26A,03
226A:  MOVF   x69,W
226C:  INCF   x69,F
226E:  BTFSC  FD8.2
2270:  INCF   x6A,F
2272:  MOVWF  FE9
2274:  MOVFF  03,FEA
2278:  MOVFF  FEF,26B
.................... 		if (x != '\t') 
227C:  MOVF   x6B,W
227E:  SUBLW  09
2280:  BZ    22AE
.................... 		{ 
.................... 			TXREG1 = x; 
2282:  MOVFF  26B,FAD
.................... 			pos++; 
2286:  INCF   x6C,F
.................... 			delay_us(300);  
2288:  MOVLW  02
228A:  MOVWF  x6E
228C:  CLRF   16
228E:  BTFSC  FF2.7
2290:  BSF    16.7
2292:  BCF    FF2.7
2294:  MOVLW  95
2296:  MOVWF  x71
2298:  MOVLB  0
229A:  CALL   0C9E
229E:  BTFSC  16.7
22A0:  BSF    FF2.7
22A2:  MOVLB  2
22A4:  DECFSZ x6E,F
22A6:  BRA    228C
.................... 			x = RCREG1; 
22A8:  MOVFF  FAE,26B
.................... 		} 
22AC:  BRA    22F0
.................... 		else 
.................... 		{ 
.................... 			tab_stop = 32; 
22AE:  MOVLW  20
22B0:  MOVWF  x6D
.................... 			if (pos >= tab_stop) 
22B2:  MOVF   x6D,W
22B4:  SUBWF  x6C,W
22B6:  BNC   22BE
.................... 			tab_stop = pos + 2; 
22B8:  MOVLW  02
22BA:  ADDWF  x6C,W
22BC:  MOVWF  x6D
.................... 			while (pos < tab_stop) 
22BE:  MOVF   x6D,W
22C0:  SUBWF  x6C,W
22C2:  BC    22F0
.................... 			{ 
.................... 				TXREG1 = ' '; 
22C4:  MOVLW  20
22C6:  MOVWF  FAD
.................... 				pos++; 
22C8:  INCF   x6C,F
.................... 				delay_us(300); 
22CA:  MOVLW  02
22CC:  MOVWF  x6E
22CE:  CLRF   16
22D0:  BTFSC  FF2.7
22D2:  BSF    16.7
22D4:  BCF    FF2.7
22D6:  MOVLW  95
22D8:  MOVWF  x71
22DA:  MOVLB  0
22DC:  CALL   0C9E
22E0:  BTFSC  16.7
22E2:  BSF    FF2.7
22E4:  MOVLB  2
22E6:  DECFSZ x6E,F
22E8:  BRA    22CE
.................... 				x = RCREG1; 
22EA:  MOVFF  FAE,26B
22EE:  BRA    22BE
.................... 			} 
.................... 		} 
22F0:  BRA    2256
.................... 	} 
.................... 	delay_us(100); 
22F2:  MOVLW  84
22F4:  MOVWF  00
22F6:  DECFSZ 00,F
22F8:  BRA    22F6
22FA:  BRA    22FC
22FC:  NOP   
.................... 	output_low(RS485_EN); 
22FE:  BCF    F8C.5
.................... 	x = RCREG1; 
2300:  MOVFF  FAE,26B
.................... 	enable_interrupts(int_RDA); 
2304:  BSF    F9D.5
2306:  MOVLB  0
2308:  RETURN 0
.................... } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_block(UINT len) // VERSION 3.3: 17.1.2016  
.................... { 
.................... 	UCHAR pos;//, tab_stop; 
.................... 	pos = 0; 
230A:  MOVLB  1
230C:  CLRF   xBA
.................... 	tx_block_len = len ; 
230E:  MOVFF  1B9,115
2312:  MOVFF  1B8,114
.................... 	//status_tx_index = 0; 
.................... 	 
.................... 	//TXREG1 = status_buffer[0]; 
.................... 	clear_interrupt(int_TBE); 
2316:  BCF    F9E.4
.................... 	enable_interrupts(int_TBE); 
2318:  BSF    F9D.4
231A:  MOVLB  0
231C:  GOTO   2386 (RETURN)
.................... 	//TXREG1 = status_buffer[0]; 
.................... 	//output_high(RS485_EN);  
.................... } 
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
.................... { 
.................... 	ttccp_error_message[0] = 0; 
*
1010:  MOVLB  1
1012:  CLRF   x78
.................... 	COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
1014:  CLRF   31
1016:  MOVFF  31,33
101A:  MOVFF  33,32
.................... 	comm_state = COMM_INIT; 
101E:  CLRF   54
.................... 	enable_interrupts(int_RDA); 
1020:  BSF    F9D.5
1022:  MOVLB  0
1024:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
.................... { 
.................... 	return comm_buf[comm_ptr++]; 
*
2B0A:  MOVLB  1
2B0C:  MOVF   x41,W
2B0E:  INCF   x41,F
2B10:  CLRF   03
2B12:  ADDLW  56
2B14:  MOVWF  FE9
2B16:  MOVLW  00
2B18:  ADDWFC 03,W
2B1A:  MOVWF  FEA
2B1C:  CLRF   03
2B1E:  MOVFF  FEF,01
2B22:  MOVFF  03,02
2B26:  MOVLB  0
2B28:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
.................... { 
.................... 	//  skip_spc(); 
.................... 	return comm_buf[comm_ptr]; 
*
2AEC:  CLRF   03
2AEE:  MOVLB  1
2AF0:  MOVF   x41,W
2AF2:  ADDLW  56
2AF4:  MOVWF  FE9
2AF6:  MOVLW  00
2AF8:  ADDWFC 03,W
2AFA:  MOVWF  FEA
2AFC:  CLRF   03
2AFE:  MOVFF  FEF,01
2B02:  MOVFF  03,02
2B06:  MOVLB  0
2B08:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
.................... { 
.................... 	while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
*
2B2A:  CLRF   03
2B2C:  MOVLB  1
2B2E:  MOVF   x41,W
2B30:  ADDLW  56
2B32:  MOVWF  FE9
2B34:  MOVLW  00
2B36:  ADDWFC 03,W
2B38:  MOVWF  FEA
2B3A:  MOVF   FEF,F
2B3C:  BZ    2B6E
2B3E:  CLRF   03
2B40:  MOVF   x41,W
2B42:  ADDLW  56
2B44:  MOVWF  FE9
2B46:  MOVLW  00
2B48:  ADDWFC 03,W
2B4A:  MOVWF  FEA
2B4C:  MOVF   FEF,W
2B4E:  SUBLW  2C
2B50:  BZ    2B66
2B52:  CLRF   03
2B54:  MOVF   x41,W
2B56:  ADDLW  56
2B58:  MOVWF  FE9
2B5A:  MOVLW  00
2B5C:  ADDWFC 03,W
2B5E:  MOVWF  FEA
2B60:  MOVF   FEF,W
2B62:  SUBLW  20
2B64:  BNZ   2B6E
....................     comm_ptr++; 
2B66:  INCF   x41,F
2B68:  MOVLB  0
2B6A:  BRA    2B2A
2B6C:  MOVLB  1
2B6E:  MOVLB  0
2B70:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
*
2BC6:  MOVLB  2
2BC8:  CLRF   x33
2BCA:  MOVLW  01
2BCC:  MOVWF  x32
.................... { 
.................... 	SINT num, sign = 1; 
.................... 	skip_spc(); 
2BCE:  MOVLB  0
2BD0:  RCALL  2B2A
.................... 	if (comm_buf[comm_ptr]) 
2BD2:  CLRF   03
2BD4:  MOVLB  1
2BD6:  MOVF   x41,W
2BD8:  ADDLW  56
2BDA:  MOVWF  FE9
2BDC:  MOVLW  00
2BDE:  ADDWFC 03,W
2BE0:  MOVWF  FEA
2BE2:  MOVF   FEF,F
2BE4:  BZ    2C70
....................     { 
.................... 		num = 0; 
2BE6:  MOVLB  2
2BE8:  CLRF   x31
2BEA:  CLRF   x30
.................... 		if (peek_char() == '-') 
2BEC:  MOVLB  0
2BEE:  RCALL  2AEC
2BF0:  MOVFF  02,235
2BF4:  MOVFF  01,234
2BF8:  MOVLB  2
2BFA:  MOVF   01,W
2BFC:  SUBLW  2D
2BFE:  BNZ   2C0E
2C00:  MOVF   x35,F
2C02:  BNZ   2C0E
.................... 		{ 
.................... 			sign = -1; 
2C04:  SETF   x33
2C06:  SETF   x32
.................... 			get_char(); 
2C08:  MOVLB  0
2C0A:  RCALL  2B0A
2C0C:  MOVLB  2
.................... 		} 
.................... 		while (isdigit(comm_buf[comm_ptr])) 
2C0E:  CLRF   03
2C10:  MOVLB  1
2C12:  MOVF   x41,W
2C14:  ADDLW  56
2C16:  MOVWF  FE9
2C18:  MOVLW  00
2C1A:  ADDWFC 03,W
2C1C:  MOVWF  FEA
2C1E:  MOVFF  FEF,234
2C22:  MOVLB  2
2C24:  MOVF   x34,W
2C26:  SUBLW  2F
2C28:  BC    2C6E
2C2A:  MOVF   x34,W
2C2C:  SUBLW  39
2C2E:  BNC   2C6E
.................... 		num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
2C30:  MOVFF  231,235
2C34:  MOVFF  230,234
2C38:  CLRF   x37
2C3A:  MOVLW  0A
2C3C:  MOVWF  x36
2C3E:  MOVLB  0
2C40:  RCALL  2B72
2C42:  MOVFF  02,235
2C46:  MOVFF  01,234
2C4A:  MOVLB  1
2C4C:  MOVF   x41,W
2C4E:  INCF   x41,F
2C50:  CLRF   03
2C52:  ADDLW  56
2C54:  MOVWF  FE9
2C56:  MOVLW  00
2C58:  ADDWFC 03,W
2C5A:  MOVWF  FEA
2C5C:  MOVLW  30
2C5E:  SUBWF  FEF,W
2C60:  MOVLB  2
2C62:  ADDWF  01,W
2C64:  MOVWF  x30
2C66:  MOVLW  00
2C68:  ADDWFC 02,W
2C6A:  MOVWF  x31
2C6C:  BRA    2C0E
2C6E:  MOVLB  1
.................... 	} 
.................... 	//  skip_spc(); 
.................... 	return num * sign; 
2C70:  MOVFF  231,235
2C74:  MOVFF  230,234
2C78:  MOVFF  233,237
2C7C:  MOVFF  232,236
2C80:  MOVLB  0
2C82:  RCALL  2B72
2C84:  MOVFF  02,03
2C88:  MOVFF  02,02
2C8C:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
.................... { 
.................... 	ULONG num; 
.................... 	skip_spc(); 
*
6242:  CALL   2B2A
.................... 	if (comm_buf[comm_ptr]) 
6246:  CLRF   03
6248:  MOVLB  1
624A:  MOVF   x41,W
624C:  ADDLW  56
624E:  MOVWF  FE9
6250:  MOVLW  00
6252:  ADDWFC 03,W
6254:  MOVWF  FEA
6256:  MOVF   FEF,F
6258:  BZ    62E8
....................     { 
.................... 		num = 0; 
625A:  MOVLB  2
625C:  CLRF   x0B
625E:  CLRF   x0A
6260:  CLRF   x09
6262:  CLRF   x08
.................... 		while (isdigit(comm_buf[comm_ptr])) 
6264:  CLRF   03
6266:  MOVLB  1
6268:  MOVF   x41,W
626A:  ADDLW  56
626C:  MOVWF  FE9
626E:  MOVLW  00
6270:  ADDWFC 03,W
6272:  MOVWF  FEA
6274:  MOVFF  FEF,20C
6278:  MOVLB  2
627A:  MOVF   x0C,W
627C:  SUBLW  2F
627E:  BC    62E6
6280:  MOVF   x0C,W
6282:  SUBLW  39
6284:  BNC   62E6
.................... 		num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
6286:  MOVFF  20B,247
628A:  MOVFF  20A,246
628E:  MOVFF  209,245
6292:  MOVFF  208,244
6296:  CLRF   x4B
6298:  CLRF   x4A
629A:  CLRF   x49
629C:  MOVLW  0A
629E:  MOVWF  x48
62A0:  MOVLB  0
62A2:  CALL   1462
62A6:  MOVFF  03,20F
62AA:  MOVFF  02,20E
62AE:  MOVFF  01,20D
62B2:  MOVFF  00,20C
62B6:  MOVLB  1
62B8:  MOVF   x41,W
62BA:  INCF   x41,F
62BC:  CLRF   03
62BE:  ADDLW  56
62C0:  MOVWF  FE9
62C2:  MOVLW  00
62C4:  ADDWFC 03,W
62C6:  MOVWF  FEA
62C8:  MOVLW  30
62CA:  SUBWF  FEF,W
62CC:  MOVLB  2
62CE:  ADDWF  00,W
62D0:  MOVWF  x08
62D2:  MOVLW  00
62D4:  ADDWFC 01,W
62D6:  MOVWF  x09
62D8:  MOVLW  00
62DA:  ADDWFC 02,W
62DC:  MOVWF  x0A
62DE:  MOVLW  00
62E0:  ADDWFC x0F,W
62E2:  MOVWF  x0B
62E4:  BRA    6264
62E6:  MOVLB  1
.................... 	} 
.................... 	//  skip_spc(); 
.................... 	return num; 
62E8:  MOVFF  208,00
62EC:  MOVFF  209,01
62F0:  MOVFF  20A,02
62F4:  MOVFF  20B,03
62F8:  MOVLB  0
62FA:  GOTO   681A (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
.................... { 
.................... 	ULONG num; 
.................... 	UCHAR chr; 
.................... 	skip_spc(); 
*
6146:  CALL   2B2A
.................... 	if (peek_char()) 
614A:  CALL   2AEC
614E:  MOVF   01,W
6150:  IORWF  02,W
6152:  BTFSC  FD8.2
6154:  BRA    6230
....................     { 
.................... 		num = 0; 
6156:  MOVLB  2
6158:  CLRF   x0B
615A:  CLRF   x0A
615C:  CLRF   x09
615E:  CLRF   x08
.................... 		while (isxdigit(peek_char())) 
6160:  MOVLB  0
6162:  CALL   2AEC
6166:  MOVFF  02,20E
616A:  MOVFF  01,20D
616E:  MOVLB  2
6170:  MOVF   x0E,F
6172:  BNZ   617A
6174:  MOVF   x0D,W
6176:  SUBLW  2F
6178:  BC    6184
617A:  MOVF   x0E,F
617C:  BNZ   6184
617E:  MOVF   x0D,W
6180:  SUBLW  39
6182:  BC    61AC
6184:  MOVF   x0E,F
6186:  BNZ   618E
6188:  MOVF   x0D,W
618A:  SUBLW  40
618C:  BC    6198
618E:  MOVF   x0E,F
6190:  BNZ   6198
6192:  MOVF   x0D,W
6194:  SUBLW  46
6196:  BC    61AC
6198:  MOVF   x0E,F
619A:  BNZ   61A2
619C:  MOVF   x0D,W
619E:  SUBLW  60
61A0:  BC    622E
61A2:  MOVF   x0E,F
61A4:  BNZ   622E
61A6:  MOVF   x0D,W
61A8:  SUBLW  66
61AA:  BNC   622E
.................... 		{ 
.................... 			chr = get_char(); 
61AC:  MOVLB  0
61AE:  CALL   2B0A
61B2:  MOVFF  01,20C
.................... 			chr = toupper(chr); 
61B6:  MOVLB  2
61B8:  MOVF   x0C,W
61BA:  SUBLW  60
61BC:  BC    61CA
61BE:  MOVF   x0C,W
61C0:  SUBLW  7A
61C2:  BNC   61CA
61C4:  MOVF   x0C,W
61C6:  ANDLW  DF
61C8:  BRA    61CC
61CA:  MOVF   x0C,W
61CC:  MOVWF  x0C
.................... 			if (chr <= '9') 
61CE:  MOVF   x0C,W
61D0:  SUBLW  39
61D2:  BNC   61DA
.................... 			chr -= '0'; 
61D4:  MOVLW  30
61D6:  SUBWF  x0C,F
61D8:  BRA    61DE
.................... 			else 
.................... 			chr = chr - ('A' - 10); 
61DA:  MOVLW  37
61DC:  SUBWF  x0C,F
.................... 			num = num * 16 + (ULONG)chr; 
61DE:  RLCF   x08,W
61E0:  MOVWF  x0D
61E2:  RLCF   x09,W
61E4:  MOVWF  x0E
61E6:  RLCF   x0A,W
61E8:  MOVWF  x0F
61EA:  RLCF   x0B,W
61EC:  MOVWF  x10
61EE:  RLCF   x0D,F
61F0:  RLCF   x0E,F
61F2:  RLCF   x0F,F
61F4:  RLCF   x10,F
61F6:  RLCF   x0D,F
61F8:  RLCF   x0E,F
61FA:  RLCF   x0F,F
61FC:  RLCF   x10,F
61FE:  RLCF   x0D,F
6200:  RLCF   x0E,F
6202:  RLCF   x0F,F
6204:  RLCF   x10,F
6206:  MOVLW  F0
6208:  ANDWF  x0D,F
620A:  MOVFF  20C,00
620E:  CLRF   01
6210:  CLRF   02
6212:  CLRF   03
6214:  MOVF   x0C,W
6216:  ADDWF  x0D,W
6218:  MOVWF  x08
621A:  MOVF   01,W
621C:  ADDWFC x0E,W
621E:  MOVWF  x09
6220:  MOVF   02,W
6222:  ADDWFC x0F,W
6224:  MOVWF  x0A
6226:  MOVF   03,W
6228:  ADDWFC x10,W
622A:  MOVWF  x0B
622C:  BRA    6160
622E:  MOVLB  0
.................... 		} 
.................... 	} 
.................... 	return num; 
6230:  MOVFF  208,00
6234:  MOVFF  209,01
6238:  MOVFF  20A,02
623C:  MOVFF  20B,03
6240:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
.................... { 
.................... 	UINT freq; 
.................... 	freq = get_int() * 10; 
*
3290:  RCALL  2BC6
3292:  MOVFF  02,22B
3296:  MOVFF  01,22A
329A:  MOVFF  02,235
329E:  MOVFF  01,234
32A2:  MOVLB  2
32A4:  CLRF   x37
32A6:  MOVLW  0A
32A8:  MOVWF  x36
32AA:  MOVLB  0
32AC:  RCALL  2B72
32AE:  MOVFF  02,229
32B2:  MOVLB  2
32B4:  MOVFF  01,228
.................... 	if (peek_char() == '.') 
32B8:  MOVLB  0
32BA:  RCALL  2AEC
32BC:  MOVFF  02,22B
32C0:  MOVFF  01,22A
32C4:  MOVLB  2
32C6:  MOVF   01,W
32C8:  SUBLW  2E
32CA:  BNZ   32EC
32CC:  MOVF   x2B,F
32CE:  BNZ   32EC
....................     { 
.................... 		get_char(); // skip '.' 
32D0:  MOVLB  0
32D2:  RCALL  2B0A
.................... 		freq += get_char() - '0'; 
32D4:  RCALL  2B0A
32D6:  MOVLW  30
32D8:  MOVLB  2
32DA:  SUBWF  01,W
32DC:  MOVWF  00
32DE:  MOVLW  00
32E0:  SUBWFB 02,W
32E2:  MOVWF  03
32E4:  MOVF   00,W
32E6:  ADDWF  x28,F
32E8:  MOVF   03,W
32EA:  ADDWFC x29,F
.................... 	} 
.................... 	return freq; 
32EC:  MOVFF  228,01
32F0:  MOVFF  229,02
32F4:  MOVLB  0
32F6:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
.................... { 
.................... 	UINT incdec; 
.................... 	switch (chr) 
*
5C04:  MOVLB  1
5C06:  MOVF   xD1,W
5C08:  XORLW  69
5C0A:  MOVLB  0
5C0C:  BZ    5C40
5C0E:  XORLW  20
5C10:  BZ    5C70
5C12:  XORLW  2D
5C14:  BZ    5CA0
5C16:  XORLW  20
5C18:  BZ    5CD4
5C1A:  XORLW  6F
5C1C:  BTFSC  FD8.2
5C1E:  BRA    5D08
5C20:  XORLW  16
5C22:  BTFSC  FD8.2
5C24:  BRA    5D58
5C26:  XORLW  10
5C28:  BTFSC  FD8.2
5C2A:  BRA    5DA8
5C2C:  XORLW  72
5C2E:  BTFSC  FD8.2
5C30:  BRA    5DFC
5C32:  XORLW  61
5C34:  BTFSC  FD8.2
5C36:  BRA    5E50
5C38:  XORLW  02
5C3A:  BTFSC  FD8.2
5C3C:  BRA    5E68
5C3E:  BRA    5E7C
....................     { 
.................... 		case 'i': 
.................... 		if (++D2A_image[11] == 0) 
5C40:  MOVLB  1
5C42:  INCF   x6F,F
5C44:  BNZ   5C52
....................         if (++D2A_image[12] > 3) 
5C46:  INCF   x70,F
5C48:  MOVF   x70,W
5C4A:  SUBLW  03
5C4C:  BC    5C52
.................... 		{ 
.................... 			D2A_image[11] = 0; 
5C4E:  CLRF   x6F
.................... 			D2A_image[12] = 0; 
5C50:  CLRF   x70
.................... 		} 
.................... 		write_D2A(11, D2A_image[11]); 
5C52:  MOVLW  0B
5C54:  MOVLB  2
5C56:  MOVWF  x08
5C58:  MOVFF  16F,209
5C5C:  MOVLB  0
5C5E:  RCALL  5B7C
.................... 		write_D2A(12, D2A_image[12]); 
5C60:  MOVLW  0C
5C62:  MOVLB  2
5C64:  MOVWF  x08
5C66:  MOVFF  170,209
5C6A:  MOVLB  0
5C6C:  RCALL  5B7C
.................... 		break; 
5C6E:  BRA    5E7C
.................... 		case 'I': 
.................... 		if (++D2A_image[15] == 0) 
5C70:  MOVLB  1
5C72:  INCF   x73,F
5C74:  BNZ   5C82
....................         if (++D2A_image[16] > 3) 
5C76:  INCF   x74,F
5C78:  MOVF   x74,W
5C7A:  SUBLW  03
5C7C:  BC    5C82
.................... 		{ 
.................... 			D2A_image[15] = 0; 
5C7E:  CLRF   x73
.................... 			D2A_image[16] = 0; 
5C80:  CLRF   x74
.................... 		} 
.................... 		write_D2A(15, D2A_image[15]); 
5C82:  MOVLW  0F
5C84:  MOVLB  2
5C86:  MOVWF  x08
5C88:  MOVFF  173,209
5C8C:  MOVLB  0
5C8E:  RCALL  5B7C
.................... 		write_D2A(16, D2A_image[16]); 
5C90:  MOVLW  10
5C92:  MOVLB  2
5C94:  MOVWF  x08
5C96:  MOVFF  174,209
5C9A:  MOVLB  0
5C9C:  RCALL  5B7C
.................... 		break; 
5C9E:  BRA    5E7C
.................... 		case 'd': 
.................... 		if (--D2A_image[11] == 255) 
5CA0:  MOVLB  1
5CA2:  DECF   x6F,F
5CA4:  INCFSZ x6F,W
5CA6:  BRA    5CB6
....................         if (--D2A_image[12] > 3) 
5CA8:  DECF   x70,F
5CAA:  MOVF   x70,W
5CAC:  SUBLW  03
5CAE:  BC    5CB6
.................... 		{ 
.................... 			D2A_image[11] = 255; 
5CB0:  SETF   x6F
.................... 			D2A_image[12] = 3; 
5CB2:  MOVLW  03
5CB4:  MOVWF  x70
.................... 		} 
.................... 		write_D2A(11, D2A_image[11]); 
5CB6:  MOVLW  0B
5CB8:  MOVLB  2
5CBA:  MOVWF  x08
5CBC:  MOVFF  16F,209
5CC0:  MOVLB  0
5CC2:  RCALL  5B7C
.................... 		write_D2A(12, D2A_image[12]); 
5CC4:  MOVLW  0C
5CC6:  MOVLB  2
5CC8:  MOVWF  x08
5CCA:  MOVFF  170,209
5CCE:  MOVLB  0
5CD0:  RCALL  5B7C
.................... 		break; 
5CD2:  BRA    5E7C
.................... 		case 'D': 
.................... 		if (--D2A_image[15] == 255) 
5CD4:  MOVLB  1
5CD6:  DECF   x73,F
5CD8:  INCFSZ x73,W
5CDA:  BRA    5CEA
....................         if (--D2A_image[16] > 3) 
5CDC:  DECF   x74,F
5CDE:  MOVF   x74,W
5CE0:  SUBLW  03
5CE2:  BC    5CEA
.................... 		{ 
.................... 			D2A_image[15] = 255; 
5CE4:  SETF   x73
.................... 			D2A_image[16] = 3; 
5CE6:  MOVLW  03
5CE8:  MOVWF  x74
.................... 		} 
.................... 		write_D2A(15, D2A_image[15]); 
5CEA:  MOVLW  0F
5CEC:  MOVLB  2
5CEE:  MOVWF  x08
5CF0:  MOVFF  173,209
5CF4:  MOVLB  0
5CF6:  RCALL  5B7C
.................... 		write_D2A(16, D2A_image[16]); 
5CF8:  MOVLW  10
5CFA:  MOVLB  2
5CFC:  MOVWF  x08
5CFE:  MOVFF  174,209
5D02:  MOVLB  0
5D04:  RCALL  5B7C
.................... 		break; 
5D06:  BRA    5E7C
.................... 		case '+': 
.................... 		incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5D08:  MOVLB  1
5D0A:  MOVFF  171,1D2
5D0E:  MOVF   x72,W
5D10:  ANDLW  03
5D12:  MOVWF  xD3
.................... 		if (++incdec > 0x3FF) 
5D14:  INCF   xD2,F
5D16:  BTFSC  FD8.2
5D18:  INCF   xD3,F
5D1A:  MOVF   xD3,W
5D1C:  SUBLW  03
5D1E:  BC    5D24
....................         incdec = 0; 
*
1EA2:  MOVLW  00
1EA4:  BTFSC  F83.7
1EA6:  MOVLW  01
*
5D20:  CLRF   xD3
5D22:  CLRF   xD2
.................... 		incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
5D24:  MOVF   x72,W
5D26:  ANDLW  C0
5D28:  MOVWF  xD4
5D2A:  MOVLW  00
5D2C:  IORWF  xD2,F
5D2E:  MOVF   xD4,W
5D30:  IORWF  xD3,F
.................... 		D2A_image[13] = make8(incdec, 0); 
5D32:  MOVFF  1D2,171
.................... 		D2A_image[14] = make8(incdec, 1); 
5D36:  MOVFF  1D3,172
.................... 		write_D2A(11, D2A_image[13]); 
5D3A:  MOVLW  0B
5D3C:  MOVLB  2
5D3E:  MOVWF  x08
5D40:  MOVFF  171,209
5D44:  MOVLB  0
5D46:  RCALL  5B7C
.................... 		write_D2A(12, D2A_image[14]); 
5D48:  MOVLW  0C
5D4A:  MOVLB  2
5D4C:  MOVWF  x08
5D4E:  MOVFF  172,209
5D52:  MOVLB  0
5D54:  RCALL  5B7C
.................... 		break; 
5D56:  BRA    5E7C
.................... 		case '=': 
.................... 		incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
5D58:  MOVLB  1
5D5A:  MOVFF  175,1D2
5D5E:  MOVF   x76,W
5D60:  ANDLW  03
5D62:  MOVWF  xD3
.................... 		if (++incdec > 0x3FF) 
5D64:  INCF   xD2,F
5D66:  BTFSC  FD8.2
5D68:  INCF   xD3,F
5D6A:  MOVF   xD3,W
5D6C:  SUBLW  03
5D6E:  BC    5D74
....................         incdec = 0; 
5D70:  CLRF   xD3
5D72:  CLRF   xD2
.................... 		incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5D74:  MOVF   x76,W
5D76:  ANDLW  C0
5D78:  MOVWF  xD4
5D7A:  MOVLW  00
5D7C:  IORWF  xD2,F
5D7E:  MOVF   xD4,W
5D80:  IORWF  xD3,F
.................... 		D2A_image[17] = make8(incdec, 0); 
5D82:  MOVFF  1D2,175
.................... 		D2A_image[18] = make8(incdec, 1); 
5D86:  MOVFF  1D3,176
.................... 		write_D2A(11, D2A_image[17]); 
5D8A:  MOVLW  0B
5D8C:  MOVLB  2
5D8E:  MOVWF  x08
5D90:  MOVFF  175,209
5D94:  MOVLB  0
5D96:  RCALL  5B7C
.................... 		write_D2A(12, D2A_image[18]); 
5D98:  MOVLW  0C
5D9A:  MOVLB  2
5D9C:  MOVWF  x08
5D9E:  MOVFF  176,209
5DA2:  MOVLB  0
5DA4:  RCALL  5B7C
.................... 		break; 
5DA6:  BRA    5E7C
.................... 		case '-': 
.................... 		incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5DA8:  MOVLB  1
5DAA:  MOVFF  171,1D2
5DAE:  MOVF   x72,W
5DB0:  ANDLW  03
5DB2:  MOVWF  xD3
.................... 		if (--incdec > 0x3FF) 
5DB4:  MOVF   xD2,W
5DB6:  BTFSC  FD8.2
5DB8:  DECF   xD3,F
5DBA:  DECF   xD2,F
5DBC:  MOVF   xD3,W
5DBE:  SUBLW  03
5DC0:  BC    5DC8
....................         incdec = 0x3FF; 
5DC2:  MOVLW  03
5DC4:  MOVWF  xD3
5DC6:  SETF   xD2
.................... 		incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
5DC8:  MOVF   x72,W
5DCA:  ANDLW  C0
5DCC:  MOVWF  xD4
5DCE:  MOVLW  00
5DD0:  IORWF  xD2,F
5DD2:  MOVF   xD4,W
5DD4:  IORWF  xD3,F
.................... 		D2A_image[13] = make8(incdec, 0); 
5DD6:  MOVFF  1D2,171
.................... 		D2A_image[14] = make8(incdec, 1); 
5DDA:  MOVFF  1D3,172
.................... 		write_D2A(11, D2A_image[13]); 
5DDE:  MOVLW  0B
5DE0:  MOVLB  2
5DE2:  MOVWF  x08
5DE4:  MOVFF  171,209
5DE8:  MOVLB  0
5DEA:  RCALL  5B7C
.................... 		write_D2A(12, D2A_image[14]); 
5DEC:  MOVLW  0C
5DEE:  MOVLB  2
5DF0:  MOVWF  x08
5DF2:  MOVFF  172,209
5DF6:  MOVLB  0
5DF8:  RCALL  5B7C
.................... 		break; 
5DFA:  BRA    5E7C
.................... 		case '_': 
.................... 		incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
5DFC:  MOVLB  1
5DFE:  MOVFF  175,1D2
5E02:  MOVF   x76,W
5E04:  ANDLW  03
5E06:  MOVWF  xD3
.................... 		if (--incdec > 0x3FF) 
5E08:  MOVF   xD2,W
5E0A:  BTFSC  FD8.2
5E0C:  DECF   xD3,F
5E0E:  DECF   xD2,F
5E10:  MOVF   xD3,W
5E12:  SUBLW  03
5E14:  BC    5E1C
....................         incdec = 0x3FF; 
5E16:  MOVLW  03
5E18:  MOVWF  xD3
5E1A:  SETF   xD2
.................... 		incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5E1C:  MOVF   x76,W
5E1E:  ANDLW  C0
5E20:  MOVWF  xD4
5E22:  MOVLW  00
5E24:  IORWF  xD2,F
5E26:  MOVF   xD4,W
5E28:  IORWF  xD3,F
.................... 		D2A_image[17] = make8(incdec, 0); 
5E2A:  MOVFF  1D2,175
.................... 		D2A_image[18] = make8(incdec, 1); 
5E2E:  MOVFF  1D3,176
.................... 		write_D2A(11, D2A_image[17]); 
5E32:  MOVLW  0B
5E34:  MOVLB  2
5E36:  MOVWF  x08
5E38:  MOVFF  175,209
5E3C:  MOVLB  0
5E3E:  RCALL  5B7C
.................... 		write_D2A(12, D2A_image[18]); 
5E40:  MOVLW  0C
5E42:  MOVLB  2
5E44:  MOVWF  x08
5E46:  MOVFF  176,209
5E4A:  MOVLB  0
5E4C:  RCALL  5B7C
.................... 		break; 
5E4E:  BRA    5E7C
.................... 		case '>': 
.................... 		if (setup.phase_offset < 255) 
5E50:  INCFSZ xBA,W
5E52:  BRA    5E56
5E54:  BRA    5E58
....................         setup.phase_offset++; 
5E56:  INCF   xBA,F
.................... 		update_FPGA(1, setup.phase_offset); 
5E58:  MOVLW  01
5E5A:  MOVLB  1
5E5C:  MOVWF  xD4
5E5E:  MOVFF  BA,1D5
5E62:  MOVLB  0
5E64:  RCALL  5BE6
.................... 		break; 
5E66:  BRA    5E7C
.................... 		case '<': 
.................... 		if (setup.phase_offset) 
5E68:  MOVF   xBA,F
5E6A:  BZ    5E6E
....................         setup.phase_offset--; 
5E6C:  DECF   xBA,F
.................... 		update_FPGA(1, setup.phase_offset); 
5E6E:  MOVLW  01
5E70:  MOVLB  1
5E72:  MOVWF  xD4
5E74:  MOVFF  BA,1D5
5E78:  MOVLB  0
5E7A:  RCALL  5BE6
.................... 		break; 
.................... 	} 
5E7C:  GOTO   6C14 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
.................... { 
.................... 	COM1_send_str("\r\n"); 
5E80:  MOVLW  0D
5E82:  MOVLB  2
5E84:  MOVWF  x08
5E86:  MOVLW  0A
5E88:  MOVWF  x09
5E8A:  CLRF   x0A
5E8C:  MOVLW  02
5E8E:  MOVWF  x6A
5E90:  MOVLW  08
5E92:  MOVWF  x69
5E94:  MOVLB  0
5E96:  CALL   2242
.................... 	COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
5E9A:  MOVLW  02
5E9C:  MOVWF  FEA
5E9E:  MOVLW  08
5EA0:  MOVWF  FE9
5EA2:  MOVFF  FF2,24A
5EA6:  BCF    FF2.7
5EA8:  MOVLW  3D
5EAA:  MOVWF  01
5EAC:  CLRF   FF7
5EAE:  MOVLW  00
5EB0:  CALL   010C
5EB4:  TBLRD*-
5EB6:  TBLRD*+
5EB8:  MOVFF  FF5,FEE
5EBC:  DECFSZ 01,F
5EBE:  BRA    5EB6
5EC0:  MOVLB  2
5EC2:  BTFSC  x4A.7
5EC4:  BSF    FF2.7
5EC6:  MOVLW  02
5EC8:  MOVWF  x6A
5ECA:  MOVLW  08
5ECC:  MOVWF  x69
5ECE:  MOVLB  0
5ED0:  CALL   2242
.................... 	COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
5ED4:  MOVLW  02
5ED6:  MOVWF  FEA
5ED8:  MOVLW  08
5EDA:  MOVWF  FE9
5EDC:  MOVFF  FF2,24A
5EE0:  BCF    FF2.7
5EE2:  MOVLW  2E
5EE4:  MOVWF  01
5EE6:  CLRF   FF7
5EE8:  MOVLW  00
5EEA:  CALL   0164
5EEE:  TBLRD*-
5EF0:  TBLRD*+
5EF2:  MOVFF  FF5,FEE
5EF6:  DECFSZ 01,F
5EF8:  BRA    5EF0
5EFA:  MOVLB  2
5EFC:  BTFSC  x4A.7
5EFE:  BSF    FF2.7
5F00:  MOVLW  02
5F02:  MOVWF  x6A
5F04:  MOVLW  08
5F06:  MOVWF  x69
5F08:  MOVLB  0
5F0A:  CALL   2242
.................... 	COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
5F0E:  MOVLW  02
5F10:  MOVWF  FEA
5F12:  MOVLW  08
5F14:  MOVWF  FE9
5F16:  MOVFF  FF2,24A
5F1A:  BCF    FF2.7
5F1C:  MOVLW  42
5F1E:  MOVWF  01
5F20:  CLRF   FF7
5F22:  MOVLW  00
5F24:  CALL   01AC
5F28:  TBLRD*-
5F2A:  TBLRD*+
5F2C:  MOVFF  FF5,FEE
5F30:  DECFSZ 01,F
5F32:  BRA    5F2A
5F34:  MOVLB  2
5F36:  BTFSC  x4A.7
5F38:  BSF    FF2.7
5F3A:  MOVLW  02
5F3C:  MOVWF  x6A
5F3E:  MOVLW  08
5F40:  MOVWF  x69
5F42:  MOVLB  0
5F44:  CALL   2242
.................... 	COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
5F48:  MOVLW  02
5F4A:  MOVWF  FEA
5F4C:  MOVLW  08
5F4E:  MOVWF  FE9
5F50:  MOVFF  FF2,24A
5F54:  BCF    FF2.7
5F56:  MOVLW  23
5F58:  MOVWF  01
5F5A:  CLRF   FF7
5F5C:  MOVLW  00
5F5E:  CALL   0208
5F62:  TBLRD*-
5F64:  TBLRD*+
5F66:  MOVFF  FF5,FEE
5F6A:  DECFSZ 01,F
5F6C:  BRA    5F64
5F6E:  MOVLB  2
5F70:  BTFSC  x4A.7
5F72:  BSF    FF2.7
5F74:  MOVLW  02
5F76:  MOVWF  x6A
5F78:  MOVLW  08
5F7A:  MOVWF  x69
5F7C:  MOVLB  0
5F7E:  CALL   2242
.................... 	COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
5F82:  MOVLW  02
5F84:  MOVWF  FEA
5F86:  MOVLW  08
5F88:  MOVWF  FE9
5F8A:  MOVFF  FF2,24A
5F8E:  BCF    FF2.7
5F90:  MOVLW  2D
5F92:  MOVWF  01
5F94:  CLRF   FF7
5F96:  MOVLW  00
5F98:  CALL   0246
5F9C:  TBLRD*-
5F9E:  TBLRD*+
5FA0:  MOVFF  FF5,FEE
5FA4:  DECFSZ 01,F
5FA6:  BRA    5F9E
5FA8:  MOVLB  2
5FAA:  BTFSC  x4A.7
5FAC:  BSF    FF2.7
5FAE:  MOVLW  02
5FB0:  MOVWF  x6A
5FB2:  MOVLW  08
5FB4:  MOVWF  x69
5FB6:  MOVLB  0
5FB8:  CALL   2242
.................... 	COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
5FBC:  MOVLW  02
5FBE:  MOVWF  FEA
5FC0:  MOVLW  08
5FC2:  MOVWF  FE9
5FC4:  MOVFF  FF2,24A
5FC8:  BCF    FF2.7
5FCA:  MOVLW  2E
5FCC:  MOVWF  01
5FCE:  CLRF   FF7
5FD0:  MOVLW  00
5FD2:  CALL   028E
5FD6:  TBLRD*-
5FD8:  TBLRD*+
5FDA:  MOVFF  FF5,FEE
5FDE:  DECFSZ 01,F
5FE0:  BRA    5FD8
5FE2:  MOVLB  2
5FE4:  BTFSC  x4A.7
5FE6:  BSF    FF2.7
5FE8:  MOVLW  02
5FEA:  MOVWF  x6A
5FEC:  MOVLW  08
5FEE:  MOVWF  x69
5FF0:  MOVLB  0
5FF2:  CALL   2242
.................... 	COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
5FF6:  MOVLW  02
5FF8:  MOVWF  FEA
5FFA:  MOVLW  08
5FFC:  MOVWF  FE9
5FFE:  MOVFF  FF2,24A
6002:  BCF    FF2.7
6004:  MOVLW  36
6006:  MOVWF  01
6008:  CLRF   FF7
600A:  MOVLW  00
600C:  CALL   02D6
6010:  TBLRD*-
6012:  TBLRD*+
6014:  MOVFF  FF5,FEE
6018:  DECFSZ 01,F
601A:  BRA    6012
601C:  MOVLB  2
601E:  BTFSC  x4A.7
6020:  BSF    FF2.7
6022:  MOVLW  02
6024:  MOVWF  x6A
6026:  MOVLW  08
6028:  MOVWF  x69
602A:  MOVLB  0
602C:  CALL   2242
.................... 	COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
6030:  MOVLW  02
6032:  MOVWF  FEA
6034:  MOVLW  08
6036:  MOVWF  FE9
6038:  MOVFF  FF2,24A
603C:  BCF    FF2.7
603E:  MOVLW  16
6040:  MOVWF  01
6042:  CLRF   FF7
6044:  MOVLW  00
6046:  CALL   0326
604A:  TBLRD*-
604C:  TBLRD*+
604E:  MOVFF  FF5,FEE
6052:  DECFSZ 01,F
6054:  BRA    604C
6056:  MOVLB  2
6058:  BTFSC  x4A.7
605A:  BSF    FF2.7
605C:  MOVLW  02
605E:  MOVWF  x6A
6060:  MOVLW  08
6062:  MOVWF  x69
6064:  MOVLB  0
6066:  CALL   2242
.................... 	COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
606A:  MOVLW  02
606C:  MOVWF  FEA
606E:  MOVLW  08
6070:  MOVWF  FE9
6072:  MOVFF  FF2,24A
6076:  BCF    FF2.7
6078:  MOVLW  3C
607A:  MOVWF  01
607C:  CLRF   FF7
607E:  MOVLW  00
6080:  CALL   0356
6084:  TBLRD*-
6086:  TBLRD*+
6088:  MOVFF  FF5,FEE
608C:  DECFSZ 01,F
608E:  BRA    6086
6090:  MOVLB  2
6092:  BTFSC  x4A.7
6094:  BSF    FF2.7
6096:  MOVLW  02
6098:  MOVWF  x6A
609A:  MOVLW  08
609C:  MOVWF  x69
609E:  MOVLB  0
60A0:  CALL   2242
.................... 	COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
60A4:  MOVLW  02
60A6:  MOVWF  FEA
60A8:  MOVLW  08
60AA:  MOVWF  FE9
60AC:  MOVFF  FF2,24A
60B0:  BCF    FF2.7
60B2:  MOVLW  3D
60B4:  MOVWF  01
60B6:  CLRF   FF7
60B8:  MOVLW  00
60BA:  CALL   03AC
60BE:  TBLRD*-
60C0:  TBLRD*+
60C2:  MOVFF  FF5,FEE
60C6:  DECFSZ 01,F
60C8:  BRA    60C0
60CA:  MOVLB  2
60CC:  BTFSC  x4A.7
60CE:  BSF    FF2.7
60D0:  MOVLW  02
60D2:  MOVWF  x6A
60D4:  MOVLW  08
60D6:  MOVWF  x69
60D8:  MOVLB  0
60DA:  CALL   2242
.................... 	COM1_send_str("\r\n"); 
60DE:  MOVLW  0D
60E0:  MOVLB  2
60E2:  MOVWF  x08
60E4:  MOVLW  0A
60E6:  MOVWF  x09
60E8:  CLRF   x0A
60EA:  MOVLW  02
60EC:  MOVWF  x6A
60EE:  MOVLW  08
60F0:  MOVWF  x69
60F2:  MOVLB  0
60F4:  CALL   2242
60F8:  GOTO   6532 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... void send_fail_message(void) // VERSION 3.3 17.1.2016 
.................... { 
.................... 	//COM1_send_str("\r\nFAIL\r\n"); 
.................... } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... float read_temperature(void)  
.................... { 
.................... 	float temp; 
.................... 	SINT val; 
.................... 	set_adc_channel(A2D_TEMP); // read temperature 
*
27FE:  MOVLW  18
2800:  MOVWF  01
2802:  MOVF   FC2,W
2804:  ANDLW  83
2806:  IORWF  01,W
2808:  MOVWF  FC2
.................... 	delay_us(50); 
280A:  MOVLW  42
280C:  MOVWF  00
280E:  DECFSZ 00,F
2810:  BRA    280E
2812:  NOP   
.................... 	val = read_adc(); 
2814:  BSF    FC2.1
2816:  BTFSC  FC2.1
2818:  BRA    2816
281A:  MOVFF  FC4,242
281E:  MOVLB  2
2820:  MOVFF  FC3,241
.................... 	temp = (float)val / 1024.0 * 3.3; 
2824:  MOVFF  242,244
2828:  MOVFF  241,243
282C:  MOVLB  0
282E:  BRA    2534
2830:  MOVFF  03,246
2834:  MOVFF  02,245
2838:  MOVFF  01,244
283C:  MOVFF  00,243
2840:  MOVFF  03,251
2844:  MOVFF  02,250
2848:  MOVFF  01,24F
284C:  MOVFF  00,24E
2850:  MOVLB  2
2852:  CLRF   x55
2854:  CLRF   x54
2856:  CLRF   x53
2858:  MOVLW  89
285A:  MOVWF  x52
285C:  MOVLB  0
285E:  CALL   19B6
2862:  MOVFF  03,246
2866:  MOVFF  02,245
286A:  MOVFF  01,244
286E:  MOVFF  00,243
2872:  MOVFF  03,251
2876:  MOVFF  02,250
287A:  MOVFF  01,24F
287E:  MOVFF  00,24E
2882:  MOVLW  33
2884:  MOVLB  2
2886:  MOVWF  x55
2888:  MOVWF  x54
288A:  MOVLW  53
288C:  MOVWF  x53
288E:  MOVLW  80
2890:  MOVWF  x52
2892:  MOVLB  0
2894:  CALL   1B14
2898:  MOVFF  03,240
289C:  MOVFF  02,23F
28A0:  MOVFF  01,23E
28A4:  MOVFF  00,23D
.................... 	temp -= 0.75; 
28A8:  BSF    FD8.1
28AA:  MOVFF  240,246
28AE:  MOVFF  23F,245
28B2:  MOVFF  23E,244
28B6:  MOVFF  23D,243
28BA:  MOVLB  2
28BC:  CLRF   x4A
28BE:  CLRF   x49
28C0:  MOVLW  40
28C2:  MOVWF  x48
28C4:  MOVLW  7E
28C6:  MOVWF  x47
28C8:  MOVLB  0
28CA:  RCALL  2586
28CC:  MOVFF  03,240
28D0:  MOVFF  02,23F
28D4:  MOVFF  01,23E
28D8:  MOVFF  00,23D
.................... 	temp *= 100; 
28DC:  MOVFF  240,251
28E0:  MOVFF  23F,250
28E4:  MOVFF  23E,24F
28E8:  MOVFF  23D,24E
28EC:  MOVLB  2
28EE:  CLRF   x55
28F0:  CLRF   x54
28F2:  MOVLW  48
28F4:  MOVWF  x53
28F6:  MOVLW  85
28F8:  MOVWF  x52
28FA:  MOVLB  0
28FC:  CALL   1B14
2900:  MOVFF  03,240
2904:  MOVFF  02,23F
2908:  MOVFF  01,23E
290C:  MOVFF  00,23D
.................... 	temp += 25.0; 
2910:  BCF    FD8.1
2912:  MOVFF  240,246
2916:  MOVFF  23F,245
291A:  MOVFF  23E,244
291E:  MOVFF  23D,243
2922:  MOVLB  2
2924:  CLRF   x4A
2926:  CLRF   x49
2928:  MOVLW  48
292A:  MOVWF  x48
292C:  MOVLW  83
292E:  MOVWF  x47
2930:  MOVLB  0
2932:  RCALL  2586
2934:  MOVFF  03,240
2938:  MOVFF  02,23F
293C:  MOVFF  01,23E
2940:  MOVFF  00,23D
.................... 	return temp; 
2944:  MOVFF  23D,00
2948:  MOVFF  23E,01
294C:  MOVFF  23F,02
2950:  MOVFF  240,03
2954:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status1(void)// VERSION 3.3 21.1.2016 
*
23CC:  MOVLB  1
23CE:  CLRF   xC0
.................... { 
.................... 	// float temp; 
.................... 	byte t = 0; 
.................... 	t =          (bit)setup.data_source ; 
23D0:  CLRF   xC0
23D2:  MOVLB  0
23D4:  BTFSS  xB0.0
23D6:  BRA    23DE
23D8:  MOVLB  1
23DA:  INCF   xC0,F
23DC:  MOVLB  0
.................... 	t = t + ( (bit)setup.data_polarity <<  1); 
23DE:  MOVLW  00
23E0:  BTFSC  xAE.0
23E2:  MOVLW  01
23E4:  MOVWF  00
23E6:  BCF    FD8.0
23E8:  RLCF   00,F
23EA:  MOVF   00,W
23EC:  MOVLB  1
23EE:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.randomizer <<     2); 
23F0:  MOVLW  00
23F2:  MOVLB  0
23F4:  BTFSC  xB2.0
23F6:  MOVLW  01
23F8:  MOVWF  00
23FA:  RLCF   00,F
23FC:  RLCF   00,F
23FE:  MOVLW  FC
2400:  ANDWF  00,F
2402:  MOVF   00,W
2404:  MOVLB  1
2406:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.clock_source <<   3); 
2408:  MOVLW  00
240A:  MOVLB  0
240C:  BTFSC  xAF.0
240E:  MOVLW  01
2410:  MOVWF  00
2412:  RLCF   00,F
2414:  RLCF   00,F
2416:  RLCF   00,F
2418:  MOVLW  F8
241A:  ANDWF  00,F
241C:  MOVF   00,W
241E:  MOVLB  1
2420:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.clock_polarity << 4); 
2422:  MOVLW  00
2424:  MOVLB  0
2426:  BTFSC  xAD.0
2428:  MOVLW  01
242A:  MOVWF  00
242C:  SWAPF  00,F
242E:  MOVLW  F0
2430:  ANDWF  00,F
2432:  MOVF   00,W
2434:  MOVLB  1
2436:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.SOQPSK <<         5); 
2438:  MOVLW  00
243A:  MOVLB  0
243C:  BTFSC  xB4.0
243E:  MOVLW  01
2440:  MOVWF  00
2442:  SWAPF  00,F
2444:  RLCF   00,F
2446:  MOVLW  E0
2448:  ANDWF  00,F
244A:  MOVF   00,W
244C:  MOVLB  1
244E:  ADDWF  xC0,F
.................... 	t = t + ( (bit)0 <<       6); 
.................... 	t = t + ( (bit)0 <<       7); 
.................... 	 
.................... 	//  setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
.................... 	return t; 
2450:  CLRF   03
2452:  MOVFF  1C0,01
2456:  MOVFF  03,02
245A:  MOVLB  0
245C:  GOTO   29A2 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status2(void)// VERSION 3.3 2.2.2016 
.................... { 
.................... 	// float temp; 
.................... 	set_adc_channel(A2D_PREV); // select forward power input 
2460:  MOVLW  10
2462:  MOVWF  01
2464:  MOVF   FC2,W
2466:  ANDLW  83
2468:  IORWF  01,W
246A:  MOVWF  FC2
.................... 	delay_us(20); 
246C:  MOVLW  1A
246E:  MOVWF  00
2470:  DECFSZ 00,F
2472:  BRA    2470
2474:  NOP   
.................... 	revp = read_adc(); 
2476:  BSF    FC2.1
2478:  BTFSC  FC2.1
247A:  BRA    2478
247C:  MOVFF  FC4,109
2480:  MOVLB  1
2482:  MOVFF  FC3,108
.................... 	if (revp <= 580) 
2486:  MOVF   x09,W
2488:  SUBLW  02
248A:  BNC   2498
248C:  BNZ   2494
248E:  MOVF   x08,W
2490:  SUBLW  44
2492:  BNC   2498
....................     revp_status = 0;// Q strcpy(revstat, "GOOD"); 
2494:  BCF    xA2.0
2496:  BRA    249A
.................... 	else 
.................... 	revp_status = 1;//Q strcpy(revstat, "BAD"); 
2498:  BSF    xA2.0
.................... 	 
.................... 	byte t = 0; 
249A:  CLRF   xC0
.................... 	t =       (bit)setup.cot ; //RB 
249C:  CLRF   xC0
249E:  MOVLB  0
24A0:  BTFSS  xF8.0
24A2:  BRA    24AA
24A4:  MOVLB  1
24A6:  INCF   xC0,F
24A8:  MOVLB  0
.................... 	t = t + ( (bit)setup.rc <<  1); 
24AA:  MOVLW  00
24AC:  BTFSC  xFA.0
24AE:  MOVLW  01
24B0:  MOVWF  00
24B2:  BCF    FD8.0
24B4:  RLCF   00,F
24B6:  MOVF   00,W
24B8:  MOVLB  1
24BA:  ADDWF  xC0,F
.................... 	t = t + ( (bit)gl_current_power_en_value << 2);//RF 
24BC:  MOVLW  00
24BE:  BTFSC  x10.0
24C0:  MOVLW  01
24C2:  MOVWF  00
24C4:  RLCF   00,F
24C6:  RLCF   00,F
24C8:  MOVLW  FC
24CA:  ANDWF  00,F
24CC:  MOVF   00,W
24CE:  ADDWF  xC0,F
.................... 	t = t + ( (bit)(gl_current_power_level == power_level) <<  3); 
24D0:  MOVF   19,W
24D2:  SUBWF  x0E,W
24D4:  BNZ   24DC
24D6:  MOVF   1A,W
24D8:  SUBWF  x0F,W
24DA:  BZ    24E0
24DC:  MOVLW  00
24DE:  BRA    24E2
24E0:  MOVLW  01
24E2:  MOVWF  01
24E4:  MOVLW  00
24E6:  BTFSC  01.0
24E8:  MOVLW  01
24EA:  MOVWF  00
24EC:  RLCF   00,F
24EE:  RLCF   00,F
24F0:  RLCF   00,F
24F2:  MOVLW  F8
24F4:  ANDWF  00,F
24F6:  MOVF   00,W
24F8:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.UART_Status << 4); 
24FA:  MOVLW  00
24FC:  MOVLB  0
24FE:  BTFSC  xFF.0
2500:  MOVLW  01
2502:  MOVWF  00
2504:  SWAPF  00,F
2506:  MOVLW  F0
2508:  ANDWF  00,F
250A:  MOVF   00,W
250C:  MOVLB  1
250E:  ADDWF  xC0,F
.................... 	t = t + ( (bit)revp_status <<       5); 
2510:  MOVLW  00
2512:  BTFSC  xA2.0
2514:  MOVLW  01
2516:  MOVWF  00
2518:  SWAPF  00,F
251A:  RLCF   00,F
251C:  MOVLW  E0
251E:  ANDWF  00,F
2520:  MOVF   00,W
2522:  ADDWF  xC0,F
.................... 	t = t + ( (bit)0 <<       6); 
.................... 	t = t + ( (bit)0 <<       7); 
.................... 	 
.................... 	 
.................... 	return t; 
2524:  CLRF   03
2526:  MOVFF  1C0,01
252A:  MOVFF  03,02
252E:  MOVLB  0
2530:  GOTO   29A8 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------   
.................... SINT  set_power_level(void) 
.................... { 
.................... 	UINT idx; 
.................... 	idx = get_int(); 
*
383A:  CALL   2BC6
383E:  MOVFF  02,229
3842:  MOVFF  01,228
.................... 	setup.bitpower_level = idx;// VERSION 3.3 29.02.2016 
3846:  MOVFF  228,101
.................... 	if (idx <= 40 && idx >= 20) 
384A:  MOVLB  2
384C:  MOVF   x29,F
384E:  BNZ   389E
3850:  MOVF   x28,W
3852:  SUBLW  28
3854:  BNC   389E
3856:  MOVF   x29,F
3858:  BNZ   3860
385A:  MOVF   x28,W
385C:  SUBLW  13
385E:  BC    389E
....................     { 
.................... 		setup.power_level = idx - 20; 
3860:  MOVLW  14
3862:  SUBWF  x28,W
3864:  MOVLB  0
3866:  MOVWF  xB8
3868:  MOVLW  00
386A:  MOVLB  2
386C:  SUBWFB x29,W
386E:  MOVLB  0
3870:  MOVWF  xB9
.................... 		power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
3872:  BCF    FD8.0
3874:  RLCF   xB8,W
3876:  MOVWF  02
3878:  RLCF   xB9,W
387A:  MOVWF  03
387C:  MOVF   02,W
387E:  ADDLW  C7
3880:  MOVWF  FE9
3882:  MOVLW  00
3884:  ADDWFC 03,W
3886:  MOVWF  FEA
3888:  MOVFF  FEC,1A
388C:  MOVF   FED,F
388E:  MOVFF  FEF,19
.................... 		return 1; 
3892:  MOVLW  01
3894:  MOVWF  01
3896:  MOVLW  00
3898:  MOVWF  02
389A:  BRA    38A4
389C:  MOVLB  2
.................... 	} 
.................... 	return 0; 
389E:  MOVLW  00
38A0:  MOVWF  01
38A2:  MOVWF  02
38A4:  MOVLB  0
38A6:  GOTO   4FAA (RETURN)
.................... } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT  set_low_power_level(void) 
.................... { 
.................... 	UINT idx; 
.................... 	idx = get_int(); 
*
37CA:  CALL   2BC6
37CE:  MOVFF  02,229
37D2:  MOVFF  01,228
.................... 	setup.bitlow_power_level  = idx;// VERSION 3.3 29.02.2016 
37D6:  MOVFF  228,100
.................... 	if (idx <= 40 && idx >= 20) 
37DA:  MOVLB  2
37DC:  MOVF   x29,F
37DE:  BNZ   382E
37E0:  MOVF   x28,W
37E2:  SUBLW  28
37E4:  BNC   382E
37E6:  MOVF   x29,F
37E8:  BNZ   37F0
37EA:  MOVF   x28,W
37EC:  SUBLW  13
37EE:  BC    382E
....................     { 
.................... 		setup.power_low_level = idx - 20; 
37F0:  MOVLW  14
37F2:  SUBWF  x28,W
37F4:  MOVLB  0
37F6:  MOVWF  xF6
37F8:  MOVLW  00
37FA:  MOVLB  2
37FC:  SUBWFB x29,W
37FE:  MOVLB  0
3800:  MOVWF  xF7
.................... 		low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
3802:  BCF    FD8.0
3804:  RLCF   xF6,W
3806:  MOVWF  02
3808:  RLCF   xF7,W
380A:  MOVWF  03
380C:  MOVF   02,W
380E:  ADDLW  C7
3810:  MOVWF  FE9
3812:  MOVLW  00
3814:  ADDWFC 03,W
3816:  MOVWF  FEA
3818:  MOVFF  FEC,18
381C:  MOVF   FED,F
381E:  MOVFF  FEF,17
.................... 		return 1; 
3822:  MOVLW  01
3824:  MOVWF  01
3826:  MOVLW  00
3828:  MOVWF  02
382A:  BRA    3834
382C:  MOVLB  2
.................... 	} 
.................... 	return 0; 
382E:  MOVLW  00
3830:  MOVWF  01
3832:  MOVWF  02
3834:  MOVLB  0
3836:  GOTO   4EF2 (RETURN)
.................... } 
....................  
.................... void update_temperature_string()  
.................... { 
.................... 	if(setup.pwr) 
*
3704:  MOVF   xAA,W
3706:  IORWF  xAB,W
3708:  BZ    376C
.................... 	{ 
.................... 		sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", read_temperature()); 
370A:  CALL   27FE
370E:  MOVFF  03,240
3712:  MOVFF  02,23F
3716:  MOVFF  01,23E
371A:  MOVFF  00,23D
371E:  MOVLW  01
3720:  MOVLB  1
3722:  MOVWF  xA4
3724:  MOVLW  78
3726:  MOVWF  xA3
3728:  MOVLW  1E
372A:  MOVWF  FF6
372C:  MOVLW  0D
372E:  MOVWF  FF7
3730:  MOVLW  06
3732:  MOVLB  2
3734:  MOVWF  x41
3736:  MOVLB  0
3738:  RCALL  31AC
373A:  MOVLW  05
373C:  MOVWF  FE9
373E:  MOVFF  240,244
3742:  MOVFF  23F,243
3746:  MOVFF  23E,242
374A:  MOVFF  23D,241
374E:  MOVLW  02
3750:  MOVLB  2
3752:  MOVWF  x45
3754:  MOVLB  0
3756:  BRA    3554
3758:  MOVLW  29
375A:  MOVWF  FF6
375C:  MOVLW  0D
375E:  MOVWF  FF7
3760:  MOVLW  08
3762:  MOVLB  2
3764:  MOVWF  x41
3766:  MOVLB  0
3768:  RCALL  31AC
.................... 	} 
376A:  BRA    37A6
.................... 	else 
.................... 	{ 
.................... 		COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
376C:  MOVLW  02
376E:  MOVWF  FEA
3770:  MOVLW  28
3772:  MOVWF  FE9
3774:  MOVFF  FF2,23D
3778:  BCF    FF2.7
377A:  MOVLW  15
377C:  MOVWF  01
377E:  CLRF   FF7
3780:  MOVLW  00
3782:  CALL   0404
3786:  TBLRD*-
3788:  TBLRD*+
378A:  MOVFF  FF5,FEE
378E:  DECFSZ 01,F
3790:  BRA    3788
3792:  MOVLB  2
3794:  BTFSC  x3D.7
3796:  BSF    FF2.7
3798:  MOVLW  02
379A:  MOVWF  x6A
379C:  MOVLW  28
379E:  MOVWF  x69
37A0:  MOVLB  0
37A2:  CALL   2242
.................... 	} 
37A6:  RETURN 0
.................... } 
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... // VERSION 3.3 17.1.2016 
.................... //---------------------------------------------------------------------------- 
.................... /* 
.................... 	The message structure is defined below. 
.................... 	 
.................... 	Byte# Description Remarks 
.................... 	1 Header  Constant - 47 Hex 
.................... 	2 Temperature Send 2's complement 
.................... 	3 Power level 
.................... 	4 Current 
.................... 	5 PLL lock 
.................... 	6 Checksum  Checksum of all preceding bytes 
.................... 	 
.................... 	Table 1 - Status Packet structure 
.................... 	 
.................... 	The status message consists of 6 serial bytes of 10 bits, for a total of 60 bits. 
.................... 	Transmission time is 0.52mS, max PRI 10mS. 
.................... */ 
....................  
.................... void prepare_binary_status(void) 
*
2994:  MOVLB  1
2996:  CLRF   xB9
2998:  CLRF   xB8
.................... { 
.................... 	UINT chksum = 0, idx; 
.................... 	SINT current_temperature;   
.................... 	power_output(); 
299A:  MOVLB  0
299C:  CALL   1FA4
.................... 	byte BitsStatus1,BitsStatus2; 
.................... 	BitsStatus1 = Bits_status1(); 
29A0:  BRA    23CC
29A2:  MOVFF  01,1BE
.................... 	BitsStatus2 = Bits_status2(); 
29A6:  BRA    2460
29A8:  MOVFF  01,1BF
.................... 	 
.................... 	current_temperature = (SINT)(read_temperature() * 100); 
29AC:  RCALL  27FE
29AE:  MOVFF  03,1C3
29B2:  MOVFF  02,1C2
29B6:  MOVFF  01,1C1
29BA:  MOVFF  00,1C0
29BE:  MOVFF  03,251
29C2:  MOVFF  02,250
29C6:  MOVFF  01,24F
29CA:  MOVFF  00,24E
29CE:  MOVLB  2
29D0:  CLRF   x55
29D2:  CLRF   x54
29D4:  MOVLW  48
29D6:  MOVWF  x53
29D8:  MOVLW  85
29DA:  MOVWF  x52
29DC:  MOVLB  0
29DE:  CALL   1B14
29E2:  MOVFF  03,1C3
29E6:  MOVFF  02,1C2
29EA:  MOVFF  01,1C1
29EE:  MOVFF  00,1C0
29F2:  BRA    2956
29F4:  MOVFF  02,1BD
29F8:  MOVFF  01,1BC
.................... 	//measured_current = read_current(); 
.................... 	//power_level_stat = current_power; 
.................... 	status_buffer[0] = 0xFB;                              // Synchronization Byte 1 
29FC:  MOVLW  FB
29FE:  MOVLB  1
2A00:  MOVWF  x1A
.................... 	status_buffer[1] = 0x60;                              // Synchronization Byte 2 
2A02:  MOVLW  60
2A04:  MOVWF  x1B
.................... 	status_buffer[2] = TX_Counter;                        // The counter increments by one each time an update is sent 0 to 255 
2A06:  MOVFF  116,11C
.................... 	status_buffer[3] = (setup.frequency >> 8) & 0xff;      // MSB TX frequency  
2A0A:  MOVFF  B7,11D
.................... 	status_buffer[4] = setup.frequency & 0xff;            // LSB TX frequency  
2A0E:  MOVFF  B6,11E
2A12:  MOVLB  1
.................... 	status_buffer[5] = setup.mode;                        // State of modulation state 
2A14:  MOVFF  AC,11F
.................... 	status_buffer[6] = BitsStatus1;                       // Bits status of: spare, spare, Differential encoding ,Clock inverted ,Clock source ,Data randomization ,Data inverted, Data source 
2A18:  MOVFF  1BE,120
.................... 	if(setup.pwr && gl_current_power_en_value) 
2A1C:  MOVLB  0
2A1E:  MOVF   xAA,W
2A20:  IORWF  xAB,W
2A22:  BZ    2A3E
2A24:  MOVLB  1
2A26:  MOVF   x10,W
2A28:  IORWF  x11,W
2A2A:  BTFSS  FD8.2
2A2C:  BRA    2A32
2A2E:  MOVLB  0
2A30:  BRA    2A3E
.................... 	{ 
.................... 		status_buffer[7] = (current_temperature >> 8) & 0xff;  // MSB TX Temperature  
2A32:  MOVFF  1BD,121
.................... 		status_buffer[8] = current_temperature & 0xff;        // LSB TX Temperature  
2A36:  MOVFF  1BC,122
.................... 	}  
2A3A:  BRA    2A46
2A3C:  MOVLB  0
.................... 	else  
.................... 	{ 
.................... 		// signal that the transmiter is off 
.................... 		status_buffer[7] = 0x7f; 
2A3E:  MOVLW  7F
2A40:  MOVLB  1
2A42:  MOVWF  x21
.................... 		status_buffer[8] = 0xff; 
2A44:  SETF   x22
.................... 	} 
.................... 	status_buffer[9] = (setup.bitrate >> 8) & 0xff;       // MSB Bit rate state 
2A46:  MOVFF  A9,123
.................... 	status_buffer[10] = setup.bitrate & 0xff;             // LSB Bit rate state  
2A4A:  MOVFF  A8,124
2A4E:  MOVLB  1
.................... 	status_buffer[11] = current_power;                    // TX power in dBm 
2A50:  MOVFF  10C,125
.................... 	status_buffer[12] = setup.internal_pattern;           // Data type while using internal data 
2A54:  MOVFF  B1,126
.................... 	status_buffer[13] = BitsStatus2;                      // Bits status of: Reverse Power N/A 
2A58:  MOVFF  1BF,127
.................... 	status_buffer[14] = setup.bitlow_power_level;         // TX low power in dBm (VL) 
2A5C:  MOVFF  100,128
.................... 	status_buffer[15] = setup.bitpower_level;             // TX low power in dBm (VP) 
2A60:  MOVFF  101,129
.................... 	status_buffer[16] = revp/2;                           // Revers power div by 2 in order to make it 1 BIT 
2A64:  BCF    FD8.0
2A66:  RRCF   x09,W
2A68:  RRCF   x08,W
2A6A:  MOVWF  x2A
.................... 	status_buffer[17] = VER;                              // TX VERSION 
2A6C:  MOVLW  01
2A6E:  MOVWF  x2B
.................... 	status_buffer[18] = (setup.unit_ID >> 8) & 0xff;      // MSB TX Serial number 
2A70:  MOVFF  F5,12C
.................... 	status_buffer[19] = setup.unit_ID & 0xff;             // LSB TX Serial number 
2A74:  MOVFF  F4,12D
2A78:  MOVLB  1
.................... 	status_buffer[20] = (setup.setup_version >> 8)&0xff;  // MSB of the config version 
2A7A:  MOVFF  105,12E
.................... 	status_buffer[21] = setup.setup_version & 0xff;       // LSB of the config version 
2A7E:  MOVFF  104,12F
.................... 	status_buffer[22] = 0xAA;                             // Spare 
2A82:  MOVLW  AA
2A84:  MOVWF  x30
.................... 	status_buffer[23] = 0xAA;                             // Spare 
2A86:  MOVWF  x31
.................... 	 
.................... 	for (idx = 0; idx < BINARY_STATUS_LENTGH-2; idx++) 
2A88:  CLRF   xBB
2A8A:  CLRF   xBA
2A8C:  MOVF   xBB,F
2A8E:  BNZ   2AB2
2A90:  MOVF   xBA,W
2A92:  SUBLW  17
2A94:  BNC   2AB2
.................... 	{ 
.................... 		chksum += status_buffer[idx]; 
2A96:  MOVLW  1A
2A98:  ADDWF  xBA,W
2A9A:  MOVWF  FE9
2A9C:  MOVLW  01
2A9E:  ADDWFC xBB,W
2AA0:  MOVWF  FEA
2AA2:  MOVF   FEF,W
2AA4:  ADDWF  xB8,F
2AA6:  MOVLW  00
2AA8:  ADDWFC xB9,F
2AAA:  INCF   xBA,F
2AAC:  BTFSC  FD8.2
2AAE:  INCF   xBB,F
2AB0:  BRA    2A8C
.................... 	} 
.................... 	// add the checksum to the end of the binary message, LSB first (request by the client 16.11.16) 
.................... 	status_buffer[BINARY_STATUS_LENTGH-2] = chksum & 0xff; 
2AB2:  MOVFF  1B8,132
.................... 	status_buffer[BINARY_STATUS_LENTGH-1] =(chksum >> 8) & 0xff; 
2AB6:  MOVFF  1B9,133
2ABA:  MOVLB  0
2ABC:  GOTO   6FD8 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
.................... { 
.................... 	UCHAR chr, idx, device, addr, data, buf[40]; 
.................... 	ULONG freq, bitrate; 
.................... 	UINT  value; 
.................... 	chr = 2; 
*
649A:  MOVLW  02
649C:  MOVLB  1
649E:  MOVWF  xD1
.................... 	comm_ptr = 0; 
64A0:  CLRF   x41
.................... 	switch (toupper(get_char())) 
64A2:  MOVLB  0
64A4:  CALL   2B0A
64A8:  MOVFF  02,209
64AC:  MOVFF  01,208
64B0:  MOVLB  2
64B2:  MOVF   x09,F
64B4:  BNZ   64BC
64B6:  MOVF   x08,W
64B8:  SUBLW  60
64BA:  BC    64CC
64BC:  MOVF   x09,F
64BE:  BNZ   64CC
64C0:  MOVF   x08,W
64C2:  SUBLW  7A
64C4:  BNC   64CC
64C6:  MOVF   x08,W
64C8:  ANDLW  DF
64CA:  BRA    64CE
64CC:  MOVF   x08,W
64CE:  XORLW  48
64D0:  MOVLB  0
64D2:  BZ    6530
64D4:  XORLW  09
64D6:  BZ    653A
64D8:  XORLW  02
64DA:  BTFSC  FD8.2
64DC:  BRA    6610
64DE:  XORLW  07
64E0:  BTFSC  FD8.2
64E2:  BRA    66E6
64E4:  XORLW  0B
64E6:  BTFSC  FD8.2
64E8:  BRA    6766
64EA:  XORLW  1D
64EC:  BTFSC  FD8.2
64EE:  BRA    67A6
64F0:  XORLW  10
64F2:  BTFSC  FD8.2
64F4:  BRA    67E8
64F6:  XORLW  05
64F8:  BTFSC  FD8.2
64FA:  BRA    6842
64FC:  XORLW  01
64FE:  BTFSC  FD8.2
6500:  BRA    695E
6502:  XORLW  15
6504:  BTFSC  FD8.2
6506:  BRA    6A16
6508:  XORLW  07
650A:  BTFSC  FD8.2
650C:  BRA    6ABC
650E:  XORLW  65
6510:  BTFSC  FD8.2
6512:  BRA    6B86
6514:  XORLW  03
6516:  BTFSC  FD8.2
6518:  GOTO   6B94
651C:  XORLW  01
651E:  BTFSC  FD8.2
6520:  GOTO   6B9E
6524:  XORLW  64
6526:  BTFSC  FD8.2
6528:  GOTO   6BAC
652C:  GOTO   6BC2
....................     { 
.................... 		case 'H': 
.................... 		list_help1(); 
6530:  BRA    5E80
.................... 		return 0; 
6532:  MOVLW  00
6534:  MOVWF  01
6536:  GOTO   6BCC
.................... 		case 'A': 
.................... 		switch (toupper(get_char())) 
653A:  CALL   2B0A
653E:  MOVFF  02,209
6542:  MOVFF  01,208
6546:  MOVLB  2
6548:  MOVF   x09,F
654A:  BNZ   6552
654C:  MOVF   x08,W
654E:  SUBLW  60
6550:  BC    6562
6552:  MOVF   x09,F
6554:  BNZ   6562
6556:  MOVF   x08,W
6558:  SUBLW  7A
655A:  BNC   6562
655C:  MOVF   x08,W
655E:  ANDLW  DF
6560:  BRA    6564
6562:  MOVF   x08,W
6564:  XORLW  54
6566:  MOVLB  0
6568:  BZ    6570
656A:  XORLW  1D
656C:  BZ    657A
656E:  BRA    660E
....................         { 
.................... 			case 'T': 
.................... 			idx = get_int(); 
6570:  CALL   2BC6
6574:  MOVFF  01,1D2
.................... 			 
.................... 			// write to attenuator 
.................... 			break; 
6578:  BRA    660E
.................... 			case 'I': 
.................... 			idx = get_int(); 
657A:  CALL   2BC6
657E:  MOVFF  01,1D2
.................... 			if (idx && idx < 4) 
6582:  MOVLB  1
6584:  MOVF   xD2,F
6586:  BZ    660C
6588:  MOVF   xD2,W
658A:  SUBLW  03
658C:  BNC   660C
....................             { 
.................... 				set_adc_channel(idx-1); 
658E:  MOVLW  01
6590:  SUBWF  xD2,W
6592:  MOVLB  2
6594:  MOVWF  x08
6596:  RLCF   x08,W
6598:  MOVWF  00
659A:  RLCF   00,F
659C:  MOVLW  FC
659E:  ANDWF  00,F
65A0:  MOVF   FC2,W
65A2:  ANDLW  83
65A4:  IORWF  00,W
65A6:  MOVWF  FC2
.................... 				delay_us(30); 
65A8:  MOVLW  27
65AA:  MOVWF  00
65AC:  DECFSZ 00,F
65AE:  BRA    65AC
65B0:  BRA    65B2
.................... 				value = read_adc(); 
65B2:  BSF    FC2.1
65B4:  BTFSC  FC2.1
65B6:  BRA    65B4
65B8:  MOVFF  FC3,206
65BC:  MOVFF  FC4,207
.................... 				sprintf(buf, "$AR %lu\r", value); 
65C0:  MOVLW  01
65C2:  MOVLB  1
65C4:  MOVWF  xA4
65C6:  MOVLW  D6
65C8:  MOVWF  xA3
65CA:  MOVLW  32
65CC:  MOVWF  FF6
65CE:  MOVLW  0D
65D0:  MOVWF  FF7
65D2:  MOVLW  04
65D4:  MOVLB  2
65D6:  MOVWF  x41
65D8:  MOVLB  0
65DA:  CALL   31AC
65DE:  MOVLW  10
65E0:  MOVWF  FE9
65E2:  MOVFF  207,22D
65E6:  MOVFF  206,22C
65EA:  CALL   31D4
65EE:  MOVLW  0D
65F0:  MOVLB  2
65F2:  MOVWF  x4E
65F4:  MOVLB  0
65F6:  CALL   318A
.................... 				COM1_send_str(buf); 
65FA:  MOVLW  01
65FC:  MOVLB  2
65FE:  MOVWF  x6A
6600:  MOVLW  D6
6602:  MOVWF  x69
6604:  MOVLB  0
6606:  CALL   2242
660A:  MOVLB  1
.................... 			} 
.................... 			break; 
660C:  MOVLB  0
.................... 		} 
.................... 		break; 
660E:  BRA    6BC8
.................... 		case 'C': 
.................... 		chr = toupper(get_char()); 
6610:  CALL   2B0A
6614:  MOVFF  02,209
6618:  MOVFF  01,208
661C:  MOVLB  2
661E:  MOVF   x09,F
6620:  BNZ   6628
6622:  MOVF   x08,W
6624:  SUBLW  60
6626:  BC    6638
6628:  MOVF   x09,F
662A:  BNZ   6638
662C:  MOVF   x08,W
662E:  SUBLW  7A
6630:  BNC   6638
6632:  MOVF   x08,W
6634:  ANDLW  DF
6636:  BRA    663A
6638:  MOVF   x08,W
663A:  MOVLB  1
663C:  MOVWF  xD1
.................... 		if (chr == 'F') 
663E:  MOVF   xD1,W
6640:  SUBLW  46
6642:  BNZ   6676
....................         { 
.................... 			freq = get_frequency(); 
6644:  MOVLB  0
6646:  CALL   3290
664A:  MOVLB  2
664C:  CLRF   x01
664E:  CLRF   x00
6650:  MOVFF  02,1FF
6654:  MOVFF  01,1FE
.................... 			PLL_compute_freq_parameters(freq); 
6658:  MOVFF  1FF,209
665C:  MOVFF  1FE,208
6660:  MOVFF  1FF,233
6664:  MOVFF  1FE,232
6668:  MOVLB  0
666A:  CALL   1552
.................... 			PLL_update(); 
666E:  CALL   182A
.................... 		} 
6672:  BRA    66E0
6674:  MOVLB  1
.................... 		else if (chr == 'P') 
6676:  MOVF   xD1,W
6678:  SUBLW  50
667A:  BNZ   66E2
....................         { 
.................... 			idx = get_int(); 
667C:  MOVLB  0
667E:  CALL   2BC6
6682:  MOVFF  01,1D2
.................... 			if (idx < 2) 
6686:  MOVLB  1
6688:  MOVF   xD2,W
668A:  SUBLW  01
668C:  BNC   66E2
.................... 			{ 
.................... 				setup.clock_polarity = idx & 1; 
668E:  MOVF   xD2,W
6690:  ANDLW  01
6692:  MOVLB  0
6694:  MOVWF  xAD
.................... 				sprintf(buf, "$CP %u\r", idx); 
6696:  MOVLW  01
6698:  MOVLB  1
669A:  MOVWF  xA4
669C:  MOVLW  D6
669E:  MOVWF  xA3
66A0:  MOVLW  3C
66A2:  MOVWF  FF6
66A4:  MOVLW  0D
66A6:  MOVWF  FF7
66A8:  MOVLW  04
66AA:  MOVLB  2
66AC:  MOVWF  x41
66AE:  MOVLB  0
66B0:  CALL   31AC
66B4:  MOVFF  1D2,22C
66B8:  MOVLW  1B
66BA:  MOVLB  2
66BC:  MOVWF  x2D
66BE:  MOVLB  0
66C0:  CALL   3324
66C4:  MOVLW  0D
66C6:  MOVLB  2
66C8:  MOVWF  x4E
66CA:  MOVLB  0
66CC:  CALL   318A
.................... 				COM1_send_str(buf); 
66D0:  MOVLW  01
66D2:  MOVLB  2
66D4:  MOVWF  x6A
66D6:  MOVLW  D6
66D8:  MOVWF  x69
66DA:  MOVLB  0
66DC:  CALL   2242
66E0:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		break; 
66E2:  MOVLB  0
66E4:  BRA    6BC8
.................... 		case 'D': 
.................... 		if (toupper(get_char()) == 'I') 
66E6:  CALL   2B0A
66EA:  MOVFF  02,209
66EE:  MOVFF  01,208
66F2:  MOVLB  2
66F4:  MOVF   x09,F
66F6:  BNZ   66FE
66F8:  MOVF   x08,W
66FA:  SUBLW  60
66FC:  BC    670E
66FE:  MOVF   x09,F
6700:  BNZ   670E
6702:  MOVF   x08,W
6704:  SUBLW  7A
6706:  BNC   670E
6708:  MOVF   x08,W
670A:  ANDLW  DF
670C:  BRA    6710
670E:  MOVF   x08,W
6710:  SUBLW  49
6712:  BNZ   6762
....................         { 
.................... 			idx = input_c(); // change to REAL input ports 
6714:  MOVFF  F82,1D2
.................... 			sprintf(buf, "$DR %02X\r", idx); 
6718:  MOVLW  01
671A:  MOVLB  1
671C:  MOVWF  xA4
671E:  MOVLW  D6
6720:  MOVWF  xA3
6722:  MOVLW  44
6724:  MOVWF  FF6
6726:  MOVLW  0D
6728:  MOVWF  FF7
672A:  MOVLW  04
672C:  MOVLB  2
672E:  MOVWF  x41
6730:  MOVLB  0
6732:  CALL   31AC
6736:  MOVFF  1D2,208
673A:  MOVLW  37
673C:  MOVLB  2
673E:  MOVWF  x09
6740:  MOVLB  0
6742:  RCALL  60FC
6744:  MOVLW  0D
6746:  MOVLB  2
6748:  MOVWF  x4E
674A:  MOVLB  0
674C:  CALL   318A
.................... 			COM1_send_str(buf); 
6750:  MOVLW  01
6752:  MOVLB  2
6754:  MOVWF  x6A
6756:  MOVLW  D6
6758:  MOVWF  x69
675A:  MOVLB  0
675C:  CALL   2242
6760:  MOVLB  2
.................... 		} 
.................... 		break; 
6762:  MOVLB  0
6764:  BRA    6BC8
.................... 		case 'O': 
.................... 		if (toupper(get_char()) == 'T') 
6766:  CALL   2B0A
676A:  MOVFF  02,209
676E:  MOVFF  01,208
6772:  MOVLB  2
6774:  MOVF   x09,F
6776:  BNZ   677E
6778:  MOVF   x08,W
677A:  SUBLW  60
677C:  BC    678E
677E:  MOVF   x09,F
6780:  BNZ   678E
6782:  MOVF   x08,W
6784:  SUBLW  7A
6786:  BNC   678E
6788:  MOVF   x08,W
678A:  ANDLW  DF
678C:  BRA    6790
678E:  MOVF   x08,W
6790:  SUBLW  54
6792:  BNZ   67A2
....................         { 
.................... 			value = get_hex(); 
6794:  MOVLB  0
6796:  RCALL  6146
6798:  MOVFF  01,207
679C:  MOVFF  00,206
67A0:  MOVLB  2
.................... 			// output bits 
.................... 		} 
.................... 		break; 
67A2:  MOVLB  0
67A4:  BRA    6BC8
.................... 		case 'R': 
.................... 		if (toupper(get_char()) == 'D') 
67A6:  CALL   2B0A
67AA:  MOVFF  02,209
67AE:  MOVFF  01,208
67B2:  MOVLB  2
67B4:  MOVF   x09,F
67B6:  BNZ   67BE
67B8:  MOVF   x08,W
67BA:  SUBLW  60
67BC:  BC    67CE
67BE:  MOVF   x09,F
67C0:  BNZ   67CE
67C2:  MOVF   x08,W
67C4:  SUBLW  7A
67C6:  BNC   67CE
67C8:  MOVF   x08,W
67CA:  ANDLW  DF
67CC:  BRA    67D0
67CE:  MOVF   x08,W
67D0:  SUBLW  44
67D2:  BNZ   67E4
....................         { 
.................... 			output_high(D2A_RESET); 
67D4:  BSF    F8A.3
.................... 			delay_ms(100); 
67D6:  MOVLW  64
67D8:  MOVWF  x3E
67DA:  MOVLB  0
67DC:  CALL   0FC2
.................... 			output_low(D2A_RESET); 
67E0:  BCF    F8A.3
67E2:  MOVLB  2
.................... 		} 
.................... 		break; 
67E4:  MOVLB  0
67E6:  BRA    6BC8
.................... 		case 'B':             // bit rate 
.................... 		if (toupper(get_char()) == 'R') 
67E8:  CALL   2B0A
67EC:  MOVFF  02,209
67F0:  MOVFF  01,208
67F4:  MOVLB  2
67F6:  MOVF   x09,F
67F8:  BNZ   6800
67FA:  MOVF   x08,W
67FC:  SUBLW  60
67FE:  BC    6810
6800:  MOVF   x09,F
6802:  BNZ   6810
6804:  MOVF   x08,W
6806:  SUBLW  7A
6808:  BNC   6810
680A:  MOVF   x08,W
680C:  ANDLW  DF
680E:  BRA    6812
6810:  MOVF   x08,W
6812:  SUBLW  52
6814:  BNZ   683E
....................         { 
.................... 			bitrate = str_to_long(); 
6816:  MOVLB  0
6818:  BRA    6242
681A:  MOVFF  03,205
681E:  MOVFF  02,204
6822:  MOVFF  01,203
6826:  MOVFF  00,202
.................... 			set_bitrate(bitrate); 
682A:  MOVFF  203,209
682E:  MOVFF  202,208
6832:  MOVFF  203,20B
6836:  MOVFF  202,20A
683A:  BRA    62FE
683C:  MOVLB  2
.................... 		} 
.................... 		break; 
683E:  MOVLB  0
6840:  BRA    6BC8
.................... 		case 'G': 
.................... 		device = get_char(); 
6842:  CALL   2B0A
6846:  MOVFF  01,1D3
.................... 		addr = get_hex(); 
684A:  RCALL  6146
684C:  MOVFF  00,1D4
.................... 		switch (toupper(device)) 
6850:  MOVLB  1
6852:  MOVF   xD3,W
6854:  SUBLW  60
6856:  BC    6864
6858:  MOVF   xD3,W
685A:  SUBLW  7A
685C:  BNC   6864
685E:  MOVF   xD3,W
6860:  ANDLW  DF
6862:  BRA    6866
6864:  MOVF   xD3,W
6866:  XORLW  46
6868:  MOVLB  0
686A:  BZ    6872
686C:  XORLW  02
686E:  BZ    68EC
6870:  BRA    695C
....................         { 
.................... 			case 'F': 
.................... 			chr = get_FPGA_register(addr, &data); 
6872:  MOVFF  1D4,208
6876:  MOVLW  01
6878:  MOVLB  2
687A:  MOVWF  x0A
687C:  MOVLW  D5
687E:  MOVWF  x09
6880:  MOVLB  0
6882:  BRA    638E
6884:  MOVFF  01,1D1
.................... 			sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
6888:  MOVLW  01
688A:  MOVLB  1
688C:  MOVWF  xA4
688E:  MOVLW  D6
6890:  MOVWF  xA3
6892:  MOVLW  4E
6894:  MOVWF  FF6
6896:  MOVLW  0D
6898:  MOVWF  FF7
689A:  MOVLW  07
689C:  MOVLB  2
689E:  MOVWF  x41
68A0:  MOVLB  0
68A2:  CALL   31AC
68A6:  MOVFF  1D4,208
68AA:  MOVLW  37
68AC:  MOVLB  2
68AE:  MOVWF  x09
68B0:  MOVLB  0
68B2:  RCALL  60FC
68B4:  MOVLW  20
68B6:  MOVLB  2
68B8:  MOVWF  x4E
68BA:  MOVLB  0
68BC:  CALL   318A
68C0:  MOVFF  1D1,208
68C4:  MOVLW  37
68C6:  MOVLB  2
68C8:  MOVWF  x09
68CA:  MOVLB  0
68CC:  RCALL  60FC
68CE:  MOVLW  0D
68D0:  MOVLB  2
68D2:  MOVWF  x4E
68D4:  MOVLB  0
68D6:  CALL   318A
.................... 			COM1_send_str(buf); 
68DA:  MOVLW  01
68DC:  MOVLB  2
68DE:  MOVWF  x6A
68E0:  MOVLW  D6
68E2:  MOVWF  x69
68E4:  MOVLB  0
68E6:  CALL   2242
.................... 			break; 
68EA:  BRA    695C
.................... 			case 'D': 
.................... 			data = read_D2A(addr); 
68EC:  MOVFF  1D4,208
68F0:  BRA    6438
68F2:  MOVFF  01,1D5
.................... 			sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
68F6:  MOVLW  01
68F8:  MOVLB  1
68FA:  MOVWF  xA4
68FC:  MOVLW  D6
68FE:  MOVWF  xA3
6900:  MOVLW  60
6902:  MOVWF  FF6
6904:  MOVLW  0D
6906:  MOVWF  FF7
6908:  MOVLW  07
690A:  MOVLB  2
690C:  MOVWF  x41
690E:  MOVLB  0
6910:  CALL   31AC
6914:  MOVFF  1D4,208
6918:  MOVLW  37
691A:  MOVLB  2
691C:  MOVWF  x09
691E:  MOVLB  0
6920:  CALL   60FC
6924:  MOVLW  20
6926:  MOVLB  2
6928:  MOVWF  x4E
692A:  MOVLB  0
692C:  CALL   318A
6930:  MOVFF  1D5,208
6934:  MOVLW  37
6936:  MOVLB  2
6938:  MOVWF  x09
693A:  MOVLB  0
693C:  CALL   60FC
6940:  MOVLW  0D
6942:  MOVLB  2
6944:  MOVWF  x4E
6946:  MOVLB  0
6948:  CALL   318A
.................... 			COM1_send_str(buf); 
694C:  MOVLW  01
694E:  MOVLB  2
6950:  MOVWF  x6A
6952:  MOVLW  D6
6954:  MOVWF  x69
6956:  MOVLB  0
6958:  CALL   2242
.................... 			break; 
.................... 		} 
.................... 		break; 
695C:  BRA    6BC8
.................... 		case 'F': // fill tables 
.................... 		skip_spc(); 
695E:  CALL   2B2A
.................... 		idx = get_char(); // get table designator 
6962:  CALL   2B0A
6966:  MOVFF  01,1D2
.................... 		addr = get_int(); // get table index 
696A:  CALL   2BC6
696E:  MOVFF  01,1D4
.................... 		value = get_int(); // get value to put into table 
6972:  CALL   2BC6
6976:  MOVFF  02,207
697A:  MOVFF  01,206
.................... 		switch (toupper(idx)) 
697E:  MOVLB  1
6980:  MOVF   xD2,W
6982:  SUBLW  60
6984:  BC    6992
6986:  MOVF   xD2,W
6988:  SUBLW  7A
698A:  BNC   6992
698C:  MOVF   xD2,W
698E:  ANDLW  DF
6990:  BRA    6994
6992:  MOVF   xD2,W
6994:  XORLW  4E
6996:  MOVLB  0
6998:  BZ    69A4
699A:  XORLW  1E
699C:  BZ    69CA
699E:  XORLW  13
69A0:  BZ    69F0
69A2:  BRA    6A14
....................         { 
.................... 			case 'N': // negative voltage 
.................... 			if (addr < 3) 
69A4:  MOVLB  1
69A6:  MOVF   xD4,W
69A8:  SUBLW  02
69AA:  BNC   69C6
....................             { 
.................... 				setup.negative_voltage[addr] = value; 
69AC:  BCF    FD8.0
69AE:  RLCF   xD4,W
69B0:  CLRF   03
69B2:  ADDLW  BB
69B4:  MOVWF  FE9
69B6:  MOVLW  00
69B8:  ADDWFC 03,W
69BA:  MOVWF  FEA
69BC:  MOVFF  207,FEC
69C0:  MOVF   FED,F
69C2:  MOVFF  206,FEF
.................... 			} 
.................... 			break; 
69C6:  MOVLB  0
69C8:  BRA    6A14
.................... 			case 'P': // positive voltage 
.................... 			if (addr < 21) 
69CA:  MOVLB  1
69CC:  MOVF   xD4,W
69CE:  SUBLW  14
69D0:  BNC   69EC
....................             { 
.................... 				setup.power_in[addr] = value; 
69D2:  BCF    FD8.0
69D4:  RLCF   xD4,W
69D6:  CLRF   03
69D8:  ADDLW  C7
69DA:  MOVWF  FE9
69DC:  MOVLW  00
69DE:  ADDWFC 03,W
69E0:  MOVWF  FEA
69E2:  MOVFF  207,FEC
69E6:  MOVF   FED,F
69E8:  MOVFF  206,FEF
.................... 			} 
.................... 			break; 
69EC:  MOVLB  0
69EE:  BRA    6A14
.................... 			case 'C': // cont voltage 
.................... 			if (addr < 3) 
69F0:  MOVLB  1
69F2:  MOVF   xD4,W
69F4:  SUBLW  02
69F6:  BNC   6A12
....................             { 
.................... 				setup.cont_voltage[addr] = value; 
69F8:  BCF    FD8.0
69FA:  RLCF   xD4,W
69FC:  CLRF   03
69FE:  ADDLW  C1
6A00:  MOVWF  FE9
6A02:  MOVLW  00
6A04:  ADDWFC 03,W
6A06:  MOVWF  FEA
6A08:  MOVFF  207,FEC
6A0C:  MOVF   FED,F
6A0E:  MOVFF  206,FEF
.................... 			} 
.................... 			break; 
6A12:  MOVLB  0
.................... 		} 
.................... 		break; 
6A14:  BRA    6BC8
.................... 		case 'S': 
.................... 		device = get_char(); 
6A16:  CALL   2B0A
6A1A:  MOVFF  01,1D3
.................... 		addr = get_hex(); 
6A1E:  CALL   6146
6A22:  MOVFF  00,1D4
.................... 		data = get_hex(); 
6A26:  CALL   6146
6A2A:  MOVFF  00,1D5
.................... 		switch (toupper(device)) 
6A2E:  MOVLB  1
6A30:  MOVF   xD3,W
6A32:  SUBLW  60
6A34:  BC    6A42
6A36:  MOVF   xD3,W
6A38:  SUBLW  7A
6A3A:  BNC   6A42
6A3C:  MOVF   xD3,W
6A3E:  ANDLW  DF
6A40:  BRA    6A44
6A42:  MOVF   xD3,W
6A44:  XORLW  46
6A46:  MOVLB  0
6A48:  BZ    6A54
6A4A:  XORLW  02
6A4C:  BZ    6A86
6A4E:  XORLW  12
6A50:  BZ    6AAA
6A52:  BRA    6ABA
....................         { 
.................... 			case 'F': 
.................... 			buf[0] = addr; 
6A54:  MOVFF  1D4,1D6
.................... 			buf[1] = data; 
6A58:  MOVFF  1D5,1D7
.................... 			FPGA_image[addr] = data; 
6A5C:  CLRF   03
6A5E:  MOVLB  1
6A60:  MOVF   xD4,W
6A62:  ADDLW  44
6A64:  MOVWF  FE9
6A66:  MOVLW  01
6A68:  ADDWFC 03,W
6A6A:  MOVWF  FEA
6A6C:  MOVFF  1D5,FEF
.................... 			send_FPGA_command(2, buf); 
6A70:  MOVLW  02
6A72:  MOVLB  2
6A74:  MOVWF  x3E
6A76:  MOVLW  01
6A78:  MOVWF  x40
6A7A:  MOVLW  D6
6A7C:  MOVWF  x3F
6A7E:  MOVLB  0
6A80:  CALL   187C
.................... 			break; 
6A84:  BRA    6ABA
.................... 			case 'D': 
.................... 			D2A_image[addr] = data; 
6A86:  CLRF   03
6A88:  MOVLB  1
6A8A:  MOVF   xD4,W
6A8C:  ADDLW  64
6A8E:  MOVWF  FE9
6A90:  MOVLW  01
6A92:  ADDWFC 03,W
6A94:  MOVWF  FEA
6A96:  MOVFF  1D5,FEF
.................... 			write_D2A(addr, data); 
6A9A:  MOVFF  1D4,208
6A9E:  MOVFF  1D5,209
6AA2:  MOVLB  0
6AA4:  CALL   5B7C
.................... 			break; 
6AA8:  BRA    6ABA
.................... 			case 'V': 
.................... 			allow_write = 2975; 
6AAA:  MOVLW  0B
6AAC:  MOVLB  1
6AAE:  MOVWF  x07
6AB0:  MOVLW  9F
6AB2:  MOVWF  x06
.................... 			write_setup(); 
6AB4:  MOVLB  0
6AB6:  CALL   3410
.................... 			break; 
.................... 		} 
.................... 		break; 
6ABA:  BRA    6BC8
.................... 		case 'T': 
.................... 		if (toupper(get_char()) == 'T') 
6ABC:  CALL   2B0A
6AC0:  MOVFF  02,209
6AC4:  MOVFF  01,208
6AC8:  MOVLB  2
6ACA:  MOVF   x09,F
6ACC:  BNZ   6AD4
6ACE:  MOVF   x08,W
6AD0:  SUBLW  60
6AD2:  BC    6AE4
6AD4:  MOVF   x09,F
6AD6:  BNZ   6AE4
6AD8:  MOVF   x08,W
6ADA:  SUBLW  7A
6ADC:  BNC   6AE4
6ADE:  MOVF   x08,W
6AE0:  ANDLW  DF
6AE2:  BRA    6AE6
6AE4:  MOVF   x08,W
6AE6:  SUBLW  54
6AE8:  BNZ   6B82
....................         if (toupper(get_char()) == 'C') 
6AEA:  MOVLB  0
6AEC:  CALL   2B0A
6AF0:  MOVFF  02,209
6AF4:  MOVFF  01,208
6AF8:  MOVLB  2
6AFA:  MOVF   x09,F
6AFC:  BNZ   6B04
6AFE:  MOVF   x08,W
6B00:  SUBLW  60
6B02:  BC    6B14
6B04:  MOVF   x09,F
6B06:  BNZ   6B14
6B08:  MOVF   x08,W
6B0A:  SUBLW  7A
6B0C:  BNC   6B14
6B0E:  MOVF   x08,W
6B10:  ANDLW  DF
6B12:  BRA    6B16
6B14:  MOVF   x08,W
6B16:  SUBLW  43
6B18:  BNZ   6B82
.................... 		if (toupper(get_char()) == 'C') 
6B1A:  MOVLB  0
6B1C:  CALL   2B0A
6B20:  MOVFF  02,209
6B24:  MOVFF  01,208
6B28:  MOVLB  2
6B2A:  MOVF   x09,F
6B2C:  BNZ   6B34
6B2E:  MOVF   x08,W
6B30:  SUBLW  60
6B32:  BC    6B44
6B34:  MOVF   x09,F
6B36:  BNZ   6B44
6B38:  MOVF   x08,W
6B3A:  SUBLW  7A
6B3C:  BNC   6B44
6B3E:  MOVF   x08,W
6B40:  ANDLW  DF
6B42:  BRA    6B46
6B44:  MOVF   x08,W
6B46:  SUBLW  43
6B48:  BNZ   6B82
.................... 		if (toupper(get_char()) == 'P') 
6B4A:  MOVLB  0
6B4C:  CALL   2B0A
6B50:  MOVFF  02,209
6B54:  MOVFF  01,208
6B58:  MOVLB  2
6B5A:  MOVF   x09,F
6B5C:  BNZ   6B64
6B5E:  MOVF   x08,W
6B60:  SUBLW  60
6B62:  BC    6B74
6B64:  MOVF   x09,F
6B66:  BNZ   6B74
6B68:  MOVF   x08,W
6B6A:  SUBLW  7A
6B6C:  BNC   6B74
6B6E:  MOVF   x08,W
6B70:  ANDLW  DF
6B72:  BRA    6B76
6B74:  MOVF   x08,W
6B76:  SUBLW  50
6B78:  BNZ   6B82
.................... 		ttccp = 1; 
6B7A:  MOVLW  01
6B7C:  MOVLB  1
6B7E:  MOVWF  x42
6B80:  MOVLB  2
.................... 		break; 
6B82:  MOVLB  0
6B84:  BRA    6BC8
.................... 		case '1': // year 
.................... 		setup.year = get_int(); 
6B86:  CALL   2BC6
6B8A:  MOVFF  02,F2
6B8E:  MOVFF  01,F1
.................... 		break; 
6B92:  BRA    6BC8
.................... 		case '2': // week 
.................... 		setup.week = get_int(); 
6B94:  CALL   2BC6
6B98:  MOVFF  01,F3
.................... 		break; 
6B9C:  BRA    6BC8
.................... 		case '3': // unit ID 
.................... 		setup.unit_ID = get_int(); 
6B9E:  CALL   2BC6
6BA2:  MOVFF  02,F5
6BA6:  MOVFF  01,F4
.................... 		break; 
6BAA:  BRA    6BC8
....................  
....................  
....................  
.................... case 'W':  
.................... 		power_output(); 
6BAC:  CALL   1FA4
.................... 		delay_ms(50); 
6BB0:  MOVLW  32
6BB2:  MOVLB  2
6BB4:  MOVWF  x3E
6BB6:  MOVLB  0
6BB8:  CALL   0FC2
.................... 		//ret = 1; 
.................... 		update_all(); 
6BBC:  CALL   1E38
.................... 		break; 
6BC0:  BRA    6BC8
....................  
....................  
....................  
.................... 		default: 
.................... 		return 0; 
6BC2:  MOVLW  00
6BC4:  MOVWF  01
6BC6:  BRA    6BCC
.................... 	} 
.................... 	return 0; 
6BC8:  MOVLW  00
6BCA:  MOVWF  01
6BCC:  GOTO   6C5C (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
.................... { 
.................... 	ULONG bitrate, sub; 
.................... 	bitrate = get_int();//* 100; 
*
3484:  CALL   2BC6
3488:  MOVFF  01,00
348C:  MOVFF  02,01
3490:  CLRF   02
3492:  CLRF   03
3494:  MOVFF  03,22B
3498:  MOVFF  02,22A
349C:  MOVFF  01,229
34A0:  MOVFF  00,228
.................... 	get_char(); 
34A4:  CALL   2B0A
.................... 	sub = get_int(); 
34A8:  CALL   2BC6
34AC:  MOVFF  01,00
34B0:  MOVFF  02,01
34B4:  CLRF   02
34B6:  CLRF   03
34B8:  MOVFF  03,22F
34BC:  MOVFF  02,22E
34C0:  MOVFF  01,22D
34C4:  MOVFF  00,22C
.................... 	 
.................... 	if (peek_char() == '.') 
34C8:  CALL   2AEC
34CC:  MOVFF  02,231
34D0:  MOVFF  01,230
34D4:  MOVLB  2
34D6:  MOVF   01,W
34D8:  SUBLW  2E
34DA:  BNZ   3518
34DC:  MOVF   x31,F
34DE:  BNZ   3518
.................... 	{ 
.................... 		get_char(); 
34E0:  MOVLB  0
34E2:  CALL   2B0A
.................... 		sub = get_int(); 
34E6:  CALL   2BC6
34EA:  MOVFF  01,00
34EE:  MOVFF  02,01
34F2:  CLRF   02
34F4:  CLRF   03
34F6:  MOVFF  03,22F
34FA:  MOVFF  02,22E
34FE:  MOVFF  01,22D
3502:  MOVFF  00,22C
.................... 		bitrate += sub; 
3506:  MOVLB  2
3508:  MOVF   x2C,W
350A:  ADDWF  x28,F
350C:  MOVF   x2D,W
350E:  ADDWFC x29,F
3510:  MOVF   x2E,W
3512:  ADDWFC x2A,F
3514:  MOVF   x2F,W
3516:  ADDWFC x2B,F
.................... 	} 
.................... 	 
.................... 	setup.bitrate = bitrate * 100 + sub; 
3518:  MOVFF  22B,247
351C:  MOVFF  22A,246
3520:  MOVFF  229,245
3524:  MOVFF  228,244
3528:  CLRF   x4B
352A:  CLRF   x4A
352C:  CLRF   x49
352E:  MOVLW  64
3530:  MOVWF  x48
3532:  MOVLB  0
3534:  CALL   1462
3538:  MOVLB  2
353A:  MOVF   x2C,W
353C:  ADDWF  00,W
353E:  MOVLB  0
3540:  MOVWF  xA8
3542:  MOVLB  2
3544:  MOVF   x2D,W
3546:  ADDWFC 01,W
3548:  MOVLB  0
354A:  MOVWF  xA9
.................... 	//	setup.bitrate1= setup.bitrate; 
.................... 	FPGA_set_bitrate(); 
354C:  CALL   1D44
3550:  GOTO   4C2A (RETURN)
.................... 	 
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
.................... { 
.................... 	COM1_send_str("\r\n\n"); 
*
2C8E:  MOVLW  0D
2C90:  MOVLB  2
2C92:  MOVWF  x28
2C94:  MOVLW  0A
2C96:  MOVWF  x29
2C98:  MOVWF  x2A
2C9A:  CLRF   x2B
2C9C:  MOVLW  02
2C9E:  MOVWF  x6A
2CA0:  MOVLW  28
2CA2:  MOVWF  x69
2CA4:  MOVLB  0
2CA6:  CALL   2242
.................... 	COM1_send_str("DS <data soure><cr>  \tSet data source (0-1)\r\n"); 
2CAA:  MOVLW  02
2CAC:  MOVWF  FEA
2CAE:  MOVLW  28
2CB0:  MOVWF  FE9
2CB2:  MOVFF  FF2,267
2CB6:  BCF    FF2.7
2CB8:  MOVLW  2E
2CBA:  MOVWF  01
2CBC:  CLRF   FF7
2CBE:  MOVLW  00
2CC0:  CALL   0434
2CC4:  TBLRD*-
2CC6:  TBLRD*+
2CC8:  MOVFF  FF5,FEE
2CCC:  DECFSZ 01,F
2CCE:  BRA    2CC6
2CD0:  MOVLB  2
2CD2:  BTFSC  x67.7
2CD4:  BSF    FF2.7
2CD6:  MOVLW  02
2CD8:  MOVWF  x6A
2CDA:  MOVLW  28
2CDC:  MOVWF  x69
2CDE:  MOVLB  0
2CE0:  CALL   2242
.................... 	COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
2CE4:  MOVLW  02
2CE6:  MOVWF  FEA
2CE8:  MOVLW  28
2CEA:  MOVWF  FE9
2CEC:  MOVFF  FF2,267
2CF0:  BCF    FF2.7
2CF2:  MOVLW  33
2CF4:  MOVWF  01
2CF6:  CLRF   FF7
2CF8:  MOVLW  00
2CFA:  CALL   047C
2CFE:  TBLRD*-
2D00:  TBLRD*+
2D02:  MOVFF  FF5,FEE
2D06:  DECFSZ 01,F
2D08:  BRA    2D00
2D0A:  MOVLB  2
2D0C:  BTFSC  x67.7
2D0E:  BSF    FF2.7
2D10:  MOVLW  02
2D12:  MOVWF  x6A
2D14:  MOVLW  28
2D16:  MOVWF  x69
2D18:  MOVLB  0
2D1A:  CALL   2242
.................... 	COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
2D1E:  MOVLW  02
2D20:  MOVWF  FEA
2D22:  MOVLW  28
2D24:  MOVWF  FE9
2D26:  MOVFF  FF2,267
2D2A:  BCF    FF2.7
2D2C:  MOVLW  31
2D2E:  MOVWF  01
2D30:  CLRF   FF7
2D32:  MOVLW  00
2D34:  CALL   04CA
2D38:  TBLRD*-
2D3A:  TBLRD*+
2D3C:  MOVFF  FF5,FEE
2D40:  DECFSZ 01,F
2D42:  BRA    2D3A
2D44:  MOVLB  2
2D46:  BTFSC  x67.7
2D48:  BSF    FF2.7
2D4A:  MOVLW  02
2D4C:  MOVWF  x6A
2D4E:  MOVLW  28
2D50:  MOVWF  x69
2D52:  MOVLB  0
2D54:  CALL   2242
.................... 	COM1_send_str("RP <power height><cr>  \tSet power height (0-1)\r\n"); 
2D58:  MOVLW  02
2D5A:  MOVWF  FEA
2D5C:  MOVLW  28
2D5E:  MOVWF  FE9
2D60:  MOVFF  FF2,267
2D64:  BCF    FF2.7
2D66:  MOVLW  31
2D68:  MOVWF  01
2D6A:  CLRF   FF7
2D6C:  MOVLW  00
2D6E:  CALL   0516
2D72:  TBLRD*-
2D74:  TBLRD*+
2D76:  MOVFF  FF5,FEE
2D7A:  DECFSZ 01,F
2D7C:  BRA    2D74
2D7E:  MOVLB  2
2D80:  BTFSC  x67.7
2D82:  BSF    FF2.7
2D84:  MOVLW  02
2D86:  MOVWF  x6A
2D88:  MOVLW  28
2D8A:  MOVWF  x69
2D8C:  MOVLB  0
2D8E:  CALL   2242
.................... 	COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
2D92:  MOVLW  02
2D94:  MOVWF  FEA
2D96:  MOVLW  28
2D98:  MOVWF  FE9
2D9A:  MOVFF  FF2,267
2D9E:  BCF    FF2.7
2DA0:  MOVLW  31
2DA2:  MOVWF  01
2DA4:  CLRF   FF7
2DA6:  MOVLW  00
2DA8:  CALL   0562
2DAC:  TBLRD*-
2DAE:  TBLRD*+
2DB0:  MOVFF  FF5,FEE
2DB4:  DECFSZ 01,F
2DB6:  BRA    2DAE
2DB8:  MOVLB  2
2DBA:  BTFSC  x67.7
2DBC:  BSF    FF2.7
2DBE:  MOVLW  02
2DC0:  MOVWF  x6A
2DC2:  MOVLW  28
2DC4:  MOVWF  x69
2DC6:  MOVLB  0
2DC8:  CALL   2242
.................... 	COM1_send_str("RA <randomizer><cr>  \tSet with/without randomizer (0-1)\r\n"); 
2DCC:  MOVLW  02
2DCE:  MOVWF  FEA
2DD0:  MOVLW  28
2DD2:  MOVWF  FE9
2DD4:  MOVFF  FF2,267
2DD8:  BCF    FF2.7
2DDA:  MOVLW  3A
2DDC:  MOVWF  01
2DDE:  CLRF   FF7
2DE0:  MOVLW  00
2DE2:  CALL   05AE
2DE6:  TBLRD*-
2DE8:  TBLRD*+
2DEA:  MOVFF  FF5,FEE
2DEE:  DECFSZ 01,F
2DF0:  BRA    2DE8
2DF2:  MOVLB  2
2DF4:  BTFSC  x67.7
2DF6:  BSF    FF2.7
2DF8:  MOVLW  02
2DFA:  MOVWF  x6A
2DFC:  MOVLW  28
2DFE:  MOVWF  x69
2E00:  MOVLB  0
2E02:  CALL   2242
.................... 	COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
2E06:  MOVLW  02
2E08:  MOVWF  FEA
2E0A:  MOVLW  28
2E0C:  MOVWF  FE9
2E0E:  MOVFF  FF2,267
2E12:  BCF    FF2.7
2E14:  MOVLW  35
2E16:  MOVWF  01
2E18:  CLRF   FF7
2E1A:  MOVLW  00
2E1C:  CALL   0602
2E20:  TBLRD*-
2E22:  TBLRD*+
2E24:  MOVFF  FF5,FEE
2E28:  DECFSZ 01,F
2E2A:  BRA    2E22
2E2C:  MOVLB  2
2E2E:  BTFSC  x67.7
2E30:  BSF    FF2.7
2E32:  MOVLW  02
2E34:  MOVWF  x6A
2E36:  MOVLW  28
2E38:  MOVWF  x69
2E3A:  MOVLB  0
2E3C:  CALL   2242
.................... 	COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
2E40:  MOVLW  02
2E42:  MOVWF  FEA
2E44:  MOVLW  28
2E46:  MOVWF  FE9
2E48:  MOVFF  FF2,267
2E4C:  BCF    FF2.7
2E4E:  MOVLW  21
2E50:  MOVWF  01
2E52:  CLRF   FF7
2E54:  MOVLW  00
2E56:  CALL   0652
2E5A:  TBLRD*-
2E5C:  TBLRD*+
2E5E:  MOVFF  FF5,FEE
2E62:  DECFSZ 01,F
2E64:  BRA    2E5C
2E66:  MOVLB  2
2E68:  BTFSC  x67.7
2E6A:  BSF    FF2.7
2E6C:  MOVLW  02
2E6E:  MOVWF  x6A
2E70:  MOVLW  28
2E72:  MOVWF  x69
2E74:  MOVLB  0
2E76:  CALL   2242
.................... 	COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
2E7A:  MOVLW  02
2E7C:  MOVWF  FEA
2E7E:  MOVLW  28
2E80:  MOVWF  FE9
2E82:  MOVFF  FF2,267
2E86:  BCF    FF2.7
2E88:  MOVLW  32
2E8A:  MOVWF  01
2E8C:  CLRF   FF7
2E8E:  MOVLW  00
2E90:  CALL   068E
2E94:  TBLRD*-
2E96:  TBLRD*+
2E98:  MOVFF  FF5,FEE
2E9C:  DECFSZ 01,F
2E9E:  BRA    2E96
2EA0:  MOVLB  2
2EA2:  BTFSC  x67.7
2EA4:  BSF    FF2.7
2EA6:  MOVLW  02
2EA8:  MOVWF  x6A
2EAA:  MOVLW  28
2EAC:  MOVWF  x69
2EAE:  MOVLB  0
2EB0:  CALL   2242
.................... 	COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2EB4:  MOVLW  02
2EB6:  MOVWF  FEA
2EB8:  MOVLW  28
2EBA:  MOVWF  FE9
2EBC:  MOVFF  FF2,267
2EC0:  BCF    FF2.7
2EC2:  MOVLW  39
2EC4:  MOVWF  01
2EC6:  CLRF   FF7
2EC8:  MOVLW  00
2ECA:  CALL   06DA
2ECE:  TBLRD*-
2ED0:  TBLRD*+
2ED2:  MOVFF  FF5,FEE
2ED6:  DECFSZ 01,F
2ED8:  BRA    2ED0
2EDA:  MOVLB  2
2EDC:  BTFSC  x67.7
2EDE:  BSF    FF2.7
2EE0:  MOVLW  02
2EE2:  MOVWF  x6A
2EE4:  MOVLW  28
2EE6:  MOVWF  x69
2EE8:  MOVLB  0
2EEA:  CALL   2242
.................... 	COM1_send_str("VE <cr>  \tdisplay version info\r\n"); 
2EEE:  MOVLW  02
2EF0:  MOVWF  FEA
2EF2:  MOVLW  28
2EF4:  MOVWF  FE9
2EF6:  MOVFF  FF2,267
2EFA:  BCF    FF2.7
2EFC:  MOVLW  21
2EFE:  MOVWF  01
2F00:  CLRF   FF7
2F02:  MOVLW  00
2F04:  CALL   072E
2F08:  TBLRD*-
2F0A:  TBLRD*+
2F0C:  MOVFF  FF5,FEE
2F10:  DECFSZ 01,F
2F12:  BRA    2F0A
2F14:  MOVLB  2
2F16:  BTFSC  x67.7
2F18:  BSF    FF2.7
2F1A:  MOVLW  02
2F1C:  MOVWF  x6A
2F1E:  MOVLW  28
2F20:  MOVWF  x69
2F22:  MOVLB  0
2F24:  CALL   2242
.................... 	COM1_send_str("VS <major>.<minor> <cr>  \tset the setup file version\r\n"); 
2F28:  MOVLW  02
2F2A:  MOVWF  FEA
2F2C:  MOVLW  28
2F2E:  MOVWF  FE9
2F30:  MOVFF  FF2,267
2F34:  BCF    FF2.7
2F36:  MOVLW  37
2F38:  MOVWF  01
2F3A:  CLRF   FF7
2F3C:  MOVLW  00
2F3E:  CALL   076A
2F42:  TBLRD*-
2F44:  TBLRD*+
2F46:  MOVFF  FF5,FEE
2F4A:  DECFSZ 01,F
2F4C:  BRA    2F44
2F4E:  MOVLB  2
2F50:  BTFSC  x67.7
2F52:  BSF    FF2.7
2F54:  MOVLW  02
2F56:  MOVWF  x6A
2F58:  MOVLW  28
2F5A:  MOVWF  x69
2F5C:  MOVLB  0
2F5E:  CALL   2242
.................... 	COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
2F62:  MOVLW  02
2F64:  MOVWF  FEA
2F66:  MOVLW  28
2F68:  MOVWF  FE9
2F6A:  MOVFF  FF2,267
2F6E:  BCF    FF2.7
2F70:  MOVLW  31
2F72:  MOVWF  01
2F74:  CLRF   FF7
2F76:  MOVLW  00
2F78:  CALL   07BC
2F7C:  TBLRD*-
2F7E:  TBLRD*+
2F80:  MOVFF  FF5,FEE
2F84:  DECFSZ 01,F
2F86:  BRA    2F7E
2F88:  MOVLB  2
2F8A:  BTFSC  x67.7
2F8C:  BSF    FF2.7
2F8E:  MOVLW  02
2F90:  MOVWF  x6A
2F92:  MOVLW  28
2F94:  MOVWF  x69
2F96:  MOVLB  0
2F98:  CALL   2242
.................... 	COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
2F9C:  MOVLW  02
2F9E:  MOVWF  FEA
2FA0:  MOVLW  28
2FA2:  MOVWF  FE9
2FA4:  MOVFF  FF2,267
2FA8:  BCF    FF2.7
2FAA:  MOVLW  35
2FAC:  MOVWF  01
2FAE:  CLRF   FF7
2FB0:  MOVLW  00
2FB2:  CALL   0808
2FB6:  TBLRD*-
2FB8:  TBLRD*+
2FBA:  MOVFF  FF5,FEE
2FBE:  DECFSZ 01,F
2FC0:  BRA    2FB8
2FC2:  MOVLB  2
2FC4:  BTFSC  x67.7
2FC6:  BSF    FF2.7
2FC8:  MOVLW  02
2FCA:  MOVWF  x6A
2FCC:  MOVLW  28
2FCE:  MOVWF  x69
2FD0:  MOVLB  0
2FD2:  CALL   2242
.................... 	COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
2FD6:  MOVLW  02
2FD8:  MOVWF  FEA
2FDA:  MOVLW  28
2FDC:  MOVWF  FE9
2FDE:  MOVFF  FF2,267
2FE2:  BCF    FF2.7
2FE4:  MOVLW  3B
2FE6:  MOVWF  01
2FE8:  CLRF   FF7
2FEA:  MOVLW  00
2FEC:  CALL   0858
2FF0:  TBLRD*-
2FF2:  TBLRD*+
2FF4:  MOVFF  FF5,FEE
2FF8:  DECFSZ 01,F
2FFA:  BRA    2FF2
2FFC:  MOVLB  2
2FFE:  BTFSC  x67.7
3000:  BSF    FF2.7
3002:  MOVLW  02
3004:  MOVWF  x6A
3006:  MOVLW  28
3008:  MOVWF  x69
300A:  MOVLB  0
300C:  CALL   2242
.................... 	COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
3010:  MOVLW  02
3012:  MOVWF  FEA
3014:  MOVLW  28
3016:  MOVWF  FE9
3018:  MOVFF  FF2,267
301C:  BCF    FF2.7
301E:  MOVLW  3B
3020:  MOVWF  01
3022:  CLRF   FF7
3024:  MOVLW  00
3026:  CALL   08AE
302A:  TBLRD*-
302C:  TBLRD*+
302E:  MOVFF  FF5,FEE
3032:  DECFSZ 01,F
3034:  BRA    302C
3036:  MOVLB  2
3038:  BTFSC  x67.7
303A:  BSF    FF2.7
303C:  MOVLW  02
303E:  MOVWF  x6A
3040:  MOVLW  28
3042:  MOVWF  x69
3044:  MOVLB  0
3046:  CALL   2242
.................... 	COM1_send_str("CS <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
304A:  MOVLW  02
304C:  MOVWF  FEA
304E:  MOVLW  28
3050:  MOVWF  FE9
3052:  MOVFF  FF2,267
3056:  BCF    FF2.7
3058:  MOVLW  2F
305A:  MOVWF  01
305C:  CLRF   FF7
305E:  MOVLW  00
3060:  CALL   0904
3064:  TBLRD*-
3066:  TBLRD*+
3068:  MOVFF  FF5,FEE
306C:  DECFSZ 01,F
306E:  BRA    3066
3070:  MOVLB  2
3072:  BTFSC  x67.7
3074:  BSF    FF2.7
3076:  MOVLW  02
3078:  MOVWF  x6A
307A:  MOVLW  28
307C:  MOVWF  x69
307E:  MOVLB  0
3080:  CALL   2242
.................... 	COM1_send_str("UT <UART Time><cr>  \tSet the stop time, default 15 (0-240)\r\n");// VERSION 3.3  21.03.2016 
3084:  MOVLW  02
3086:  MOVWF  FEA
3088:  MOVLW  28
308A:  MOVWF  FE9
308C:  MOVFF  FF2,267
3090:  BCF    FF2.7
3092:  MOVLW  3D
3094:  MOVWF  01
3096:  CLRF   FF7
3098:  MOVLW  00
309A:  CALL   094E
309E:  TBLRD*-
30A0:  TBLRD*+
30A2:  MOVFF  FF5,FEE
30A6:  DECFSZ 01,F
30A8:  BRA    30A0
30AA:  MOVLB  2
30AC:  BTFSC  x67.7
30AE:  BSF    FF2.7
30B0:  MOVLW  02
30B2:  MOVWF  x6A
30B4:  MOVLW  28
30B6:  MOVWF  x69
30B8:  MOVLB  0
30BA:  CALL   2242
.................... 	COM1_send_str("US <UART Status><cr>  \tSet the Block (0-1)\r\n");// VERSION 3.3  21.03.2016 
30BE:  MOVLW  02
30C0:  MOVWF  FEA
30C2:  MOVLW  28
30C4:  MOVWF  FE9
30C6:  MOVFF  FF2,267
30CA:  BCF    FF2.7
30CC:  MOVLW  2D
30CE:  MOVWF  01
30D0:  CLRF   FF7
30D2:  MOVLW  00
30D4:  CALL   09A6
30D8:  TBLRD*-
30DA:  TBLRD*+
30DC:  MOVFF  FF5,FEE
30E0:  DECFSZ 01,F
30E2:  BRA    30DA
30E4:  MOVLB  2
30E6:  BTFSC  x67.7
30E8:  BSF    FF2.7
30EA:  MOVLW  02
30EC:  MOVWF  x6A
30EE:  MOVLW  28
30F0:  MOVWF  x69
30F2:  MOVLB  0
30F4:  CALL   2242
.................... 	COM1_send_str("BG <UART Change><cr>  \tSet the UART refresh rate [Hz] (1-20)\r\n");// VERSION 3.3  23.03.2016 
30F8:  MOVLW  02
30FA:  MOVWF  FEA
30FC:  MOVLW  28
30FE:  MOVWF  FE9
3100:  MOVFF  FF2,267
3104:  BCF    FF2.7
3106:  MOVLW  3F
3108:  MOVWF  01
310A:  CLRF   FF7
310C:  MOVLW  00
310E:  CALL   09EE
3112:  TBLRD*-
3114:  TBLRD*+
3116:  MOVFF  FF5,FEE
311A:  DECFSZ 01,F
311C:  BRA    3114
311E:  MOVLB  2
3120:  BTFSC  x67.7
3122:  BSF    FF2.7
3124:  MOVLW  02
3126:  MOVWF  x6A
3128:  MOVLW  28
312A:  MOVWF  x69
312C:  MOVLB  0
312E:  CALL   2242
.................... 	COM1_send_str("SV <save all><cr>  \tSave parameters\r"); 
3132:  MOVLW  02
3134:  MOVWF  FEA
3136:  MOVLW  28
3138:  MOVWF  FE9
313A:  MOVFF  FF2,267
313E:  BCF    FF2.7
3140:  MOVLW  25
3142:  MOVWF  01
3144:  CLRF   FF7
3146:  MOVLW  00
3148:  CALL   0A48
314C:  TBLRD*-
314E:  TBLRD*+
3150:  MOVFF  FF5,FEE
3154:  DECFSZ 01,F
3156:  BRA    314E
3158:  MOVLB  2
315A:  BTFSC  x67.7
315C:  BSF    FF2.7
315E:  MOVLW  02
3160:  MOVWF  x6A
3162:  MOVLW  28
3164:  MOVWF  x69
3166:  MOVLB  0
3168:  CALL   2242
.................... 	COM1_send_str("\r\n"); 
316C:  MOVLW  0D
316E:  MOVLB  2
3170:  MOVWF  x28
3172:  MOVLW  0A
3174:  MOVWF  x29
3176:  CLRF   x2A
3178:  MOVLW  02
317A:  MOVWF  x6A
317C:  MOVLW  28
317E:  MOVWF  x69
3180:  MOVLB  0
3182:  CALL   2242
3186:  GOTO   59C8 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
*
38D0:  MOVLB  1
38D2:  CLRF   xC4
38D4:  CLRF   xEE
.................... { 
.................... 	UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
.................... 	ULONG freq, sub; 
.................... 	UINT  val, rp; //VERSION 3.3 us UINT  val, revp, rp; 
.................... 	chr = 2; 
38D6:  MOVLW  02
38D8:  MOVWF  xC5
.................... 	comm_ptr = 0; 
38DA:  CLRF   x41
....................     if (peek_char() == ':') // addressed message? 
38DC:  MOVLB  0
38DE:  CALL   2AEC
38E2:  MOVFF  02,229
38E6:  MOVFF  01,228
38EA:  MOVLB  2
38EC:  MOVF   01,W
38EE:  SUBLW  3A
38F0:  BNZ   3930
38F2:  MOVF   x29,F
38F4:  BNZ   3930
....................     { 
.................... 		get_char(); // skip ':' 
38F6:  MOVLB  0
38F8:  CALL   2B0A
.................... 		addr = get_int(); 
38FC:  CALL   2BC6
3900:  MOVFF  01,1FD
.................... 		if (get_char() != ':') 
3904:  CALL   2B0A
3908:  MOVFF  02,229
390C:  MOVFF  01,228
3910:  MOVLB  2
3912:  MOVF   01,W
3914:  SUBLW  3A
3916:  BNZ   391C
3918:  MOVF   x29,F
391A:  BNZ   391C
.................... 		break; 
.................... 		if (setup.unit_id != addr) 
391C:  MOVLB  1
391E:  MOVF   xFD,W
3920:  MOVLB  0
3922:  SUBWF  xF4,W
3924:  BNZ   392A
3926:  MOVF   xF5,F
3928:  BZ    392E
.................... 		goto aaa; 
392A:  GOTO   59C8
392E:  MOVLB  2
.................... 	} 
....................     break; 
.................... 	c1 = toupper(get_char()); 
3930:  MOVLB  0
3932:  CALL   2B0A
3936:  MOVFF  02,229
393A:  MOVFF  01,228
393E:  MOVLB  2
3940:  MOVF   x29,F
3942:  BNZ   394A
3944:  MOVF   x28,W
3946:  SUBLW  60
3948:  BC    395A
394A:  MOVF   x29,F
394C:  BNZ   395A
394E:  MOVF   x28,W
3950:  SUBLW  7A
3952:  BNC   395A
3954:  MOVF   x28,W
3956:  ANDLW  DF
3958:  BRA    395C
395A:  MOVF   x28,W
395C:  MOVLB  1
395E:  MOVWF  xEF
.................... 	c2 = toupper(get_char()); 
3960:  MOVLB  0
3962:  CALL   2B0A
3966:  MOVFF  02,229
396A:  MOVFF  01,228
396E:  MOVLB  2
3970:  MOVF   x29,F
3972:  BNZ   397A
3974:  MOVF   x28,W
3976:  SUBLW  60
3978:  BC    398A
397A:  MOVF   x29,F
397C:  BNZ   398A
397E:  MOVF   x28,W
3980:  SUBLW  7A
3982:  BNC   398A
3984:  MOVF   x28,W
3986:  ANDLW  DF
3988:  BRA    398C
398A:  MOVF   x28,W
398C:  MOVLB  1
398E:  MOVWF  xF0
.................... 	skip_spc(); 
3990:  MOVLB  0
3992:  CALL   2B2A
.................... 	 
.................... 	if (peek_char() == 13) // is this a query? 
3996:  CALL   2AEC
399A:  MOVFF  02,229
399E:  MOVFF  01,228
39A2:  MOVLB  2
39A4:  MOVF   01,W
39A6:  SUBLW  0D
39A8:  BNZ   39B6
39AA:  MOVF   x29,F
39AC:  BNZ   39B6
....................     query = 1; // YES 
39AE:  MOVLW  01
39B0:  MOVLB  1
39B2:  MOVWF  xEE
39B4:  MOVLB  2
.................... 	switch (c1) 
39B6:  MOVLB  1
39B8:  MOVF   xEF,W
39BA:  XORLW  4C
39BC:  MOVLB  0
39BE:  BZ    3A36
39C0:  XORLW  68
39C2:  BZ    3A7C
39C4:  XORLW  6C
39C6:  BTFSC  FD8.2
39C8:  BRA    3ADC
39CA:  XORLW  0E
39CC:  BTFSC  FD8.2
39CE:  BRA    3B2C
39D0:  XORLW  0B
39D2:  BTFSC  FD8.2
39D4:  BRA    3C2E
39D6:  XORLW  09
39D8:  BTFSC  FD8.2
39DA:  BRA    3D4C
39DC:  XORLW  16
39DE:  BTFSC  FD8.2
39E0:  BRA    407C
39E2:  XORLW  05
39E4:  BTFSC  FD8.2
39E6:  GOTO   46A8
39EA:  XORLW  04
39EC:  BTFSC  FD8.2
39EE:  GOTO   46C6
39F2:  XORLW  06
39F4:  BTFSC  FD8.2
39F6:  GOTO   4708
39FA:  XORLW  17
39FC:  BTFSC  FD8.2
39FE:  GOTO   4926
3A02:  XORLW  0B
3A04:  BTFSC  FD8.2
3A06:  GOTO   4AB2
3A0A:  XORLW  1D
3A0C:  BTFSC  FD8.2
3A0E:  GOTO   4C36
3A12:  XORLW  02
3A14:  BTFSC  FD8.2
3A16:  GOTO   4C5A
3A1A:  XORLW  15
3A1C:  BTFSC  FD8.2
3A1E:  GOTO   50AA
3A22:  XORLW  04
3A24:  BTFSC  FD8.2
3A26:  GOTO   52C8
3A2A:  XORLW  16
3A2C:  BTFSC  FD8.2
3A2E:  GOTO   53DC
3A32:  GOTO   5980
....................     { 
.................... 		case 'L': // login or logout 
.................... 		switch (c2) 
3A36:  MOVLB  1
3A38:  MOVF   xF0,W
3A3A:  XORLW  49
3A3C:  MOVLB  0
3A3E:  BZ    3A46
3A40:  XORLW  06
3A42:  BZ    3A72
3A44:  BRA    3A78
....................         { 
.................... 			case 'I':               // login 
.................... 			val = get_int(); 
3A46:  CALL   2BC6
3A4A:  MOVFF  02,207
3A4E:  MOVFF  01,206
.................... 			if (val == 17592) 
3A52:  MOVLB  2
3A54:  MOVF   x06,W
3A56:  SUBLW  B8
3A58:  BNZ   3A68
3A5A:  MOVF   x07,W
3A5C:  SUBLW  44
3A5E:  BNZ   3A68
....................             ttccp_login = 1; 
3A60:  MOVLW  01
3A62:  MOVLB  1
3A64:  MOVWF  x34
3A66:  MOVLB  2
.................... 			debug_mode = 1; 
3A68:  MOVLW  01
3A6A:  MOVLB  1
3A6C:  MOVWF  x43
.................... 			break; 
3A6E:  MOVLB  0
3A70:  BRA    3A78
.................... 			case 'O':              // logout 
.................... 			ttccp_login = 0; 
3A72:  MOVLB  1
3A74:  CLRF   x34
.................... 			break; 
3A76:  MOVLB  0
.................... 		} 
.................... 		break; 
3A78:  GOTO   59C8
.................... 		case '$': 
.................... 		if (!ttccp_login) break; 
3A7C:  MOVLB  1
3A7E:  MOVF   x34,F
3A80:  BNZ   3A8A
3A82:  MOVLB  0
3A84:  GOTO   59C8
3A88:  MOVLB  1
.................... 		if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
3A8A:  MOVF   xF0,W
3A8C:  SUBLW  52
3A8E:  BNZ   3AD6
....................         { 
.................... 			val = get_int(); 
3A90:  MOVLB  0
3A92:  CALL   2BC6
3A96:  MOVFF  02,207
3A9A:  MOVFF  01,206
.................... 			if (val != 17591) 
3A9E:  MOVLB  2
3AA0:  MOVF   x06,W
3AA2:  SUBLW  B7
3AA4:  BNZ   3AAC
3AA6:  MOVF   x07,W
3AA8:  SUBLW  44
3AAA:  BZ    3AB0
....................             return; 
3AAC:  GOTO   59CA
.................... 			ttccp = 0; 
3AB0:  MOVLB  1
3AB2:  CLRF   x42
.................... 			COM1_send_str("\r\n\n*"); 
3AB4:  MOVLW  0D
3AB6:  MOVLB  2
3AB8:  MOVWF  x0A
3ABA:  MOVLW  0A
3ABC:  MOVWF  x0B
3ABE:  MOVWF  x0C
3AC0:  MOVLW  2A
3AC2:  MOVWF  x0D
3AC4:  CLRF   x0E
3AC6:  MOVLW  02
3AC8:  MOVWF  x6A
3ACA:  MOVLW  0A
3ACC:  MOVWF  x69
3ACE:  MOVLB  0
3AD0:  CALL   2242
3AD4:  MOVLB  1
.................... 		} 
.................... 		break; 
3AD6:  MOVLB  0
3AD8:  GOTO   59C8
.................... 		 
.................... 		/*  case ':': 
.................... 			if(c2 == setup.unit_id+48) 
.................... 			if(toupper(get_char()) == ':') 
.................... 			comm_ptr = 2; 
.................... 			break; 
.................... 		*/ 
.................... 		case 'H': 
.................... 		if (!ttccp_login) break; 
3ADC:  MOVLB  1
3ADE:  MOVF   x34,F
3AE0:  BNZ   3AEA
3AE2:  MOVLB  0
3AE4:  GOTO   59C8
3AE8:  MOVLB  1
.................... 		COM1_send_str("\r\t HELP LIST \r"); 
3AEA:  MOVLW  02
3AEC:  MOVWF  FEA
3AEE:  MOVLW  0F
3AF0:  MOVWF  FE9
3AF2:  MOVFF  FF2,228
3AF6:  BCF    FF2.7
3AF8:  MOVWF  01
3AFA:  CLRF   FF7
3AFC:  MOVLW  00
3AFE:  MOVLB  0
3B00:  CALL   0A88
3B04:  TBLRD*-
3B06:  TBLRD*+
3B08:  MOVFF  FF5,FEE
3B0C:  DECFSZ 01,F
3B0E:  BRA    3B06
3B10:  MOVLB  2
3B12:  BTFSC  x28.7
3B14:  BSF    FF2.7
3B16:  MOVLW  02
3B18:  MOVWF  x6A
3B1A:  MOVLW  0F
3B1C:  MOVWF  x69
3B1E:  MOVLB  0
3B20:  CALL   2242
.................... 		list_help(); 
3B24:  GOTO   2C8E
.................... 		break; 
3B28:  GOTO   59C8
.................... 		 
.................... 		case 'F': 
.................... 		if (!ttccp_login) break; 
3B2C:  MOVLB  1
3B2E:  MOVF   x34,F
3B30:  BNZ   3B3A
3B32:  MOVLB  0
3B34:  GOTO   59C8
3B38:  MOVLB  1
.................... 		switch (c2) 
3B3A:  MOVF   xF0,W
3B3C:  XORLW  52
3B3E:  MOVLB  0
3B40:  BZ    3B44
3B42:  BRA    3C2A
....................         { 
.................... 			case 'R': // set frequency 
.................... 			if(c2 == 'R') 
3B44:  MOVLB  1
3B46:  MOVF   xF0,W
3B48:  SUBLW  52
3B4A:  BNZ   3BEE
....................             { 
.................... 				if (query) 
3B4C:  MOVF   xEE,F
3B4E:  BZ    3B9C
.................... 				{ 
.................... 					sprintf(buf, "FR %lu\r", setup.frequency); 
3B50:  MOVLW  01
3B52:  MOVWF  xA4
3B54:  MOVLW  C6
3B56:  MOVWF  xA3
3B58:  MOVLW  72
3B5A:  MOVWF  FF6
3B5C:  MOVLW  0D
3B5E:  MOVWF  FF7
3B60:  MOVLW  03
3B62:  MOVLB  2
3B64:  MOVWF  x41
3B66:  MOVLB  0
3B68:  CALL   31AC
3B6C:  MOVLW  10
3B6E:  MOVWF  FE9
3B70:  MOVFF  B7,22D
3B74:  MOVFF  B6,22C
3B78:  CALL   31D4
3B7C:  MOVLW  0D
3B7E:  MOVLB  2
3B80:  MOVWF  x4E
3B82:  MOVLB  0
3B84:  CALL   318A
.................... 					COM1_send_str(buf); 
3B88:  MOVLW  01
3B8A:  MOVLB  2
3B8C:  MOVWF  x6A
3B8E:  MOVLW  C6
3B90:  MOVWF  x69
3B92:  MOVLB  0
3B94:  CALL   2242
.................... 				} 
3B98:  BRA    3BEA
3B9A:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					freq = get_frequency(); 
3B9C:  MOVLB  0
3B9E:  CALL   3290
3BA2:  MOVLB  2
3BA4:  CLRF   x01
3BA6:  CLRF   x00
3BA8:  MOVFF  02,1FF
3BAC:  MOVFF  01,1FE
.................... 					setup.frequency = freq; 
3BB0:  MOVFF  1FF,B7
3BB4:  MOVFF  1FE,B6
.................... 					PLL_compute_freq_parameters(freq); 
3BB8:  MOVFF  1FF,229
3BBC:  MOVFF  1FE,228
3BC0:  MOVFF  1FF,233
3BC4:  MOVFF  1FE,232
3BC8:  MOVLB  0
3BCA:  CALL   1552
.................... 					PLL_update(); 
3BCE:  CALL   182A
.................... 					delay_ms(50); 
3BD2:  MOVLW  32
3BD4:  MOVLB  2
3BD6:  MOVWF  x3E
3BD8:  MOVLB  0
3BDA:  CALL   0FC2
.................... 					PLL_update(); 
3BDE:  CALL   182A
.................... 					ret = 1; 
3BE2:  MOVLW  01
3BE4:  MOVLB  1
3BE6:  MOVWF  xC4
3BE8:  MOVLB  0
.................... 				} 
.................... 			} 
3BEA:  BRA    3C2A
3BEC:  MOVLB  1
....................             else 
.................... 			COM1_send_str("\r\nFAULT\r\n"); 
3BEE:  MOVLW  02
3BF0:  MOVWF  FEA
3BF2:  MOVLW  0F
3BF4:  MOVWF  FE9
3BF6:  MOVFF  FF2,228
3BFA:  BCF    FF2.7
3BFC:  MOVLW  0A
3BFE:  MOVWF  01
3C00:  CLRF   FF7
3C02:  MOVLW  00
3C04:  MOVLB  0
3C06:  CALL   0AB2
3C0A:  TBLRD*-
3C0C:  TBLRD*+
3C0E:  MOVFF  FF5,FEE
3C12:  DECFSZ 01,F
3C14:  BRA    3C0C
3C16:  MOVLB  2
3C18:  BTFSC  x28.7
3C1A:  BSF    FF2.7
3C1C:  MOVLW  02
3C1E:  MOVWF  x6A
3C20:  MOVLW  0F
3C22:  MOVWF  x69
3C24:  MOVLB  0
3C26:  CALL   2242
.................... 			break; 
.................... 		} 
.................... 		break; 
3C2A:  GOTO   59C8
.................... 		 
.................... 		case 'M': 
.................... 		if (!ttccp_login) break; 
3C2E:  MOVLB  1
3C30:  MOVF   x34,F
3C32:  BNZ   3C3C
3C34:  MOVLB  0
3C36:  GOTO   59C8
3C3A:  MOVLB  1
.................... 		if (c2 == 'O')  // mode - Addr0 bit 0-3 
3C3C:  MOVF   xF0,W
3C3E:  SUBLW  4F
3C40:  BNZ   3D08
.................... 		{ 
....................             if(query) 
3C42:  MOVF   xEE,F
3C44:  BZ    3C90
....................             { 
.................... 				sprintf(buf, "MO %u\r", setup.mode); 
3C46:  MOVLW  01
3C48:  MOVWF  xA4
3C4A:  MOVLW  C6
3C4C:  MOVWF  xA3
3C4E:  MOVLW  7A
3C50:  MOVWF  FF6
3C52:  MOVLW  0D
3C54:  MOVWF  FF7
3C56:  MOVLW  03
3C58:  MOVLB  2
3C5A:  MOVWF  x41
3C5C:  MOVLB  0
3C5E:  CALL   31AC
3C62:  MOVFF  AC,22C
3C66:  MOVLW  1B
3C68:  MOVLB  2
3C6A:  MOVWF  x2D
3C6C:  MOVLB  0
3C6E:  CALL   3324
3C72:  MOVLW  0D
3C74:  MOVLB  2
3C76:  MOVWF  x4E
3C78:  MOVLB  0
3C7A:  CALL   318A
.................... 				COM1_send_str(buf); 
3C7E:  MOVLW  01
3C80:  MOVLB  2
3C82:  MOVWF  x6A
3C84:  MOVLW  C6
3C86:  MOVWF  x69
3C88:  MOVLB  0
3C8A:  CALL   2242
3C8E:  MOVLB  1
.................... 			} 
.................... 			val = get_int(); 
3C90:  MOVLB  0
3C92:  CALL   2BC6
3C96:  MOVFF  02,207
3C9A:  MOVFF  01,206
.................... 			if (val <= 3) 
3C9E:  MOVLB  2
3CA0:  MOVF   x07,F
3CA2:  BNZ   3CBE
3CA4:  MOVF   x06,W
3CA6:  SUBLW  03
3CA8:  BNC   3CBE
....................             { 
.................... 				setup.mode = val; 
3CAA:  MOVFF  206,AC
.................... 				FPGA_set_reg0(); 
3CAE:  MOVLB  0
3CB0:  CALL   18EA
.................... 				ret = 1; 
3CB4:  MOVLW  01
3CB6:  MOVLB  1
3CB8:  MOVWF  xC4
.................... 			} 
3CBA:  BRA    3D06
3CBC:  MOVLB  2
.................... 			else 
....................             { 
.................... 				COM1_send_str("\r\nFAIL\r\n"); 
3CBE:  MOVLW  02
3CC0:  MOVWF  FEA
3CC2:  MOVLW  0F
3CC4:  MOVWF  FE9
3CC6:  MOVFF  FF2,228
3CCA:  BCF    FF2.7
3CCC:  MOVLW  09
3CCE:  MOVWF  01
3CD0:  CLRF   FF7
3CD2:  MOVLW  00
3CD4:  MOVLB  0
3CD6:  CALL   0AD6
3CDA:  TBLRD*-
3CDC:  TBLRD*+
3CDE:  MOVFF  FF5,FEE
3CE2:  DECFSZ 01,F
3CE4:  BRA    3CDC
3CE6:  MOVLB  2
3CE8:  BTFSC  x28.7
3CEA:  BSF    FF2.7
3CEC:  MOVLW  02
3CEE:  MOVWF  x6A
3CF0:  MOVLW  0F
3CF2:  MOVWF  x69
3CF4:  MOVLB  0
3CF6:  CALL   2242
.................... 				ret = 0; 
3CFA:  MOVLB  1
3CFC:  CLRF   xC4
.................... 				break; 
3CFE:  MOVLB  0
3D00:  GOTO   59C8
3D04:  MOVLB  1
.................... 			} 
.................... 		} 
3D06:  BRA    3D46
.................... 		else 
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
3D08:  MOVLW  02
3D0A:  MOVWF  FEA
3D0C:  MOVLW  0F
3D0E:  MOVWF  FE9
3D10:  MOVFF  FF2,228
3D14:  BCF    FF2.7
3D16:  MOVLW  09
3D18:  MOVWF  01
3D1A:  CLRF   FF7
3D1C:  MOVLW  00
3D1E:  MOVLB  0
3D20:  CALL   0AD6
3D24:  TBLRD*-
3D26:  TBLRD*+
3D28:  MOVFF  FF5,FEE
3D2C:  DECFSZ 01,F
3D2E:  BRA    3D26
3D30:  MOVLB  2
3D32:  BTFSC  x28.7
3D34:  BSF    FF2.7
3D36:  MOVLW  02
3D38:  MOVWF  x6A
3D3A:  MOVLW  0F
3D3C:  MOVWF  x69
3D3E:  MOVLB  0
3D40:  CALL   2242
3D44:  MOVLB  1
.................... 		break; 
3D46:  MOVLB  0
3D48:  GOTO   59C8
.................... 		 
.................... 		case 'D': 
.................... 		if (!ttccp_login) break; 
3D4C:  MOVLB  1
3D4E:  MOVF   x34,F
3D50:  BNZ   3D5A
3D52:  MOVLB  0
3D54:  GOTO   59C8
3D58:  MOVLB  1
.................... 		switch (c2) 
3D5A:  MOVF   xF0,W
3D5C:  XORLW  53
3D5E:  MOVLB  0
3D60:  BZ    3D70
3D62:  XORLW  03
3D64:  BTFSC  FD8.2
3D66:  BRA    3E72
3D68:  XORLW  15
3D6A:  BTFSC  FD8.2
3D6C:  BRA    3F78
3D6E:  BRA    4078
....................         { 
.................... 			// case 'B':  // debug mode 
.................... 			//   debug_mode = 1; 
.................... 			//   break; 
.................... 			case 'S':   // Addr 6 bit 1   setup.data_source 
.................... 			if (query) 
3D70:  MOVLB  1
3D72:  MOVF   xEE,F
3D74:  BZ    3DC2
....................             { 
.................... 				sprintf(buf, "DS %u\r", setup.data_source); 
3D76:  MOVLW  01
3D78:  MOVWF  xA4
3D7A:  MOVLW  C6
3D7C:  MOVWF  xA3
3D7E:  MOVLW  82
3D80:  MOVWF  FF6
3D82:  MOVLW  0D
3D84:  MOVWF  FF7
3D86:  MOVLW  03
3D88:  MOVLB  2
3D8A:  MOVWF  x41
3D8C:  MOVLB  0
3D8E:  CALL   31AC
3D92:  MOVFF  B0,22C
3D96:  MOVLW  1B
3D98:  MOVLB  2
3D9A:  MOVWF  x2D
3D9C:  MOVLB  0
3D9E:  CALL   3324
3DA2:  MOVLW  0D
3DA4:  MOVLB  2
3DA6:  MOVWF  x4E
3DA8:  MOVLB  0
3DAA:  CALL   318A
.................... 				COM1_send_str(buf); 
3DAE:  MOVLW  01
3DB0:  MOVLB  2
3DB2:  MOVWF  x6A
3DB4:  MOVLW  C6
3DB6:  MOVWF  x69
3DB8:  MOVLB  0
3DBA:  CALL   2242
.................... 			} 
3DBE:  BRA    3E68
3DC0:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3DC2:  MOVLB  0
3DC4:  CALL   2BC6
3DC8:  MOVFF  02,207
3DCC:  MOVFF  01,206
.................... 				if (val < 2) 
3DD0:  MOVLB  2
3DD2:  MOVF   x07,F
3DD4:  BNZ   3DEA
3DD6:  MOVF   x06,W
3DD8:  SUBLW  01
3DDA:  BNC   3DEA
.................... 				{ 
.................... 					setup.data_source = val; 
3DDC:  MOVFF  206,B0
.................... 					FPGA_set_reg6(); 
3DE0:  MOVLB  0
3DE2:  CALL   1946
.................... 				} 
3DE6:  BRA    3E68
3DE8:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
3DEA:  MOVLW  02
3DEC:  MOVWF  FEA
3DEE:  MOVLW  0F
3DF0:  MOVWF  FE9
3DF2:  MOVFF  FF2,228
3DF6:  BCF    FF2.7
3DF8:  MOVLW  09
3DFA:  MOVWF  01
3DFC:  CLRF   FF7
3DFE:  MOVLW  00
3E00:  MOVLB  0
3E02:  CALL   0AD6
3E06:  TBLRD*-
3E08:  TBLRD*+
3E0A:  MOVFF  FF5,FEE
3E0E:  DECFSZ 01,F
3E10:  BRA    3E08
3E12:  MOVLB  2
3E14:  BTFSC  x28.7
3E16:  BSF    FF2.7
3E18:  MOVLW  02
3E1A:  MOVWF  x6A
3E1C:  MOVLW  0F
3E1E:  MOVWF  x69
3E20:  MOVLB  0
3E22:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
3E26:  MOVLW  01
3E28:  MOVLB  1
3E2A:  MOVWF  xA4
3E2C:  MOVLW  78
3E2E:  MOVWF  xA3
3E30:  MOVLW  8A
3E32:  MOVWF  FF6
3E34:  MOVLW  0D
3E36:  MOVWF  FF7
3E38:  MOVLW  07
3E3A:  MOVLB  2
3E3C:  MOVWF  x41
3E3E:  MOVLB  0
3E40:  CALL   31AC
3E44:  MOVFF  B0,22C
3E48:  MOVLW  1B
3E4A:  MOVLB  2
3E4C:  MOVWF  x2D
3E4E:  MOVLB  0
3E50:  CALL   3324
3E54:  MOVLW  0D
3E56:  MOVLB  2
3E58:  MOVWF  x4E
3E5A:  MOVLB  0
3E5C:  CALL   318A
.................... 					ret = 0; 
3E60:  MOVLB  1
3E62:  CLRF   xC4
.................... 					break; 
3E64:  MOVLB  0
3E66:  BRA    4078
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
3E68:  MOVLW  01
3E6A:  MOVLB  1
3E6C:  MOVWF  xC4
.................... 			break; 
3E6E:  MOVLB  0
3E70:  BRA    4078
.................... 			 
.................... 			case 'P':   // Addr 0 bit 5   setup.data_polarity 
.................... 			if (query) 
3E72:  MOVLB  1
3E74:  MOVF   xEE,F
3E76:  BZ    3EC4
....................             { 
.................... 				sprintf(buf, "DP %u\r", setup.data_polarity); 
3E78:  MOVLW  01
3E7A:  MOVWF  xA4
3E7C:  MOVLW  C6
3E7E:  MOVWF  xA3
3E80:  MOVLW  96
3E82:  MOVWF  FF6
3E84:  MOVLW  0D
3E86:  MOVWF  FF7
3E88:  MOVLW  03
3E8A:  MOVLB  2
3E8C:  MOVWF  x41
3E8E:  MOVLB  0
3E90:  CALL   31AC
3E94:  MOVFF  AE,22C
3E98:  MOVLW  1B
3E9A:  MOVLB  2
3E9C:  MOVWF  x2D
3E9E:  MOVLB  0
3EA0:  CALL   3324
3EA4:  MOVLW  0D
3EA6:  MOVLB  2
3EA8:  MOVWF  x4E
3EAA:  MOVLB  0
3EAC:  CALL   318A
.................... 				COM1_send_str(buf); 
3EB0:  MOVLW  01
3EB2:  MOVLB  2
3EB4:  MOVWF  x6A
3EB6:  MOVLW  C6
3EB8:  MOVWF  x69
3EBA:  MOVLB  0
3EBC:  CALL   2242
.................... 			} 
3EC0:  BRA    3F6E
3EC2:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3EC4:  MOVLB  0
3EC6:  CALL   2BC6
3ECA:  MOVFF  02,207
3ECE:  MOVFF  01,206
.................... 				if (val < 2) 
3ED2:  MOVLB  2
3ED4:  MOVF   x07,F
3ED6:  BNZ   3EF0
3ED8:  MOVF   x06,W
3EDA:  SUBLW  01
3EDC:  BNC   3EF0
.................... 				{ 
.................... 					setup.data_polarity = 1 - val;	// VERSION 3.6: DP0: INVERT, DP1: NORMAL 
3EDE:  MOVLW  01
3EE0:  BSF    FD8.0
3EE2:  SUBFWB x06,W
3EE4:  MOVLB  0
3EE6:  MOVWF  xAE
.................... 													// Instead: 	DP0: NORMAL, DP1: INVERT 
.................... 					FPGA_set_reg0(); 
3EE8:  CALL   18EA
.................... 				} 
3EEC:  BRA    3F6E
3EEE:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
3EF0:  MOVLW  02
3EF2:  MOVWF  FEA
3EF4:  MOVLW  0F
3EF6:  MOVWF  FE9
3EF8:  MOVFF  FF2,228
3EFC:  BCF    FF2.7
3EFE:  MOVLW  09
3F00:  MOVWF  01
3F02:  CLRF   FF7
3F04:  MOVLW  00
3F06:  MOVLB  0
3F08:  CALL   0AD6
3F0C:  TBLRD*-
3F0E:  TBLRD*+
3F10:  MOVFF  FF5,FEE
3F14:  DECFSZ 01,F
3F16:  BRA    3F0E
3F18:  MOVLB  2
3F1A:  BTFSC  x28.7
3F1C:  BSF    FF2.7
3F1E:  MOVLW  02
3F20:  MOVWF  x6A
3F22:  MOVLW  0F
3F24:  MOVWF  x69
3F26:  MOVLB  0
3F28:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
3F2C:  MOVLW  01
3F2E:  MOVLB  1
3F30:  MOVWF  xA4
3F32:  MOVLW  78
3F34:  MOVWF  xA3
3F36:  MOVLW  9E
3F38:  MOVWF  FF6
3F3A:  MOVLW  0D
3F3C:  MOVWF  FF7
3F3E:  MOVLW  07
3F40:  MOVLB  2
3F42:  MOVWF  x41
3F44:  MOVLB  0
3F46:  CALL   31AC
3F4A:  MOVFF  AE,22C
3F4E:  MOVLW  1B
3F50:  MOVLB  2
3F52:  MOVWF  x2D
3F54:  MOVLB  0
3F56:  CALL   3324
3F5A:  MOVLW  0D
3F5C:  MOVLB  2
3F5E:  MOVWF  x4E
3F60:  MOVLB  0
3F62:  CALL   318A
.................... 					ret = 0; 
3F66:  MOVLB  1
3F68:  CLRF   xC4
.................... 					break; 
3F6A:  MOVLB  0
3F6C:  BRA    4078
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
3F6E:  MOVLW  01
3F70:  MOVLB  1
3F72:  MOVWF  xC4
.................... 			break; 
3F74:  MOVLB  0
3F76:  BRA    4078
.................... 			 
.................... 			case 'E':   // Addr 0 bit 7   setup.SOQPSK 
.................... 			if (query) 
3F78:  MOVLB  1
3F7A:  MOVF   xEE,F
3F7C:  BZ    3FCA
....................             { 
.................... 				sprintf(buf,"DE %u\r", setup.SOQPSK); 
3F7E:  MOVLW  01
3F80:  MOVWF  xA4
3F82:  MOVLW  C6
3F84:  MOVWF  xA3
3F86:  MOVLW  AA
3F88:  MOVWF  FF6
3F8A:  MOVLW  0D
3F8C:  MOVWF  FF7
3F8E:  MOVLW  03
3F90:  MOVLB  2
3F92:  MOVWF  x41
3F94:  MOVLB  0
3F96:  CALL   31AC
3F9A:  MOVFF  B4,22C
3F9E:  MOVLW  1B
3FA0:  MOVLB  2
3FA2:  MOVWF  x2D
3FA4:  MOVLB  0
3FA6:  CALL   3324
3FAA:  MOVLW  0D
3FAC:  MOVLB  2
3FAE:  MOVWF  x4E
3FB0:  MOVLB  0
3FB2:  CALL   318A
.................... 				COM1_send_str(buf); 
3FB6:  MOVLW  01
3FB8:  MOVLB  2
3FBA:  MOVWF  x6A
3FBC:  MOVLW  C6
3FBE:  MOVWF  x69
3FC0:  MOVLB  0
3FC2:  CALL   2242
.................... 			} 
3FC6:  BRA    4070
3FC8:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3FCA:  MOVLB  0
3FCC:  CALL   2BC6
3FD0:  MOVFF  02,207
3FD4:  MOVFF  01,206
.................... 				if (val < 2) 
3FD8:  MOVLB  2
3FDA:  MOVF   x07,F
3FDC:  BNZ   3FF2
3FDE:  MOVF   x06,W
3FE0:  SUBLW  01
3FE2:  BNC   3FF2
.................... 				{ 
.................... 					setup.SOQPSK = val; 
3FE4:  MOVFF  206,B4
.................... 					FPGA_set_reg0(); 
3FE8:  MOVLB  0
3FEA:  CALL   18EA
.................... 				} 
3FEE:  BRA    4070
3FF0:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
3FF2:  MOVLW  02
3FF4:  MOVWF  FEA
3FF6:  MOVLW  0F
3FF8:  MOVWF  FE9
3FFA:  MOVFF  FF2,228
3FFE:  BCF    FF2.7
4000:  MOVLW  09
4002:  MOVWF  01
4004:  CLRF   FF7
4006:  MOVLW  00
4008:  MOVLB  0
400A:  CALL   0AD6
400E:  TBLRD*-
4010:  TBLRD*+
4012:  MOVFF  FF5,FEE
4016:  DECFSZ 01,F
4018:  BRA    4010
401A:  MOVLB  2
401C:  BTFSC  x28.7
401E:  BSF    FF2.7
4020:  MOVLW  02
4022:  MOVWF  x6A
4024:  MOVLW  0F
4026:  MOVWF  x69
4028:  MOVLB  0
402A:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
402E:  MOVLW  01
4030:  MOVLB  1
4032:  MOVWF  xA4
4034:  MOVLW  78
4036:  MOVWF  xA3
4038:  MOVLW  B2
403A:  MOVWF  FF6
403C:  MOVLW  0D
403E:  MOVWF  FF7
4040:  MOVLW  07
4042:  MOVLB  2
4044:  MOVWF  x41
4046:  MOVLB  0
4048:  CALL   31AC
404C:  MOVFF  B4,22C
4050:  MOVLW  1B
4052:  MOVLB  2
4054:  MOVWF  x2D
4056:  MOVLB  0
4058:  CALL   3324
405C:  MOVLW  0D
405E:  MOVLB  2
4060:  MOVWF  x4E
4062:  MOVLB  0
4064:  CALL   318A
.................... 					ret = 0; 
4068:  MOVLB  1
406A:  CLRF   xC4
.................... 					break; 
406C:  MOVLB  0
406E:  BRA    4078
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
4070:  MOVLW  01
4072:  MOVLB  1
4074:  MOVWF  xC4
.................... 			break; 
4076:  MOVLB  0
.................... 		} 
.................... 		break; 
4078:  GOTO   59C8
.................... 		 
.................... 		case 'R': 
.................... 		if (!ttccp_login) break; 
407C:  MOVLB  1
407E:  MOVF   x34,F
4080:  BNZ   408A
4082:  MOVLB  0
4084:  GOTO   59C8
4088:  MOVLB  1
.................... 		switch (c2) 
408A:  MOVLW  41
408C:  SUBWF  xF0,W
408E:  ADDLW  F0
4090:  BTFSC  FD8.0
4092:  BRA    46A2
4094:  ADDLW  10
4096:  MOVLB  0
4098:  GOTO   59D0
....................         { 
.................... 			case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
.................... 			if (query) 
409C:  MOVLB  1
409E:  MOVF   xEE,F
40A0:  BZ    40EE
....................             { 
.................... 				sprintf(buf, "RP %u\r", setup.power_high); 
40A2:  MOVLW  01
40A4:  MOVWF  xA4
40A6:  MOVLW  C6
40A8:  MOVWF  xA3
40AA:  MOVLW  BE
40AC:  MOVWF  FF6
40AE:  MOVLW  0D
40B0:  MOVWF  FF7
40B2:  MOVLW  03
40B4:  MOVLB  2
40B6:  MOVWF  x41
40B8:  MOVLB  0
40BA:  CALL   31AC
40BE:  MOVFF  B3,22C
40C2:  MOVLW  1B
40C4:  MOVLB  2
40C6:  MOVWF  x2D
40C8:  MOVLB  0
40CA:  CALL   3324
40CE:  MOVLW  0D
40D0:  MOVLB  2
40D2:  MOVWF  x4E
40D4:  MOVLB  0
40D6:  CALL   318A
.................... 				COM1_send_str(buf); 
40DA:  MOVLW  01
40DC:  MOVLB  2
40DE:  MOVWF  x6A
40E0:  MOVLW  C6
40E2:  MOVWF  x69
40E4:  MOVLB  0
40E6:  CALL   2242
.................... 			} 
40EA:  BRA    41F4
40EC:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
40EE:  MOVLB  0
40F0:  CALL   2BC6
40F4:  MOVFF  02,207
40F8:  MOVFF  01,206
.................... 				if (val < 2) 
40FC:  MOVLB  2
40FE:  MOVF   x07,F
4100:  BNZ   4176
4102:  MOVF   x06,W
4104:  SUBLW  01
4106:  BNC   4176
.................... 				{ 
.................... 					if(setup.rc == 1) 
4108:  MOVLB  0
410A:  DECFSZ xFA,W
410C:  BRA    412E
410E:  MOVF   xFB,F
4110:  BNZ   412E
.................... 					{ 
.................... 						if(val == 0) 
4112:  MOVLB  2
4114:  MOVF   x06,F
4116:  BNZ   4128
4118:  MOVF   x07,F
411A:  BNZ   4128
.................... 						{ 
.................... 							setup.rp =1; 
411C:  MOVLB  0
411E:  CLRF   xFD
4120:  MOVLW  01
4122:  MOVWF  xFC
.................... 						} 
4124:  BRA    412E
4126:  MOVLB  2
.................... 						else 
.................... 						 
.................... 						setup.rp = 0; 
4128:  MOVLB  0
412A:  CLRF   xFD
412C:  CLRF   xFC
.................... 					} 
.................... 					if(val == 1) 
412E:  MOVLB  2
4130:  DECFSZ x06,W
4132:  BRA    4156
4134:  MOVF   x07,F
4136:  BNZ   4156
.................... 					{ 
.................... 						rp_command = setup.rp = 0; 
4138:  MOVLB  0
413A:  CLRF   xFD
413C:  CLRF   xFC
413E:  MOVFF  FC,1A0
.................... 						delay_ms(50); 
4142:  MOVLW  32
4144:  MOVLB  2
4146:  MOVWF  x3E
4148:  MOVLB  0
414A:  CALL   0FC2
.................... 						update_all(); 
414E:  CALL   1E38
.................... 					} 
4152:  BRA    4172
4154:  MOVLB  2
.................... 					else 
.................... 					{ 
.................... 						rp_command = setup.rp = 1; 
4156:  MOVLB  0
4158:  CLRF   xFD
415A:  MOVLW  01
415C:  MOVWF  xFC
415E:  MOVFF  FC,1A0
.................... 						delay_ms(50); 
4162:  MOVLW  32
4164:  MOVLB  2
4166:  MOVWF  x3E
4168:  MOVLB  0
416A:  CALL   0FC2
.................... 						update_all(); 
416E:  CALL   1E38
.................... 					} 
.................... 				} 
4172:  BRA    41F4
4174:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
4176:  MOVLW  02
4178:  MOVWF  FEA
417A:  MOVLW  0F
417C:  MOVWF  FE9
417E:  MOVFF  FF2,228
4182:  BCF    FF2.7
4184:  MOVLW  09
4186:  MOVWF  01
4188:  CLRF   FF7
418A:  MOVLW  00
418C:  MOVLB  0
418E:  CALL   0AD6
4192:  TBLRD*-
4194:  TBLRD*+
4196:  MOVFF  FF5,FEE
419A:  DECFSZ 01,F
419C:  BRA    4194
419E:  MOVLB  2
41A0:  BTFSC  x28.7
41A2:  BSF    FF2.7
41A4:  MOVLW  02
41A6:  MOVWF  x6A
41A8:  MOVLW  0F
41AA:  MOVWF  x69
41AC:  MOVLB  0
41AE:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
41B2:  MOVLW  01
41B4:  MOVLB  1
41B6:  MOVWF  xA4
41B8:  MOVLW  78
41BA:  MOVWF  xA3
41BC:  MOVLW  C6
41BE:  MOVWF  FF6
41C0:  MOVLW  0D
41C2:  MOVWF  FF7
41C4:  MOVLW  07
41C6:  MOVLB  2
41C8:  MOVWF  x41
41CA:  MOVLB  0
41CC:  CALL   31AC
41D0:  MOVFF  1A0,22C
41D4:  MOVLW  1B
41D6:  MOVLB  2
41D8:  MOVWF  x2D
41DA:  MOVLB  0
41DC:  CALL   3324
41E0:  MOVLW  0D
41E2:  MOVLB  2
41E4:  MOVWF  x4E
41E6:  MOVLB  0
41E8:  CALL   318A
.................... 					ret = 0; 
41EC:  MOVLB  1
41EE:  CLRF   xC4
.................... 					break; 
41F0:  BRA    46A2
41F2:  MOVLB  0
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
41F4:  MOVLW  01
41F6:  MOVLB  1
41F8:  MOVWF  xC4
.................... 			break; 
41FA:  BRA    46A2
.................... 			 
.................... 			case 'F': // discrete output - power amp on/off       setup.power_amp 
.................... 			if (query) 
41FC:  MOVLB  1
41FE:  MOVF   xEE,F
4200:  BZ    424E
....................             { 
.................... 				sprintf(buf, "RF %u\r", pwr_command); 
4202:  MOVLW  01
4204:  MOVWF  xA4
4206:  MOVLW  C6
4208:  MOVWF  xA3
420A:  MOVLW  D2
420C:  MOVWF  FF6
420E:  MOVLW  0D
4210:  MOVWF  FF7
4212:  MOVLW  03
4214:  MOVLB  2
4216:  MOVWF  x41
4218:  MOVLB  0
421A:  CALL   31AC
421E:  MOVFF  1A1,22C
4222:  MOVLW  1B
4224:  MOVLB  2
4226:  MOVWF  x2D
4228:  MOVLB  0
422A:  CALL   3324
422E:  MOVLW  0D
4230:  MOVLB  2
4232:  MOVWF  x4E
4234:  MOVLB  0
4236:  CALL   318A
.................... 				COM1_send_str(buf); 
423A:  MOVLW  01
423C:  MOVLB  2
423E:  MOVWF  x6A
4240:  MOVLW  C6
4242:  MOVWF  x69
4244:  MOVLB  0
4246:  CALL   2242
.................... 			} 
424A:  BRA    43BA
424C:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
424E:  MOVLB  0
4250:  CALL   2BC6
4254:  MOVFF  02,207
4258:  MOVFF  01,206
.................... 				if (val == 0) 
425C:  MOVLB  2
425E:  MOVF   x06,F
4260:  BNZ   42CA
4262:  MOVF   x07,F
4264:  BNZ   42CA
.................... 				{ 
.................... 					if(setup.cot || setup.rc) 
4266:  MOVLB  0
4268:  MOVF   xF8,W
426A:  IORWF  xF9,W
426C:  BNZ   4274
426E:  MOVF   xFA,W
4270:  IORWF  xFB,W
4272:  BZ    429A
.................... 					{ 
.................... 						pwr_command = 0; 
4274:  MOVLB  1
4276:  CLRF   xA1
.................... 						setup.pwr = pwr_command; 
4278:  MOVLB  0
427A:  CLRF   xAB
427C:  MOVFF  1A1,AA
.................... 						delay_ms(60); 
4280:  MOVLW  3C
4282:  MOVLB  2
4284:  MOVWF  x3E
4286:  MOVLB  0
4288:  CALL   0FC2
.................... 						update_all(); 
428C:  CALL   1E38
.................... 						ret = 1; 
4290:  MOVLW  01
4292:  MOVLB  1
4294:  MOVWF  xC4
.................... 					} 
4296:  BRA    42C6
4298:  MOVLB  0
.................... 					else if(setup.cot == 0 || setup.rc) 
429A:  MOVF   xF8,F
429C:  BNZ   42A2
429E:  MOVF   xF9,F
42A0:  BZ    42A8
42A2:  MOVF   xFA,W
42A4:  IORWF  xFB,W
42A6:  BZ    42C4
.................... 					{ 
.................... 						pwr_command = 0; 
42A8:  MOVLB  1
42AA:  CLRF   xA1
.................... 						setup.pwr = pwr_command; 
42AC:  MOVLB  0
42AE:  CLRF   xAB
42B0:  MOVFF  1A1,AA
.................... 						delay_ms(60); 
42B4:  MOVLW  3C
42B6:  MOVLB  2
42B8:  MOVWF  x3E
42BA:  MOVLB  0
42BC:  CALL   0FC2
.................... 						update_all(); 
42C0:  CALL   1E38
42C4:  MOVLB  1
.................... 					} 
.................... 				} 
42C6:  BRA    43B8
42C8:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					if (val == 1) 
42CA:  DECFSZ x06,W
42CC:  BRA    433C
42CE:  MOVF   x07,F
42D0:  BNZ   433C
.................... 					{ 
.................... 						if(setup.cot) 
42D2:  MOVLB  0
42D4:  MOVF   xF8,W
42D6:  IORWF  xF9,W
42D8:  BZ    4306
.................... 						{ 
.................... 							pwr_command = 1; 
42DA:  MOVLW  01
42DC:  MOVLB  1
42DE:  MOVWF  xA1
.................... 							setup.pwr = pwr_command; 
42E0:  MOVLB  0
42E2:  CLRF   xAB
42E4:  MOVFF  1A1,AA
.................... 							power_output(); 
42E8:  CALL   1FA4
.................... 							delay_ms(50); 
42EC:  MOVLW  32
42EE:  MOVLB  2
42F0:  MOVWF  x3E
42F2:  MOVLB  0
42F4:  CALL   0FC2
.................... 							ret = 1; 
42F8:  MOVLW  01
42FA:  MOVLB  1
42FC:  MOVWF  xC4
.................... 							update_all(); 
42FE:  MOVLB  0
4300:  CALL   1E38
.................... 						} 
4304:  BRA    4338
.................... 						else if(setup.cot == 0) 
4306:  MOVF   xF8,F
4308:  BNZ   4338
430A:  MOVF   xF9,F
430C:  BNZ   4338
.................... 						{ 
.................... 							pwr_command = 1; 
430E:  MOVLW  01
4310:  MOVLB  1
4312:  MOVWF  xA1
.................... 							setup.pwr = pwr_command; 
4314:  MOVLB  0
4316:  CLRF   xAB
4318:  MOVFF  1A1,AA
.................... 							power_output(); 
431C:  CALL   1FA4
.................... 							delay_ms(50); 
4320:  MOVLW  32
4322:  MOVLB  2
4324:  MOVWF  x3E
4326:  MOVLB  0
4328:  CALL   0FC2
.................... 							ret = 1; 
432C:  MOVLW  01
432E:  MOVLB  1
4330:  MOVWF  xC4
.................... 							update_all(); 
4332:  MOVLB  0
4334:  CALL   1E38
.................... 						} 
.................... 					} 
4338:  BRA    43BA
433A:  MOVLB  2
.................... 					else 
.................... 					{ 
.................... 						COM1_send_str("\r\nFAIL\r\n"); 
433C:  MOVLW  02
433E:  MOVWF  FEA
4340:  MOVLW  0F
4342:  MOVWF  FE9
4344:  MOVFF  FF2,228
4348:  BCF    FF2.7
434A:  MOVLW  09
434C:  MOVWF  01
434E:  CLRF   FF7
4350:  MOVLW  00
4352:  MOVLB  0
4354:  CALL   0AD6
4358:  TBLRD*-
435A:  TBLRD*+
435C:  MOVFF  FF5,FEE
4360:  DECFSZ 01,F
4362:  BRA    435A
4364:  MOVLB  2
4366:  BTFSC  x28.7
4368:  BSF    FF2.7
436A:  MOVLW  02
436C:  MOVWF  x6A
436E:  MOVLW  0F
4370:  MOVWF  x69
4372:  MOVLB  0
4374:  CALL   2242
.................... 						sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
4378:  MOVLW  01
437A:  MOVLB  1
437C:  MOVWF  xA4
437E:  MOVLW  78
4380:  MOVWF  xA3
4382:  MOVLW  DA
4384:  MOVWF  FF6
4386:  MOVLW  0D
4388:  MOVWF  FF7
438A:  MOVLW  07
438C:  MOVLB  2
438E:  MOVWF  x41
4390:  MOVLB  0
4392:  CALL   31AC
4396:  MOVFF  1A1,22C
439A:  MOVLW  1B
439C:  MOVLB  2
439E:  MOVWF  x2D
43A0:  MOVLB  0
43A2:  CALL   3324
43A6:  MOVLW  0D
43A8:  MOVLB  2
43AA:  MOVWF  x4E
43AC:  MOVLB  0
43AE:  CALL   318A
.................... 						ret = 0; 
43B2:  MOVLB  1
43B4:  CLRF   xC4
.................... 						break; 
43B6:  BRA    46A2
43B8:  MOVLB  0
.................... 					} 
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
43BA:  MOVLW  01
43BC:  MOVLB  1
43BE:  MOVWF  xC4
.................... 			break; 
43C0:  BRA    46A2
.................... 			 
.................... 			case 'C': 
....................          	if (query) 
43C2:  MOVLB  1
43C4:  MOVF   xEE,F
43C6:  BZ    4414
....................             { 
.................... 				sprintf(buf, "RC %lu\r", setup.rc); 
43C8:  MOVLW  01
43CA:  MOVWF  xA4
43CC:  MOVLW  C6
43CE:  MOVWF  xA3
43D0:  MOVLW  E6
43D2:  MOVWF  FF6
43D4:  MOVLW  0D
43D6:  MOVWF  FF7
43D8:  MOVLW  03
43DA:  MOVLB  2
43DC:  MOVWF  x41
43DE:  MOVLB  0
43E0:  CALL   31AC
43E4:  MOVLW  10
43E6:  MOVWF  FE9
43E8:  MOVFF  FB,22D
43EC:  MOVFF  FA,22C
43F0:  CALL   31D4
43F4:  MOVLW  0D
43F6:  MOVLB  2
43F8:  MOVWF  x4E
43FA:  MOVLB  0
43FC:  CALL   318A
.................... 				COM1_send_str(buf); 
4400:  MOVLW  01
4402:  MOVLB  2
4404:  MOVWF  x6A
4406:  MOVLW  C6
4408:  MOVWF  x69
440A:  MOVLB  0
440C:  CALL   2242
.................... 			} 
4410:  BRA    44AE
4412:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4414:  MOVLB  0
4416:  CALL   2BC6
441A:  MOVFF  02,207
441E:  MOVFF  01,206
.................... 				if(val < 2) 
4422:  MOVLB  2
4424:  MOVF   x07,F
4426:  BNZ   4472
4428:  MOVF   x06,W
442A:  SUBLW  01
442C:  BNC   4472
.................... 				{ 
.................... 					if(val == 0) 
442E:  MOVF   x06,F
4430:  BNZ   444E
4432:  MOVF   x07,F
4434:  BNZ   444E
.................... 					{ 
.................... 						setup.rc = 0; 
4436:  MOVLB  0
4438:  CLRF   xFB
443A:  CLRF   xFA
.................... 						delay_ms(50); 
443C:  MOVLW  32
443E:  MOVLB  2
4440:  MOVWF  x3E
4442:  MOVLB  0
4444:  CALL   0FC2
.................... 						update_all(); 
4448:  CALL   1E38
444C:  MOVLB  2
.................... 					} 
.................... 					if(val == 1) 
444E:  DECFSZ x06,W
4450:  BRA    4470
4452:  MOVF   x07,F
4454:  BNZ   4470
.................... 					{ 
.................... 						setup.rc = 1; 
4456:  MOVLB  0
4458:  CLRF   xFB
445A:  MOVLW  01
445C:  MOVWF  xFA
.................... 						delay_ms(50); 
445E:  MOVLW  32
4460:  MOVLB  2
4462:  MOVWF  x3E
4464:  MOVLB  0
4466:  CALL   0FC2
.................... 						update_all(); 
446A:  CALL   1E38
446E:  MOVLB  2
.................... 					} 
.................... 				} 
4470:  BRA    44B0
.................... 				else 
.................... 				COM1_send_str("\r\nFAULT\r\n"); 
4472:  MOVLW  02
4474:  MOVWF  FEA
4476:  MOVLW  0F
4478:  MOVWF  FE9
447A:  MOVFF  FF2,228
447E:  BCF    FF2.7
4480:  MOVLW  0A
4482:  MOVWF  01
4484:  CLRF   FF7
4486:  MOVLW  00
4488:  MOVLB  0
448A:  CALL   0AB2
448E:  TBLRD*-
4490:  TBLRD*+
4492:  MOVFF  FF5,FEE
4496:  DECFSZ 01,F
4498:  BRA    4490
449A:  MOVLB  2
449C:  BTFSC  x28.7
449E:  BSF    FF2.7
44A0:  MOVLW  02
44A2:  MOVWF  x6A
44A4:  MOVLW  0F
44A6:  MOVWF  x69
44A8:  MOVLB  0
44AA:  CALL   2242
44AE:  MOVLB  2
.................... 			} 
.................... 			break; 
44B0:  MOVLB  1
44B2:  BRA    46A2
.................... 			 
.................... 			case 'B': 
....................             if (query) 
44B4:  MOVLB  1
44B6:  MOVF   xEE,F
44B8:  BZ    4506
....................             { 
.................... 				sprintf(buf, "RB %lu\r", setup.cot); 
44BA:  MOVLW  01
44BC:  MOVWF  xA4
44BE:  MOVLW  C6
44C0:  MOVWF  xA3
44C2:  MOVLW  EE
44C4:  MOVWF  FF6
44C6:  MOVLW  0D
44C8:  MOVWF  FF7
44CA:  MOVLW  03
44CC:  MOVLB  2
44CE:  MOVWF  x41
44D0:  MOVLB  0
44D2:  CALL   31AC
44D6:  MOVLW  10
44D8:  MOVWF  FE9
44DA:  MOVFF  F9,22D
44DE:  MOVFF  F8,22C
44E2:  CALL   31D4
44E6:  MOVLW  0D
44E8:  MOVLB  2
44EA:  MOVWF  x4E
44EC:  MOVLB  0
44EE:  CALL   318A
.................... 				COM1_send_str(buf); 
44F2:  MOVLW  01
44F4:  MOVLB  2
44F6:  MOVWF  x6A
44F8:  MOVLW  C6
44FA:  MOVWF  x69
44FC:  MOVLB  0
44FE:  CALL   2242
.................... 			} 
4502:  BRA    4580
4504:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4506:  MOVLB  0
4508:  CALL   2BC6
450C:  MOVFF  02,207
4510:  MOVFF  01,206
.................... 				if(val < 2) 
4514:  MOVLB  2
4516:  MOVF   x07,F
4518:  BNZ   4544
451A:  MOVF   x06,W
451C:  SUBLW  01
451E:  BNC   4544
.................... 				{ 
.................... 					setup.cot = val; 
4520:  MOVFF  207,F9
4524:  MOVFF  206,F8
.................... 					pwr_command++; 
4528:  MOVLB  1
452A:  INCF   xA1,F
.................... 					pwr_command &= 1; 
452C:  MOVLW  01
452E:  ANDWF  xA1,F
.................... 					delay_ms(50); 
4530:  MOVLW  32
4532:  MOVLB  2
4534:  MOVWF  x3E
4536:  MOVLB  0
4538:  CALL   0FC2
.................... 					update_all(); 
453C:  CALL   1E38
.................... 				} 
4540:  BRA    4580
4542:  MOVLB  2
.................... 				else 
.................... 				COM1_send_str("\r\nFAULT\r\n"); 
4544:  MOVLW  02
4546:  MOVWF  FEA
4548:  MOVLW  0F
454A:  MOVWF  FE9
454C:  MOVFF  FF2,228
4550:  BCF    FF2.7
4552:  MOVLW  0A
4554:  MOVWF  01
4556:  CLRF   FF7
4558:  MOVLW  00
455A:  MOVLB  0
455C:  CALL   0AB2
4560:  TBLRD*-
4562:  TBLRD*+
4564:  MOVFF  FF5,FEE
4568:  DECFSZ 01,F
456A:  BRA    4562
456C:  MOVLB  2
456E:  BTFSC  x28.7
4570:  BSF    FF2.7
4572:  MOVLW  02
4574:  MOVWF  x6A
4576:  MOVLW  0F
4578:  MOVWF  x69
457A:  MOVLB  0
457C:  CALL   2242
.................... 			} 
.................... 			break; 
4580:  MOVLB  1
4582:  BRA    46A2
.................... 			 
.................... 			case 'A': // Addr 0 bit 6     setup.randomizer 
.................... 			if (query) 
4584:  MOVLB  1
4586:  MOVF   xEE,F
4588:  BZ    45D6
....................             { 
.................... 				sprintf(buf, "RA %u\r", setup.randomizer); 
458A:  MOVLW  01
458C:  MOVWF  xA4
458E:  MOVLW  C6
4590:  MOVWF  xA3
4592:  MOVLW  F6
4594:  MOVWF  FF6
4596:  MOVLW  0D
4598:  MOVWF  FF7
459A:  MOVLW  03
459C:  MOVLB  2
459E:  MOVWF  x41
45A0:  MOVLB  0
45A2:  CALL   31AC
45A6:  MOVFF  B2,22C
45AA:  MOVLW  1B
45AC:  MOVLB  2
45AE:  MOVWF  x2D
45B0:  MOVLB  0
45B2:  CALL   3324
45B6:  MOVLW  0D
45B8:  MOVLB  2
45BA:  MOVWF  x4E
45BC:  MOVLB  0
45BE:  CALL   318A
.................... 				COM1_send_str(buf); 
45C2:  MOVLW  01
45C4:  MOVLB  2
45C6:  MOVWF  x6A
45C8:  MOVLW  C6
45CA:  MOVWF  x69
45CC:  MOVLB  0
45CE:  CALL   2242
.................... 			} 
45D2:  BRA    4682
45D4:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
45D6:  MOVLB  0
45D8:  CALL   2BC6
45DC:  MOVFF  02,207
45E0:  MOVFF  01,206
.................... 				if (val < 2) 
45E4:  MOVLB  2
45E6:  MOVF   x07,F
45E8:  BNZ   4604
45EA:  MOVF   x06,W
45EC:  SUBLW  01
45EE:  BNC   4604
.................... 				{ 
.................... 					setup.randomizer = val; 
45F0:  MOVFF  206,B2
.................... 					FPGA_set_reg0(); 
45F4:  MOVLB  0
45F6:  CALL   18EA
.................... 					ret = 1; 
45FA:  MOVLW  01
45FC:  MOVLB  1
45FE:  MOVWF  xC4
.................... 				} 
4600:  BRA    4680
4602:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
4604:  MOVLW  02
4606:  MOVWF  FEA
4608:  MOVLW  0F
460A:  MOVWF  FE9
460C:  MOVFF  FF2,228
4610:  BCF    FF2.7
4612:  MOVLW  09
4614:  MOVWF  01
4616:  CLRF   FF7
4618:  MOVLW  00
461A:  MOVLB  0
461C:  CALL   0AD6
4620:  TBLRD*-
4622:  TBLRD*+
4624:  MOVFF  FF5,FEE
4628:  DECFSZ 01,F
462A:  BRA    4622
462C:  MOVLB  2
462E:  BTFSC  x28.7
4630:  BSF    FF2.7
4632:  MOVLW  02
4634:  MOVWF  x6A
4636:  MOVLW  0F
4638:  MOVWF  x69
463A:  MOVLB  0
463C:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
4640:  MOVLW  01
4642:  MOVLB  1
4644:  MOVWF  xA4
4646:  MOVLW  78
4648:  MOVWF  xA3
464A:  MOVLW  FE
464C:  MOVWF  FF6
464E:  MOVLW  0D
4650:  MOVWF  FF7
4652:  MOVLW  07
4654:  MOVLB  2
4656:  MOVWF  x41
4658:  MOVLB  0
465A:  CALL   31AC
465E:  MOVFF  B2,22C
4662:  MOVLW  1B
4664:  MOVLB  2
4666:  MOVWF  x2D
4668:  MOVLB  0
466A:  CALL   3324
466E:  MOVLW  0D
4670:  MOVLB  2
4672:  MOVWF  x4E
4674:  MOVLB  0
4676:  CALL   318A
.................... 					ret = 0; 
467A:  MOVLB  1
467C:  CLRF   xC4
.................... 					break; 
467E:  BRA    46A2
4680:  MOVLB  0
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
4682:  MOVLW  01
4684:  MOVLB  1
4686:  MOVWF  xC4
.................... 			break; 
4688:  BRA    46A2
.................... 			 
.................... 			case 'L':    // recall 
.................... 			read_setup(); 
468A:  CALL   10FE
.................... 			update_all(); 
468E:  CALL   1E38
.................... 			ret = 1; 
4692:  MOVLW  01
4694:  MOVLB  1
4696:  MOVWF  xC4
.................... 			break; 
4698:  BRA    46A2
.................... 			case 'E':   // reset 
.................... 			reset_cpu(); 
469A:  RESET
.................... 			break; 
469C:  MOVLB  1
469E:  BRA    46A2
46A0:  MOVLB  1
.................... 		} 
.................... 		break; 
46A2:  MOVLB  0
46A4:  GOTO   59C8
.................... 		 
.................... 		case 'W':            // query 
.................... 		if (!ttccp_login) break; 
46A8:  MOVLB  1
46AA:  MOVF   x34,F
46AC:  BNZ   46B6
46AE:  MOVLB  0
46B0:  GOTO   59C8
46B4:  MOVLB  1
.................... 		if (c2 == 'A') 
46B6:  MOVF   xF0,W
46B8:  SUBLW  41
46BA:  BNZ   46C0
....................         { 
.................... 			//xxxx 
.................... 			ret = 1; 
46BC:  MOVLW  01
46BE:  MOVWF  xC4
.................... 		} 
.................... 		break; 
46C0:  MOVLB  0
46C2:  GOTO   59C8
.................... 		 
.................... 		case 'S': 
.................... 		if (!ttccp_login) break; 
46C6:  MOVLB  1
46C8:  MOVF   x34,F
46CA:  BNZ   46D4
46CC:  MOVLB  0
46CE:  GOTO   59C8
46D2:  MOVLB  1
.................... 		switch (c2) 
46D4:  MOVF   xF0,W
46D6:  XORLW  50
46D8:  MOVLB  0
46DA:  BZ    46E2
46DC:  XORLW  06
46DE:  BZ    46EC
46E0:  BRA    4704
....................         { 
.................... 			case 'P': // power down - discrete outputs 
.................... 			ret = 1; 
46E2:  MOVLW  01
46E4:  MOVLB  1
46E6:  MOVWF  xC4
.................... 			break; 
46E8:  MOVLB  0
46EA:  BRA    4704
.................... 			case 'V': 
.................... 			allow_write = 2975; 
46EC:  MOVLW  0B
46EE:  MOVLB  1
46F0:  MOVWF  x07
46F2:  MOVLW  9F
46F4:  MOVWF  x06
.................... 			write_setup(); 
46F6:  MOVLB  0
46F8:  CALL   3410
.................... 			ret = 1; 
46FC:  MOVLW  01
46FE:  MOVLB  1
4700:  MOVWF  xC4
.................... 			break; 
4702:  MOVLB  0
.................... 		} 
.................... 		break; 
4704:  GOTO   59C8
.................... 		 
.................... 		 
.................... 		case 'U': // VERSION 3.3 UT US 
.................... 		if (!ttccp_login) break; 
4708:  MOVLB  1
470A:  MOVF   x34,F
470C:  BNZ   4716
470E:  MOVLB  0
4710:  GOTO   59C8
4714:  MOVLB  1
.................... 		switch (c2) 
4716:  MOVF   xF0,W
4718:  XORLW  54
471A:  MOVLB  0
471C:  BZ    4726
471E:  XORLW  07
4720:  BTFSC  FD8.2
4722:  BRA    482C
4724:  BRA    4922
....................         { 
.................... 			case 'T':  
.................... 			if (query) 
4726:  MOVLB  1
4728:  MOVF   xEE,F
472A:  BZ    4778
....................             { 
.................... 				sprintf(buf, "UT %u\r", setup.UART_Time); 
472C:  MOVLW  01
472E:  MOVWF  xA4
4730:  MOVLW  C6
4732:  MOVWF  xA3
4734:  MOVLW  0A
4736:  MOVWF  FF6
4738:  MOVLW  0E
473A:  MOVWF  FF7
473C:  MOVLW  03
473E:  MOVLB  2
4740:  MOVWF  x41
4742:  MOVLB  0
4744:  CALL   31AC
4748:  MOVFF  FE,22C
474C:  MOVLW  1B
474E:  MOVLB  2
4750:  MOVWF  x2D
4752:  MOVLB  0
4754:  CALL   3324
4758:  MOVLW  0D
475A:  MOVLB  2
475C:  MOVWF  x4E
475E:  MOVLB  0
4760:  CALL   318A
.................... 				COM1_send_str(buf); 
4764:  MOVLW  01
4766:  MOVLB  2
4768:  MOVWF  x6A
476A:  MOVLW  C6
476C:  MOVWF  x69
476E:  MOVLB  0
4770:  CALL   2242
.................... 			} 
4774:  BRA    4820
4776:  MOVLB  1
.................... 			else 
.................... 			{ 
.................... 	            val = get_int(); 
4778:  MOVLB  0
477A:  CALL   2BC6
477E:  MOVFF  02,207
4782:  MOVFF  01,206
.................... 	            if (val < 240 && val > 10) 
4786:  MOVLB  2
4788:  MOVF   x07,F
478A:  BNZ   47A2
478C:  MOVF   x06,W
478E:  SUBLW  EF
4790:  BNC   47A2
4792:  MOVF   x07,F
4794:  BNZ   479C
4796:  MOVF   x06,W
4798:  SUBLW  0A
479A:  BC    47A2
.................... 				{ 
.................... 					setup.UART_Time = val;	               
479C:  MOVFF  206,FE
.................... 				} 
47A0:  BRA    4822
.................... 	            else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
47A2:  MOVLW  02
47A4:  MOVWF  FEA
47A6:  MOVLW  0F
47A8:  MOVWF  FE9
47AA:  MOVFF  FF2,228
47AE:  BCF    FF2.7
47B0:  MOVLW  09
47B2:  MOVWF  01
47B4:  CLRF   FF7
47B6:  MOVLW  00
47B8:  MOVLB  0
47BA:  CALL   0AD6
47BE:  TBLRD*-
47C0:  TBLRD*+
47C2:  MOVFF  FF5,FEE
47C6:  DECFSZ 01,F
47C8:  BRA    47C0
47CA:  MOVLB  2
47CC:  BTFSC  x28.7
47CE:  BSF    FF2.7
47D0:  MOVLW  02
47D2:  MOVWF  x6A
47D4:  MOVLW  0F
47D6:  MOVWF  x69
47D8:  MOVLB  0
47DA:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR UT %u\r", setup.UART_Time); 
47DE:  MOVLW  01
47E0:  MOVLB  1
47E2:  MOVWF  xA4
47E4:  MOVLW  78
47E6:  MOVWF  xA3
47E8:  MOVLW  12
47EA:  MOVWF  FF6
47EC:  MOVLW  0E
47EE:  MOVWF  FF7
47F0:  MOVLW  07
47F2:  MOVLB  2
47F4:  MOVWF  x41
47F6:  MOVLB  0
47F8:  CALL   31AC
47FC:  MOVFF  FE,22C
4800:  MOVLW  1B
4802:  MOVLB  2
4804:  MOVWF  x2D
4806:  MOVLB  0
4808:  CALL   3324
480C:  MOVLW  0D
480E:  MOVLB  2
4810:  MOVWF  x4E
4812:  MOVLB  0
4814:  CALL   318A
.................... 					ret = 0; 
4818:  MOVLB  1
481A:  CLRF   xC4
.................... 					break; 
481C:  MOVLB  0
481E:  BRA    4922
4820:  MOVLB  2
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
4822:  MOVLW  01
4824:  MOVLB  1
4826:  MOVWF  xC4
.................... 			break;  
4828:  MOVLB  0
482A:  BRA    4922
.................... 			 
.................... 			case 'S': 
.................... 			{ 
.................... 				if (query) 
482C:  MOVLB  1
482E:  MOVF   xEE,F
4830:  BZ    487E
.................... 				{ 
.................... 					sprintf(buf, "US %u\r",setup.UART_Status); 
4832:  MOVLW  01
4834:  MOVWF  xA4
4836:  MOVLW  C6
4838:  MOVWF  xA3
483A:  MOVLW  1E
483C:  MOVWF  FF6
483E:  MOVLW  0E
4840:  MOVWF  FF7
4842:  MOVLW  03
4844:  MOVLB  2
4846:  MOVWF  x41
4848:  MOVLB  0
484A:  CALL   31AC
484E:  MOVFF  FF,22C
4852:  MOVLW  1B
4854:  MOVLB  2
4856:  MOVWF  x2D
4858:  MOVLB  0
485A:  CALL   3324
485E:  MOVLW  0D
4860:  MOVLB  2
4862:  MOVWF  x4E
4864:  MOVLB  0
4866:  CALL   318A
.................... 					COM1_send_str(buf); 
486A:  MOVLW  01
486C:  MOVLB  2
486E:  MOVWF  x6A
4870:  MOVLW  C6
4872:  MOVWF  x69
4874:  MOVLB  0
4876:  CALL   2242
.................... 				} 
487A:  BRA    491C
487C:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					val = get_int(); 
487E:  MOVLB  0
4880:  CALL   2BC6
4884:  MOVFF  02,207
4888:  MOVFF  01,206
.................... 					if (val < 2) 
488C:  MOVLB  2
488E:  MOVF   x07,F
4890:  BNZ   489E
4892:  MOVF   x06,W
4894:  SUBLW  01
4896:  BNC   489E
.................... 					{ 
.................... 						setup.UART_Status = val; 
4898:  MOVFF  206,FF
.................... 					} 
489C:  BRA    491E
.................... 					else 
.................... 					{ 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
489E:  MOVLW  02
48A0:  MOVWF  FEA
48A2:  MOVLW  0F
48A4:  MOVWF  FE9
48A6:  MOVFF  FF2,228
48AA:  BCF    FF2.7
48AC:  MOVLW  09
48AE:  MOVWF  01
48B0:  CLRF   FF7
48B2:  MOVLW  00
48B4:  MOVLB  0
48B6:  CALL   0AD6
48BA:  TBLRD*-
48BC:  TBLRD*+
48BE:  MOVFF  FF5,FEE
48C2:  DECFSZ 01,F
48C4:  BRA    48BC
48C6:  MOVLB  2
48C8:  BTFSC  x28.7
48CA:  BSF    FF2.7
48CC:  MOVLW  02
48CE:  MOVWF  x6A
48D0:  MOVLW  0F
48D2:  MOVWF  x69
48D4:  MOVLB  0
48D6:  CALL   2242
.................... 						sprintf(ttccp_error_message, "ERR US %u\r", setup.UART_Status); 
48DA:  MOVLW  01
48DC:  MOVLB  1
48DE:  MOVWF  xA4
48E0:  MOVLW  78
48E2:  MOVWF  xA3
48E4:  MOVLW  26
48E6:  MOVWF  FF6
48E8:  MOVLW  0E
48EA:  MOVWF  FF7
48EC:  MOVLW  07
48EE:  MOVLB  2
48F0:  MOVWF  x41
48F2:  MOVLB  0
48F4:  CALL   31AC
48F8:  MOVFF  FF,22C
48FC:  MOVLW  1B
48FE:  MOVLB  2
4900:  MOVWF  x2D
4902:  MOVLB  0
4904:  CALL   3324
4908:  MOVLW  0D
490A:  MOVLB  2
490C:  MOVWF  x4E
490E:  MOVLB  0
4910:  CALL   318A
.................... 						ret = 0; 
4914:  MOVLB  1
4916:  CLRF   xC4
.................... 						break; 
4918:  MOVLB  0
491A:  BRA    4922
491C:  MOVLB  2
.................... 					} 
.................... 				} 
.................... 				break; 
491E:  MOVLB  0
4920:  BRA    4922
.................... 			} 
.................... 			break; 
.................... 		} 
.................... 		break; 
4922:  GOTO   59C8
.................... 		 
.................... 		case 'B': // VERSION 3.6 BG Block Ghange and Check Function 23.0.2016 
.................... 		if (!ttccp_login) break; 
4926:  MOVLB  1
4928:  MOVF   x34,F
492A:  BNZ   4934
492C:  MOVLB  0
492E:  GOTO   59C8
4932:  MOVLB  1
.................... 		switch (c2) 
4934:  MOVF   xF0,W
4936:  XORLW  47
4938:  MOVLB  0
493A:  BZ    493E
493C:  BRA    4AAE
....................         { 
.................... 			case 'G':      
.................... 			if (query) 
493E:  MOVLB  1
4940:  MOVF   xEE,F
4942:  BZ    4990
....................             { 
.................... 				sprintf(buf, "BG %lu\r", setup.Block_per_second); 
4944:  MOVLW  01
4946:  MOVWF  xA4
4948:  MOVLW  C6
494A:  MOVWF  xA3
494C:  MOVLW  32
494E:  MOVWF  FF6
4950:  MOVLW  0E
4952:  MOVWF  FF7
4954:  MOVLW  03
4956:  MOVLB  2
4958:  MOVWF  x41
495A:  MOVLB  0
495C:  CALL   31AC
4960:  MOVLW  10
4962:  MOVWF  FE9
4964:  MOVFF  103,22D
4968:  MOVFF  102,22C
496C:  CALL   31D4
4970:  MOVLW  0D
4972:  MOVLB  2
4974:  MOVWF  x4E
4976:  MOVLB  0
4978:  CALL   318A
.................... 				COM1_send_str(buf); 
497C:  MOVLW  01
497E:  MOVLB  2
4980:  MOVWF  x6A
4982:  MOVLW  C6
4984:  MOVWF  x69
4986:  MOVLB  0
4988:  CALL   2242
.................... 			} 
498C:  BRA    4AA6
498E:  MOVLB  1
.................... 			else 
....................             { 
.................... 				sub = get_int(); 
4990:  MOVLB  0
4992:  CALL   2BC6
4996:  MOVFF  01,00
499A:  MOVFF  02,01
499E:  CLRF   02
49A0:  CLRF   03
49A2:  MOVFF  03,205
49A6:  MOVFF  02,204
49AA:  MOVFF  01,203
49AE:  MOVFF  00,202
.................... 				if (sub >= 1 && sub <= 20) 
49B2:  MOVLB  2
49B4:  MOVF   x05,F
49B6:  BNZ   49C6
49B8:  MOVF   x04,F
49BA:  BNZ   49C6
49BC:  MOVF   x03,F
49BE:  BNZ   49C6
49C0:  MOVF   x02,W
49C2:  SUBLW  00
49C4:  BC    4A08
49C6:  MOVF   x05,F
49C8:  BNZ   4A08
49CA:  MOVF   x04,F
49CC:  BNZ   4A08
49CE:  MOVF   x03,F
49D0:  BNZ   4A08
49D2:  MOVF   x02,W
49D4:  SUBLW  14
49D6:  BNC   4A08
.................... 				{ 
....................  
.................... 					setup.Block_per_second = (1000 / sub); 
49D8:  BCF    FD8.1
49DA:  CLRF   x51
49DC:  CLRF   x50
49DE:  MOVLW  03
49E0:  MOVWF  x4F
49E2:  MOVLW  E8
49E4:  MOVWF  x4E
49E6:  MOVFF  205,255
49EA:  MOVFF  204,254
49EE:  MOVFF  203,253
49F2:  MOVFF  202,252
49F6:  MOVLB  0
49F8:  CALL   14BE
49FC:  MOVFF  01,103
4A00:  MOVFF  00,102
.................... 				} 
4A04:  BRA    4AA6
4A06:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
4A08:  MOVLW  02
4A0A:  MOVWF  FEA
4A0C:  MOVLW  0F
4A0E:  MOVWF  FE9
4A10:  MOVFF  FF2,228
4A14:  BCF    FF2.7
4A16:  MOVLW  09
4A18:  MOVWF  01
4A1A:  CLRF   FF7
4A1C:  MOVLW  00
4A1E:  MOVLB  0
4A20:  CALL   0AD6
4A24:  TBLRD*-
4A26:  TBLRD*+
4A28:  MOVFF  FF5,FEE
4A2C:  DECFSZ 01,F
4A2E:  BRA    4A26
4A30:  MOVLB  2
4A32:  BTFSC  x28.7
4A34:  BSF    FF2.7
4A36:  MOVLW  02
4A38:  MOVWF  x6A
4A3A:  MOVLW  0F
4A3C:  MOVWF  x69
4A3E:  MOVLB  0
4A40:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR BG %lu\r", 1000 / setup.Block_per_second); 
4A44:  MOVLW  03
4A46:  MOVLB  2
4A48:  MOVWF  x2B
4A4A:  MOVLW  E8
4A4C:  MOVWF  x2A
4A4E:  MOVFF  103,22D
4A52:  MOVFF  102,22C
4A56:  MOVLB  0
4A58:  CALL   343E
4A5C:  MOVFF  02,229
4A60:  MOVFF  01,228
4A64:  MOVLW  01
4A66:  MOVLB  1
4A68:  MOVWF  xA4
4A6A:  MOVLW  78
4A6C:  MOVWF  xA3
4A6E:  MOVLW  3A
4A70:  MOVWF  FF6
4A72:  MOVLW  0E
4A74:  MOVWF  FF7
4A76:  MOVLW  07
4A78:  MOVLB  2
4A7A:  MOVWF  x41
4A7C:  MOVLB  0
4A7E:  CALL   31AC
4A82:  MOVLW  10
4A84:  MOVWF  FE9
4A86:  MOVFF  229,22D
4A8A:  MOVFF  228,22C
4A8E:  CALL   31D4
4A92:  MOVLW  0D
4A94:  MOVLB  2
4A96:  MOVWF  x4E
4A98:  MOVLB  0
4A9A:  CALL   318A
.................... 					ret = 0; 
4A9E:  MOVLB  1
4AA0:  CLRF   xC4
.................... 					break; 
4AA2:  MOVLB  0
4AA4:  BRA    4AAE
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
4AA6:  MOVLW  01
4AA8:  MOVLB  1
4AAA:  MOVWF  xC4
.................... 			break; 
4AAC:  MOVLB  0
.................... 		} 
.................... 		break; 
4AAE:  GOTO   59C8
.................... 		 
....................       	 
.................... 		case 'I': 
.................... 		if (!ttccp_login) break; 
4AB2:  MOVLB  1
4AB4:  MOVF   x34,F
4AB6:  BNZ   4AC0
4AB8:  MOVLB  0
4ABA:  GOTO   59C8
4ABE:  MOVLB  1
.................... 		switch (c2) 
4AC0:  MOVF   xF0,W
4AC2:  XORLW  44
4AC4:  MOVLB  0
4AC6:  BZ    4AD0
4AC8:  XORLW  07
4ACA:  BTFSC  FD8.2
4ACC:  BRA    4BD2
4ACE:  BRA    4C32
....................         { 
.................... 			case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
.................... 			if (query) 
4AD0:  MOVLB  1
4AD2:  MOVF   xEE,F
4AD4:  BZ    4B22
....................             { 
.................... 				sprintf(buf, "ID %u\r", setup.internal_pattern); 
4AD6:  MOVLW  01
4AD8:  MOVWF  xA4
4ADA:  MOVLW  C6
4ADC:  MOVWF  xA3
4ADE:  MOVLW  46
4AE0:  MOVWF  FF6
4AE2:  MOVLW  0E
4AE4:  MOVWF  FF7
4AE6:  MOVLW  03
4AE8:  MOVLB  2
4AEA:  MOVWF  x41
4AEC:  MOVLB  0
4AEE:  CALL   31AC
4AF2:  MOVFF  B1,22C
4AF6:  MOVLW  1B
4AF8:  MOVLB  2
4AFA:  MOVWF  x2D
4AFC:  MOVLB  0
4AFE:  CALL   3324
4B02:  MOVLW  0D
4B04:  MOVLB  2
4B06:  MOVWF  x4E
4B08:  MOVLB  0
4B0A:  CALL   318A
.................... 				COM1_send_str(buf); 
4B0E:  MOVLW  01
4B10:  MOVLB  2
4B12:  MOVWF  x6A
4B14:  MOVLW  C6
4B16:  MOVWF  x69
4B18:  MOVLB  0
4B1A:  CALL   2242
.................... 			} 
4B1E:  BRA    4BC8
4B20:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4B22:  MOVLB  0
4B24:  CALL   2BC6
4B28:  MOVFF  02,207
4B2C:  MOVFF  01,206
.................... 				if (val < 4) 
4B30:  MOVLB  2
4B32:  MOVF   x07,F
4B34:  BNZ   4B4A
4B36:  MOVF   x06,W
4B38:  SUBLW  03
4B3A:  BNC   4B4A
.................... 				{ 
.................... 					setup.internal_pattern = val; 
4B3C:  MOVFF  206,B1
.................... 					FPGA_set_reg6(); 
4B40:  MOVLB  0
4B42:  CALL   1946
.................... 				} 
4B46:  BRA    4BC8
4B48:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
4B4A:  MOVLW  02
4B4C:  MOVWF  FEA
4B4E:  MOVLW  0F
4B50:  MOVWF  FE9
4B52:  MOVFF  FF2,228
4B56:  BCF    FF2.7
4B58:  MOVLW  09
4B5A:  MOVWF  01
4B5C:  CLRF   FF7
4B5E:  MOVLW  00
4B60:  MOVLB  0
4B62:  CALL   0AD6
4B66:  TBLRD*-
4B68:  TBLRD*+
4B6A:  MOVFF  FF5,FEE
4B6E:  DECFSZ 01,F
4B70:  BRA    4B68
4B72:  MOVLB  2
4B74:  BTFSC  x28.7
4B76:  BSF    FF2.7
4B78:  MOVLW  02
4B7A:  MOVWF  x6A
4B7C:  MOVLW  0F
4B7E:  MOVWF  x69
4B80:  MOVLB  0
4B82:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
4B86:  MOVLW  01
4B88:  MOVLB  1
4B8A:  MOVWF  xA4
4B8C:  MOVLW  78
4B8E:  MOVWF  xA3
4B90:  MOVLW  4E
4B92:  MOVWF  FF6
4B94:  MOVLW  0E
4B96:  MOVWF  FF7
4B98:  MOVLW  07
4B9A:  MOVLB  2
4B9C:  MOVWF  x41
4B9E:  MOVLB  0
4BA0:  CALL   31AC
4BA4:  MOVFF  B1,22C
4BA8:  MOVLW  1B
4BAA:  MOVLB  2
4BAC:  MOVWF  x2D
4BAE:  MOVLB  0
4BB0:  CALL   3324
4BB4:  MOVLW  0D
4BB6:  MOVLB  2
4BB8:  MOVWF  x4E
4BBA:  MOVLB  0
4BBC:  CALL   318A
.................... 					ret = 0; 
4BC0:  MOVLB  1
4BC2:  CLRF   xC4
.................... 					break; 
4BC4:  MOVLB  0
4BC6:  BRA    4C32
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
4BC8:  MOVLW  01
4BCA:  MOVLB  1
4BCC:  MOVWF  xC4
.................... 			break; 
4BCE:  MOVLB  0
4BD0:  BRA    4C32
.................... 			 
.................... 			case 'C':    // Addr 2 - 5 bit rate 
.................... 			if (query) 
4BD2:  MOVLB  1
4BD4:  MOVF   xEE,F
4BD6:  BZ    4C24
....................             { 
.................... 				sprintf(buf, "IC %lu\r", setup.bitrate); 
4BD8:  MOVLW  01
4BDA:  MOVWF  xA4
4BDC:  MOVLW  C6
4BDE:  MOVWF  xA3
4BE0:  MOVLW  5A
4BE2:  MOVWF  FF6
4BE4:  MOVLW  0E
4BE6:  MOVWF  FF7
4BE8:  MOVLW  03
4BEA:  MOVLB  2
4BEC:  MOVWF  x41
4BEE:  MOVLB  0
4BF0:  CALL   31AC
4BF4:  MOVLW  10
4BF6:  MOVWF  FE9
4BF8:  MOVFF  A9,22D
4BFC:  MOVFF  A8,22C
4C00:  CALL   31D4
4C04:  MOVLW  0D
4C06:  MOVLB  2
4C08:  MOVWF  x4E
4C0A:  MOVLB  0
4C0C:  CALL   318A
.................... 				COM1_send_str(buf); 
4C10:  MOVLW  01
4C12:  MOVLB  2
4C14:  MOVWF  x6A
4C16:  MOVLW  C6
4C18:  MOVWF  x69
4C1A:  MOVLB  0
4C1C:  CALL   2242
.................... 			} 
4C20:  BRA    4C2A
4C22:  MOVLB  1
.................... 			else 
....................             { 
.................... 				get_new_bitrate(); 
4C24:  MOVLB  0
4C26:  GOTO   3484
.................... 			} 
.................... 			ret = 1; 
4C2A:  MOVLW  01
4C2C:  MOVLB  1
4C2E:  MOVWF  xC4
.................... 			break; 
4C30:  MOVLB  0
.................... 		} 
.................... 		break; 
4C32:  GOTO   59C8
.................... 		 
.................... 		case 'T': 
.................... 		if (!ttccp_login) break; 
4C36:  MOVLB  1
4C38:  MOVF   x34,F
4C3A:  BNZ   4C44
4C3C:  MOVLB  0
4C3E:  GOTO   59C8
4C42:  MOVLB  1
.................... 		if (c2 == 'E') 
4C44:  MOVF   xF0,W
4C46:  SUBLW  45
4C48:  BNZ   4C54
....................         { 
....................             update_temperature_string(); 
4C4A:  MOVLB  0
4C4C:  CALL   3704
....................             ret = 0; 
4C50:  MOVLB  1
4C52:  CLRF   xC4
.................... 		} 
.................... 		break; 
4C54:  MOVLB  0
4C56:  GOTO   59C8
.................... 		 
.................... 		case 'V': 
.................... 		if (!ttccp_login) break; 
4C5A:  MOVLB  1
4C5C:  MOVF   x34,F
4C5E:  BNZ   4C68
4C60:  MOVLB  0
4C62:  GOTO   59C8
4C66:  MOVLB  1
.................... 		switch (c2) 
4C68:  MOVF   xF0,W
4C6A:  XORLW  45
4C6C:  MOVLB  0
4C6E:  BZ    4C90
4C70:  XORLW  16
4C72:  BTFSC  FD8.2
4C74:  BRA    4DD2
4C76:  XORLW  1F
4C78:  BTFSC  FD8.2
4C7A:  BRA    4EE4
4C7C:  XORLW  1C
4C7E:  BTFSC  FD8.2
4C80:  BRA    4F3C
4C82:  XORLW  1D
4C84:  BTFSC  FD8.2
4C86:  BRA    4FB4
4C88:  XORLW  0E
4C8A:  BTFSC  FD8.2
4C8C:  BRA    502A
4C8E:  BRA    50A6
....................         { 
.................... 			case 'E':  // return version 
.................... 			if(c2 =='E') 
4C90:  MOVLB  1
4C92:  MOVF   xF0,W
4C94:  SUBLW  45
4C96:  BNZ   4D90
.................... 			{ 
.................... 				sprintf(buf, "VE %s VS %lu.%lu ID=%02lu DT=%02lu%02u\r",  
....................                 VERSION, ((setup.setup_version >> 8) & 0xff), (setup.setup_version & 0xff), 
....................                 setup.unit_ID, setup.year, setup.week); 
4C98:  MOVFF  105,228
4C9C:  MOVLB  2
4C9E:  CLRF   x29
4CA0:  CLRF   x29
4CA2:  MOVFF  104,22A
4CA6:  MOVLB  2
4CA8:  CLRF   x2B
4CAA:  MOVLW  01
4CAC:  MOVLB  1
4CAE:  MOVWF  xA4
4CB0:  MOVLW  C6
4CB2:  MOVWF  xA3
4CB4:  MOVLW  62
4CB6:  MOVWF  FF6
4CB8:  MOVLW  0E
4CBA:  MOVWF  FF7
4CBC:  MOVLW  03
4CBE:  MOVLB  2
4CC0:  MOVWF  x41
4CC2:  MOVLB  0
4CC4:  CALL   31AC
4CC8:  MOVLW  14
4CCA:  MOVWF  FF6
4CCC:  MOVLW  0B
4CCE:  MOVWF  FF7
4CD0:  GOTO   37A8
4CD4:  MOVLW  67
4CD6:  MOVWF  FF6
4CD8:  MOVLW  0E
4CDA:  MOVWF  FF7
4CDC:  MOVLW  04
4CDE:  MOVLB  2
4CE0:  MOVWF  x41
4CE2:  MOVLB  0
4CE4:  CALL   31AC
4CE8:  MOVLW  10
4CEA:  MOVWF  FE9
4CEC:  MOVFF  229,22D
4CF0:  MOVFF  228,22C
4CF4:  CALL   31D4
4CF8:  MOVLW  2E
4CFA:  MOVLB  2
4CFC:  MOVWF  x4E
4CFE:  MOVLB  0
4D00:  CALL   318A
4D04:  MOVLW  10
4D06:  MOVWF  FE9
4D08:  MOVFF  22B,22D
4D0C:  MOVFF  22A,22C
4D10:  CALL   31D4
4D14:  MOVLW  72
4D16:  MOVWF  FF6
4D18:  MOVLW  0E
4D1A:  MOVWF  FF7
4D1C:  MOVLW  04
4D1E:  MOVLB  2
4D20:  MOVWF  x41
4D22:  MOVLB  0
4D24:  CALL   31AC
4D28:  MOVLW  0B
4D2A:  MOVWF  FE9
4D2C:  MOVFF  F5,22D
4D30:  MOVFF  F4,22C
4D34:  CALL   31D4
4D38:  MOVLW  7B
4D3A:  MOVWF  FF6
4D3C:  MOVLW  0E
4D3E:  MOVWF  FF7
4D40:  MOVLW  04
4D42:  MOVLB  2
4D44:  MOVWF  x41
4D46:  MOVLB  0
4D48:  CALL   31AC
4D4C:  MOVLW  0B
4D4E:  MOVWF  FE9
4D50:  MOVFF  F2,22D
4D54:  MOVFF  F1,22C
4D58:  CALL   31D4
4D5C:  MOVFF  F3,22C
4D60:  MOVLW  01
4D62:  MOVLB  2
4D64:  MOVWF  x2D
4D66:  MOVLB  0
4D68:  CALL   3324
4D6C:  MOVLW  0D
4D6E:  MOVLB  2
4D70:  MOVWF  x4E
4D72:  MOVLB  0
4D74:  CALL   318A
.................... 				COM1_send_str(buf); 
4D78:  MOVLW  01
4D7A:  MOVLB  2
4D7C:  MOVWF  x6A
4D7E:  MOVLW  C6
4D80:  MOVWF  x69
4D82:  MOVLB  0
4D84:  CALL   2242
.................... 				ret = 1; 
4D88:  MOVLW  01
4D8A:  MOVLB  1
4D8C:  MOVWF  xC4
.................... 			} 
4D8E:  BRA    4DCE
.................... 			else 
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
4D90:  MOVLW  02
4D92:  MOVWF  FEA
4D94:  MOVLW  0F
4D96:  MOVWF  FE9
4D98:  MOVFF  FF2,228
4D9C:  BCF    FF2.7
4D9E:  MOVLW  09
4DA0:  MOVWF  01
4DA2:  CLRF   FF7
4DA4:  MOVLW  00
4DA6:  MOVLB  0
4DA8:  CALL   0AD6
4DAC:  TBLRD*-
4DAE:  TBLRD*+
4DB0:  MOVFF  FF5,FEE
4DB4:  DECFSZ 01,F
4DB6:  BRA    4DAE
4DB8:  MOVLB  2
4DBA:  BTFSC  x28.7
4DBC:  BSF    FF2.7
4DBE:  MOVLW  02
4DC0:  MOVWF  x6A
4DC2:  MOVLW  0F
4DC4:  MOVWF  x69
4DC6:  MOVLB  0
4DC8:  CALL   2242
4DCC:  MOVLB  1
.................... 			break; 
4DCE:  MOVLB  0
4DD0:  BRA    50A6
.................... 			case 'S': // set setup version 
.................... 			{ 
.................... 				if (query) { 
4DD2:  MOVLB  1
4DD4:  MOVF   xEE,F
4DD6:  BZ    4E4C
.................... 					sprintf(buf, "VS %lu%lu\r", (setup.setup_version >> 8) & 0xff, setup.setup_version & 0xff); 
4DD8:  MOVFF  105,228
4DDC:  MOVLB  2
4DDE:  CLRF   x29
4DE0:  CLRF   x29
4DE2:  MOVFF  104,22A
4DE6:  MOVLB  2
4DE8:  CLRF   x2B
4DEA:  MOVLW  01
4DEC:  MOVLB  1
4DEE:  MOVWF  xA4
4DF0:  MOVLW  C6
4DF2:  MOVWF  xA3
4DF4:  MOVLW  8A
4DF6:  MOVWF  FF6
4DF8:  MOVLW  0E
4DFA:  MOVWF  FF7
4DFC:  MOVLW  03
4DFE:  MOVLB  2
4E00:  MOVWF  x41
4E02:  MOVLB  0
4E04:  CALL   31AC
4E08:  MOVLW  10
4E0A:  MOVWF  FE9
4E0C:  MOVFF  229,22D
4E10:  MOVFF  228,22C
4E14:  CALL   31D4
4E18:  MOVLW  10
4E1A:  MOVWF  FE9
4E1C:  MOVFF  22B,22D
4E20:  MOVFF  22A,22C
4E24:  CALL   31D4
4E28:  MOVLW  0D
4E2A:  MOVLB  2
4E2C:  MOVWF  x4E
4E2E:  MOVLB  0
4E30:  CALL   318A
.................... 					COM1_send_str(buf); 
4E34:  MOVLW  01
4E36:  MOVLB  2
4E38:  MOVWF  x6A
4E3A:  MOVLW  C6
4E3C:  MOVWF  x69
4E3E:  MOVLB  0
4E40:  CALL   2242
.................... 					ret = 1; 
4E44:  MOVLW  01
4E46:  MOVLB  1
4E48:  MOVWF  xC4
.................... 					} else { 
4E4A:  BRA    4EE0
.................... 					val = get_int(); 
4E4C:  MOVLB  0
4E4E:  CALL   2BC6
4E52:  MOVFF  02,207
4E56:  MOVFF  01,206
.................... 					if (peek_char() == '.') 
4E5A:  CALL   2AEC
4E5E:  MOVFF  02,229
4E62:  MOVFF  01,228
4E66:  MOVLB  2
4E68:  MOVF   01,W
4E6A:  SUBLW  2E
4E6C:  BNZ   4EA2
4E6E:  MOVF   x29,F
4E70:  BNZ   4EA2
.................... 					{ 
.................... 						get_char(); // skip '.' 
4E72:  MOVLB  0
4E74:  CALL   2B0A
.................... 						rp = get_int(); 
4E78:  CALL   2BC6
4E7C:  MOVFF  02,209
4E80:  MOVFF  01,208
.................... 						rp += val << 8; 
4E84:  MOVLW  00
4E86:  MOVLB  2
4E88:  ADDWF  x08,F
4E8A:  MOVF   x06,W
4E8C:  ADDWFC x09,F
.................... 						setup.setup_version = rp;    
4E8E:  MOVFF  209,105
4E92:  MOVFF  208,104
.................... 						ret = 1;                  
4E96:  MOVLW  01
4E98:  MOVLB  1
4E9A:  MOVWF  xC4
.................... 						break; 
4E9C:  MOVLB  0
4E9E:  BRA    50A6
4EA0:  MOVLB  2
.................... 					} 
.................... 					COM1_send_str("\r\nFAIL\r\n");                 
4EA2:  MOVLW  02
4EA4:  MOVWF  FEA
4EA6:  MOVLW  0F
4EA8:  MOVWF  FE9
4EAA:  MOVFF  FF2,228
4EAE:  BCF    FF2.7
4EB0:  MOVLW  09
4EB2:  MOVWF  01
4EB4:  CLRF   FF7
4EB6:  MOVLW  00
4EB8:  MOVLB  0
4EBA:  CALL   0AD6
4EBE:  TBLRD*-
4EC0:  TBLRD*+
4EC2:  MOVFF  FF5,FEE
4EC6:  DECFSZ 01,F
4EC8:  BRA    4EC0
4ECA:  MOVLB  2
4ECC:  BTFSC  x28.7
4ECE:  BSF    FF2.7
4ED0:  MOVLW  02
4ED2:  MOVWF  x6A
4ED4:  MOVLW  0F
4ED6:  MOVWF  x69
4ED8:  MOVLB  0
4EDA:  CALL   2242
4EDE:  MOVLB  1
.................... 				} 
.................... 				break; 
4EE0:  MOVLB  0
4EE2:  BRA    50A6
.................... 			}  
.................... 			case 'L':  // set low power level 
.................... 			if(c2 == 'L') 
4EE4:  MOVLB  1
4EE6:  MOVF   xF0,W
4EE8:  SUBLW  4C
4EEA:  BNZ   4EFA
.................... 			{ 
.................... 				set_low_power_level(); 
4EEC:  MOVLB  0
4EEE:  GOTO   37CA
.................... 				ret = 1; 
4EF2:  MOVLW  01
4EF4:  MOVLB  1
4EF6:  MOVWF  xC4
.................... 			} 
4EF8:  BRA    4F38
.................... 			else 
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
4EFA:  MOVLW  02
4EFC:  MOVWF  FEA
4EFE:  MOVLW  0F
4F00:  MOVWF  FE9
4F02:  MOVFF  FF2,228
4F06:  BCF    FF2.7
4F08:  MOVLW  09
4F0A:  MOVWF  01
4F0C:  CLRF   FF7
4F0E:  MOVLW  00
4F10:  MOVLB  0
4F12:  CALL   0AD6
4F16:  TBLRD*-
4F18:  TBLRD*+
4F1A:  MOVFF  FF5,FEE
4F1E:  DECFSZ 01,F
4F20:  BRA    4F18
4F22:  MOVLB  2
4F24:  BTFSC  x28.7
4F26:  BSF    FF2.7
4F28:  MOVLW  02
4F2A:  MOVWF  x6A
4F2C:  MOVLW  0F
4F2E:  MOVWF  x69
4F30:  MOVLB  0
4F32:  CALL   2242
4F36:  MOVLB  1
.................... 			break; 
4F38:  MOVLB  0
4F3A:  BRA    50A6
.................... 			 
.................... 			case 'P':  // power level control like in Generic TX  $P 
.................... 			if (query) 
4F3C:  MOVLB  1
4F3E:  MOVF   xEE,F
4F40:  BZ    4FA4
....................             { 
.................... 				sprintf(buf, "VP %lu\r", setup.power_level + 20); 
4F42:  MOVLW  14
4F44:  MOVLB  0
4F46:  ADDWF  xB8,W
4F48:  MOVLB  2
4F4A:  MOVWF  x28
4F4C:  MOVLW  00
4F4E:  MOVLB  0
4F50:  ADDWFC xB9,W
4F52:  MOVLB  2
4F54:  MOVWF  x29
4F56:  MOVLW  01
4F58:  MOVLB  1
4F5A:  MOVWF  xA4
4F5C:  MOVLW  C6
4F5E:  MOVWF  xA3
4F60:  MOVLW  96
4F62:  MOVWF  FF6
4F64:  MOVLW  0E
4F66:  MOVWF  FF7
4F68:  MOVLW  03
4F6A:  MOVLB  2
4F6C:  MOVWF  x41
4F6E:  MOVLB  0
4F70:  CALL   31AC
4F74:  MOVLW  10
4F76:  MOVWF  FE9
4F78:  MOVFF  229,22D
4F7C:  MOVFF  228,22C
4F80:  CALL   31D4
4F84:  MOVLW  0D
4F86:  MOVLB  2
4F88:  MOVWF  x4E
4F8A:  MOVLB  0
4F8C:  CALL   318A
.................... 				COM1_send_str(buf); 
4F90:  MOVLW  01
4F92:  MOVLB  2
4F94:  MOVWF  x6A
4F96:  MOVLW  C6
4F98:  MOVWF  x69
4F9A:  MOVLB  0
4F9C:  CALL   2242
.................... 			} 
4FA0:  BRA    4FAA
4FA2:  MOVLB  1
.................... 			else 
....................             set_power_level(); 
4FA4:  MOVLB  0
4FA6:  GOTO   383A
....................             ret = 1; 
4FAA:  MOVLW  01
4FAC:  MOVLB  1
4FAE:  MOVWF  xC4
.................... 			break; 
4FB0:  MOVLB  0
4FB2:  BRA    50A6
.................... 			 
.................... 			case 'M': // manual power level 
.................... 			if (query) 
4FB4:  MOVLB  1
4FB6:  MOVF   xEE,F
4FB8:  BZ    5006
....................             { 
.................... 				sprintf(buf, "VM %lu\r", manual_negative); 
4FBA:  MOVLW  01
4FBC:  MOVWF  xA4
4FBE:  MOVLW  C6
4FC0:  MOVWF  xA3
4FC2:  MOVLW  9E
4FC4:  MOVWF  FF6
4FC6:  MOVLW  0E
4FC8:  MOVWF  FF7
4FCA:  MOVLW  03
4FCC:  MOVLB  2
4FCE:  MOVWF  x41
4FD0:  MOVLB  0
4FD2:  CALL   31AC
4FD6:  MOVLW  10
4FD8:  MOVWF  FE9
4FDA:  MOVFF  20,22D
4FDE:  MOVFF  1F,22C
4FE2:  CALL   31D4
4FE6:  MOVLW  0D
4FE8:  MOVLB  2
4FEA:  MOVWF  x4E
4FEC:  MOVLB  0
4FEE:  CALL   318A
.................... 				COM1_send_str(buf); 
4FF2:  MOVLW  01
4FF4:  MOVLB  2
4FF6:  MOVWF  x6A
4FF8:  MOVLW  C6
4FFA:  MOVWF  x69
4FFC:  MOVLB  0
4FFE:  CALL   2242
.................... 			} 
5002:  BRA    5028
5004:  MOVLB  1
.................... 			else 
....................             { 
.................... 				manual_negative = get_int(); 
5006:  MOVLB  0
5008:  CALL   2BC6
500C:  MOVFF  02,20
5010:  MOVFF  01,1F
.................... 				set_AD5314(DAC_NEG_VOLT, val); 
5014:  MOVLW  06
5016:  MOVLB  2
5018:  MOVWF  x2E
501A:  MOVFF  207,230
501E:  MOVFF  206,22F
5022:  MOVLB  0
5024:  CALL   1130
.................... 			} 
.................... 			break; 
5028:  BRA    50A6
.................... 			case 'C': // manual power level 
.................... 			if (query) 
502A:  MOVLB  1
502C:  MOVF   xEE,F
502E:  BZ    507C
....................             { 
.................... 				sprintf(buf, "VC %lu\r", manual_pos); 
5030:  MOVLW  01
5032:  MOVWF  xA4
5034:  MOVLW  C6
5036:  MOVWF  xA3
5038:  MOVLW  A6
503A:  MOVWF  FF6
503C:  MOVLW  0E
503E:  MOVWF  FF7
5040:  MOVLW  03
5042:  MOVLB  2
5044:  MOVWF  x41
5046:  MOVLB  0
5048:  CALL   31AC
504C:  MOVLW  10
504E:  MOVWF  FE9
5050:  MOVFF  22,22D
5054:  MOVFF  21,22C
5058:  CALL   31D4
505C:  MOVLW  0D
505E:  MOVLB  2
5060:  MOVWF  x4E
5062:  MOVLB  0
5064:  CALL   318A
.................... 				COM1_send_str(buf); 
5068:  MOVLW  01
506A:  MOVLB  2
506C:  MOVWF  x6A
506E:  MOVLW  C6
5070:  MOVWF  x69
5072:  MOVLB  0
5074:  CALL   2242
.................... 			} 
5078:  BRA    50A6
507A:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
507C:  MOVLB  0
507E:  CALL   2BC6
5082:  MOVFF  02,207
5086:  MOVFF  01,206
.................... 				manual_pos = val; 
508A:  MOVFF  207,22
508E:  MOVFF  206,21
.................... 				set_AD5314(DAC_POS_VOLT, val); 
5092:  MOVLW  02
5094:  MOVLB  2
5096:  MOVWF  x2E
5098:  MOVFF  207,230
509C:  MOVFF  206,22F
50A0:  MOVLB  0
50A2:  CALL   1130
.................... 			} 
.................... 			break; 
.................... 		} 
.................... 		break; 
50A6:  GOTO   59C8
.................... 		 
.................... 		case 'C': 
.................... 		if (!ttccp_login) break; 
50AA:  MOVLB  1
50AC:  MOVF   x34,F
50AE:  BNZ   50B8
50B0:  MOVLB  0
50B2:  GOTO   59C8
50B6:  MOVLB  1
.................... 		if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
50B8:  MOVF   xF0,W
50BA:  SUBLW  53
50BC:  BTFSS  FD8.2
50BE:  BRA    51C0
....................         { 
.................... 			if (query) 
50C0:  MOVF   xEE,F
50C2:  BZ    5110
....................             { 
.................... 				sprintf(buf, "CS %u\r", setup.clock_source); 
50C4:  MOVLW  01
50C6:  MOVWF  xA4
50C8:  MOVLW  C6
50CA:  MOVWF  xA3
50CC:  MOVLW  AE
50CE:  MOVWF  FF6
50D0:  MOVLW  0E
50D2:  MOVWF  FF7
50D4:  MOVLW  03
50D6:  MOVLB  2
50D8:  MOVWF  x41
50DA:  MOVLB  0
50DC:  CALL   31AC
50E0:  MOVFF  AF,22C
50E4:  MOVLW  1B
50E6:  MOVLB  2
50E8:  MOVWF  x2D
50EA:  MOVLB  0
50EC:  CALL   3324
50F0:  MOVLW  0D
50F2:  MOVLB  2
50F4:  MOVWF  x4E
50F6:  MOVLB  0
50F8:  CALL   318A
.................... 				COM1_send_str(buf); 
50FC:  MOVLW  01
50FE:  MOVLB  2
5100:  MOVWF  x6A
5102:  MOVLW  C6
5104:  MOVWF  x69
5106:  MOVLB  0
5108:  CALL   2242
.................... 			} 
510C:  BRA    51B8
510E:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
5110:  MOVLB  0
5112:  CALL   2BC6
5116:  MOVFF  02,207
511A:  MOVFF  01,206
.................... 				if (val < 2) 
511E:  MOVLB  2
5120:  MOVF   x07,F
5122:  BNZ   5138
5124:  MOVF   x06,W
5126:  SUBLW  01
5128:  BNC   5138
.................... 				{ 
.................... 					setup.clock_source = val; 
512A:  MOVFF  206,AF
.................... 					FPGA_set_reg6(); 
512E:  MOVLB  0
5130:  CALL   1946
.................... 				} 
5134:  BRA    51B8
5136:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
5138:  MOVLW  02
513A:  MOVWF  FEA
513C:  MOVLW  0F
513E:  MOVWF  FE9
5140:  MOVFF  FF2,228
5144:  BCF    FF2.7
5146:  MOVLW  09
5148:  MOVWF  01
514A:  CLRF   FF7
514C:  MOVLW  00
514E:  MOVLB  0
5150:  CALL   0AD6
5154:  TBLRD*-
5156:  TBLRD*+
5158:  MOVFF  FF5,FEE
515C:  DECFSZ 01,F
515E:  BRA    5156
5160:  MOVLB  2
5162:  BTFSC  x28.7
5164:  BSF    FF2.7
5166:  MOVLW  02
5168:  MOVWF  x6A
516A:  MOVLW  0F
516C:  MOVWF  x69
516E:  MOVLB  0
5170:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
5174:  MOVLW  01
5176:  MOVLB  1
5178:  MOVWF  xA4
517A:  MOVLW  78
517C:  MOVWF  xA3
517E:  MOVLW  B6
5180:  MOVWF  FF6
5182:  MOVLW  0E
5184:  MOVWF  FF7
5186:  MOVLW  07
5188:  MOVLB  2
518A:  MOVWF  x41
518C:  MOVLB  0
518E:  CALL   31AC
5192:  MOVFF  AF,22C
5196:  MOVLW  1B
5198:  MOVLB  2
519A:  MOVWF  x2D
519C:  MOVLB  0
519E:  CALL   3324
51A2:  MOVLW  0D
51A4:  MOVLB  2
51A6:  MOVWF  x4E
51A8:  MOVLB  0
51AA:  CALL   318A
.................... 					ret = 0; 
51AE:  MOVLB  1
51B0:  CLRF   xC4
.................... 					break; 
51B2:  MOVLB  0
51B4:  GOTO   59C8
.................... 				} 
.................... 			} 
.................... 			 
.................... 			ret = 1; 
51B8:  MOVLW  01
51BA:  MOVLB  1
51BC:  MOVWF  xC4
.................... 		} 
51BE:  BRA    52C4
.................... 		else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
51C0:  MOVF   xF0,W
51C2:  SUBLW  50
51C4:  BTFSS  FD8.2
51C6:  BRA    52C4
....................         { 
.................... 			if (query) 
51C8:  MOVF   xEE,F
51CA:  BZ    5218
....................             { 
.................... 				sprintf(buf, "CP %u\r", setup.clock_polarity); 
51CC:  MOVLW  01
51CE:  MOVWF  xA4
51D0:  MOVLW  C6
51D2:  MOVWF  xA3
51D4:  MOVLW  C2
51D6:  MOVWF  FF6
51D8:  MOVLW  0E
51DA:  MOVWF  FF7
51DC:  MOVLW  03
51DE:  MOVLB  2
51E0:  MOVWF  x41
51E2:  MOVLB  0
51E4:  CALL   31AC
51E8:  MOVFF  AD,22C
51EC:  MOVLW  1B
51EE:  MOVLB  2
51F0:  MOVWF  x2D
51F2:  MOVLB  0
51F4:  CALL   3324
51F8:  MOVLW  0D
51FA:  MOVLB  2
51FC:  MOVWF  x4E
51FE:  MOVLB  0
5200:  CALL   318A
.................... 				COM1_send_str(buf); 
5204:  MOVLW  01
5206:  MOVLB  2
5208:  MOVWF  x6A
520A:  MOVLW  C6
520C:  MOVWF  x69
520E:  MOVLB  0
5210:  CALL   2242
.................... 			} 
5214:  BRA    52BE
5216:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
5218:  MOVLB  0
521A:  CALL   2BC6
521E:  MOVFF  02,207
5222:  MOVFF  01,206
.................... 				if (val < 2) 
5226:  MOVLB  2
5228:  MOVF   x07,F
522A:  BNZ   5240
522C:  MOVF   x06,W
522E:  SUBLW  01
5230:  BNC   5240
.................... 				{ 
.................... 					setup.clock_polarity = val; 
5232:  MOVFF  206,AD
.................... 					FPGA_set_reg0(); 
5236:  MOVLB  0
5238:  CALL   18EA
.................... 				} 
523C:  BRA    52BE
523E:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
5240:  MOVLW  02
5242:  MOVWF  FEA
5244:  MOVLW  0F
5246:  MOVWF  FE9
5248:  MOVFF  FF2,228
524C:  BCF    FF2.7
524E:  MOVLW  09
5250:  MOVWF  01
5252:  CLRF   FF7
5254:  MOVLW  00
5256:  MOVLB  0
5258:  CALL   0AD6
525C:  TBLRD*-
525E:  TBLRD*+
5260:  MOVFF  FF5,FEE
5264:  DECFSZ 01,F
5266:  BRA    525E
5268:  MOVLB  2
526A:  BTFSC  x28.7
526C:  BSF    FF2.7
526E:  MOVLW  02
5270:  MOVWF  x6A
5272:  MOVLW  0F
5274:  MOVWF  x69
5276:  MOVLB  0
5278:  CALL   2242
.................... 					sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
527C:  MOVLW  01
527E:  MOVLB  1
5280:  MOVWF  xA4
5282:  MOVLW  78
5284:  MOVWF  xA3
5286:  MOVLW  CA
5288:  MOVWF  FF6
528A:  MOVLW  0E
528C:  MOVWF  FF7
528E:  MOVLW  07
5290:  MOVLB  2
5292:  MOVWF  x41
5294:  MOVLB  0
5296:  CALL   31AC
529A:  MOVFF  AD,22C
529E:  MOVLW  1B
52A0:  MOVLB  2
52A2:  MOVWF  x2D
52A4:  MOVLB  0
52A6:  CALL   3324
52AA:  MOVLW  0D
52AC:  MOVLB  2
52AE:  MOVWF  x4E
52B0:  MOVLB  0
52B2:  CALL   318A
.................... 					ret = 0; 
52B6:  MOVLB  1
52B8:  CLRF   xC4
.................... 					break; 
52BA:  MOVLB  0
52BC:  BRA    59C8
.................... 				} 
.................... 			} 
.................... 			 
.................... 			ret = 1; 
52BE:  MOVLW  01
52C0:  MOVLB  1
52C2:  MOVWF  xC4
.................... 		} 
.................... 		break; 
52C4:  MOVLB  0
52C6:  BRA    59C8
.................... 		 
.................... 		case 'G': 
.................... 		if (!ttccp_login) break; 
52C8:  MOVLB  1
52CA:  MOVF   x34,F
52CC:  BNZ   52D4
52CE:  MOVLB  0
52D0:  BRA    59C8
52D2:  MOVLB  1
.................... 		switch (c2) 
52D4:  MOVF   xF0,W
52D6:  XORLW  50
52D8:  MOVLB  0
52DA:  BZ    52E6
52DC:  XORLW  04
52DE:  BZ    535A
52E0:  XORLW  06
52E2:  BZ    5366
52E4:  BRA    53D8
....................         { 
.................... 			case 'P': 
.................... 			set_adc_channel(A2D_POWER); // read temperature 
52E6:  MOVLW  14
52E8:  MOVWF  01
52EA:  MOVF   FC2,W
52EC:  ANDLW  83
52EE:  IORWF  01,W
52F0:  MOVWF  FC2
.................... 			delay_us(50); 
52F2:  MOVLW  42
52F4:  MOVWF  00
52F6:  DECFSZ 00,F
52F8:  BRA    52F6
52FA:  NOP   
.................... 			val = read_adc(); 
52FC:  BSF    FC2.1
52FE:  BTFSC  FC2.1
5300:  BRA    52FE
5302:  MOVFF  FC4,207
5306:  MOVLB  2
5308:  MOVFF  FC3,206
.................... 			sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
530C:  MOVLW  01
530E:  MOVLB  1
5310:  MOVWF  xA4
5312:  MOVLW  78
5314:  MOVWF  xA3
5316:  MOVLW  D6
5318:  MOVWF  FF6
531A:  MOVLW  0E
531C:  MOVWF  FF7
531E:  MOVLW  04
5320:  MOVLB  2
5322:  MOVWF  x41
5324:  MOVLB  0
5326:  CALL   31AC
532A:  MOVLW  10
532C:  MOVWF  FE9
532E:  MOVFF  207,22D
5332:  MOVFF  206,22C
5336:  CALL   31D4
533A:  MOVLW  0D
533C:  MOVLB  2
533E:  MOVWF  x4E
5340:  MOVLB  0
5342:  CALL   318A
5346:  MOVLW  0A
5348:  MOVLB  2
534A:  MOVWF  x4E
534C:  MOVLB  0
534E:  CALL   318A
.................... 			ret = 0; 
5352:  MOVLB  1
5354:  CLRF   xC4
.................... 			break; 
5356:  MOVLB  0
5358:  BRA    53D8
.................... 			case 'T': 
....................             update_temperature_string(); 
535A:  CALL   3704
....................             ret = 0; 
535E:  MOVLB  1
5360:  CLRF   xC4
....................             break; 
5362:  MOVLB  0
5364:  BRA    53D8
.................... 			 
.................... 			case 'R': 
....................             set_adc_channel(A2D_PREV); // select forward power input 
5366:  MOVLW  10
5368:  MOVWF  01
536A:  MOVF   FC2,W
536C:  ANDLW  83
536E:  IORWF  01,W
5370:  MOVWF  FC2
....................             delay_us(20); 
5372:  MOVLW  1A
5374:  MOVWF  00
5376:  DECFSZ 00,F
5378:  BRA    5376
537A:  NOP   
....................             val = read_adc(); 
537C:  BSF    FC2.1
537E:  BTFSC  FC2.1
5380:  BRA    537E
5382:  MOVFF  FC4,207
5386:  MOVLB  2
5388:  MOVFF  FC3,206
....................             sprintf(ttccp_error_message, "\nGR %lu\r\n", val); 
538C:  MOVLW  01
538E:  MOVLB  1
5390:  MOVWF  xA4
5392:  MOVLW  78
5394:  MOVWF  xA3
5396:  MOVLW  E0
5398:  MOVWF  FF6
539A:  MOVLW  0E
539C:  MOVWF  FF7
539E:  MOVLW  04
53A0:  MOVLB  2
53A2:  MOVWF  x41
53A4:  MOVLB  0
53A6:  CALL   31AC
53AA:  MOVLW  10
53AC:  MOVWF  FE9
53AE:  MOVFF  207,22D
53B2:  MOVFF  206,22C
53B6:  CALL   31D4
53BA:  MOVLW  0D
53BC:  MOVLB  2
53BE:  MOVWF  x4E
53C0:  MOVLB  0
53C2:  CALL   318A
53C6:  MOVLW  0A
53C8:  MOVLB  2
53CA:  MOVWF  x4E
53CC:  MOVLB  0
53CE:  CALL   318A
.................... 			ret = 0; 
53D2:  MOVLB  1
53D4:  CLRF   xC4
53D6:  MOVLB  0
.................... 		} 
.................... 		break; 
53D8:  BRA    59C8
.................... 		break; 
53DA:  BRA    59C8
.................... 		 
.................... 		case 'Q': //statusl      if (!ttccp_login) break; 
.................... 		 
....................         COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
53DC:  MOVLW  02
53DE:  MOVWF  FEA
53E0:  MOVLW  0F
53E2:  MOVWF  FE9
53E4:  MOVFF  FF2,228
53E8:  BCF    FF2.7
53EA:  MOVLW  19
53EC:  MOVWF  01
53EE:  CLRF   FF7
53F0:  MOVLW  00
53F2:  CALL   0B24
53F6:  TBLRD*-
53F8:  TBLRD*+
53FA:  MOVFF  FF5,FEE
53FE:  DECFSZ 01,F
5400:  BRA    53F8
5402:  MOVLB  2
5404:  BTFSC  x28.7
5406:  BSF    FF2.7
5408:  MOVLW  02
540A:  MOVWF  x6A
540C:  MOVLW  0F
540E:  MOVWF  x69
5410:  MOVLB  0
5412:  CALL   2242
....................         COM1_send_str(VERSION); 
5416:  MOVLW  02
5418:  MOVWF  FEA
541A:  MOVLW  0F
541C:  MOVWF  FE9
541E:  MOVFF  FF2,228
5422:  BCF    FF2.7
5424:  MOVWF  01
5426:  CLRF   FF7
5428:  MOVLW  00
542A:  CALL   0AFA
542E:  TBLRD*-
5430:  TBLRD*+
5432:  MOVFF  FF5,FEE
5436:  DECFSZ 01,F
5438:  BRA    5430
543A:  MOVLB  2
543C:  BTFSC  x28.7
543E:  BSF    FF2.7
5440:  MOVLW  02
5442:  MOVWF  x6A
5444:  MOVLW  0F
5446:  MOVWF  x69
5448:  MOVLB  0
544A:  CALL   2242
....................         sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
.................... 		setup.unit_ID, setup.year, setup.week); 
544E:  MOVLW  01
5450:  MOVLB  1
5452:  MOVWF  xA4
5454:  MOVLW  C6
5456:  MOVWF  xA3
5458:  MOVLW  EA
545A:  MOVWF  FF6
545C:  MOVLW  0E
545E:  MOVWF  FF7
5460:  MOVLW  05
5462:  MOVLB  2
5464:  MOVWF  x41
5466:  MOVLB  0
5468:  CALL   31AC
546C:  MOVLW  10
546E:  MOVWF  FE9
5470:  MOVFF  F5,22D
5474:  MOVFF  F4,22C
5478:  CALL   31D4
547C:  MOVLW  F2
547E:  MOVWF  FF6
5480:  MOVLW  0E
5482:  MOVWF  FF7
5484:  MOVLW  04
5486:  MOVLB  2
5488:  MOVWF  x41
548A:  MOVLB  0
548C:  CALL   31AC
5490:  MOVLW  0B
5492:  MOVWF  FE9
5494:  MOVFF  F2,22D
5498:  MOVFF  F1,22C
549C:  CALL   31D4
54A0:  MOVFF  F3,22C
54A4:  MOVLW  01
54A6:  MOVLB  2
54A8:  MOVWF  x2D
54AA:  MOVLB  0
54AC:  CALL   3324
54B0:  MOVLW  0D
54B2:  MOVLB  2
54B4:  MOVWF  x4E
54B6:  MOVLB  0
54B8:  CALL   318A
....................         COM1_send_str(buf); 
54BC:  MOVLW  01
54BE:  MOVLB  2
54C0:  MOVWF  x6A
54C2:  MOVLW  C6
54C4:  MOVWF  x69
54C6:  MOVLB  0
54C8:  CALL   2242
.................... 		 
....................         set_adc_channel(A2D_PREV); // select forward power input 
54CC:  MOVLW  10
54CE:  MOVWF  01
54D0:  MOVF   FC2,W
54D2:  ANDLW  83
54D4:  IORWF  01,W
54D6:  MOVWF  FC2
....................         delay_us(20); 
54D8:  MOVLW  1A
54DA:  MOVWF  00
54DC:  DECFSZ 00,F
54DE:  BRA    54DC
54E0:  NOP   
....................         revp = read_adc(); 
54E2:  BSF    FC2.1
54E4:  BTFSC  FC2.1
54E6:  BRA    54E4
54E8:  MOVFF  FC4,109
54EC:  MOVLB  1
54EE:  MOVFF  FC3,108
.................... 		 
....................         if (revp <= 580) 
54F2:  MOVF   x09,W
54F4:  SUBLW  02
54F6:  BNC   552C
54F8:  BNZ   5500
54FA:  MOVF   x08,W
54FC:  SUBLW  44
54FE:  BNC   552C
.................... 		strcpy(revstat, "GOOD"); 
5500:  MOVLW  01
5502:  MOVWF  FEA
5504:  MOVLW  F1
5506:  MOVWF  FE9
5508:  MOVFF  FF2,228
550C:  BCF    FF2.7
550E:  MOVLW  00
5510:  MOVLB  0
5512:  CALL   0B58
5516:  TBLRD*-
5518:  TBLRD*+
551A:  MOVF   FF5,W
551C:  MOVWF  FEE
551E:  IORLW  00
5520:  BNZ   5518
5522:  MOVLB  2
5524:  BTFSC  x28.7
5526:  BSF    FF2.7
5528:  BRA    5554
552A:  MOVLB  1
....................         else 
.................... 		strcpy(revstat, "BAD"); 
552C:  MOVLW  01
552E:  MOVWF  FEA
5530:  MOVLW  F1
5532:  MOVWF  FE9
5534:  MOVFF  FF2,228
5538:  BCF    FF2.7
553A:  MOVLW  00
553C:  MOVLB  0
553E:  CALL   0B78
5542:  TBLRD*-
5544:  TBLRD*+
5546:  MOVF   FF5,W
5548:  MOVWF  FEE
554A:  IORLW  00
554C:  BNZ   5544
554E:  MOVLB  2
5550:  BTFSC  x28.7
5552:  BSF    FF2.7
.................... 		 
....................         if(setup.rp) 
5554:  MOVLB  0
5556:  MOVF   xFC,W
5558:  IORWF  xFD,W
555A:  BZ    5566
.................... 		rp=0; 
555C:  MOVLB  2
555E:  CLRF   x09
5560:  CLRF   x08
5562:  BRA    556E
5564:  MOVLB  0
....................         else 
.................... 		rp=1; 
5566:  MOVLB  2
5568:  CLRF   x09
556A:  MOVLW  01
556C:  MOVWF  x08
.................... 		 
.................... 		 
.................... 		sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
.................... 		setup.frequency, revstat, current_power, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
556E:  MOVFF  A9,22B
5572:  MOVFF  A8,22A
5576:  CLRF   x2D
5578:  MOVLW  64
557A:  MOVWF  x2C
557C:  MOVLB  0
557E:  CALL   343E
5582:  MOVFF  02,229
5586:  MOVFF  01,228
558A:  MOVFF  A9,22B
558E:  MOVFF  A8,22A
5592:  MOVLB  2
5594:  CLRF   x2D
5596:  MOVLW  64
5598:  MOVWF  x2C
559A:  MOVLB  0
559C:  CALL   343E
55A0:  MOVFF  00,22A
55A4:  MOVFF  03,22B
55A8:  MOVLW  01
55AA:  MOVLB  1
55AC:  MOVWF  xA4
55AE:  MOVLW  C6
55B0:  MOVWF  xA3
55B2:  MOVLW  02
55B4:  MOVWF  FF6
55B6:  MOVLW  0F
55B8:  MOVWF  FF7
55BA:  MOVLW  08
55BC:  MOVLB  2
55BE:  MOVWF  x41
55C0:  MOVLB  0
55C2:  CALL   31AC
55C6:  MOVLW  10
55C8:  MOVWF  FE9
55CA:  MOVFF  B7,22D
55CE:  MOVFF  B6,22C
55D2:  CALL   31D4
55D6:  MOVLW  0D
55D8:  MOVWF  FF6
55DA:  MOVLW  0F
55DC:  MOVWF  FF7
55DE:  MOVLW  06
55E0:  MOVLB  2
55E2:  MOVWF  x41
55E4:  MOVLB  0
55E6:  CALL   31AC
55EA:  MOVLW  01
55EC:  MOVWF  FEA
55EE:  MOVLW  F1
55F0:  MOVWF  FE9
55F2:  GOTO   38AA
55F6:  MOVLW  15
55F8:  MOVWF  FF6
55FA:  MOVLW  0F
55FC:  MOVWF  FF7
55FE:  MOVLW  07
5600:  MOVLB  2
5602:  MOVWF  x41
5604:  MOVLB  0
5606:  CALL   31AC
560A:  MOVLW  10
560C:  MOVWF  FE9
560E:  MOVFF  10D,22D
5612:  MOVFF  10C,22C
5616:  CALL   31D4
561A:  MOVLW  1F
561C:  MOVWF  FF6
561E:  MOVLW  0F
5620:  MOVWF  FF7
5622:  MOVLW  05
5624:  MOVLB  2
5626:  MOVWF  x41
5628:  MOVLB  0
562A:  CALL   31AC
562E:  MOVLW  10
5630:  MOVWF  FE9
5632:  MOVFF  229,22D
5636:  MOVFF  228,22C
563A:  CALL   31D4
563E:  MOVLW  2E
5640:  MOVLB  2
5642:  MOVWF  x4E
5644:  MOVLB  0
5646:  CALL   318A
564A:  MOVLW  10
564C:  MOVWF  FE9
564E:  MOVFF  22B,22D
5652:  MOVFF  22A,22C
5656:  CALL   31D4
565A:  MOVLW  2B
565C:  MOVWF  FF6
565E:  MOVLW  0F
5660:  MOVWF  FF7
5662:  MOVLW  09
5664:  MOVLB  2
5666:  MOVWF  x41
5668:  MOVLB  0
566A:  CALL   31AC
566E:  MOVFF  AC,22C
5672:  MOVLW  1B
5674:  MOVLB  2
5676:  MOVWF  x2D
5678:  MOVLB  0
567A:  CALL   3324
567E:  MOVLW  36
5680:  MOVWF  FF6
5682:  MOVLW  0F
5684:  MOVWF  FF7
5686:  MOVLW  05
5688:  MOVLB  2
568A:  MOVWF  x41
568C:  MOVLB  0
568E:  CALL   31AC
5692:  MOVFF  AF,22C
5696:  MOVLW  1B
5698:  MOVLB  2
569A:  MOVWF  x2D
569C:  MOVLB  0
569E:  CALL   3324
56A2:  MOVLW  3D
56A4:  MOVWF  FF6
56A6:  MOVLW  0F
56A8:  MOVWF  FF7
56AA:  MOVLW  05
56AC:  MOVLB  2
56AE:  MOVWF  x41
56B0:  MOVLB  0
56B2:  CALL   31AC
56B6:  MOVLW  10
56B8:  MOVWF  FE9
56BA:  MOVFF  AB,22D
56BE:  MOVFF  AA,22C
56C2:  CALL   31D4
56C6:  MOVLW  0D
56C8:  MOVLB  2
56CA:  MOVWF  x4E
56CC:  MOVLB  0
56CE:  CALL   318A
.................... 		COM1_send_str(buf); 
56D2:  MOVLW  01
56D4:  MOVLB  2
56D6:  MOVWF  x6A
56D8:  MOVLW  C6
56DA:  MOVWF  x69
56DC:  MOVLB  0
56DE:  CALL   2242
.................... 		 
.................... 		sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, RB=%lu, RC=%lu, CP=%u  \r" 
.................... 		setup.SOQPSK, setup.randomizer, 1 - setup.data_polarity, rp, setup.data_source, 
.................... 		setup.internal_pattern, setup.power_low_level+20, setup.cot, setup.rc, 
.................... 		setup.clock_polarity); 
56E2:  MOVLW  01
56E4:  BSF    FD8.0
56E6:  SUBFWB xAE,W
56E8:  MOVLB  2
56EA:  MOVWF  x28
56EC:  MOVLW  14
56EE:  MOVLB  0
56F0:  ADDWF  xF6,W
56F2:  MOVLB  2
56F4:  MOVWF  x29
56F6:  MOVLW  00
56F8:  MOVLB  0
56FA:  ADDWFC xF7,W
56FC:  MOVLB  2
56FE:  MOVWF  x2A
5700:  MOVLW  01
5702:  MOVLB  1
5704:  MOVWF  xA4
5706:  MOVLW  C6
5708:  MOVWF  xA3
570A:  MOVLW  48
570C:  MOVWF  FF6
570E:  MOVLW  0F
5710:  MOVWF  FF7
5712:  MOVLW  06
5714:  MOVLB  2
5716:  MOVWF  x41
5718:  MOVLB  0
571A:  CALL   31AC
571E:  MOVFF  B4,22C
5722:  MOVLW  1B
5724:  MOVLB  2
5726:  MOVWF  x2D
5728:  MOVLB  0
572A:  CALL   3324
572E:  MOVLW  50
5730:  MOVWF  FF6
5732:  MOVLW  0F
5734:  MOVWF  FF7
5736:  MOVLW  05
5738:  MOVLB  2
573A:  MOVWF  x41
573C:  MOVLB  0
573E:  CALL   31AC
5742:  MOVFF  B2,22C
5746:  MOVLW  1B
5748:  MOVLB  2
574A:  MOVWF  x2D
574C:  MOVLB  0
574E:  CALL   3324
5752:  MOVLW  57
5754:  MOVWF  FF6
5756:  MOVLW  0F
5758:  MOVWF  FF7
575A:  MOVLW  05
575C:  MOVLB  2
575E:  MOVWF  x41
5760:  MOVLB  0
5762:  CALL   31AC
5766:  MOVFF  228,22C
576A:  MOVLW  1B
576C:  MOVLB  2
576E:  MOVWF  x2D
5770:  MOVLB  0
5772:  CALL   3324
5776:  MOVLW  5E
5778:  MOVWF  FF6
577A:  MOVLW  0F
577C:  MOVWF  FF7
577E:  MOVLW  05
5780:  MOVLB  2
5782:  MOVWF  x41
5784:  MOVLB  0
5786:  CALL   31AC
578A:  MOVLW  10
578C:  MOVWF  FE9
578E:  MOVFF  209,22D
5792:  MOVFF  208,22C
5796:  CALL   31D4
579A:  MOVLW  66
579C:  MOVWF  FF6
579E:  MOVLW  0F
57A0:  MOVWF  FF7
57A2:  MOVLW  05
57A4:  MOVLB  2
57A6:  MOVWF  x41
57A8:  MOVLB  0
57AA:  CALL   31AC
57AE:  MOVFF  B0,22C
57B2:  MOVLW  1B
57B4:  MOVLB  2
57B6:  MOVWF  x2D
57B8:  MOVLB  0
57BA:  CALL   3324
57BE:  MOVLW  6D
57C0:  MOVWF  FF6
57C2:  MOVLW  0F
57C4:  MOVWF  FF7
57C6:  MOVLW  05
57C8:  MOVLB  2
57CA:  MOVWF  x41
57CC:  MOVLB  0
57CE:  CALL   31AC
57D2:  MOVFF  B1,22C
57D6:  MOVLW  1B
57D8:  MOVLB  2
57DA:  MOVWF  x2D
57DC:  MOVLB  0
57DE:  CALL   3324
57E2:  MOVLW  74
57E4:  MOVWF  FF6
57E6:  MOVLW  0F
57E8:  MOVWF  FF7
57EA:  MOVLW  05
57EC:  MOVLB  2
57EE:  MOVWF  x41
57F0:  MOVLB  0
57F2:  CALL   31AC
57F6:  MOVLW  10
57F8:  MOVWF  FE9
57FA:  MOVFF  22A,22D
57FE:  MOVFF  229,22C
5802:  CALL   31D4
5806:  MOVLW  7C
5808:  MOVWF  FF6
580A:  MOVLW  0F
580C:  MOVWF  FF7
580E:  MOVLW  05
5810:  MOVLB  2
5812:  MOVWF  x41
5814:  MOVLB  0
5816:  CALL   31AC
581A:  MOVLW  10
581C:  MOVWF  FE9
581E:  MOVFF  F9,22D
5822:  MOVFF  F8,22C
5826:  CALL   31D4
582A:  MOVLW  84
582C:  MOVWF  FF6
582E:  MOVLW  0F
5830:  MOVWF  FF7
5832:  MOVLW  05
5834:  MOVLB  2
5836:  MOVWF  x41
5838:  MOVLB  0
583A:  CALL   31AC
583E:  MOVLW  10
5840:  MOVWF  FE9
5842:  MOVFF  FB,22D
5846:  MOVFF  FA,22C
584A:  CALL   31D4
584E:  MOVLW  8C
5850:  MOVWF  FF6
5852:  MOVLW  0F
5854:  MOVWF  FF7
5856:  MOVLW  05
5858:  MOVLB  2
585A:  MOVWF  x41
585C:  MOVLB  0
585E:  CALL   31AC
5862:  MOVFF  AD,22C
5866:  MOVLW  1B
5868:  MOVLB  2
586A:  MOVWF  x2D
586C:  MOVLB  0
586E:  CALL   3324
5872:  MOVLW  93
5874:  MOVWF  FF6
5876:  MOVLW  0F
5878:  MOVWF  FF7
587A:  MOVLW  03
587C:  MOVLB  2
587E:  MOVWF  x41
5880:  MOVLB  0
5882:  CALL   31AC
.................... 		COM1_send_str(buf); 
5886:  MOVLW  01
5888:  MOVLB  2
588A:  MOVWF  x6A
588C:  MOVLW  C6
588E:  MOVWF  x69
5890:  MOVLB  0
5892:  CALL   2242
.................... 		 
.................... 		sprintf(buf, "\r\n\nUT=%u, US=%u BG= %lu [Hz] %lu [mSec]\r" setup.UART_Time, setup.UART_Status, 1000 / setup.Block_per_second , setup.Block_per_second); // VERSION 3.3 17.1.2016 
5896:  MOVLW  03
5898:  MOVLB  2
589A:  MOVWF  x2B
589C:  MOVLW  E8
589E:  MOVWF  x2A
58A0:  MOVFF  103,22D
58A4:  MOVFF  102,22C
58A8:  MOVLB  0
58AA:  CALL   343E
58AE:  MOVFF  02,229
58B2:  MOVFF  01,228
58B6:  MOVLW  01
58B8:  MOVLB  1
58BA:  MOVWF  xA4
58BC:  MOVLW  C6
58BE:  MOVWF  xA3
58C0:  MOVLW  98
58C2:  MOVWF  FF6
58C4:  MOVLW  0F
58C6:  MOVWF  FF7
58C8:  MOVLW  06
58CA:  MOVLB  2
58CC:  MOVWF  x41
58CE:  MOVLB  0
58D0:  CALL   31AC
58D4:  MOVFF  FE,22C
58D8:  MOVLW  1B
58DA:  MOVLB  2
58DC:  MOVWF  x2D
58DE:  MOVLB  0
58E0:  CALL   3324
58E4:  MOVLW  A0
58E6:  MOVWF  FF6
58E8:  MOVLW  0F
58EA:  MOVWF  FF7
58EC:  MOVLW  05
58EE:  MOVLB  2
58F0:  MOVWF  x41
58F2:  MOVLB  0
58F4:  CALL   31AC
58F8:  MOVFF  FF,22C
58FC:  MOVLW  1B
58FE:  MOVLB  2
5900:  MOVWF  x2D
5902:  MOVLB  0
5904:  CALL   3324
5908:  MOVLW  A7
590A:  MOVWF  FF6
590C:  MOVLW  0F
590E:  MOVWF  FF7
5910:  MOVLW  05
5912:  MOVLB  2
5914:  MOVWF  x41
5916:  MOVLB  0
5918:  CALL   31AC
591C:  MOVLW  10
591E:  MOVWF  FE9
5920:  MOVFF  229,22D
5924:  MOVFF  228,22C
5928:  CALL   31D4
592C:  MOVLW  AF
592E:  MOVWF  FF6
5930:  MOVLW  0F
5932:  MOVWF  FF7
5934:  MOVLW  06
5936:  MOVLB  2
5938:  MOVWF  x41
593A:  MOVLB  0
593C:  CALL   31AC
5940:  MOVLW  10
5942:  MOVWF  FE9
5944:  MOVFF  103,22D
5948:  MOVFF  102,22C
594C:  CALL   31D4
5950:  MOVLW  B8
5952:  MOVWF  FF6
5954:  MOVLW  0F
5956:  MOVWF  FF7
5958:  MOVLW  08
595A:  MOVLB  2
595C:  MOVWF  x41
595E:  MOVLB  0
5960:  CALL   31AC
.................... 		COM1_send_str(buf); 
5964:  MOVLW  01
5966:  MOVLB  2
5968:  MOVWF  x6A
596A:  MOVLW  C6
596C:  MOVWF  x69
596E:  MOVLB  0
5970:  CALL   2242
.................... 		 
....................         update_temperature_string(); 
5974:  CALL   3704
....................         ret = 0; 
5978:  MOVLB  1
597A:  CLRF   xC4
.................... 		break; 
597C:  MOVLB  0
597E:  BRA    59C8
.................... 		default: 
....................       	{ 
.................... 			if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5980:  MOVLB  1
5982:  MOVF   x34,F
5984:  BNZ   598C
5986:  MOVLB  0
5988:  BRA    59C8
598A:  MOVLB  1
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
598C:  MOVLW  02
598E:  MOVWF  FEA
5990:  MOVLW  0F
5992:  MOVWF  FE9
5994:  MOVFF  FF2,228
5998:  BCF    FF2.7
599A:  MOVLW  09
599C:  MOVWF  01
599E:  CLRF   FF7
59A0:  MOVLW  00
59A2:  MOVLB  0
59A4:  CALL   0AD6
59A8:  TBLRD*-
59AA:  TBLRD*+
59AC:  MOVFF  FF5,FEE
59B0:  DECFSZ 01,F
59B2:  BRA    59AA
59B4:  MOVLB  2
59B6:  BTFSC  x28.7
59B8:  BSF    FF2.7
59BA:  MOVLW  02
59BC:  MOVWF  x6A
59BE:  MOVLW  0F
59C0:  MOVWF  x69
59C2:  MOVLB  0
59C4:  CALL   2242
59C8:  MOVLB  2
.................... 			 
.................... 		} 
.................... 	} 
.................... 	aaa: 
.................... 	return; 
59CA:  MOVLB  0
59CC:  GOTO   5AD2 (RETURN)
.................... } 
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
.................... { 
.................... 	UINT chr, ret; 
.................... 	 
.................... 	switch (comm_state) 
*
5A14:  MOVF   54,W
5A16:  XORLW  00
5A18:  BZ    5A26
5A1A:  XORLW  02
5A1C:  BZ    5A56
5A1E:  XORLW  01
5A20:  BTFSC  FD8.2
5A22:  BRA    5B78
5A24:  BRA    5B78
....................     { 
.................... 		case COMM_INIT: 
.................... 		comm_ridx = 0; 
5A26:  CLRF   55
.................... 		comm_state = COMM_WAIT_CR; 
5A28:  MOVLW  02
5A2A:  MOVWF  54
.................... 		comm_timeout = 0; 
5A2C:  CLRF   xA7
5A2E:  CLRF   xA6
.................... 		if (ttccp_login) 
5A30:  MOVLB  1
5A32:  MOVF   x34,F
5A34:  BZ    5A52
.................... 		COM1_send_str("\r>"); 
5A36:  MOVLW  0D
5A38:  MOVWF  xBE
5A3A:  MOVLW  3E
5A3C:  MOVWF  xBF
5A3E:  CLRF   xC0
5A40:  MOVLW  01
5A42:  MOVLB  2
5A44:  MOVWF  x6A
5A46:  MOVLW  BE
5A48:  MOVWF  x69
5A4A:  MOVLB  0
5A4C:  CALL   2242
5A50:  MOVLB  1
.................... 		break; 
5A52:  MOVLB  0
5A54:  BRA    5B78
.................... 		case COMM_WAIT_CR: 
.................... 		if (COM1_rcnt) 
5A56:  MOVF   31,F
5A58:  BTFSC  FD8.2
5A5A:  BRA    5B4A
....................         { 
.................... 			comm_timeout = 0; 
5A5C:  CLRF   xA7
5A5E:  CLRF   xA6
.................... 			chr = COM1_get_chr(); 
5A60:  CALL   2AC0
5A64:  MOVLB  1
5A66:  CLRF   xBB
5A68:  MOVFF  01,1BA
.................... 			comm_buf[comm_ridx++] = chr; 
5A6C:  MOVF   55,W
5A6E:  INCF   55,F
5A70:  CLRF   03
5A72:  ADDLW  56
5A74:  MOVWF  FE9
5A76:  MOVLW  00
5A78:  ADDWFC 03,W
5A7A:  MOVWF  FEA
5A7C:  MOVFF  1BA,FEF
.................... 			if (comm_ridx > 70) 
5A80:  MOVF   55,W
5A82:  SUBLW  46
5A84:  BC    5A8E
.................... 			{ 
.................... 				comm_state = 0; 
5A86:  CLRF   54
.................... 				break; 
5A88:  MOVLB  0
5A8A:  BRA    5B78
5A8C:  MOVLB  1
.................... 			} 
.................... 			if (chr == 13 || chr == ';') 
5A8E:  MOVF   xBA,W
5A90:  SUBLW  0D
5A92:  BNZ   5A98
5A94:  MOVF   xBB,F
5A96:  BZ    5AA2
5A98:  MOVF   xBA,W
5A9A:  SUBLW  3B
5A9C:  BNZ   5B4C
5A9E:  MOVF   xBB,F
5AA0:  BNZ   5B4C
.................... 			{ 
.................... 				if (chr == ';') 
5AA2:  MOVF   xBA,W
5AA4:  SUBLW  3B
5AA6:  BNZ   5AC4
5AA8:  MOVF   xBB,F
5AAA:  BNZ   5AC4
.................... 				{ 
.................... 					comm_buf[comm_ridx-1] = 13; 
5AAC:  MOVLW  01
5AAE:  SUBWF  55,W
5AB0:  CLRF   03
5AB2:  ADDLW  56
5AB4:  MOVWF  FE9
5AB6:  MOVLW  00
5AB8:  ADDWFC 03,W
5ABA:  MOVWF  FEA
5ABC:  MOVLW  0D
5ABE:  MOVWF  FEF
.................... 					comm_ridx = 0; 
5AC0:  CLRF   55
.................... 				} 
5AC2:  BRA    5ACC
.................... 				else 
.................... 				COM1_init(); 
5AC4:  MOVLB  0
5AC6:  CALL   1010
5ACA:  MOVLB  1
.................... 				process_ttccp_commands(); 
5ACC:  MOVLB  0
5ACE:  GOTO   38D0
.................... 				if (debug_mode) 
5AD2:  MOVLB  1
5AD4:  MOVF   x43,F
5AD6:  BZ    5AE2
.................... 				if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5AD8:  MOVF   x34,F
5ADA:  BNZ   5AE2
5ADC:  MOVLB  0
5ADE:  BRA    5B78
5AE0:  MOVLB  1
.................... 				COM1_send_str("\r\nOK\n"); 
5AE2:  MOVLW  0D
5AE4:  MOVWF  xBE
5AE6:  MOVLW  0A
5AE8:  MOVWF  xBF
5AEA:  MOVLW  4F
5AEC:  MOVWF  xC0
5AEE:  MOVLW  4B
5AF0:  MOVWF  xC1
5AF2:  MOVLW  0A
5AF4:  MOVWF  xC2
5AF6:  CLRF   xC3
5AF8:  MOVLW  01
5AFA:  MOVLB  2
5AFC:  MOVWF  x6A
5AFE:  MOVLW  BE
5B00:  MOVWF  x69
5B02:  MOVLB  0
5B04:  CALL   2242
.................... 				if (ret == 1) 
5B08:  MOVLB  1
5B0A:  DECFSZ xBC,W
5B0C:  BRA    5B3A
5B0E:  MOVF   xBD,F
5B10:  BNZ   5B3A
.................... 				{ 
.................... 					if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5B12:  MOVF   x34,F
5B14:  BNZ   5B1C
5B16:  MOVLB  0
5B18:  BRA    5B78
5B1A:  MOVLB  1
.................... 					COM1_send_str("\n\r"); 
5B1C:  MOVLW  0A
5B1E:  MOVWF  xBE
5B20:  MOVLW  0D
5B22:  MOVWF  xBF
5B24:  CLRF   xC0
5B26:  MOVLW  01
5B28:  MOVLB  2
5B2A:  MOVWF  x6A
5B2C:  MOVLW  BE
5B2E:  MOVWF  x69
5B30:  MOVLB  0
5B32:  CALL   2242
.................... 				} 
5B36:  BRA    5B4A
5B38:  MOVLB  1
.................... 				else 
.................... 				COM1_send_str(ttccp_error_message); 
5B3A:  MOVLW  01
5B3C:  MOVLB  2
5B3E:  MOVWF  x6A
5B40:  MOVLW  78
5B42:  MOVWF  x69
5B44:  MOVLB  0
5B46:  CALL   2242
5B4A:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		 
.................... 		if (comm_state > COMM_WAIT_DLR) 
5B4C:  MOVF   54,W
5B4E:  SUBLW  01
5B50:  BC    5B74
....................         if (TMR_100MS_COMM_TO) 
5B52:  BTFSS  28.1
5B54:  BRA    5B74
.................... 		{ 
.................... 			TMR_100MS_COMM_TO = 0; 
5B56:  BCF    28.1
.................... 			if (++comm_timeout > 10000) // time out after 10 seconds from last char 
5B58:  MOVLB  0
5B5A:  INCF   xA6,F
5B5C:  BTFSC  FD8.2
5B5E:  INCF   xA7,F
5B60:  MOVF   xA7,W
5B62:  SUBLW  26
5B64:  BC    5B72
5B66:  XORLW  FF
5B68:  BNZ   5B70
5B6A:  MOVF   xA6,W
5B6C:  SUBLW  10
5B6E:  BC    5B72
....................             comm_state = 0; 
5B70:  CLRF   54
5B72:  MOVLB  1
.................... 		} 
.................... 		break; 
5B74:  MOVLB  0
5B76:  BRA    5B78
.................... 		case COMM_DELAY: 
.................... 		break; 
.................... 	} 
5B78:  GOTO   6DA0 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
.................... { 
.................... 	UINT chr, ret; 
.................... 	 
.................... 	switch (comm_state) 
*
6BD0:  MOVF   54,W
6BD2:  ADDLW  FC
6BD4:  BTFSC  FD8.0
6BD6:  BRA    6D36
6BD8:  ADDLW  04
6BDA:  GOTO   6D3A
....................     { 
.................... 		case COMM_INIT: 
.................... 		comm_ridx = 0; 
6BDE:  CLRF   55
.................... 		comm_state++; 
6BE0:  INCF   54,F
.................... 		break; 
6BE2:  BRA    6D36
.................... 		case COMM_WAIT_DLR: 
.................... 		#ignore_warnings 201 
.................... 		if (COM1_rcnt) 
6BE4:  MOVF   31,F
6BE6:  BZ    6C14
....................         if ((chr = COM1_get_chr()) == '$') 
6BE8:  CALL   2AC0
6BEC:  MOVLB  1
6BEE:  CLRF   xBB
6BF0:  MOVFF  01,1BA
6BF4:  MOVF   xBA,W
6BF6:  SUBLW  24
6BF8:  BNZ   6C0A
6BFA:  MOVF   xBB,F
6BFC:  BNZ   6C0A
.................... 		{ 
.................... 			comm_state++; 
6BFE:  INCF   54,F
.................... 			comm_timeout = 0; 
6C00:  MOVLB  0
6C02:  CLRF   xA7
6C04:  CLRF   xA6
.................... 		} 
6C06:  BRA    6C14
6C08:  MOVLB  1
....................         else 
.................... 		inc_dec(chr); 
6C0A:  MOVFF  1BA,1D1
6C0E:  MOVLB  0
6C10:  GOTO   5C04
.................... 		break; 
6C14:  BRA    6D36
.................... 		case COMM_WAIT_CR: 
.................... 		if (COM1_rcnt) 
6C16:  MOVF   31,F
6C18:  BTFSC  FD8.2
6C1A:  BRA    6D08
....................         { 
.................... 			comm_timeout = 0; 
6C1C:  CLRF   xA7
6C1E:  CLRF   xA6
.................... 			chr = COM1_get_chr(); 
6C20:  CALL   2AC0
6C24:  MOVLB  1
6C26:  CLRF   xBB
6C28:  MOVFF  01,1BA
.................... 			comm_buf[comm_ridx++] = chr; 
6C2C:  MOVF   55,W
6C2E:  INCF   55,F
6C30:  CLRF   03
6C32:  ADDLW  56
6C34:  MOVWF  FE9
6C36:  MOVLW  00
6C38:  ADDWFC 03,W
6C3A:  MOVWF  FEA
6C3C:  MOVFF  1BA,FEF
.................... 			if (comm_ridx > 70) 
6C40:  MOVF   55,W
6C42:  SUBLW  46
6C44:  BC    6C4E
.................... 			{ 
.................... 				comm_state = 0; 
6C46:  CLRF   54
.................... 				break; 
6C48:  MOVLB  0
6C4A:  BRA    6D36
6C4C:  MOVLB  1
.................... 			} 
.................... 			if (chr == 13) 
6C4E:  MOVF   xBA,W
6C50:  SUBLW  0D
6C52:  BNZ   6CBE
6C54:  MOVF   xBB,F
6C56:  BNZ   6CBE
.................... 			{ 
.................... 				ret = process_dollar_commands(); 
6C58:  MOVLB  0
6C5A:  BRA    649A
6C5C:  MOVLB  1
6C5E:  CLRF   xBD
6C60:  MOVFF  01,1BC
.................... 				if (ret == 1) 
6C64:  DECFSZ xBC,W
6C66:  BRA    6C6C
6C68:  MOVF   xBD,F
6C6A:  BNZ   6C6C
.................... 				{ 
.................... 					//            store_setup(); 
.................... 					//            update_all(); 
.................... 				} 
.................... 				if (ret != 255) 
6C6C:  INCFSZ xBC,W
6C6E:  BRA    6C74
6C70:  MOVF   xBD,F
6C72:  BZ    6CB4
.................... 				COM1_send_str("\r\nOK\r\n*"); 
6C74:  MOVLW  01
6C76:  MOVWF  FEA
6C78:  MOVLW  BE
6C7A:  MOVWF  FE9
6C7C:  MOVFF  FF2,1D1
6C80:  BCF    FF2.7
6C82:  MOVLW  08
6C84:  MOVWF  01
6C86:  CLRF   FF7
6C88:  MOVLW  00
6C8A:  MOVLB  0
6C8C:  CALL   0B96
6C90:  TBLRD*-
6C92:  TBLRD*+
6C94:  MOVFF  FF5,FEE
6C98:  DECFSZ 01,F
6C9A:  BRA    6C92
6C9C:  MOVLB  1
6C9E:  BTFSC  xD1.7
6CA0:  BSF    FF2.7
6CA2:  MOVLW  01
6CA4:  MOVLB  2
6CA6:  MOVWF  x6A
6CA8:  MOVLW  BE
6CAA:  MOVWF  x69
6CAC:  MOVLB  0
6CAE:  CALL   2242
6CB2:  MOVLB  1
.................... 				COM1_init(); 
6CB4:  MOVLB  0
6CB6:  CALL   1010
.................... 			} 
6CBA:  BRA    6D08
6CBC:  MOVLB  1
.................... 			else if (chr == 27) 
6CBE:  MOVF   xBA,W
6CC0:  SUBLW  1B
6CC2:  BNZ   6D0A
6CC4:  MOVF   xBB,F
6CC6:  BNZ   6D0A
.................... 			{ 
.................... 				COM1_send_str("\r\n\nBREAK\r\n"); 
6CC8:  MOVLW  01
6CCA:  MOVWF  FEA
6CCC:  MOVLW  C6
6CCE:  MOVWF  FE9
6CD0:  MOVFF  FF2,1D1
6CD4:  BCF    FF2.7
6CD6:  MOVLW  0B
6CD8:  MOVWF  01
6CDA:  CLRF   FF7
6CDC:  MOVLW  00
6CDE:  MOVLB  0
6CE0:  CALL   0BB8
6CE4:  TBLRD*-
6CE6:  TBLRD*+
6CE8:  MOVFF  FF5,FEE
6CEC:  DECFSZ 01,F
6CEE:  BRA    6CE6
6CF0:  MOVLB  1
6CF2:  BTFSC  xD1.7
6CF4:  BSF    FF2.7
6CF6:  MOVLW  01
6CF8:  MOVLB  2
6CFA:  MOVWF  x6A
6CFC:  MOVLW  C6
6CFE:  MOVWF  x69
6D00:  MOVLB  0
6D02:  CALL   2242
.................... 				comm_state = 0; 
6D06:  CLRF   54
6D08:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		 
.................... 		if (comm_state > COMM_WAIT_DLR) 
6D0A:  MOVF   54,W
6D0C:  SUBLW  01
6D0E:  BC    6D32
....................         if (TMR_100MS_COMM_TO) 
6D10:  BTFSS  28.1
6D12:  BRA    6D32
.................... 		{ 
.................... 			TMR_100MS_COMM_TO = 0; 
6D14:  BCF    28.1
.................... 			if (++comm_timeout > 10000) // time out after 10 seconds from last char 
6D16:  MOVLB  0
6D18:  INCF   xA6,F
6D1A:  BTFSC  FD8.2
6D1C:  INCF   xA7,F
6D1E:  MOVF   xA7,W
6D20:  SUBLW  26
6D22:  BC    6D30
6D24:  XORLW  FF
6D26:  BNZ   6D2E
6D28:  MOVF   xA6,W
6D2A:  SUBLW  10
6D2C:  BC    6D30
....................             comm_state = 0; 
6D2E:  CLRF   54
6D30:  MOVLB  1
.................... 		} 
.................... 		break; 
6D32:  MOVLB  0
6D34:  BRA    6D36
.................... 		case COMM_DELAY: 
.................... 		break; 
.................... 	} 
6D36:  GOTO   6DA0 (RETURN)
.................... } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
.................... { 
.................... 	UINT chr; 
.................... 	 
.................... 	if (OERR) 
*
6D66:  BTFSS  FAB.1
6D68:  BRA    6D7A
....................     { 
.................... 		OERR = 0; 
6D6A:  BCF    FAB.1
.................... 		CREN = 0; 
6D6C:  BCF    FAB.4
.................... 		delay_us(5); 
6D6E:  MOVLW  06
6D70:  MOVWF  00
6D72:  DECFSZ 00,F
6D74:  BRA    6D72
6D76:  NOP   
.................... 		CREN = 1; 
6D78:  BSF    FAB.4
.................... 	} 
.................... 	if (FERR) 
6D7A:  BTFSS  FAB.2
6D7C:  BRA    6D8A
....................     { 
.................... 		FERR = 0; 
6D7E:  BCF    FAB.2
.................... 		chr = RCREG1; 
6D80:  MOVLB  1
6D82:  CLRF   xB9
6D84:  MOVFF  FAE,1B8
6D88:  MOVLB  0
.................... 	} 
.................... 	if (ttccp) 
6D8A:  MOVLB  1
6D8C:  MOVF   x42,F
6D8E:  BZ    6D9C
....................     ttccp_handler(); 
6D90:  MOVLB  0
6D92:  GOTO   5A14
6D96:  MOVLB  0
6D98:  BRA    6DA0
6D9A:  MOVLB  1
.................... 	else 
....................     dollar_handler(); 
6D9C:  MOVLB  0
6D9E:  BRA    6BD0
6DA0:  GOTO   6FF0 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
.................... //========== functions ========================================= 
.................... // // VERSION 3.3 US 30.03.2016 
.................... //========== functions ========================================= 
.................... typedef struct { 
....................   UINT analog; 
....................   UINT Pout; 
.................... } POWER_TRANS; 
....................  
.................... const POWER_TRANS Ptrans[] = { 
....................  
.................... //  dec    vmeas    Pout 
.................... {  1  ,  998  },//  ,1 
.................... {  2  ,  500  },//  ,2 
.................... {  3  ,  353  },//  ,3 
.................... {  4  ,  260  },//  ,4 
.................... {  5  ,  210  },//  ,5 
.................... {  6  ,  170  },//  ,6 
.................... {  7  ,  144  },//  ,7 
.................... {  8  ,  124  },//  ,8 
.................... {  9  ,  110  },//  ,9 
.................... {  10  , 99  },// ,10 
.................... {  11  ,  88  },//  ,11 
.................... {  12  ,  79  },//  ,12 
.................... {  13  ,  72  },//  ,13 
.................... {  14  ,  67  },//  ,14 
.................... {  15  ,  62  },//  ,15 
.................... {  16  ,  57  },//  ,16 
.................... {  17  ,  52  },//  ,17 
.................... {  18  ,  50  },//  ,18 
.................... {  19  ,  46  },//  ,19 
.................... {  20  ,  44  },//  ,20 
.................... }; 
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 FFWR 
.................... //============================================================================= 
.................... typedef struct { 
....................   UINT analog1; 
....................   UINT Pout1; 
.................... } POWER_TRANS1; 
....................  
.................... const POWER_TRANS1 Ptrans1[] = { 
....................  
.................... //  dec    vmeas    Pout1 
.................... {  80  ,  20  },//  0.29V  ,0 
.................... {  102  ,  21  },//  0.33V  ,1 
.................... {  118  ,  22  },//  0.38V  ,2 
.................... {  127  ,  23  },//  0.41V  ,3 
.................... {  143  ,  24  },//  0.46V  ,4 
.................... {  167  ,  25  },//  0.54V  ,5 
.................... {  183  ,  26  },//  0.59V  ,6 
.................... {  208  ,  27  },//  0.67V  ,7 
.................... {  226  ,  28  },//  0.73V  ,8 
.................... {  257  ,  29  },//  0.83V  ,9 
.................... {  288  ,  30  },//  0.93V  ,10 
.................... {  322  ,  31  },//  1.04V  ,11 
.................... {  360  ,  32  },//  1.16V  ,12 
.................... {  400  ,  33  },//  1.29V  ,13 
.................... {  446  ,  34  },//  1.44V  ,14 
.................... {  505  ,  35  },//  1.63V  ,15 
.................... {  564  ,  36  },//  1.82V  ,16 
.................... {  645  ,  37  },//  2.08V  ,17 
.................... {  722  ,  38  },//  2.33V  ,18 
.................... {  818  ,  39  },//  2.64V  ,19 
.................... {  992  ,  40  },//  3.2V  ,20 
.................... {  1005,   41  }, //  3.2V    ,21 
.................... {   1023,   55  } 
.................... }; 
....................  
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
187C:  BCF    F8A.2
....................   delay_us(10); 
187E:  MOVLW  0C
1880:  MOVWF  00
1882:  DECFSZ 00,F
1884:  BRA    1882
1886:  BRA    1888
1888:  NOP   
....................   while (length--) 
188A:  MOVLB  2
188C:  MOVF   x3E,W
188E:  DECF   x3E,F
1890:  XORLW  00
1892:  BZ    18D8
....................     { 
....................     xbyte = *data++; 
1894:  MOVFF  240,03
1898:  MOVF   x3F,W
189A:  INCF   x3F,F
189C:  BTFSC  FD8.2
189E:  INCF   x40,F
18A0:  MOVWF  FE9
18A2:  MOVFF  03,FEA
18A6:  MOVFF  FEF,241
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
18AA:  CLRF   x42
18AC:  MOVF   x42,W
18AE:  SUBLW  07
18B0:  BNC   18D6
....................       { 
....................       if (xbyte & 0x80) 
18B2:  BTFSS  x41.7
18B4:  BRA    18BA
....................         output_high(D2A_MOSI); 
18B6:  BSF    F8C.4
18B8:  BRA    18BC
....................       else 
....................         output_low(D2A_MOSI); 
18BA:  BCF    F8C.4
....................       delay_us(1); 
18BC:  BRA    18BE
18BE:  BRA    18C0
....................       output_high(D2A_SCLK); 
18C0:  BSF    F8C.0
....................       delay_us(1); 
18C2:  BRA    18C4
18C4:  BRA    18C6
....................       output_low(D2A_SCLK); 
18C6:  BCF    F8C.0
....................       delay_us(1); 
18C8:  BRA    18CA
18CA:  BRA    18CC
18CC:  MOVF   x42,W
18CE:  INCF   x42,F
18D0:  BCF    FD8.0
18D2:  RLCF   x41,F
18D4:  BRA    18AC
....................       } 
18D6:  BRA    188C
....................     } 
....................   delay_us(10); 
18D8:  MOVLW  0C
18DA:  MOVWF  00
18DC:  DECFSZ 00,F
18DE:  BRA    18DC
18E0:  BRA    18E2
18E2:  NOP   
....................   output_high(CSN); 
18E4:  BSF    F8A.2
18E6:  MOVLB  0
18E8:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
638E:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
6390:  MOVLB  2
6392:  CLRF   x0C
6394:  MOVF   x0C,W
6396:  SUBLW  07
6398:  BNC   63D0
....................     { 
....................     if (addr & 0x80) 
639A:  BTFSS  x08.7
639C:  BRA    63A2
....................       output_high(D2A_MOSI); 
639E:  BSF    F8C.4
63A0:  BRA    63A4
....................     else 
....................       output_low(D2A_MOSI); 
63A2:  BCF    F8C.4
....................     delay_us(5); 
63A4:  MOVLW  06
63A6:  MOVWF  00
63A8:  DECFSZ 00,F
63AA:  BRA    63A8
63AC:  NOP   
....................     output_high(D2A_SCLK); 
63AE:  BSF    F8C.0
....................     delay_us(5); 
63B0:  MOVLW  06
63B2:  MOVWF  00
63B4:  DECFSZ 00,F
63B6:  BRA    63B4
63B8:  NOP   
....................     output_low(D2A_SCLK); 
63BA:  BCF    F8C.0
....................     delay_us(5); 
63BC:  MOVLW  06
63BE:  MOVWF  00
63C0:  DECFSZ 00,F
63C2:  BRA    63C0
63C4:  NOP   
63C6:  MOVF   x0C,W
63C8:  INCF   x0C,F
63CA:  BCF    FD8.0
63CC:  RLCF   x08,F
63CE:  BRA    6394
....................     } 
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
63D0:  CLRF   x0B
63D2:  CLRF   x0C
63D4:  MOVF   x0C,W
63D6:  SUBLW  07
63D8:  BNC   641E
....................     { 
....................     xbyte <<= 1; 
63DA:  BCF    FD8.0
63DC:  RLCF   x0B,F
....................     delay_us(5); 
63DE:  MOVLW  06
63E0:  MOVWF  00
63E2:  DECFSZ 00,F
63E4:  BRA    63E2
63E6:  NOP   
....................     output_high(D2A_SCLK); 
63E8:  BSF    F8C.0
....................     delay_us(3); 
63EA:  MOVLW  03
63EC:  MOVWF  00
63EE:  DECFSZ 00,F
63F0:  BRA    63EE
63F2:  BRA    63F4
....................     if (input(D2A_MISO)) 
63F4:  BTFSS  F83.1
63F6:  BRA    6404
....................       { 
....................       xbyte |= 1; 
63F8:  BSF    x0B.0
....................       delay_us(2); 
63FA:  MOVLW  02
63FC:  MOVWF  00
63FE:  DECFSZ 00,F
6400:  BRA    63FE
6402:  NOP   
....................       } 
....................     delay_us(2); 
6404:  MOVLW  02
6406:  MOVWF  00
6408:  DECFSZ 00,F
640A:  BRA    6408
640C:  NOP   
....................     output_low(D2A_SCLK); 
640E:  BCF    F8C.0
....................     delay_us(3); 
6410:  MOVLW  03
6412:  MOVWF  00
6414:  DECFSZ 00,F
6416:  BRA    6414
6418:  BRA    641A
641A:  INCF   x0C,F
641C:  BRA    63D4
....................     } 
....................   *data = xbyte; 
641E:  MOVFF  209,FE9
6422:  MOVFF  20A,FEA
6426:  MOVFF  20B,FEF
....................   output_high(CSN); 
642A:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
642C:  BCF    F8C.0
....................   return xbyte; 
642E:  MOVFF  20B,01
6432:  MOVLB  0
6434:  GOTO   6884 (RETURN)
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
1C4C:  MOVFF  245,251
1C50:  MOVFF  244,250
1C54:  MOVFF  243,24F
1C58:  MOVFF  242,24E
1C5C:  BRA    197C
1C5E:  MOVFF  03,249
1C62:  MOVFF  02,248
1C66:  MOVFF  01,247
1C6A:  MOVFF  00,246
....................   temp = bitspersec / 240000000.0; 
1C6E:  MOVFF  249,251
1C72:  MOVFF  248,250
1C76:  MOVFF  247,24F
1C7A:  MOVFF  246,24E
1C7E:  MOVLW  C0
1C80:  MOVLB  2
1C82:  MOVWF  x55
1C84:  MOVLW  E1
1C86:  MOVWF  x54
1C88:  MOVLW  64
1C8A:  MOVWF  x53
1C8C:  MOVLW  9A
1C8E:  MOVWF  x52
1C90:  MOVLB  0
1C92:  RCALL  19B6
1C94:  MOVFF  03,24D
1C98:  MOVFF  02,24C
1C9C:  MOVFF  01,24B
1CA0:  MOVFF  00,24A
....................   temp *= 65536.0; 
1CA4:  MOVFF  24D,251
1CA8:  MOVFF  24C,250
1CAC:  MOVFF  24B,24F
1CB0:  MOVFF  24A,24E
1CB4:  MOVLB  2
1CB6:  CLRF   x55
1CB8:  CLRF   x54
1CBA:  CLRF   x53
1CBC:  MOVLW  8F
1CBE:  MOVWF  x52
1CC0:  MOVLB  0
1CC2:  RCALL  1B14
1CC4:  MOVFF  03,24D
1CC8:  MOVFF  02,24C
1CCC:  MOVFF  01,24B
1CD0:  MOVFF  00,24A
....................   temp *= 65536.0; 
1CD4:  MOVFF  24D,251
1CD8:  MOVFF  24C,250
1CDC:  MOVFF  24B,24F
1CE0:  MOVFF  24A,24E
1CE4:  MOVLB  2
1CE6:  CLRF   x55
1CE8:  CLRF   x54
1CEA:  CLRF   x53
1CEC:  MOVLW  8F
1CEE:  MOVWF  x52
1CF0:  MOVLB  0
1CF2:  RCALL  1B14
1CF4:  MOVFF  03,24D
1CF8:  MOVFF  02,24C
1CFC:  MOVFF  01,24B
1D00:  MOVFF  00,24A
....................   return (ULONG)temp - 1; 
1D04:  MOVFF  24D,251
1D08:  MOVFF  24C,250
1D0C:  MOVFF  24B,24F
1D10:  MOVFF  24A,24E
1D14:  RCALL  1C0A
1D16:  MOVFF  03,251
1D1A:  MOVFF  02,250
1D1E:  MOVFF  01,24F
1D22:  MOVFF  00,24E
1D26:  MOVLW  01
1D28:  MOVLB  2
1D2A:  SUBWF  00,W
1D2C:  MOVWF  00
1D2E:  MOVLW  00
1D30:  SUBWFB 01,W
1D32:  MOVWF  01
1D34:  MOVLW  00
1D36:  SUBWFB 02,W
1D38:  MOVWF  02
1D3A:  MOVLW  00
1D3C:  SUBWFB 03,W
1D3E:  MOVWF  03
1D40:  MOVLB  0
1D42:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
5BE6:  MOVFF  1D4,1D6
....................   buf[1] = value; 
5BEA:  MOVFF  1D5,1D7
....................   send_FPGA_command(2, buf); 
5BEE:  MOVLW  02
5BF0:  MOVLB  2
5BF2:  MOVWF  x3E
5BF4:  MOVLW  01
5BF6:  MOVWF  x40
5BF8:  MOVLW  D6
5BFA:  MOVWF  x3F
5BFC:  MOVLB  0
5BFE:  CALL   187C
5C02:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
62FE:  MOVLB  2
6300:  CLRF   x1A
6302:  CLRF   x19
6304:  MOVFF  20B,218
6308:  MOVFF  20A,217
630C:  MOVFF  21A,247
6310:  MOVFF  219,246
6314:  MOVFF  20B,245
6318:  MOVFF  20A,244
631C:  CLRF   x4B
631E:  CLRF   x4A
6320:  MOVLW  27
6322:  MOVWF  x49
6324:  MOVLW  10
6326:  MOVWF  x48
6328:  MOVLB  0
632A:  CALL   1462
632E:  MOVFF  03,21A
6332:  MOVFF  02,219
6336:  MOVFF  01,218
633A:  MOVFF  00,217
633E:  MOVFF  03,245
6342:  MOVFF  02,244
6346:  MOVFF  01,243
634A:  MOVFF  00,242
634E:  CALL   1C4C
6352:  MOVFF  03,216
6356:  MOVFF  02,215
635A:  MOVFF  01,214
635E:  MOVFF  00,213
....................   buf[0] = 2; 
6362:  MOVLW  02
6364:  MOVLB  2
6366:  MOVWF  x0C
....................   buf[1] = make8(bitf, 0); 
6368:  MOVFF  213,20D
....................   buf[2] = make8(bitf, 1); 
636C:  MOVFF  214,20E
....................   buf[3] = make8(bitf, 2); 
6370:  MOVFF  215,20F
....................   buf[4] = make8(bitf, 3); 
6374:  MOVFF  216,210
....................   send_FPGA_command(5, buf); 
6378:  MOVLW  05
637A:  MOVWF  x3E
637C:  MOVLW  02
637E:  MOVWF  x40
6380:  MOVLW  0C
6382:  MOVWF  x3F
6384:  MOVLB  0
6386:  CALL   187C
638A:  GOTO   683C (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   buf[0] = 0; 
*
18EA:  MOVLB  2
18EC:  CLRF   x32
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
18EE:  MOVLB  0
18F0:  SWAPF  xAD,W
18F2:  MOVWF  00
18F4:  MOVLW  F0
18F6:  ANDWF  00,F
18F8:  MOVF   00,W
18FA:  IORWF  xAC,W
18FC:  MOVLB  2
18FE:  MOVWF  x3A
1900:  MOVLB  0
1902:  SWAPF  xAE,W
1904:  MOVWF  00
1906:  RLCF   00,F
1908:  MOVLW  E0
190A:  ANDWF  00,F
190C:  MOVF   00,W
190E:  MOVLB  2
1910:  IORWF  x3A,F
1912:  MOVLB  0
1914:  SWAPF  xB2,W
1916:  MOVWF  00
1918:  RLCF   00,F
191A:  RLCF   00,F
191C:  MOVLW  C0
191E:  ANDWF  00,F
1920:  MOVF   00,W
1922:  MOVLB  2
1924:  IORWF  x3A,F
1926:  CLRF   00
1928:  MOVLB  0
192A:  BTFSC  xB4.0
192C:  BSF    00.7
192E:  MOVF   00,W
1930:  MOVLB  2
1932:  IORWF  x3A,W
1934:  MOVWF  x33
....................   send_FPGA_command(2, buf); 
1936:  MOVLW  02
1938:  MOVWF  x3E
193A:  MOVWF  x40
193C:  MOVLW  32
193E:  MOVWF  x3F
1940:  MOVLB  0
1942:  RCALL  187C
1944:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   buf[0] = 6; 
1946:  MOVLW  06
1948:  MOVLB  2
194A:  MOVWF  x32
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
194C:  BCF    FD8.0
194E:  MOVLB  0
1950:  RLCF   xB0,W
1952:  IORWF  xAF,W
1954:  MOVLB  2
1956:  MOVWF  x3A
1958:  MOVLB  0
195A:  RLCF   xB1,W
195C:  MOVWF  00
195E:  RLCF   00,F
1960:  MOVLW  FC
1962:  ANDWF  00,F
1964:  MOVF   00,W
1966:  MOVLB  2
1968:  IORWF  x3A,W
196A:  MOVWF  x33
....................   send_FPGA_command(2, buf); 
196C:  MOVLW  02
196E:  MOVWF  x3E
1970:  MOVWF  x40
1972:  MOVLW  32
1974:  MOVWF  x3F
1976:  MOVLB  0
1978:  RCALL  187C
197A:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1D44:  MOVLB  2
1D46:  CLRF   x41
1D48:  CLRF   x40
1D4A:  MOVFF  A9,23F
1D4E:  MOVFF  A8,23E
1D52:  MOVFF  241,247
1D56:  MOVFF  240,246
1D5A:  MOVFF  A9,245
1D5E:  MOVFF  A8,244
1D62:  CLRF   x4B
1D64:  CLRF   x4A
1D66:  MOVLW  27
1D68:  MOVWF  x49
1D6A:  MOVLW  10
1D6C:  MOVWF  x48
1D6E:  MOVLB  0
1D70:  CALL   1462
1D74:  MOVFF  03,241
1D78:  MOVFF  02,240
1D7C:  MOVFF  01,23F
1D80:  MOVFF  00,23E
1D84:  MOVFF  03,245
1D88:  MOVFF  02,244
1D8C:  MOVFF  01,243
1D90:  MOVFF  00,242
1D94:  RCALL  1C4C
1D96:  MOVFF  03,23D
1D9A:  MOVFF  02,23C
1D9E:  MOVFF  01,23B
1DA2:  MOVFF  00,23A
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
1DA6:  MOVLW  02
1DA8:  MOVLB  2
1DAA:  MOVWF  x32
1DAC:  MOVFF  23A,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1DB0:  MOVLW  02
1DB2:  MOVWF  x3E
1DB4:  MOVWF  x40
1DB6:  MOVLW  32
1DB8:  MOVWF  x3F
1DBA:  MOVLB  0
1DBC:  RCALL  187C
1DBE:  MOVLW  0A
1DC0:  MOVLB  2
1DC2:  MOVWF  x3E
1DC4:  MOVLB  0
1DC6:  CALL   0FC2
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
1DCA:  MOVLW  03
1DCC:  MOVLB  2
1DCE:  MOVWF  x32
1DD0:  MOVFF  23B,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1DD4:  MOVLW  02
1DD6:  MOVWF  x3E
1DD8:  MOVWF  x40
1DDA:  MOVLW  32
1DDC:  MOVWF  x3F
1DDE:  MOVLB  0
1DE0:  RCALL  187C
1DE2:  MOVLW  0A
1DE4:  MOVLB  2
1DE6:  MOVWF  x3E
1DE8:  MOVLB  0
1DEA:  CALL   0FC2
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
1DEE:  MOVLW  04
1DF0:  MOVLB  2
1DF2:  MOVWF  x32
1DF4:  MOVFF  23C,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1DF8:  MOVLW  02
1DFA:  MOVWF  x3E
1DFC:  MOVWF  x40
1DFE:  MOVLW  32
1E00:  MOVWF  x3F
1E02:  MOVLB  0
1E04:  RCALL  187C
1E06:  MOVLW  0A
1E08:  MOVLB  2
1E0A:  MOVWF  x3E
1E0C:  MOVLB  0
1E0E:  CALL   0FC2
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1E12:  MOVLW  05
1E14:  MOVLB  2
1E16:  MOVWF  x32
1E18:  MOVFF  23D,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1E1C:  MOVLW  02
1E1E:  MOVWF  x3E
1E20:  MOVWF  x40
1E22:  MOVLW  32
1E24:  MOVWF  x3F
1E26:  MOVLB  0
1E28:  RCALL  187C
1E2A:  MOVLW  0A
1E2C:  MOVLB  2
1E2E:  MOVWF  x3E
1E30:  MOVLB  0
1E32:  CALL   0FC2
1E36:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
33A0:  MOVLB  2
33A2:  MOVFF  22D,03
33A6:  MOVF   x2C,W
33A8:  BTFSC  FD8.2
33AA:  DECF   x2D,F
33AC:  DECF   x2C,F
33AE:  IORWF  03,W
33B0:  BZ    340A
....................     write_eeprom(addr++, *data++); 
33B2:  MOVF   x29,W
33B4:  MOVWF  03
33B6:  MOVF   x28,W
33B8:  INCF   x28,F
33BA:  BTFSC  FD8.2
33BC:  INCF   x29,F
33BE:  MOVWF  x2E
33C0:  MOVFF  03,22F
33C4:  MOVF   x2B,W
33C6:  MOVWF  03
33C8:  MOVF   x2A,W
33CA:  INCF   x2A,F
33CC:  BTFSC  FD8.2
33CE:  INCF   x2B,F
33D0:  MOVWF  FE9
33D2:  MOVFF  03,FEA
33D6:  MOVFF  FEF,230
33DA:  MOVF   FF2,W
33DC:  MOVWF  00
33DE:  BCF    FF2.7
33E0:  MOVFF  22E,FA9
33E4:  MOVFF  230,FA8
33E8:  BCF    FA6.6
33EA:  BCF    FA6.7
33EC:  BSF    FA6.2
33EE:  MOVLB  F
33F0:  MOVLW  55
33F2:  MOVWF  FA7
33F4:  MOVLW  AA
33F6:  MOVWF  FA7
33F8:  BSF    FA6.1
33FA:  BTFSC  FA6.1
33FC:  BRA    33FA
33FE:  BCF    FA6.2
3400:  MOVF   00,W
3402:  IORWF  FF2,F
3404:  MOVLB  0
3406:  BRA    33A0
3408:  MOVLB  2
340A:  MOVLB  0
340C:  GOTO   3434 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
108C:  MOVLB  2
108E:  MOVFF  22D,03
1092:  MOVF   x2C,W
1094:  BTFSC  FD8.2
1096:  DECF   x2D,F
1098:  DECF   x2C,F
109A:  IORWF  03,W
109C:  BZ    10DC
....................     *data++ = read_eeprom(addr++); 
109E:  MOVF   x2B,W
10A0:  MOVWF  03
10A2:  MOVF   x2A,W
10A4:  INCF   x2A,F
10A6:  BTFSC  FD8.2
10A8:  INCF   x2B,F
10AA:  MOVWF  FE9
10AC:  MOVFF  03,FEA
10B0:  MOVF   x29,W
10B2:  MOVWF  03
10B4:  MOVF   x28,W
10B6:  INCF   x28,F
10B8:  BTFSC  FD8.2
10BA:  INCF   x29,F
10BC:  MOVWF  x30
10BE:  MOVFF  03,231
10C2:  MOVFF  FF2,232
10C6:  BCF    FF2.7
10C8:  MOVFF  230,FA9
10CC:  BCF    FA6.6
10CE:  BCF    FA6.7
10D0:  BSF    FA6.0
10D2:  MOVF   FA8,W
10D4:  BTFSC  x32.7
10D6:  BSF    FF2.7
10D8:  MOVWF  FEF
10DA:  BRA    108E
10DC:  MOVLB  0
10DE:  GOTO   1114 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
3410:  MOVLB  1
3412:  MOVF   x06,W
3414:  SUBLW  9F
3416:  BNZ   3436
3418:  MOVF   x07,W
341A:  SUBLW  0B
341C:  BNZ   3436
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
341E:  MOVLB  2
3420:  CLRF   x29
3422:  CLRF   x28
3424:  CLRF   x2B
3426:  MOVLW  A8
3428:  MOVWF  x2A
342A:  CLRF   x2D
342C:  MOVLW  5E
342E:  MOVWF  x2C
3430:  MOVLB  0
3432:  BRA    33A0
3434:  MOVLB  1
....................   allow_write = 0; 
3436:  CLRF   x07
3438:  CLRF   x06
343A:  MOVLB  0
343C:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
10FE:  MOVLB  2
1100:  CLRF   x29
1102:  CLRF   x28
1104:  CLRF   x2B
1106:  MOVLW  A8
1108:  MOVWF  x2A
110A:  CLRF   x2D
110C:  MOVLW  5E
110E:  MOVWF  x2C
1110:  MOVLB  0
1112:  BRA    108C
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
1114:  INCFSZ xAF,W
1116:  BRA    111A
1118:  BRA    111E
111A:  INCFSZ xB0,W
111C:  BRA    112E
....................     memset(&setup, 0, sizeof(setup)); 
111E:  CLRF   FEA
1120:  MOVLW  A8
1122:  MOVWF  FE9
1124:  CLRF   00
1126:  CLRF   02
1128:  MOVLW  5E
112A:  MOVWF  01
112C:  BRA    10E2
112E:  RETURN 0
....................   } 
....................  
.................... //-------------------------------------------------------------- 
.................... //============================================================================= 
.................... // VERSION 3.3 US 30.03.2016 
.................... //============================================================================= 
.................... UINT convert_power(UINT analog) 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
....................     { 
....................   if (analog >= Ptrans[idx].analog && analog < Ptrans[idx+1].analog) 
....................     return Ptrans[idx].Pout; 
....................   } 
....................   return 0; 
....................   } 
....................  
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 
.................... //============================================================================= 
.................... UINT convert_power1(UINT analog)// FFWR POWER 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
*
1380:  MOVLB  2
1382:  CLRF   x2F
1384:  CLRF   x2E
1386:  MOVF   x2F,F
1388:  BNZ   1458
138A:  MOVF   x2E,W
138C:  SUBLW  13
138E:  BNC   1458
....................     { 
....................   if (analog >= Ptrans1[idx].analog1 && analog < Ptrans1[idx+1].analog1) 
1390:  RLCF   x2E,W
1392:  MOVWF  x30
1394:  RLCF   x2F,W
1396:  MOVWF  x31
1398:  RLCF   x30,F
139A:  RLCF   x31,F
139C:  MOVLW  FC
139E:  ANDWF  x30,F
13A0:  MOVFF  231,03
13A4:  MOVF   x30,W
13A6:  MOVFF  FF2,232
13AA:  BCF    FF2.7
13AC:  MOVLB  0
13AE:  RCALL  0BDE
13B0:  TBLRD*+
13B2:  MOVFF  FF5,03
13B6:  MOVLB  2
13B8:  BTFSC  x32.7
13BA:  BSF    FF2.7
13BC:  MOVWF  01
13BE:  MOVF   03,W
13C0:  SUBWF  x2D,W
13C2:  BNC   1450
13C4:  BNZ   13CC
13C6:  MOVF   01,W
13C8:  SUBWF  x2C,W
13CA:  BNC   1450
13CC:  MOVLW  01
13CE:  ADDWF  x2E,W
13D0:  MOVWF  x32
13D2:  MOVLW  00
13D4:  ADDWFC x2F,W
13D6:  MOVWF  x33
13D8:  RLCF   x32,F
13DA:  RLCF   x33,F
13DC:  RLCF   x32,F
13DE:  RLCF   x33,F
13E0:  MOVLW  FC
13E2:  ANDWF  x32,F
13E4:  MOVFF  233,03
13E8:  MOVF   x32,W
13EA:  MOVFF  FF2,234
13EE:  BCF    FF2.7
13F0:  MOVLB  0
13F2:  CALL   0BDE
13F6:  TBLRD*+
13F8:  MOVFF  FF5,03
13FC:  MOVLB  2
13FE:  BTFSC  x34.7
1400:  BSF    FF2.7
1402:  MOVWF  01
1404:  MOVF   x2D,W
1406:  SUBWF  03,W
1408:  BNC   1450
140A:  BNZ   1412
140C:  MOVF   01,W
140E:  SUBWF  x2C,W
1410:  BC    1450
....................     return Ptrans1[idx].Pout1; 
1412:  RLCF   x2E,W
1414:  MOVWF  x30
1416:  RLCF   x2F,W
1418:  MOVWF  x31
141A:  RLCF   x30,F
141C:  RLCF   x31,F
141E:  MOVLW  FC
1420:  ANDWF  x30,F
1422:  MOVLW  02
1424:  ADDWF  x30,W
1426:  MOVWF  01
1428:  MOVLW  00
142A:  ADDWFC x31,W
142C:  MOVWF  03
142E:  MOVF   01,W
1430:  MOVFF  FF2,230
1434:  BCF    FF2.7
1436:  MOVLB  0
1438:  CALL   0BDE
143C:  TBLRD*+
143E:  MOVFF  FF5,03
1442:  MOVLB  2
1444:  BTFSC  x30.7
1446:  BSF    FF2.7
1448:  MOVWF  01
144A:  MOVFF  03,02
144E:  BRA    145E
1450:  INCF   x2E,F
1452:  BTFSC  FD8.2
1454:  INCF   x2F,F
1456:  BRA    1386
....................   } 
....................   return 0; 
1458:  MOVLW  00
145A:  MOVWF  01
145C:  MOVWF  02
145E:  MOVLB  0
1460:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... // this functions sets the POWER_EN discrete high / low 
.................... // depanding on the state of 1 discrete (STANDBY) and 2 variables 
.................... // (setup.cot & setup.pwr). 
.................... // the function also calls 'update_all' when a transition from  
.................... // low to high occurs. 
.................... // the truth table for setting the discrete is: 
....................  
.................... // SB cot pwr Output 
.................... // 0   0   0    H 
.................... // 0   0   1    L 
.................... // 0   1   0    L 
.................... // 0   1   1    H 
.................... // 1   0   0    L 
.................... // 1   0   1    H 
.................... // 1   1   0    H 
.................... // 1   1   1    L 
....................  
.................... // the reduction of this function is:  
.................... // not(sb^cot^pwr) or 
.................... // sb ^ (cot == pwr) (used below) 
.................... //============================================================================= 
.................... void set_power_en()  
*
1EA8:  MOVLB  2
1EAA:  MOVWF  x2E
1EAC:  MOVLB  0
1EAE:  MOVF   xAA,W
1EB0:  SUBWF  xF8,W
1EB2:  BNZ   1EBA
1EB4:  MOVF   xAB,W
1EB6:  SUBWF  xF9,W
1EB8:  BZ    1EBE
1EBA:  MOVLW  00
1EBC:  BRA    1EC0
1EBE:  MOVLW  01
1EC0:  MOVLB  2
1EC2:  XORWF  x2E,W
1EC4:  MOVWF  x2C
1EC6:  CLRF   x2D
.................... { 
....................     static UINT last_val = 0; // saving the last state of the discrete 
....................     UINT dval = input(STANDBY) ^ (setup.cot == setup.pwr); 
....................  
....................     // set the discrete 
....................     if(dval)  
1EC8:  MOVF   x2C,W
1ECA:  IORWF  x2D,W
1ECC:  BZ    1ED2
....................     { 
....................         output_high(POWER_EN); 
1ECE:  BSF    F8C.6
....................     } 
1ED0:  BRA    1EEE
....................     else 
....................     { 
....................  //       output_low(POWER_EN);       //yehuda shut down the fpga 
....................         if(setup.cot == 1)  
1ED2:  MOVLB  0
1ED4:  DECFSZ xF8,W
1ED6:  BRA    1EEC
1ED8:  MOVF   xF9,F
1EDA:  BNZ   1EEC
....................         { 
....................             // this was a special case in before the refactoring 
....................             // it is not known why the call is only when cot == 1 
....................             set_AD5314(DAC_POS_VOLT, 0);     
1EDC:  MOVLW  02
1EDE:  MOVLB  2
1EE0:  MOVWF  x2E
1EE2:  CLRF   x30
1EE4:  CLRF   x2F
1EE6:  MOVLB  0
1EE8:  CALL   1130
1EEC:  MOVLB  2
....................         } 
....................     } 
....................  
....................     // call update all on low to high transition 
....................     if(last_val == 0 && dval == 1)  
1EEE:  MOVLB  1
1EF0:  MOVF   xA5,F
1EF2:  BNZ   1F1C
1EF4:  MOVF   xA6,F
1EF6:  BNZ   1F1C
1EF8:  MOVLB  2
1EFA:  DECFSZ x2C,W
1EFC:  BRA    1F00
1EFE:  BRA    1F04
1F00:  MOVLB  1
1F02:  BRA    1F1C
1F04:  MOVF   x2D,F
1F06:  BTFSC  FD8.2
1F08:  BRA    1F0E
1F0A:  MOVLB  1
1F0C:  BRA    1F1C
....................     { 
....................         delay_ms(50); 
1F0E:  MOVLW  32
1F10:  MOVWF  x3E
1F12:  MOVLB  0
1F14:  CALL   0FC2
....................         update_all();    ////tamir 3/7/18  
1F18:  RCALL  1E38
1F1A:  MOVLB  1
....................     } 
....................     last_val = dval; 
1F1C:  MOVFF  22D,1A6
1F20:  MOVFF  22C,1A5
....................     gl_current_power_en_value = dval; 
1F24:  MOVFF  22D,111
1F28:  MOVFF  22C,110
1F2C:  MOVLB  0
1F2E:  GOTO   2100 (RETURN)
.................... } 
....................  
.................... //============================================================================= 
.................... // this function returns the requested power level (SV / VL) based on  
.................... // 3 parameters, rc, rp and the discrete HILOW 
.................... // in high power mode (rc=1), if the discrete & rp are equal the function should 
.................... // return SV (power_level) if not, it should return VL (low_power_level). 
.................... // in low power mode (rc=0), if the discrete & rp are equal the function should 
.................... // return VL (low_power_level) if not, it should return SV (power_level). 
.................... //============================================================================= 
.................... UINT get_requested_power_level() { 
....................     UINT levels[2]; 
....................     int l; 
....................     levels[0] = power_level; 
1F32:  MOVFF  1A,22D
1F36:  MOVFF  19,22C
....................     levels[1] = low_power_level; 
1F3A:  MOVFF  18,22F
1F3E:  MOVFF  17,22E
....................  
....................     l = (setup.rc & 0x1) ^ (input(HILO) == setup.rp); 
1F42:  MOVF   xFA,W
1F44:  ANDLW  01
1F46:  MOVLB  2
1F48:  MOVWF  x31
1F4A:  CLRF   x32
1F4C:  MOVLW  00
1F4E:  BTFSC  F83.2
1F50:  MOVLW  01
1F52:  MOVLB  0
1F54:  SUBWF  xFC,W
1F56:  BNZ   1F5C
1F58:  MOVF   xFD,F
1F5A:  BZ    1F60
1F5C:  MOVLW  00
1F5E:  BRA    1F62
1F60:  MOVLW  01
1F62:  MOVLB  2
1F64:  XORWF  x31,W
1F66:  MOVWF  x30
....................      
....................     gl_current_power_level = levels[l]; 
1F68:  BCF    FD8.0
1F6A:  RLCF   x30,W
1F6C:  CLRF   03
1F6E:  ADDLW  2C
1F70:  MOVWF  FE9
1F72:  MOVLW  02
1F74:  ADDWFC 03,W
1F76:  MOVWF  FEA
1F78:  MOVFF  FEC,10F
1F7C:  MOVF   FED,F
1F7E:  MOVFF  FEF,10E
....................     return levels[l]; 
1F82:  BCF    FD8.0
1F84:  RLCF   x30,W
1F86:  CLRF   03
1F88:  ADDLW  2C
1F8A:  MOVWF  FE9
1F8C:  MOVLW  02
1F8E:  ADDWFC 03,W
1F90:  MOVWF  FEA
1F92:  MOVFF  FEF,01
1F96:  INCF   FE9,F
1F98:  MOVF   FEF,W
1F9A:  DECF   FE9,F
1F9C:  MOVWF  02
1F9E:  MOVLB  0
1FA0:  GOTO   2102 (RETURN)
.................... } 
....................  
.................... //============================================================================= 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
1FA4:  INCFSZ 21,W
1FA6:  BRA    1FAE
1FA8:  INCFSZ 22,W
1FAA:  BRA    1FAE
1FAC:  BRA    2006
....................     { 
....................     if (TMR_100MS_POWER) 
1FAE:  BTFSS  28.3
1FB0:  BRA    2004
....................       { 
....................       TMR_100MS_POWER = 0; 
1FB2:  BCF    28.3
....................       set_AD5314(DAC_POS_VOLT, manual_pos); 
1FB4:  MOVLW  02
1FB6:  MOVLB  2
1FB8:  MOVWF  x2E
1FBA:  MOVFF  22,230
1FBE:  MOVFF  21,22F
1FC2:  MOVLB  0
1FC4:  CALL   1130
....................       set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
1FC8:  MOVLW  14
1FCA:  MOVWF  01
1FCC:  MOVF   FC2,W
1FCE:  ANDLW  83
1FD0:  IORWF  01,W
1FD2:  MOVWF  FC2
....................       delay_us(20); 
1FD4:  MOVLW  1A
1FD6:  MOVWF  00
1FD8:  DECFSZ 00,F
1FDA:  BRA    1FD8
1FDC:  NOP   
....................       power = read_adc(); 
1FDE:  BSF    FC2.1
1FE0:  BTFSC  FC2.1
1FE2:  BRA    1FE0
1FE4:  MOVFF  FC4,229
1FE8:  MOVLB  2
1FEA:  MOVFF  FC3,228
....................       current_power = convert_power1(power); 
1FEE:  MOVFF  229,22D
1FF2:  MOVFF  228,22C
1FF6:  MOVLB  0
1FF8:  CALL   1380
1FFC:  MOVFF  02,10D
2000:  MOVFF  01,10C
....................       } 
....................  
....................  
....................     return; 
2004:  BRA    218E
....................     } 
....................      
....................   if (setup.frequency < FREQ_LOW_THRESH){ 
2006:  MOVF   xB7,W
2008:  SUBLW  58
200A:  BNC   204A
200C:  BNZ   2014
200E:  MOVF   xB6,W
2010:  SUBLW  29
2012:  BNC   204A
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[0]); 
2014:  MOVLW  06
2016:  MOVLB  2
2018:  MOVWF  x2E
201A:  MOVFF  BC,230
201E:  MOVFF  BB,22F
2022:  MOVLB  0
2024:  CALL   1130
.................... 	delay_ms(1); 
2028:  MOVLW  01
202A:  MOVLB  2
202C:  MOVWF  x3E
202E:  MOVLB  0
2030:  CALL   0FC2
.................... 	set_AD5314(DAC_CONT_VOLT, setup.cont_voltage[0]); 
2034:  MOVLW  0A
2036:  MOVLB  2
2038:  MOVWF  x2E
203A:  MOVFF  C2,230
203E:  MOVFF  C1,22F
2042:  MOVLB  0
2044:  CALL   1130
.................... 	} 
2048:  BRA    20C2
....................   else if (setup.frequency < FREQ_HIGH_THRESH){ 
204A:  MOVF   xB7,W
204C:  SUBLW  5A
204E:  BNC   208E
2050:  BNZ   2058
2052:  MOVF   xB6,W
2054:  SUBLW  F9
2056:  BNC   208E
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[1]); 
2058:  MOVLW  06
205A:  MOVLB  2
205C:  MOVWF  x2E
205E:  MOVFF  BE,230
2062:  MOVFF  BD,22F
2066:  MOVLB  0
2068:  CALL   1130
.................... 	delay_ms(1); 
206C:  MOVLW  01
206E:  MOVLB  2
2070:  MOVWF  x3E
2072:  MOVLB  0
2074:  CALL   0FC2
.................... 	set_AD5314(DAC_CONT_VOLT, setup.cont_voltage[1]); 
2078:  MOVLW  0A
207A:  MOVLB  2
207C:  MOVWF  x2E
207E:  MOVFF  C4,230
2082:  MOVFF  C3,22F
2086:  MOVLB  0
2088:  CALL   1130
.................... 	} 
208C:  BRA    20C2
....................   else{ 
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[2]); 
208E:  MOVLW  06
2090:  MOVLB  2
2092:  MOVWF  x2E
2094:  MOVFF  C0,230
2098:  MOVFF  BF,22F
209C:  MOVLB  0
209E:  CALL   1130
.................... 	delay_ms(1); 
20A2:  MOVLW  01
20A4:  MOVLB  2
20A6:  MOVWF  x3E
20A8:  MOVLB  0
20AA:  CALL   0FC2
.................... 	set_AD5314(DAC_CONT_VOLT, setup.cont_voltage[2]); 
20AE:  MOVLW  0A
20B0:  MOVLB  2
20B2:  MOVWF  x2E
20B4:  MOVFF  C6,230
20B8:  MOVFF  C5,22F
20BC:  MOVLB  0
20BE:  CALL   1130
.................... 	} 
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
20C2:  MOVLW  14
20C4:  MOVWF  01
20C6:  MOVF   FC2,W
20C8:  ANDLW  83
20CA:  IORWF  01,W
20CC:  MOVWF  FC2
....................   delay_us(20); 
20CE:  MOVLW  1A
20D0:  MOVWF  00
20D2:  DECFSZ 00,F
20D4:  BRA    20D2
20D6:  NOP   
....................   power = read_adc(); 
20D8:  BSF    FC2.1
20DA:  BTFSC  FC2.1
20DC:  BRA    20DA
20DE:  MOVFF  FC4,229
20E2:  MOVLB  2
20E4:  MOVFF  FC3,228
....................   
....................  
....................   current_power = convert_power1(power); 
20E8:  MOVFF  229,22D
20EC:  MOVFF  228,22C
20F0:  MOVLB  0
20F2:  CALL   1380
20F6:  MOVFF  02,10D
20FA:  MOVFF  01,10C
....................   set_power_en();      
20FE:  BRA    1EA2
....................    
....................   level = get_requested_power_level(); 
2100:  BRA    1F32
2102:  MOVFF  02,22B
2106:  MOVFF  01,22A
....................  
....................  
....................   if (power > level + DEADBAND || power < level - DEADBAND) 
210A:  MOVLW  06
210C:  MOVLB  2
210E:  ADDWF  x2A,W
2110:  MOVWF  01
2112:  MOVLW  00
2114:  ADDWFC x2B,W
2116:  MOVWF  03
2118:  MOVF   03,W
211A:  SUBWF  x29,W
211C:  BNC   2126
211E:  BNZ   2144
2120:  MOVF   x28,W
2122:  SUBWF  01,W
2124:  BNC   2144
2126:  MOVLW  06
2128:  SUBWF  x2A,W
212A:  MOVWF  00
212C:  MOVLW  00
212E:  SUBWFB x2B,W
2130:  MOVWF  03
2132:  MOVFF  00,01
2136:  MOVF   x29,W
2138:  SUBWF  03,W
213A:  BNC   2190
213C:  BNZ   2144
213E:  MOVF   01,W
2140:  SUBWF  x28,W
2142:  BC    2190
....................     { 
....................     if (power < level) 
2144:  MOVF   x29,W
2146:  SUBWF  x2B,W
2148:  BNC   2166
214A:  BNZ   2152
214C:  MOVF   x2A,W
214E:  SUBWF  x28,W
2150:  BC    2166
....................       { 
....................       if (power_control >= 150) 
2152:  MOVF   1C,F
2154:  BNZ   215C
2156:  MOVF   1B,W
2158:  SUBLW  95
215A:  BC    2164
....................         power_control -= DEADBAND / 2;		 
215C:  MOVLW  03
215E:  SUBWF  1B,F
2160:  MOVLW  00
2162:  SUBWFB 1C,F
....................       } 
2164:  BRA    217C
....................     else if (power_control <= 1010)			 
2166:  MOVF   1C,W
2168:  SUBLW  03
216A:  BNC   217C
216C:  BNZ   2174
216E:  MOVF   1B,W
2170:  SUBLW  F2
2172:  BNC   217C
....................       { 
....................       power_control += DEADBAND / 2; 
2174:  MOVLW  03
2176:  ADDWF  1B,F
2178:  MOVLW  00
217A:  ADDWFC 1C,F
....................       } 
....................     set_AD5314(DAC_POS_VOLT, power_control); 
217C:  MOVLW  02
217E:  MOVWF  x2E
2180:  MOVFF  1C,230
2184:  MOVFF  1B,22F
2188:  MOVLB  0
218A:  CALL   1130
218E:  MOVLB  2
....................     }	 
2190:  MOVLB  0
2192:  RETURN 0
.................... } 
....................  
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0FEC:  CLRF   F89
....................   output_b(0); 
0FEE:  CLRF   F8A
....................   output_c(0); 
0FF0:  CLRF   F8B
....................   output_d(0); 
0FF2:  CLRF   F8C
....................   output_e(0); 
0FF4:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0FF6:  MOVLW  E1
0FF8:  MOVWF  F92
....................   set_tris_b(0b11010001);     
0FFA:  MOVLW  D1
0FFC:  MOVWF  F93
....................   set_tris_c(0b11010001); 
0FFE:  MOVWF  F94
....................   set_tris_d(0b10001110); 
1000:  MOVLW  8E
1002:  MOVWF  F95
....................   set_tris_e(0b11111011); 
1004:  BSF    F96.0
1006:  BSF    F96.1
1008:  BCF    F96.2
100A:  BSF    F96.3
100C:  GOTO   1050 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
1026:  MOVLW  48
1028:  IORLW  05
102A:  MOVWF  FBA
102C:  MOVLW  63
102E:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
1030:  CLRF   FB4
1032:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
1034:  MOVLW  00
1036:  IORLW  05
1038:  MOVLB  F
103A:  MOVWF  x51
103C:  MOVLW  63
103E:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
1040:  CLRF   x4D
1042:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
1044:  MOVLW  00
1046:  MOVWF  x4A
1048:  MOVLW  00
104A:  MOVWF  x4B
....................  
....................   init_io_ports(); 
104C:  MOVLB  0
104E:  BRA    0FEC
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6|sAN11); 
1050:  MOVF   FC1,W
1052:  ANDLW  F0
1054:  MOVWF  FC1
1056:  MOVLW  21
1058:  MOVLB  F
105A:  MOVWF  x38
105C:  MOVLW  03
105E:  MOVWF  x3C
1060:  MOVLW  10
1062:  MOVWF  x39
1064:  MOVLW  00
1066:  MOVWF  x3A
1068:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
106A:  MOVF   FC0,W
106C:  ANDLW  C0
106E:  IORLW  25
1070:  MOVWF  FC0
1072:  BSF    FC0.7
1074:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
1076:  CLRF   F77
1078:  MOVLW  04
107A:  MOVWF  F78
107C:  MOVWF  F79
....................  
....................   COM1_init(); 
107E:  MOVLB  0
1080:  RCALL  1010
....................   enable_interrupts(INT_TIMER2); 
1082:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
1084:  MOVLW  C0
1086:  IORWF  FF2,F
1088:  GOTO   6E46 (RETURN)
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1E38:  MOVFF  B7,22F
1E3C:  MOVFF  B6,22E
....................   delay_ms(5); 
1E40:  MOVLW  05
1E42:  MOVLB  2
1E44:  MOVWF  x3E
1E46:  MOVLB  0
1E48:  CALL   0FC2
....................   PLL_compute_freq_parameters(freq); 
1E4C:  MOVFF  22F,233
1E50:  MOVFF  22E,232
1E54:  CALL   1552
....................   delay_ms(5); 
1E58:  MOVLW  05
1E5A:  MOVLB  2
1E5C:  MOVWF  x3E
1E5E:  MOVLB  0
1E60:  CALL   0FC2
....................   PLL_update(); 
1E64:  RCALL  182A
....................   delay_ms(5); 
1E66:  MOVLW  05
1E68:  MOVLB  2
1E6A:  MOVWF  x3E
1E6C:  MOVLB  0
1E6E:  CALL   0FC2
....................   FPGA_set_reg0(); 
1E72:  RCALL  18EA
....................   delay_ms(5); 
1E74:  MOVLW  05
1E76:  MOVLB  2
1E78:  MOVWF  x3E
1E7A:  MOVLB  0
1E7C:  CALL   0FC2
....................   FPGA_set_reg6(); 
1E80:  RCALL  1946
....................   delay_ms(5); 
1E82:  MOVLW  05
1E84:  MOVLB  2
1E86:  MOVWF  x3E
1E88:  MOVLB  0
1E8A:  CALL   0FC2
....................   FPGA_set_bitrate(); 
1E8E:  RCALL  1D44
....................   bitr = setup.bitrate; 
1E90:  MOVFF  A9,231
1E94:  MOVFF  A8,230
....................   power_control = 1000; 
1E98:  MOVLW  03
1E9A:  MOVWF  1C
1E9C:  MOVLW  E8
1E9E:  MOVWF  1B
1EA0:  RETURN 0
....................   } 
....................  
.................... void timer_tick()  
.................... { 
....................     if(timerTick_1ms == 1) { 
*
2320:  DECFSZ 30,W
2322:  BRA    23C4
....................         timerTick_1ms = 0; 
2324:  CLRF   30
....................         if (++TMR_SendStatus >= (setup.Block_per_second / 2) && StartStatusFlag == 1 && setup.UART_Status == 1&& (stay_on == 1 || stay_on == 0)) // VERSION 3.3 17.1.2016 
2326:  INCF   2B,F
2328:  BTFSC  FD8.2
232A:  INCF   2C,F
232C:  BCF    FD8.0
232E:  MOVLB  1
2330:  RRCF   x03,W
2332:  MOVWF  03
2334:  RRCF   x02,W
2336:  MOVWF  02
2338:  MOVWF  01
233A:  MOVF   03,W
233C:  SUBWF  2C,W
233E:  BNC   2388
2340:  BNZ   2348
2342:  MOVF   01,W
2344:  SUBWF  2B,W
2346:  BNC   2388
2348:  DECFSZ 2F,W
234A:  BRA    2388
234C:  MOVLB  0
234E:  DECFSZ xFF,W
2350:  BRA    2354
2352:  BRA    2358
2354:  MOVLB  1
2356:  BRA    2388
2358:  MOVLB  1
235A:  DECFSZ x12,W
235C:  BRA    2362
235E:  MOVF   x13,F
2360:  BZ    236A
2362:  MOVF   x12,F
2364:  BNZ   2388
2366:  MOVF   x13,F
2368:  BNZ   2388
....................         { 
....................             TMR_SendStatus = 0; 
236A:  CLRF   2C
236C:  CLRF   2B
....................             SendStatusFlag = 1; 
236E:  MOVLW  01
2370:  MOVWF  2D
....................             TX_Counter++; //VERSION 3.3 21.3.2016 count the number of times the status block is sent 
2372:  INCF   x16,F
2374:  BTFSC  FD8.2
2376:  INCF   x17,F
....................             if (!ttccp_login) 
2378:  MOVF   x34,F
237A:  BNZ   2388
....................             { 
....................               	COM1_send_block(BINARY_STATUS_LENTGH); 
237C:  CLRF   xB9
237E:  MOVLW  1A
2380:  MOVWF  xB8
2382:  MOVLB  0
2384:  BRA    230A
2386:  MOVLB  1
....................             } 
....................         } 
....................         if (++TMR_1mS_Cnt >= 10) 
2388:  INCF   24,F
238A:  MOVF   24,W
238C:  SUBLW  09
238E:  BC    23C6
....................         { 
....................             TMR_1mS_Cnt = 0; 
2390:  CLRF   24
....................             ++TMR_SendStatus; //1mSec count for rhe status VERSION 3.3 20.2.2016 
2392:  INCF   2B,F
2394:  BTFSC  FD8.2
2396:  INCF   2C,F
....................             TMR_10mS_Count++; 
2398:  INCF   25,F
....................             TMR_10mS_Flags = 0xFF; 
239A:  SETF   26
....................             if (++TMR_10mS_Cnt >= 10) 
239C:  INCF   27,F
239E:  MOVF   27,W
23A0:  SUBLW  09
23A2:  BC    23C6
....................             { 
....................                 TMR_10mS_Cnt = 0; 
23A4:  CLRF   27
....................                 TMR_100mS_Flags = 0xFF; 
23A6:  SETF   28
....................                 if (++TMR_100mS_Cnt >= 10) 
23A8:  INCF   29,F
23AA:  MOVF   29,W
23AC:  SUBLW  09
23AE:  BC    23C6
....................                 { 
....................                     TMR_100mS_Cnt = 0; 
23B0:  CLRF   29
....................                     TMR_1sec_Flags = 0xFF; 
23B2:  SETF   2A
....................                     if (++TMR_StartStatus >= setup.UART_Time) // VERSION 3.3 17.1.2016 
23B4:  INCF   2E,F
23B6:  MOVLB  0
23B8:  MOVF   xFE,W
23BA:  SUBWF  2E,W
23BC:  BNC   23C4
....................            			{ 
....................            			    TMR_StartStatus = 0; 
23BE:  CLRF   2E
....................             			StartStatusFlag = 1; 
23C0:  MOVLW  01
23C2:  MOVWF  2F
23C4:  MOVLB  1
....................             		} 
....................                 } 
....................             } 
....................         } 
....................     } 
23C6:  MOVLB  0
23C8:  GOTO   6F92 (RETURN)
.................... } 
....................  
....................  
.................... //============================================================================= 
.................... void main(void) 
*
6DA4:  CLRF   FF8
6DA6:  BCF    FD0.7
6DA8:  BSF    07.7
6DAA:  MOVLW  70
6DAC:  MOVWF  FD3
6DAE:  BCF    F9B.6
6DB0:  BCF    F9B.7
6DB2:  BCF    FB8.3
6DB4:  MOVLW  19
6DB6:  MOVWF  FAF
6DB8:  MOVLW  A6
6DBA:  MOVWF  FAC
6DBC:  MOVLW  90
6DBE:  MOVWF  FAB
6DC0:  SETF   20
6DC2:  SETF   1F
6DC4:  SETF   22
6DC6:  SETF   21
6DC8:  CLRF   2C
6DCA:  CLRF   2B
6DCC:  CLRF   2D
6DCE:  CLRF   2E
6DD0:  CLRF   2F
6DD2:  CLRF   30
6DD4:  MOVLB  1
6DD6:  CLRF   x07
6DD8:  CLRF   x06
6DDA:  CLRF   x0F
6DDC:  CLRF   x0E
6DDE:  CLRF   x11
6DE0:  CLRF   x10
6DE2:  CLRF   x13
6DE4:  CLRF   x12
6DE6:  CLRF   x17
6DE8:  CLRF   x16
6DEA:  CLRF   x34
6DEC:  MOVLW  01
6DEE:  MOVWF  x42
6DF0:  CLRF   x43
6DF2:  MOVFF  FC,1A0
6DF6:  MOVFF  AA,1A1
6DFA:  CLRF   xA4
6DFC:  CLRF   xA3
6DFE:  CLRF   xA6
6E00:  CLRF   xA5
6E02:  MOVF   FC1,W
6E04:  ANDLW  F0
6E06:  MOVWF  FC1
6E08:  MOVLW  00
6E0A:  MOVLB  F
6E0C:  MOVWF  x38
6E0E:  MOVWF  x3C
6E10:  MOVWF  x39
6E12:  MOVWF  x3A
6E14:  MOVWF  x3B
6E16:  MOVLB  1
6E18:  CLRF   x88
6E1A:  CLRF   F77
6E1C:  CLRF   F78
6E1E:  CLRF   F79
6E20:  MOVLW  03
6E22:  MOVWF  xA8
6E24:  MOVLW  E8
6E26:  MOVWF  xA7
....................   { 
....................   int16 vouta = 1000; 
.................... output_high(POWER_EN); 
6E28:  BSF    F8C.6
.................... delay_ms(1000); 
6E2A:  MOVLW  04
6E2C:  MOVWF  xB8
6E2E:  MOVLW  FA
6E30:  MOVLB  2
6E32:  MOVWF  x3E
6E34:  MOVLB  0
6E36:  CALL   0FC2
6E3A:  MOVLB  1
6E3C:  DECFSZ xB8,F
6E3E:  BRA    6E2E
....................   init_system();  
6E40:  MOVLB  0
6E42:  GOTO   1026
....................   output_high(D2A_CSB); 
6E46:  BSF    F8A.1
....................   delay_ms(100); 
6E48:  MOVLW  64
6E4A:  MOVLB  2
6E4C:  MOVWF  x3E
6E4E:  MOVLB  0
6E50:  CALL   0FC2
....................   read_setup(); 
6E54:  CALL   10FE
....................    
....................   if (!setup.UART_Time)// VERSION 3.3: 10.2.2016  
6E58:  MOVF   xFE,F
6E5A:  BNZ   6E60
.................... 		setup.UART_Time = 10; 
6E5C:  MOVLW  0A
6E5E:  MOVWF  xFE
.................... 	if (setup.Block_per_second == 0) 
6E60:  MOVLB  1
6E62:  MOVF   x02,F
6E64:  BNZ   6E70
6E66:  MOVF   x03,F
6E68:  BNZ   6E70
....................     setup.Block_per_second = 100; 
6E6A:  CLRF   x03
6E6C:  MOVLW  64
6E6E:  MOVWF  x02
.................... 	//setup.UART_Status = 1;// VERSION 3.3: 10.2.2016  
....................   power_level = setup.power_in[setup.power_level]; 
6E70:  BCF    FD8.0
6E72:  MOVLB  0
6E74:  RLCF   xB8,W
6E76:  MOVWF  02
6E78:  RLCF   xB9,W
6E7A:  MOVWF  03
6E7C:  MOVF   02,W
6E7E:  ADDLW  C7
6E80:  MOVWF  FE9
6E82:  MOVLW  00
6E84:  ADDWFC 03,W
6E86:  MOVWF  FEA
6E88:  MOVFF  FEC,1A
6E8C:  MOVF   FED,F
6E8E:  MOVFF  FEF,19
....................   low_power_level = setup.power_in[setup.power_low_level]; 
6E92:  BCF    FD8.0
6E94:  RLCF   xF6,W
6E96:  MOVWF  02
6E98:  RLCF   xF7,W
6E9A:  MOVWF  03
6E9C:  MOVF   02,W
6E9E:  ADDLW  C7
6EA0:  MOVWF  FE9
6EA2:  MOVLW  00
6EA4:  ADDWFC 03,W
6EA6:  MOVWF  FEA
6EA8:  MOVFF  FEC,18
6EAC:  MOVF   FED,F
6EAE:  MOVFF  FEF,17
....................   power_control = 1000; 
6EB2:  MOVLW  03
6EB4:  MOVWF  1C
6EB6:  MOVLW  E8
6EB8:  MOVWF  1B
....................   power_output(); 
6EBA:  CALL   1FA4
....................    
....................  
....................   PLL_initialize(); 
6EBE:  GOTO   2194
....................   delay_ms(50); 
6EC2:  MOVLW  32
6EC4:  MOVLB  2
6EC6:  MOVWF  x3E
6EC8:  MOVLB  0
6ECA:  CALL   0FC2
....................   update_all(); 
6ECE:  CALL   1E38
....................  
....................   output_high(D2A_RESET); 
6ED2:  BSF    F8A.3
....................   delay_ms(50); 
6ED4:  MOVLW  32
6ED6:  MOVLB  2
6ED8:  MOVWF  x3E
6EDA:  MOVLB  0
6EDC:  CALL   0FC2
....................   output_low(D2A_RESET); 
6EE0:  BCF    F8A.3
....................    
....................  
....................   COM1_send_str("\r\n"); 
6EE2:  MOVLW  0D
6EE4:  MOVLB  1
6EE6:  MOVWF  xA9
6EE8:  MOVLW  0A
6EEA:  MOVWF  xAA
6EEC:  CLRF   xAB
6EEE:  MOVLW  01
6EF0:  MOVLB  2
6EF2:  MOVWF  x6A
6EF4:  MOVLW  A9
6EF6:  MOVWF  x69
6EF8:  MOVLB  0
6EFA:  CALL   2242
....................   COM1_send_str(VERSION); 
6EFE:  MOVLW  01
6F00:  MOVWF  FEA
6F02:  MOVLW  A9
6F04:  MOVWF  FE9
6F06:  MOVFF  FF2,1B8
6F0A:  BCF    FF2.7
6F0C:  MOVLW  0F
6F0E:  MOVWF  01
6F10:  CLRF   FF7
6F12:  MOVLW  00
6F14:  CALL   0AFA
6F18:  TBLRD*-
6F1A:  TBLRD*+
6F1C:  MOVFF  FF5,FEE
6F20:  DECFSZ 01,F
6F22:  BRA    6F1A
6F24:  MOVLB  1
6F26:  BTFSC  xB8.7
6F28:  BSF    FF2.7
6F2A:  MOVLW  01
6F2C:  MOVLB  2
6F2E:  MOVWF  x6A
6F30:  MOVLW  A9
6F32:  MOVWF  x69
6F34:  MOVLB  0
6F36:  CALL   2242
....................   COM1_send_str("\r\n"); 
6F3A:  MOVLW  0D
6F3C:  MOVLB  1
6F3E:  MOVWF  xA9
6F40:  MOVLW  0A
6F42:  MOVWF  xAA
6F44:  CLRF   xAB
6F46:  MOVLW  01
6F48:  MOVLB  2
6F4A:  MOVWF  x6A
6F4C:  MOVLW  A9
6F4E:  MOVWF  x69
6F50:  MOVLB  0
6F52:  CALL   2242
....................  
....................   set_AD5314(DAC_POS_VOLT, vouta); 
6F56:  MOVLW  02
6F58:  MOVLB  2
6F5A:  MOVWF  x2E
6F5C:  MOVFF  1A8,230
6F60:  MOVFF  1A7,22F
6F64:  MOVLB  0
6F66:  CALL   1130
....................  
....................  
....................   delay_ms(500); 
6F6A:  MOVLW  02
6F6C:  MOVLB  1
6F6E:  MOVWF  xB8
6F70:  MOVLW  FA
6F72:  MOVLB  2
6F74:  MOVWF  x3E
6F76:  MOVLB  0
6F78:  CALL   0FC2
6F7C:  MOVLB  1
6F7E:  DECFSZ xB8,F
6F80:  BRA    6F70
....................   output_high(POWER_EN); 
6F82:  BSF    F8C.6
....................  
.................... update_all(); 
6F84:  MOVLB  0
6F86:  CALL   1E38
.................... output_high(FPGA_RSTN); 
6F8A:  BSF    F8B.5
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
6F8C:  CLRWDT
....................     timer_tick(); 
6F8E:  GOTO   2320
....................     if (TMR_100mS_BLINK) 
6F92:  BTFSS  28.0
6F94:  BRA    6F9E
....................       { 
....................       TMR_100mS_BLINK = 0; 
6F96:  BCF    28.0
....................       output_toggle(LED1); 
6F98:  BTG    F8A.5
....................       delay_us(1); 
6F9A:  BRA    6F9C
6F9C:  BRA    6F9E
....................       } 
....................      
....................     if (StartStatusFlag == 1 && (COM1_rxo == 0) && (stay_on == 1 || stay_on == 0)) 
6F9E:  DECFSZ 2F,W
6FA0:  BRA    6FD8
6FA2:  MOVF   33,F
6FA4:  BNZ   6FD8
6FA6:  MOVLB  1
6FA8:  DECFSZ x12,W
6FAA:  BRA    6FB0
6FAC:  MOVF   x13,F
6FAE:  BZ    6FC4
6FB0:  MOVF   x12,F
6FB2:  BTFSC  FD8.2
6FB4:  BRA    6FBA
6FB6:  MOVLB  0
6FB8:  BRA    6FD8
6FBA:  MOVF   x13,F
6FBC:  BTFSC  FD8.2
6FBE:  BRA    6FC4
6FC0:  MOVLB  0
6FC2:  BRA    6FD8
....................     	{         
.................... 				if (setup.UART_Status == 1) 
6FC4:  MOVLB  0
6FC6:  DECFSZ xFF,W
6FC8:  BRA    6FD8
.................... 		      { 
.................... 			      stay_on = 1; 
6FCA:  MOVLB  1
6FCC:  CLRF   x13
6FCE:  MOVLW  01
6FD0:  MOVWF  x12
.................... 		      //StartStatusFlag = 0; 
.................... 		      //if (!ttccp_login) 
.................... 		        prepare_binary_status();		        
6FD2:  MOVLB  0
6FD4:  GOTO   2994
.................... 		      }  
.................... 		      
....................        } 
....................  		if (stay_on == 2 || stay_on == 0) //US1 or US0 StartStatusFlag == 0  (StartStatusFlag == 1 && setup.UART_Status == 0)&&  
6FD8:  MOVLB  1
6FDA:  MOVF   x12,W
6FDC:  SUBLW  02
6FDE:  BNZ   6FE4
6FE0:  MOVF   x13,F
6FE2:  BZ    6FEC
6FE4:  MOVF   x12,F
6FE6:  BNZ   6FFC
6FE8:  MOVF   x13,F
6FEA:  BNZ   6FFC
....................  			{   
.................... 		    
.................... 		   			comm_handler(); 
6FEC:  MOVLB  0
6FEE:  BRA    6D66
.................... 		   			if (COM1_rxo != 0 ) 
6FF0:  MOVF   33,F
6FF2:  BZ    6FFE
.................... 		   				stay_on = 2; 
6FF4:  MOVLB  1
6FF6:  CLRF   x13
6FF8:  MOVLW  02
6FFA:  MOVWF  x12
6FFC:  MOVLB  0
.................... 		  }     
.................... 		power_output(); 
6FFE:  CALL   1FA4
.................... 		delay_ms(1);		//yehuda 
7002:  MOVLW  01
7004:  MOVLB  2
7006:  MOVWF  x3E
7008:  MOVLB  0
700A:  CALL   0FC2
700E:  BRA    6F8C
....................  
....................  
....................  
....................    } 
....................   } 
....................  
7010:  BRA    7010

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
