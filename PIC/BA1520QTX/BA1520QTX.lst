CCS PCH C Compiler, Version 5.008, 5967               06-Aug-18 16:18

               Filename:   C:\BA\Software_projects\PIC\1520Q\BA1520QTX\BA1520QTX.lst

               ROM used:   25922 bytes (79%)
                           Largest free fragment is 6842
               RAM used:   416 (27%) at main() level
                           609 (40%) worst case
               Stack used: 11 locations (9 in main + 2 for interrupts)
               Stack size: 30

*
0000:  GOTO   635C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.1
004A:  GOTO   0054
004E:  BTFSC  F9E.1
0050:  GOTO   0AEA
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   0AF4
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   0AFA
006C:  BTFSS  F9D.5
006E:  GOTO   0078
0072:  BTFSC  F9E.5
0074:  GOTO   0B00
0078:  BTFSS  F9D.4
007A:  GOTO   0084
007E:  BTFSC  F9E.4
0080:  GOTO   0B4E
0084:  BTFSS  F7D.0
0086:  GOTO   0090
008A:  BTFSC  F7E.0
008C:  GOTO   0AE4
0090:  MOVFF  0E,00
0094:  MOVFF  0F,01
0098:  MOVFF  10,02
009C:  MOVFF  11,03
00A0:  MOVFF  0C,FE9
00A4:  MOVFF  07,FEA
00A8:  BSF    07.7
00AA:  MOVFF  08,FE1
00AE:  MOVFF  09,FE2
00B2:  MOVFF  0A,FD9
00B6:  MOVFF  0B,FDA
00BA:  MOVFF  12,FF3
00BE:  MOVFF  13,FF4
00C2:  MOVFF  14,FFA
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #include <BA1520QTX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
00D2:  MOVFF  FF2,0D
00D6:  BCF    FF2.7
00D8:  CLRF   FF7
00DA:  ADDLW  EC
00DC:  MOVWF  FF6
00DE:  MOVLW  00
00E0:  ADDWFC FF7,F
00E2:  TBLRD*+
00E4:  MOVF   FF5,W
00E6:  BTFSC  0D.7
00E8:  BSF    FF2.7
00EA:  RETURN 0
00EC:  DATA C8,01
00EE:  DATA 00,00
00F0:  DATA 81,0C
00F2:  DATA 00,00
00F4:  DATA 42,06
00F6:  DATA 00,00
00F8:  DATA 0B,00
00FA:  DATA 70,00
00FC:  DATA A4,A7
00FE:  DATA 02,00
0100:  DATA E5,00
0102:  DATA 00,00
0104:  DATA 06,DD
0106:  DATA 1E,00
0108:  DATA 07,00
010A:  DATA 00,00
010C:  MOVFF  FF2,0D
0110:  BCF    FF2.7
0112:  CLRF   FF7
0114:  ADDLW  26
0116:  MOVWF  FF6
0118:  MOVLW  01
011A:  ADDWFC FF7,F
011C:  TBLRD*+
011E:  MOVF   FF5,W
0120:  BTFSC  0D.7
0122:  BSF    FF2.7
0124:  RETURN 0
0126:  DATA 24,41
0128:  DATA 49,20
012A:  DATA 3C,63
012C:  DATA 68,61
012E:  DATA 6E,6E
0130:  DATA 65,6C
0132:  DATA 3E,3C
0134:  DATA 63,72
0136:  DATA 3E,20
0138:  DATA 20,09
013A:  DATA 52,65
013C:  DATA 71,75
013E:  DATA 65,73
0140:  DATA 74,20
0142:  DATA 61,6E
0144:  DATA 61,6C
0146:  DATA 6F,67
0148:  DATA 20,63
014A:  DATA 68,61
014C:  DATA 6E,6E
014E:  DATA 65,6C
0150:  DATA 20,76
0152:  DATA 61,6C
0154:  DATA 75,65
0156:  DATA 20,28
0158:  DATA 31,30
015A:  DATA 20,62
015C:  DATA 69,74
015E:  DATA 73,29
0160:  DATA 0D,0A
0162:  DATA 00,00
0164:  MOVFF  FF2,0D
0168:  BCF    FF2.7
016A:  CLRF   FF7
016C:  ADDLW  7E
016E:  MOVWF  FF6
0170:  MOVLW  01
0172:  ADDWFC FF7,F
0174:  TBLRD*+
0176:  MOVF   FF5,W
0178:  BTFSC  0D.7
017A:  BSF    FF2.7
017C:  RETURN 0
017E:  DATA 24,41
0180:  DATA 54,20
0182:  DATA 3C,6C
0184:  DATA 65,76
0186:  DATA 65,6C
0188:  DATA 3E,3C
018A:  DATA 63,72
018C:  DATA 3E,20
018E:  DATA 20,09
0190:  DATA 53,65
0192:  DATA 74,20
0194:  DATA 61,74
0196:  DATA 74,65
0198:  DATA 6E,75
019A:  DATA 61,74
019C:  DATA 6F,72
019E:  DATA 20,74
01A0:  DATA 6F,20
01A2:  DATA 3C,6C
01A4:  DATA 65,76
01A6:  DATA 65,6C
01A8:  DATA 3E,0D
01AA:  DATA 0A,00
01AC:  MOVFF  FF2,0D
01B0:  BCF    FF2.7
01B2:  CLRF   FF7
01B4:  ADDLW  C6
01B6:  MOVWF  FF6
01B8:  MOVLW  01
01BA:  ADDWFC FF7,F
01BC:  TBLRD*+
01BE:  MOVF   FF5,W
01C0:  BTFSC  0D.7
01C2:  BSF    FF2.7
01C4:  RETURN 0
01C6:  DATA 24,43
01C8:  DATA 46,20
01CA:  DATA 3C,66
01CC:  DATA 72,65
01CE:  DATA 71,3E
01D0:  DATA 3C,63
01D2:  DATA 72,3E
01D4:  DATA 20,20
01D6:  DATA 09,43
01D8:  DATA 68,61
01DA:  DATA 6E,67
01DC:  DATA 65,20
01DE:  DATA 66,72
01E0:  DATA 65,71
01E2:  DATA 75,65
01E4:  DATA 6E,63
01E6:  DATA 79,20
01E8:  DATA 28,32
01EA:  DATA 31,38
01EC:  DATA 35,2E
01EE:  DATA 30,20
01F0:  DATA 2D,20
01F2:  DATA 32,33
01F4:  DATA 30,30
01F6:  DATA 2E,30
01F8:  DATA 20,69
01FA:  DATA 6E,20
01FC:  DATA 30,2E
01FE:  DATA 31,20
0200:  DATA 69,6E
0202:  DATA 63,73
0204:  DATA 29,0D
0206:  DATA 0A,00
0208:  MOVFF  FF2,0D
020C:  BCF    FF2.7
020E:  CLRF   FF7
0210:  ADDLW  22
0212:  MOVWF  FF6
0214:  MOVLW  02
0216:  ADDWFC FF7,F
0218:  TBLRD*+
021A:  MOVF   FF5,W
021C:  BTFSC  0D.7
021E:  BSF    FF2.7
0220:  RETURN 0
0222:  DATA 24,44
0224:  DATA 49,3C
0226:  DATA 63,72
0228:  DATA 3E,20
022A:  DATA 20,09
022C:  DATA 52,65
022E:  DATA 71,75
0230:  DATA 65,73
0232:  DATA 74,20
0234:  DATA 64,69
0236:  DATA 67,69
0238:  DATA 74,61
023A:  DATA 6C,20
023C:  DATA 69,6E
023E:  DATA 70,75
0240:  DATA 74,73
0242:  DATA 0D,0A
0244:  DATA 00,00
0246:  MOVFF  FF2,0D
024A:  BCF    FF2.7
024C:  CLRF   FF7
024E:  ADDLW  60
0250:  MOVWF  FF6
0252:  MOVLW  02
0254:  ADDWFC FF7,F
0256:  TBLRD*+
0258:  MOVF   FF5,W
025A:  BTFSC  0D.7
025C:  BSF    FF2.7
025E:  RETURN 0
0260:  DATA 24,47
0262:  DATA 44,20
0264:  DATA 3C,61
0266:  DATA 64,64
0268:  DATA 72,3E
026A:  DATA 3C,63
026C:  DATA 72,3E
026E:  DATA 20,20
0270:  DATA 09,47
0272:  DATA 65,74
0274:  DATA 20,44
0276:  DATA 32,41
0278:  DATA 20,72
027A:  DATA 65,67
027C:  DATA 69,73
027E:  DATA 74,65
0280:  DATA 72,20
0282:  DATA 63,6F
0284:  DATA 6E,74
0286:  DATA 65,6E
0288:  DATA 74,73
028A:  DATA 0D,0A
028C:  DATA 00,00
028E:  MOVFF  FF2,0D
0292:  BCF    FF2.7
0294:  CLRF   FF7
0296:  ADDLW  A8
0298:  MOVWF  FF6
029A:  MOVLW  02
029C:  ADDWFC FF7,F
029E:  TBLRD*+
02A0:  MOVF   FF5,W
02A2:  BTFSC  0D.7
02A4:  BSF    FF2.7
02A6:  RETURN 0
02A8:  DATA 24,47
02AA:  DATA 46,20
02AC:  DATA 3C,61
02AE:  DATA 64,64
02B0:  DATA 72,3E
02B2:  DATA 3C,63
02B4:  DATA 72,3E
02B6:  DATA 20,20
02B8:  DATA 09,47
02BA:  DATA 65,74
02BC:  DATA 20,46
02BE:  DATA 50,47
02C0:  DATA 41,20
02C2:  DATA 72,65
02C4:  DATA 67,69
02C6:  DATA 73,74
02C8:  DATA 65,72
02CA:  DATA 20,63
02CC:  DATA 6F,6E
02CE:  DATA 74,65
02D0:  DATA 6E,74
02D2:  DATA 73,0D
02D4:  DATA 0A,00
02D6:  MOVFF  FF2,0D
02DA:  BCF    FF2.7
02DC:  CLRF   FF7
02DE:  ADDLW  F0
02E0:  MOVWF  FF6
02E2:  MOVLW  02
02E4:  ADDWFC FF7,F
02E6:  TBLRD*+
02E8:  MOVF   FF5,W
02EA:  BTFSC  0D.7
02EC:  BSF    FF2.7
02EE:  RETURN 0
02F0:  DATA 24,4F
02F2:  DATA 54,20
02F4:  DATA 3C,6F
02F6:  DATA 75,74
02F8:  DATA 70,75
02FA:  DATA 74,3E
02FC:  DATA 3C,63
02FE:  DATA 72,3E
0300:  DATA 20,20
0302:  DATA 09,53
0304:  DATA 65,74
0306:  DATA 20,64
0308:  DATA 69,67
030A:  DATA 69,74
030C:  DATA 61,6C
030E:  DATA 20,6F
0310:  DATA 75,74
0312:  DATA 70,75
0314:  DATA 74,73
0316:  DATA 20,74
0318:  DATA 6F,20
031A:  DATA 48,45
031C:  DATA 58,20
031E:  DATA 76,61
0320:  DATA 6C,75
0322:  DATA 65,0D
0324:  DATA 0A,00
0326:  MOVFF  FF2,0D
032A:  BCF    FF2.7
032C:  CLRF   FF7
032E:  ADDLW  40
0330:  MOVWF  FF6
0332:  MOVLW  03
0334:  ADDWFC FF7,F
0336:  TBLRD*+
0338:  MOVF   FF5,W
033A:  BTFSC  0D.7
033C:  BSF    FF2.7
033E:  RETURN 0
0340:  DATA 24,52
0342:  DATA 44,3C
0344:  DATA 63,72
0346:  DATA 3E,20
0348:  DATA 20,09
034A:  DATA 52,65
034C:  DATA 73,65
034E:  DATA 74,20
0350:  DATA 44,32
0352:  DATA 41,0D
0354:  DATA 0A,00
0356:  MOVFF  FF2,0D
035A:  BCF    FF2.7
035C:  CLRF   FF7
035E:  ADDLW  70
0360:  MOVWF  FF6
0362:  MOVLW  03
0364:  ADDWFC FF7,F
0366:  TBLRD*+
0368:  MOVF   FF5,W
036A:  BTFSC  0D.7
036C:  BSF    FF2.7
036E:  RETURN 0
0370:  DATA 24,53
0372:  DATA 44,20
0374:  DATA 3C,61
0376:  DATA 64,64
0378:  DATA 72,3E
037A:  DATA 20,3C
037C:  DATA 64,61
037E:  DATA 74,61
0380:  DATA 3E,3C
0382:  DATA 63,72
0384:  DATA 3E,20
0386:  DATA 20,09
0388:  DATA 53,65
038A:  DATA 74,20
038C:  DATA 44,32
038E:  DATA 41,20
0390:  DATA 72,65
0392:  DATA 67,69
0394:  DATA 73,74
0396:  DATA 65,72
0398:  DATA 20,3C
039A:  DATA 61,64
039C:  DATA 64,72
039E:  DATA 3E,20
03A0:  DATA 74,6F
03A2:  DATA 20,3C
03A4:  DATA 64,61
03A6:  DATA 74,61
03A8:  DATA 3E,0D
03AA:  DATA 0A,00
03AC:  MOVFF  FF2,0D
03B0:  BCF    FF2.7
03B2:  CLRF   FF7
03B4:  ADDLW  C6
03B6:  MOVWF  FF6
03B8:  MOVLW  03
03BA:  ADDWFC FF7,F
03BC:  TBLRD*+
03BE:  MOVF   FF5,W
03C0:  BTFSC  0D.7
03C2:  BSF    FF2.7
03C4:  RETURN 0
03C6:  DATA 24,53
03C8:  DATA 46,20
03CA:  DATA 3C,61
03CC:  DATA 64,64
03CE:  DATA 72,3E
03D0:  DATA 20,3C
03D2:  DATA 64,61
03D4:  DATA 74,61
03D6:  DATA 3E,3C
03D8:  DATA 63,72
03DA:  DATA 3E,20
03DC:  DATA 20,09
03DE:  DATA 53,65
03E0:  DATA 74,20
03E2:  DATA 46,50
03E4:  DATA 47,41
03E6:  DATA 20,72
03E8:  DATA 65,67
03EA:  DATA 69,73
03EC:  DATA 74,65
03EE:  DATA 72,20
03F0:  DATA 3C,61
03F2:  DATA 64,64
03F4:  DATA 72,3E
03F6:  DATA 20,74
03F8:  DATA 6F,20
03FA:  DATA 3C,64
03FC:  DATA 61,74
03FE:  DATA 61,3E
0400:  DATA 0D,0A
0402:  DATA 00,00
0404:  MOVFF  FF2,0D
0408:  BCF    FF2.7
040A:  CLRF   FF7
040C:  ADDLW  1E
040E:  MOVWF  FF6
0410:  MOVLW  04
0412:  ADDWFC FF7,F
0414:  TBLRD*+
0416:  MOVF   FF5,W
0418:  BTFSC  0D.7
041A:  BSF    FF2.7
041C:  RETURN 0
041E:  DATA 0D,0A
0420:  DATA 0A,4E
0422:  DATA 4F,20
0424:  DATA 54,45
0426:  DATA 4D,50
0428:  DATA 2D,52
042A:  DATA 46,20
042C:  DATA 4F,46
042E:  DATA 46,20
0430:  DATA 0D,0A
0432:  DATA 00,00
0434:  MOVFF  FF2,0D
0438:  BCF    FF2.7
043A:  CLRF   FF7
043C:  ADDLW  4E
043E:  MOVWF  FF6
0440:  MOVLW  04
0442:  ADDWFC FF7,F
0444:  TBLRD*+
0446:  MOVF   FF5,W
0448:  BTFSC  0D.7
044A:  BSF    FF2.7
044C:  RETURN 0
044E:  DATA 44,53
0450:  DATA 20,3C
0452:  DATA 64,61
0454:  DATA 74,61
0456:  DATA 20,73
0458:  DATA 6F,75
045A:  DATA 72,65
045C:  DATA 3E,3C
045E:  DATA 63,72
0460:  DATA 3E,20
0462:  DATA 20,09
0464:  DATA 53,65
0466:  DATA 74,20
0468:  DATA 64,61
046A:  DATA 74,61
046C:  DATA 20,73
046E:  DATA 6F,75
0470:  DATA 72,63
0472:  DATA 65,20
0474:  DATA 28,30
0476:  DATA 2D,31
0478:  DATA 29,0D
047A:  DATA 0A,00
047C:  MOVFF  FF2,0D
0480:  BCF    FF2.7
0482:  CLRF   FF7
0484:  ADDLW  96
0486:  MOVWF  FF6
0488:  MOVLW  04
048A:  ADDWFC FF7,F
048C:  TBLRD*+
048E:  MOVF   FF5,W
0490:  BTFSC  0D.7
0492:  BSF    FF2.7
0494:  RETURN 0
0496:  DATA 44,50
0498:  DATA 20,3C
049A:  DATA 64,61
049C:  DATA 74,61
049E:  DATA 20,70
04A0:  DATA 6F,6C
04A2:  DATA 61,72
04A4:  DATA 69,74
04A6:  DATA 79,3E
04A8:  DATA 3C,63
04AA:  DATA 72,3E
04AC:  DATA 20,20
04AE:  DATA 09,53
04B0:  DATA 65,74
04B2:  DATA 20,64
04B4:  DATA 61,74
04B6:  DATA 61,20
04B8:  DATA 70,6F
04BA:  DATA 6C,61
04BC:  DATA 72,69
04BE:  DATA 74,79
04C0:  DATA 20,28
04C2:  DATA 30,2D
04C4:  DATA 31,29
04C6:  DATA 0D,0A
04C8:  DATA 00,00
04CA:  MOVFF  FF2,0D
04CE:  BCF    FF2.7
04D0:  CLRF   FF7
04D2:  ADDLW  E4
04D4:  MOVWF  FF6
04D6:  MOVLW  04
04D8:  ADDWFC FF7,F
04DA:  TBLRD*+
04DC:  MOVF   FF5,W
04DE:  BTFSC  0D.7
04E0:  BSF    FF2.7
04E2:  RETURN 0
04E4:  DATA 44,45
04E6:  DATA 20,3C
04E8:  DATA 73,65
04EA:  DATA 74,75
04EC:  DATA 70,20
04EE:  DATA 53,4F
04F0:  DATA 51,50
04F2:  DATA 53,4B
04F4:  DATA 3E,3C
04F6:  DATA 63,72
04F8:  DATA 3E,20
04FA:  DATA 20,09
04FC:  DATA 53,65
04FE:  DATA 74,20
0500:  DATA 73,65
0502:  DATA 74,75
0504:  DATA 70,20
0506:  DATA 53,4F
0508:  DATA 51,50
050A:  DATA 53,4B
050C:  DATA 20,28
050E:  DATA 30,2D
0510:  DATA 31,29
0512:  DATA 0D,0A
0514:  DATA 00,00
0516:  MOVFF  FF2,0D
051A:  BCF    FF2.7
051C:  CLRF   FF7
051E:  ADDLW  30
0520:  MOVWF  FF6
0522:  MOVLW  05
0524:  ADDWFC FF7,F
0526:  TBLRD*+
0528:  MOVF   FF5,W
052A:  BTFSC  0D.7
052C:  BSF    FF2.7
052E:  RETURN 0
0530:  DATA 52,50
0532:  DATA 20,3C
0534:  DATA 70,6F
0536:  DATA 77,65
0538:  DATA 72,20
053A:  DATA 68,65
053C:  DATA 69,67
053E:  DATA 68,74
0540:  DATA 3E,3C
0542:  DATA 63,72
0544:  DATA 3E,20
0546:  DATA 20,09
0548:  DATA 53,65
054A:  DATA 74,20
054C:  DATA 70,6F
054E:  DATA 77,65
0550:  DATA 72,20
0552:  DATA 68,65
0554:  DATA 69,67
0556:  DATA 68,74
0558:  DATA 20,28
055A:  DATA 30,2D
055C:  DATA 31,29
055E:  DATA 0D,0A
0560:  DATA 00,00
0562:  MOVFF  FF2,0D
0566:  BCF    FF2.7
0568:  CLRF   FF7
056A:  ADDLW  7C
056C:  MOVWF  FF6
056E:  MOVLW  05
0570:  ADDWFC FF7,F
0572:  TBLRD*+
0574:  MOVF   FF5,W
0576:  BTFSC  0D.7
0578:  BSF    FF2.7
057A:  RETURN 0
057C:  DATA 52,46
057E:  DATA 20,3C
0580:  DATA 70,6F
0582:  DATA 77,65
0584:  DATA 72,20
0586:  DATA 63,6F
0588:  DATA 6D,61
058A:  DATA 6E,64
058C:  DATA 3E,3C
058E:  DATA 63,72
0590:  DATA 3E,20
0592:  DATA 20,09
0594:  DATA 53,65
0596:  DATA 74,20
0598:  DATA 70,6F
059A:  DATA 77,65
059C:  DATA 72,20
059E:  DATA 63,6F
05A0:  DATA 6D,61
05A2:  DATA 6E,64
05A4:  DATA 20,28
05A6:  DATA 30,2D
05A8:  DATA 31,29
05AA:  DATA 0D,0A
05AC:  DATA 00,00
05AE:  MOVFF  FF2,0D
05B2:  BCF    FF2.7
05B4:  CLRF   FF7
05B6:  ADDLW  C8
05B8:  MOVWF  FF6
05BA:  MOVLW  05
05BC:  ADDWFC FF7,F
05BE:  TBLRD*+
05C0:  MOVF   FF5,W
05C2:  BTFSC  0D.7
05C4:  BSF    FF2.7
05C6:  RETURN 0
05C8:  DATA 52,41
05CA:  DATA 20,3C
05CC:  DATA 72,61
05CE:  DATA 6E,64
05D0:  DATA 6F,6D
05D2:  DATA 69,7A
05D4:  DATA 65,72
05D6:  DATA 3E,3C
05D8:  DATA 63,72
05DA:  DATA 3E,20
05DC:  DATA 20,09
05DE:  DATA 53,65
05E0:  DATA 74,20
05E2:  DATA 77,69
05E4:  DATA 74,68
05E6:  DATA 2F,77
05E8:  DATA 69,74
05EA:  DATA 68,6F
05EC:  DATA 75,74
05EE:  DATA 20,72
05F0:  DATA 61,6E
05F2:  DATA 64,6F
05F4:  DATA 6D,69
05F6:  DATA 7A,65
05F8:  DATA 72,20
05FA:  DATA 28,30
05FC:  DATA 2D,31
05FE:  DATA 29,0D
0600:  DATA 0A,00
0602:  MOVFF  FF2,0D
0606:  BCF    FF2.7
0608:  CLRF   FF7
060A:  ADDLW  1C
060C:  MOVWF  FF6
060E:  MOVLW  06
0610:  ADDWFC FF7,F
0612:  TBLRD*+
0614:  MOVF   FF5,W
0616:  BTFSC  0D.7
0618:  BSF    FF2.7
061A:  RETURN 0
061C:  DATA 46,52
061E:  DATA 20,3C
0620:  DATA 66,72
0622:  DATA 65,71
0624:  DATA 75,65
0626:  DATA 6E,63
0628:  DATA 79,3E
062A:  DATA 3C,63
062C:  DATA 72,3E
062E:  DATA 20,20
0630:  DATA 09,53
0632:  DATA 65,74
0634:  DATA 20,66
0636:  DATA 72,65
0638:  DATA 71,75
063A:  DATA 65,6E
063C:  DATA 63,79
063E:  DATA 20,28
0640:  DATA 32,32
0642:  DATA 30,30
0644:  DATA 2E,30
0646:  DATA 2D,32
0648:  DATA 34,30
064A:  DATA 30,2E
064C:  DATA 30,29
064E:  DATA 0D,0A
0650:  DATA 00,00
0652:  MOVFF  FF2,0D
0656:  BCF    FF2.7
0658:  CLRF   FF7
065A:  ADDLW  6C
065C:  MOVWF  FF6
065E:  MOVLW  06
0660:  ADDWFC FF7,F
0662:  TBLRD*+
0664:  MOVF   FF5,W
0666:  BTFSC  0D.7
0668:  BSF    FF2.7
066A:  RETURN 0
066C:  DATA 4D,4F
066E:  DATA 20,3C
0670:  DATA 6D,6F
0672:  DATA 64,65
0674:  DATA 3E,3C
0676:  DATA 63,72
0678:  DATA 3E,20
067A:  DATA 20,09
067C:  DATA 53,65
067E:  DATA 74,20
0680:  DATA 6D,6F
0682:  DATA 64,65
0684:  DATA 20,28
0686:  DATA 30,2D
0688:  DATA 33,29
068A:  DATA 0D,0A
068C:  DATA 00,00
068E:  MOVFF  FF2,0D
0692:  BCF    FF2.7
0694:  CLRF   FF7
0696:  ADDLW  A8
0698:  MOVWF  FF6
069A:  MOVLW  06
069C:  ADDWFC FF7,F
069E:  TBLRD*+
06A0:  MOVF   FF5,W
06A2:  BTFSC  0D.7
06A4:  BSF    FF2.7
06A6:  RETURN 0
06A8:  DATA 49,43
06AA:  DATA 20,3C
06AC:  DATA 62,69
06AE:  DATA 74,72
06B0:  DATA 61,74
06B2:  DATA 65,3E
06B4:  DATA 3C,63
06B6:  DATA 72,3E
06B8:  DATA 20,20
06BA:  DATA 09,53
06BC:  DATA 65,74
06BE:  DATA 20,62
06C0:  DATA 69,72
06C2:  DATA 74,61
06C4:  DATA 74,65
06C6:  DATA 20,28
06C8:  DATA 31,2E
06CA:  DATA 30,30
06CC:  DATA 2D,33
06CE:  DATA 30,2E
06D0:  DATA 30,30
06D2:  DATA 44,42
06D4:  DATA 70,73
06D6:  DATA 29,0D
06D8:  DATA 0A,00
06DA:  MOVFF  FF2,0D
06DE:  BCF    FF2.7
06E0:  CLRF   FF7
06E2:  ADDLW  F4
06E4:  MOVWF  FF6
06E6:  MOVLW  06
06E8:  ADDWFC FF7,F
06EA:  TBLRD*+
06EC:  MOVF   FF5,W
06EE:  BTFSC  0D.7
06F0:  BSF    FF2.7
06F2:  RETURN 0
06F4:  DATA 49,44
06F6:  DATA 20,3C
06F8:  DATA 69,6E
06FA:  DATA 74,65
06FC:  DATA 72,6E
06FE:  DATA 61,6C
0700:  DATA 20,70
0702:  DATA 61,74
0704:  DATA 74,65
0706:  DATA 72,6E
0708:  DATA 3E,3C
070A:  DATA 63,72
070C:  DATA 3E,20
070E:  DATA 20,09
0710:  DATA 53,65
0712:  DATA 74,20
0714:  DATA 69,6E
0716:  DATA 74,65
0718:  DATA 72,6E
071A:  DATA 61,6C
071C:  DATA 20,70
071E:  DATA 61,74
0720:  DATA 74,65
0722:  DATA 72,6E
0724:  DATA 20,28
0726:  DATA 30,2D
0728:  DATA 33,29
072A:  DATA 0D,0A
072C:  DATA 00,00
072E:  MOVFF  FF2,0D
0732:  BCF    FF2.7
0734:  CLRF   FF7
0736:  ADDLW  48
0738:  MOVWF  FF6
073A:  MOVLW  07
073C:  ADDWFC FF7,F
073E:  TBLRD*+
0740:  MOVF   FF5,W
0742:  BTFSC  0D.7
0744:  BSF    FF2.7
0746:  RETURN 0
0748:  DATA 56,45
074A:  DATA 20,3C
074C:  DATA 63,72
074E:  DATA 3E,20
0750:  DATA 20,09
0752:  DATA 64,69
0754:  DATA 73,70
0756:  DATA 6C,61
0758:  DATA 79,20
075A:  DATA 76,65
075C:  DATA 72,73
075E:  DATA 69,6F
0760:  DATA 6E,20
0762:  DATA 69,6E
0764:  DATA 66,6F
0766:  DATA 0D,0A
0768:  DATA 00,00
076A:  MOVFF  FF2,0D
076E:  BCF    FF2.7
0770:  CLRF   FF7
0772:  ADDLW  84
0774:  MOVWF  FF6
0776:  MOVLW  07
0778:  ADDWFC FF7,F
077A:  TBLRD*+
077C:  MOVF   FF5,W
077E:  BTFSC  0D.7
0780:  BSF    FF2.7
0782:  RETURN 0
0784:  DATA 56,53
0786:  DATA 20,3C
0788:  DATA 6D,61
078A:  DATA 6A,6F
078C:  DATA 72,3E
078E:  DATA 2E,3C
0790:  DATA 6D,69
0792:  DATA 6E,6F
0794:  DATA 72,3E
0796:  DATA 20,3C
0798:  DATA 63,72
079A:  DATA 3E,20
079C:  DATA 20,09
079E:  DATA 73,65
07A0:  DATA 74,20
07A2:  DATA 74,68
07A4:  DATA 65,20
07A6:  DATA 73,65
07A8:  DATA 74,75
07AA:  DATA 70,20
07AC:  DATA 66,69
07AE:  DATA 6C,65
07B0:  DATA 20,76
07B2:  DATA 65,72
07B4:  DATA 73,69
07B6:  DATA 6F,6E
07B8:  DATA 0D,0A
07BA:  DATA 00,00
07BC:  MOVFF  FF2,0D
07C0:  BCF    FF2.7
07C2:  CLRF   FF7
07C4:  ADDLW  D6
07C6:  MOVWF  FF6
07C8:  MOVLW  07
07CA:  ADDWFC FF7,F
07CC:  TBLRD*+
07CE:  MOVF   FF5,W
07D0:  BTFSC  0D.7
07D2:  BSF    FF2.7
07D4:  RETURN 0
07D6:  DATA 56,50
07D8:  DATA 20,3C
07DA:  DATA 70,6F
07DC:  DATA 77,65
07DE:  DATA 72,20
07E0:  DATA 6C,65
07E2:  DATA 76,65
07E4:  DATA 6C,3E
07E6:  DATA 3C,63
07E8:  DATA 72,3E
07EA:  DATA 20,20
07EC:  DATA 09,53
07EE:  DATA 65,74
07F0:  DATA 20,70
07F2:  DATA 6F,77
07F4:  DATA 65,72
07F6:  DATA 20,6C
07F8:  DATA 65,76
07FA:  DATA 65,6C
07FC:  DATA 20,28
07FE:  DATA 32,30
0800:  DATA 2D,34
0802:  DATA 30,29
0804:  DATA 0D,0A
0806:  DATA 00,00
0808:  MOVFF  FF2,0D
080C:  BCF    FF2.7
080E:  CLRF   FF7
0810:  ADDLW  22
0812:  MOVWF  FF6
0814:  MOVLW  08
0816:  ADDWFC FF7,F
0818:  TBLRD*+
081A:  MOVF   FF5,W
081C:  BTFSC  0D.7
081E:  BSF    FF2.7
0820:  RETURN 0
0822:  DATA 56,4C
0824:  DATA 20,3C
0826:  DATA 70,6F
0828:  DATA 77,65
082A:  DATA 72,20
082C:  DATA 68,69
082E:  DATA 67,68
0830:  DATA 3E,3C
0832:  DATA 63,72
0834:  DATA 3E,20
0836:  DATA 20,09
0838:  DATA 53,65
083A:  DATA 74,20
083C:  DATA 68,69
083E:  DATA 67,68
0840:  DATA 20,70
0842:  DATA 6F,77
0844:  DATA 65,72
0846:  DATA 20,6C
0848:  DATA 65,76
084A:  DATA 65,6C
084C:  DATA 20,28
084E:  DATA 32,30
0850:  DATA 2D,34
0852:  DATA 30,29
0854:  DATA 0D,0A
0856:  DATA 00,00
0858:  MOVFF  FF2,0D
085C:  BCF    FF2.7
085E:  CLRF   FF7
0860:  ADDLW  72
0862:  MOVWF  FF6
0864:  MOVLW  08
0866:  ADDWFC FF7,F
0868:  TBLRD*+
086A:  MOVF   FF5,W
086C:  BTFSC  0D.7
086E:  BSF    FF2.7
0870:  RETURN 0
0872:  DATA 56,4D
0874:  DATA 20,3C
0876:  DATA 6E,65
0878:  DATA 67,61
087A:  DATA 74,69
087C:  DATA 76,65
087E:  DATA 20,70
0880:  DATA 6F,77
0882:  DATA 65,72
0884:  DATA 20,6C
0886:  DATA 65,76
0888:  DATA 65,6C
088A:  DATA 3E,3C
088C:  DATA 63,72
088E:  DATA 3E,20
0890:  DATA 20,09
0892:  DATA 53,65
0894:  DATA 74,20
0896:  DATA 6E,65
0898:  DATA 67,61
089A:  DATA 74,69
089C:  DATA 76,65
089E:  DATA 20,70
08A0:  DATA 6F,77
08A2:  DATA 65,72
08A4:  DATA 20,6C
08A6:  DATA 65,76
08A8:  DATA 65,6C
08AA:  DATA 0D,0A
08AC:  DATA 00,00
08AE:  MOVFF  FF2,0D
08B2:  BCF    FF2.7
08B4:  CLRF   FF7
08B6:  ADDLW  C8
08B8:  MOVWF  FF6
08BA:  MOVLW  08
08BC:  ADDWFC FF7,F
08BE:  TBLRD*+
08C0:  MOVF   FF5,W
08C2:  BTFSC  0D.7
08C4:  BSF    FF2.7
08C6:  RETURN 0
08C8:  DATA 56,43
08CA:  DATA 20,3C
08CC:  DATA 70,6F
08CE:  DATA 73,65
08D0:  DATA 74,69
08D2:  DATA 76,65
08D4:  DATA 20,70
08D6:  DATA 6F,77
08D8:  DATA 65,72
08DA:  DATA 20,6C
08DC:  DATA 65,76
08DE:  DATA 65,6C
08E0:  DATA 3E,3C
08E2:  DATA 63,72
08E4:  DATA 3E,20
08E6:  DATA 20,09
08E8:  DATA 53,65
08EA:  DATA 74,20
08EC:  DATA 70,6F
08EE:  DATA 73,65
08F0:  DATA 74,69
08F2:  DATA 76,65
08F4:  DATA 20,70
08F6:  DATA 6F,77
08F8:  DATA 65,72
08FA:  DATA 20,6C
08FC:  DATA 65,76
08FE:  DATA 65,6C
0900:  DATA 0D,0A
0902:  DATA 00,00
0904:  MOVFF  FF2,0D
0908:  BCF    FF2.7
090A:  CLRF   FF7
090C:  ADDLW  1E
090E:  MOVWF  FF6
0910:  MOVLW  09
0912:  ADDWFC FF7,F
0914:  TBLRD*+
0916:  MOVF   FF5,W
0918:  BTFSC  0D.7
091A:  BSF    FF2.7
091C:  RETURN 0
091E:  DATA 43,53
0920:  DATA 20,3C
0922:  DATA 63,6C
0924:  DATA 6F,63
0926:  DATA 6B,20
0928:  DATA 70,68
092A:  DATA 61,73
092C:  DATA 65,3E
092E:  DATA 3C,63
0930:  DATA 72,3E
0932:  DATA 20,20
0934:  DATA 09,53
0936:  DATA 65,74
0938:  DATA 20,63
093A:  DATA 6C,6F
093C:  DATA 63,6B
093E:  DATA 20,70
0940:  DATA 68,61
0942:  DATA 73,65
0944:  DATA 20,28
0946:  DATA 30,2D
0948:  DATA 31,29
094A:  DATA 0D,0A
094C:  DATA 00,00
094E:  MOVFF  FF2,0D
0952:  BCF    FF2.7
0954:  CLRF   FF7
0956:  ADDLW  68
0958:  MOVWF  FF6
095A:  MOVLW  09
095C:  ADDWFC FF7,F
095E:  TBLRD*+
0960:  MOVF   FF5,W
0962:  BTFSC  0D.7
0964:  BSF    FF2.7
0966:  RETURN 0
0968:  DATA 53,56
096A:  DATA 20,3C
096C:  DATA 73,61
096E:  DATA 76,65
0970:  DATA 20,61
0972:  DATA 6C,6C
0974:  DATA 3E,3C
0976:  DATA 63,72
0978:  DATA 3E,20
097A:  DATA 20,09
097C:  DATA 53,61
097E:  DATA 76,65
0980:  DATA 20,70
0982:  DATA 61,72
0984:  DATA 61,6D
0986:  DATA 65,74
0988:  DATA 65,72
098A:  DATA 73,0D
098C:  DATA 00,00
098E:  MOVFF  FF2,0D
0992:  BCF    FF2.7
0994:  CLRF   FF7
0996:  ADDLW  A8
0998:  MOVWF  FF6
099A:  MOVLW  09
099C:  ADDWFC FF7,F
099E:  TBLRD*+
09A0:  MOVF   FF5,W
09A2:  BTFSC  0D.7
09A4:  BSF    FF2.7
09A6:  RETURN 0
09A8:  DATA 0D,09
09AA:  DATA 20,48
09AC:  DATA 45,4C
09AE:  DATA 50,20
09B0:  DATA 4C,49
09B2:  DATA 53,54
09B4:  DATA 20,0D
09B6:  DATA 00,00
09B8:  MOVFF  FF2,0D
09BC:  BCF    FF2.7
09BE:  CLRF   FF7
09C0:  ADDLW  D2
09C2:  MOVWF  FF6
09C4:  MOVLW  09
09C6:  ADDWFC FF7,F
09C8:  TBLRD*+
09CA:  MOVF   FF5,W
09CC:  BTFSC  0D.7
09CE:  BSF    FF2.7
09D0:  RETURN 0
09D2:  DATA 0D,0A
09D4:  DATA 46,41
09D6:  DATA 55,4C
09D8:  DATA 54,0D
09DA:  DATA 0A,00
09DC:  MOVFF  FF2,0D
09E0:  BCF    FF2.7
09E2:  CLRF   FF7
09E4:  ADDLW  F6
09E6:  MOVWF  FF6
09E8:  MOVLW  09
09EA:  ADDWFC FF7,F
09EC:  TBLRD*+
09EE:  MOVF   FF5,W
09F0:  BTFSC  0D.7
09F2:  BSF    FF2.7
09F4:  RETURN 0
09F6:  DATA 0D,0A
09F8:  DATA 46,41
09FA:  DATA 49,4C
09FC:  DATA 0D,0A
09FE:  DATA 00,00
0A00:  MOVFF  FF2,0D
0A04:  BCF    FF2.7
0A06:  CLRF   FF7
0A08:  ADDLW  1A
0A0A:  MOVWF  FF6
0A0C:  MOVLW  0A
0A0E:  ADDWFC FF7,F
0A10:  TBLRD*+
0A12:  MOVF   FF5,W
0A14:  BTFSC  0D.7
0A16:  BSF    FF2.7
0A18:  RETURN 0
0A1A:  DATA 42,41
0A1C:  DATA 31,35
0A1E:  DATA 32,30
0A20:  DATA 51,54
0A22:  DATA 58,20
0A24:  DATA 56,31
0A26:  DATA 2E,30
0A28:  DATA 00,00
0A2A:  MOVFF  FF2,0D
0A2E:  BCF    FF2.7
0A30:  CLRF   FF7
0A32:  ADDLW  44
0A34:  MOVWF  FF6
0A36:  MOVLW  0A
0A38:  ADDWFC FF7,F
0A3A:  TBLRD*+
0A3C:  MOVF   FF5,W
0A3E:  BTFSC  0D.7
0A40:  BSF    FF2.7
0A42:  RETURN 0
0A44:  DATA 0D,0A
0A46:  DATA 0A,4F
0A48:  DATA 4B,20
0A4A:  DATA 52,65
0A4C:  DATA 71,75
0A4E:  DATA 65,73
0A50:  DATA 74,20
0A52:  DATA 53,74
0A54:  DATA 61,74
0A56:  DATA 75,73
0A58:  DATA 20,0D
0A5A:  DATA 0A,0A
0A5C:  DATA 00,00
0A5E:  MOVFF  FF2,0D
0A62:  BCF    FF2.7
0A64:  CLRF   FF7
0A66:  ADDLW  78
0A68:  MOVWF  FF6
0A6A:  MOVLW  0A
0A6C:  ADDWFC FF7,F
0A6E:  TBLRD*+
0A70:  MOVF   FF5,W
0A72:  BTFSC  0D.7
0A74:  BSF    FF2.7
0A76:  RETURN 0
0A78:  DATA 47,4F
0A7A:  DATA 4F,44
0A7C:  DATA 00,00
0A7E:  MOVFF  FF2,0D
0A82:  BCF    FF2.7
0A84:  CLRF   FF7
0A86:  ADDLW  98
0A88:  MOVWF  FF6
0A8A:  MOVLW  0A
0A8C:  ADDWFC FF7,F
0A8E:  TBLRD*+
0A90:  MOVF   FF5,W
0A92:  BTFSC  0D.7
0A94:  BSF    FF2.7
0A96:  RETURN 0
0A98:  DATA 42,41
0A9A:  DATA 44,00
0A9C:  MOVFF  FF2,0D
0AA0:  BCF    FF2.7
0AA2:  CLRF   FF7
0AA4:  ADDLW  B6
0AA6:  MOVWF  FF6
0AA8:  MOVLW  0A
0AAA:  ADDWFC FF7,F
0AAC:  TBLRD*+
0AAE:  MOVF   FF5,W
0AB0:  BTFSC  0D.7
0AB2:  BSF    FF2.7
0AB4:  RETURN 0
0AB6:  DATA 0D,0A
0AB8:  DATA 4F,4B
0ABA:  DATA 0D,0A
0ABC:  DATA 2A,00
0ABE:  MOVFF  FF2,0D
0AC2:  BCF    FF2.7
0AC4:  CLRF   FF7
0AC6:  ADDLW  D8
0AC8:  MOVWF  FF6
0ACA:  MOVLW  0A
0ACC:  ADDWFC FF7,F
0ACE:  TBLRD*+
0AD0:  MOVF   FF5,W
0AD2:  BTFSC  0D.7
0AD4:  BSF    FF2.7
0AD6:  RETURN 0
0AD8:  DATA 0D,0A
0ADA:  DATA 0A,42
0ADC:  DATA 52,45
0ADE:  DATA 41,4B
0AE0:  DATA 0D,0A
0AE2:  DATA 00,00
*
0BAE:  DATA 0D,54
0BB0:  DATA 45,4D
0BB2:  DATA 50,3D
0BB4:  DATA 25,36
0BB6:  DATA 2E,32
0BB8:  DATA 66,64
0BBA:  DATA 65,67
0BBC:  DATA 0D,0A
0BBE:  DATA 4F,4B
0BC0:  DATA 0A,00
0BC2:  DATA 24,41
0BC4:  DATA 52,20
0BC6:  DATA 25,6C
0BC8:  DATA 75,0D
0BCA:  DATA 00,00
0BCC:  DATA 24,43
0BCE:  DATA 50,20
0BD0:  DATA 25,75
0BD2:  DATA 0D,00
0BD4:  DATA 24,44
0BD6:  DATA 52,20
0BD8:  DATA 25,30
0BDA:  DATA 32,58
0BDC:  DATA 0D,00
0BDE:  DATA 20,0D
0BE0:  DATA 0A,24
0BE2:  DATA 53,46
0BE4:  DATA 20,25
0BE6:  DATA 30,32
0BE8:  DATA 58,20
0BEA:  DATA 25,30
0BEC:  DATA 32,58
0BEE:  DATA 0D,00
0BF0:  DATA 20,0D
0BF2:  DATA 0A,24
0BF4:  DATA 53,44
0BF6:  DATA 20,25
0BF8:  DATA 30,32
0BFA:  DATA 58,20
0BFC:  DATA 25,30
0BFE:  DATA 32,58
0C00:  DATA 0D,00
0C02:  DATA 46,52
0C04:  DATA 20,25
0C06:  DATA 6C,75
0C08:  DATA 0D,00
0C0A:  DATA 4D,4F
0C0C:  DATA 20,25
0C0E:  DATA 75,0D
0C10:  DATA 00,00
0C12:  DATA 44,53
0C14:  DATA 20,25
0C16:  DATA 75,0D
0C18:  DATA 00,00
0C1A:  DATA 45,52
0C1C:  DATA 52,20
0C1E:  DATA 44,53
0C20:  DATA 20,25
0C22:  DATA 75,0D
0C24:  DATA 00,00
0C26:  DATA 44,50
0C28:  DATA 20,25
0C2A:  DATA 75,0D
0C2C:  DATA 00,00
0C2E:  DATA 45,52
0C30:  DATA 52,20
0C32:  DATA 44,50
0C34:  DATA 20,25
0C36:  DATA 75,0D
0C38:  DATA 00,00
0C3A:  DATA 44,45
0C3C:  DATA 20,25
0C3E:  DATA 75,0D
0C40:  DATA 00,00
0C42:  DATA 45,52
0C44:  DATA 52,20
0C46:  DATA 44,45
0C48:  DATA 20,25
0C4A:  DATA 75,0D
0C4C:  DATA 00,00
0C4E:  DATA 52,50
0C50:  DATA 20,25
0C52:  DATA 75,0D
0C54:  DATA 00,00
0C56:  DATA 45,52
0C58:  DATA 52,20
0C5A:  DATA 52,50
0C5C:  DATA 20,25
0C5E:  DATA 75,0D
0C60:  DATA 00,00
0C62:  DATA 52,46
0C64:  DATA 20,25
0C66:  DATA 75,0D
0C68:  DATA 00,00
0C6A:  DATA 45,52
0C6C:  DATA 52,20
0C6E:  DATA 52,46
0C70:  DATA 20,25
0C72:  DATA 75,0D
0C74:  DATA 00,00
0C76:  DATA 52,43
0C78:  DATA 20,25
0C7A:  DATA 6C,75
0C7C:  DATA 0D,00
0C7E:  DATA 52,42
0C80:  DATA 20,25
0C82:  DATA 6C,75
0C84:  DATA 0D,00
0C86:  DATA 52,41
0C88:  DATA 20,25
0C8A:  DATA 75,0D
0C8C:  DATA 00,00
0C8E:  DATA 45,52
0C90:  DATA 52,20
0C92:  DATA 52,41
0C94:  DATA 20,25
0C96:  DATA 75,0D
0C98:  DATA 00,00
0C9A:  DATA 49,44
0C9C:  DATA 20,25
0C9E:  DATA 75,0D
0CA0:  DATA 00,00
0CA2:  DATA 45,52
0CA4:  DATA 52,20
0CA6:  DATA 49,44
0CA8:  DATA 20,25
0CAA:  DATA 75,0D
0CAC:  DATA 00,00
0CAE:  DATA 49,43
0CB0:  DATA 20,25
0CB2:  DATA 6C,75
0CB4:  DATA 0D,00
0CB6:  DATA 56,45
0CB8:  DATA 20,25
0CBA:  DATA 73,20
0CBC:  DATA 56,53
0CBE:  DATA 20,25
0CC0:  DATA 6C,75
0CC2:  DATA 2E,25
0CC4:  DATA 6C,75
0CC6:  DATA 20,49
0CC8:  DATA 44,3D
0CCA:  DATA 25,30
0CCC:  DATA 32,6C
0CCE:  DATA 75,20
0CD0:  DATA 44,54
0CD2:  DATA 3D,25
0CD4:  DATA 30,32
0CD6:  DATA 6C,75
0CD8:  DATA 25,30
0CDA:  DATA 32,75
0CDC:  DATA 0D,00
0CDE:  DATA 56,53
0CE0:  DATA 20,25
0CE2:  DATA 6C,75
0CE4:  DATA 25,6C
0CE6:  DATA 75,0D
0CE8:  DATA 00,00
0CEA:  DATA 56,50
0CEC:  DATA 20,25
0CEE:  DATA 6C,75
0CF0:  DATA 0D,00
0CF2:  DATA 56,4D
0CF4:  DATA 20,25
0CF6:  DATA 6C,75
0CF8:  DATA 0D,00
0CFA:  DATA 56,43
0CFC:  DATA 20,25
0CFE:  DATA 6C,75
0D00:  DATA 0D,00
0D02:  DATA 43,53
0D04:  DATA 20,25
0D06:  DATA 75,0D
0D08:  DATA 00,00
0D0A:  DATA 45,52
0D0C:  DATA 52,20
0D0E:  DATA 43,53
0D10:  DATA 20,25
0D12:  DATA 75,0D
0D14:  DATA 00,00
0D16:  DATA 43,50
0D18:  DATA 20,25
0D1A:  DATA 75,0D
0D1C:  DATA 00,00
0D1E:  DATA 45,52
0D20:  DATA 52,20
0D22:  DATA 43,50
0D24:  DATA 20,25
0D26:  DATA 75,0D
0D28:  DATA 00,00
0D2A:  DATA 0A,47
0D2C:  DATA 50,20
0D2E:  DATA 25,6C
0D30:  DATA 75,0D
0D32:  DATA 0A,00
0D34:  DATA 0A,47
0D36:  DATA 52,20
0D38:  DATA 25,6C
0D3A:  DATA 75,0D
0D3C:  DATA 0A,00
0D3E:  DATA 0D,0A
0D40:  DATA 49,44
0D42:  DATA 3D,25
0D44:  DATA 6C,75
0D46:  DATA 20,44
0D48:  DATA 54,3D
0D4A:  DATA 25,30
0D4C:  DATA 32,6C
0D4E:  DATA 75,25
0D50:  DATA 30,32
0D52:  DATA 75,0D
0D54:  DATA 00,00
0D56:  DATA 0D,0A
0D58:  DATA 0A,46
0D5A:  DATA 52,45
0D5C:  DATA 51,3D
0D5E:  DATA 25,6C
0D60:  DATA 75,2C
0D62:  DATA 20,52
0D64:  DATA 45,56
0D66:  DATA 3D,25
0D68:  DATA 73,2C
0D6A:  DATA 20,46
0D6C:  DATA 46,57
0D6E:  DATA 52,3D
0D70:  DATA 25,6C
0D72:  DATA 75,2C
0D74:  DATA 20,49
0D76:  DATA 43,3D
0D78:  DATA 25,6C
0D7A:  DATA 75,2E
0D7C:  DATA 25,6C
0D7E:  DATA 75,4D
0D80:  DATA 62,70
0D82:  DATA 73,2C
0D84:  DATA 20,4D
0D86:  DATA 4F,3D
0D88:  DATA 25,75
0D8A:  DATA 2C,20
0D8C:  DATA 43,53
0D8E:  DATA 3D,25
0D90:  DATA 75,2C
0D92:  DATA 20,52
0D94:  DATA 46,3D
0D96:  DATA 25,6C
0D98:  DATA 75,0D
0D9A:  DATA 00,00
0D9C:  DATA 0D,0A
0D9E:  DATA 0A,44
0DA0:  DATA 45,3D
0DA2:  DATA 25,75
0DA4:  DATA 2C,20
0DA6:  DATA 52,41
0DA8:  DATA 3D,25
0DAA:  DATA 75,2C
0DAC:  DATA 20,44
0DAE:  DATA 50,3D
0DB0:  DATA 25,75
0DB2:  DATA 2C,20
0DB4:  DATA 52,50
0DB6:  DATA 3D,25
0DB8:  DATA 6C,75
0DBA:  DATA 2C,20
0DBC:  DATA 44,53
0DBE:  DATA 3D,25
0DC0:  DATA 75,2C
0DC2:  DATA 20,49
0DC4:  DATA 44,3D
0DC6:  DATA 25,75
0DC8:  DATA 2C,20
0DCA:  DATA 56,4C
0DCC:  DATA 3D,25
0DCE:  DATA 6C,75
0DD0:  DATA 2C,20
0DD2:  DATA 56,50
0DD4:  DATA 3D,25
0DD6:  DATA 6C,75
0DD8:  DATA 2C,20
0DDA:  DATA 52,42
0DDC:  DATA 3D,25
0DDE:  DATA 6C,75
0DE0:  DATA 2C,20
0DE2:  DATA 52,43
0DE4:  DATA 3D,25
0DE6:  DATA 6C,75
0DE8:  DATA 2C,20
0DEA:  DATA 43,50
0DEC:  DATA 3D,25
0DEE:  DATA 75,20
0DF0:  DATA 20,0D
0DF2:  DATA 00,00
*
0F14:  TSTFSZ 01
0F16:  BRA    0F1E
0F18:  TSTFSZ 02
0F1A:  BRA    0F20
0F1C:  BRA    0F2C
0F1E:  INCF   02,F
0F20:  MOVFF  00,FEE
0F24:  DECFSZ 01,F
0F26:  BRA    0F20
0F28:  DECFSZ 02,F
0F2A:  BRA    0F20
0F2C:  GOTO   0F60 (RETURN)
*
12D6:  MOVLB  2
12D8:  CLRF   x3B
12DA:  CLRF   x3C
12DC:  MOVLW  01
12DE:  MOVWF  x3D
12E0:  CLRF   FDA
12E2:  CLRF   FD9
12E4:  MOVLW  02
12E6:  MOVWF  x40
12E8:  MOVLW  33
12EA:  MOVWF  x3F
12EC:  MOVLW  02
12EE:  MOVWF  FEA
12F0:  MOVLW  37
12F2:  MOVWF  FE9
12F4:  MOVFF  240,FE2
12F8:  MOVFF  23F,FE1
12FC:  MOVFF  23D,23E
1300:  BCF    FD8.0
1302:  MOVF   FE5,W
1304:  MULWF  FEE
1306:  MOVF   FF3,W
1308:  ADDWFC x3B,F
130A:  MOVF   FF4,W
130C:  ADDWFC x3C,F
130E:  DECFSZ x3E,F
1310:  BRA    1300
1312:  MOVFF  23B,FDE
1316:  MOVFF  23C,23B
131A:  CLRF   x3C
131C:  BTFSC  FD8.0
131E:  INCF   x3C,F
1320:  INCF   x3F,F
1322:  BTFSC  FD8.2
1324:  INCF   x40,F
1326:  INCF   x3D,F
1328:  MOVF   x3D,W
132A:  SUBLW  05
132C:  BNZ   12EC
132E:  MOVLB  0
1330:  RETURN 0
1332:  BTFSC  FD8.1
1334:  BRA    133E
1336:  MOVLW  02
1338:  MOVWF  FEA
133A:  MOVLW  45
133C:  MOVWF  FE9
133E:  CLRF   00
1340:  CLRF   01
1342:  CLRF   02
1344:  CLRF   03
1346:  MOVLB  2
1348:  CLRF   x45
134A:  CLRF   x46
134C:  CLRF   x47
134E:  CLRF   x48
1350:  MOVF   x44,W
1352:  IORWF  x43,W
1354:  IORWF  x42,W
1356:  IORWF  x41,W
1358:  BZ    13B2
135A:  MOVLW  20
135C:  MOVWF  x49
135E:  BCF    FD8.0
1360:  RLCF   x3D,F
1362:  RLCF   x3E,F
1364:  RLCF   x3F,F
1366:  RLCF   x40,F
1368:  RLCF   x45,F
136A:  RLCF   x46,F
136C:  RLCF   x47,F
136E:  RLCF   x48,F
1370:  MOVF   x44,W
1372:  SUBWF  x48,W
1374:  BNZ   1386
1376:  MOVF   x43,W
1378:  SUBWF  x47,W
137A:  BNZ   1386
137C:  MOVF   x42,W
137E:  SUBWF  x46,W
1380:  BNZ   1386
1382:  MOVF   x41,W
1384:  SUBWF  x45,W
1386:  BNC   13A6
1388:  MOVF   x41,W
138A:  SUBWF  x45,F
138C:  MOVF   x42,W
138E:  BTFSS  FD8.0
1390:  INCFSZ x42,W
1392:  SUBWF  x46,F
1394:  MOVF   x43,W
1396:  BTFSS  FD8.0
1398:  INCFSZ x43,W
139A:  SUBWF  x47,F
139C:  MOVF   x44,W
139E:  BTFSS  FD8.0
13A0:  INCFSZ x44,W
13A2:  SUBWF  x48,F
13A4:  BSF    FD8.0
13A6:  RLCF   00,F
13A8:  RLCF   01,F
13AA:  RLCF   02,F
13AC:  RLCF   03,F
13AE:  DECFSZ x49,F
13B0:  BRA    135E
13B2:  MOVFF  245,FEF
13B6:  MOVFF  246,FEC
13BA:  MOVFF  247,FEC
13BE:  MOVFF  248,FEC
13C2:  MOVLB  0
13C4:  RETURN 0
*
17F0:  MOVLW  B6
17F2:  MOVWF  00
17F4:  CLRF   03
17F6:  CLRF   02
17F8:  CLRF   01
17FA:  MOVLB  2
17FC:  MOVF   x3D,W
17FE:  IORWF  x3E,W
1800:  IORWF  x3F,W
1802:  IORWF  x40,W
1804:  BNZ   180A
1806:  CLRF   00
1808:  BRA    1824
180A:  BCF    FD8.0
180C:  BTFSC  01.7
180E:  BRA    1822
1810:  RLCF   x3D,F
1812:  RLCF   x3E,F
1814:  RLCF   x3F,F
1816:  RLCF   x40,F
1818:  RLCF   03,F
181A:  RLCF   02,F
181C:  RLCF   01,F
181E:  DECFSZ 00,F
1820:  BRA    180A
1822:  BCF    01.7
1824:  MOVLB  0
1826:  GOTO   1AD2 (RETURN)
182A:  MOVLB  2
182C:  MOVF   x3D,W
182E:  BTFSC  FD8.2
1830:  BRA    197C
1832:  MOVWF  x49
1834:  MOVF   x41,W
1836:  BTFSC  FD8.2
1838:  BRA    197C
183A:  SUBWF  x49,F
183C:  BNC   1848
183E:  MOVLW  7F
1840:  ADDWF  x49,F
1842:  BTFSC  FD8.0
1844:  BRA    197C
1846:  BRA    1854
1848:  MOVLW  81
184A:  SUBWF  x49,F
184C:  BTFSS  FD8.0
184E:  BRA    197C
1850:  BTFSC  FD8.2
1852:  BRA    197C
1854:  MOVFF  249,00
1858:  CLRF   01
185A:  CLRF   02
185C:  CLRF   03
185E:  CLRF   x48
1860:  MOVFF  23E,247
1864:  BSF    x47.7
1866:  MOVFF  23F,246
186A:  MOVFF  240,245
186E:  MOVLW  19
1870:  MOVWF  x49
1872:  MOVF   x44,W
1874:  SUBWF  x45,F
1876:  BC    1892
1878:  MOVLW  01
187A:  SUBWF  x46,F
187C:  BC    1892
187E:  SUBWF  x47,F
1880:  BC    1892
1882:  SUBWF  x48,F
1884:  BC    1892
1886:  INCF   x48,F
1888:  INCF   x47,F
188A:  INCF   x46,F
188C:  MOVF   x44,W
188E:  ADDWF  x45,F
1890:  BRA    18E2
1892:  MOVF   x43,W
1894:  SUBWF  x46,F
1896:  BC    18BC
1898:  MOVLW  01
189A:  SUBWF  x47,F
189C:  BC    18BC
189E:  SUBWF  x48,F
18A0:  BC    18BC
18A2:  INCF   x48,F
18A4:  INCF   x47,F
18A6:  MOVF   x43,W
18A8:  ADDWF  x46,F
18AA:  MOVF   x44,W
18AC:  ADDWF  x45,F
18AE:  BNC   18E2
18B0:  INCF   x46,F
18B2:  BNZ   18E2
18B4:  INCF   x47,F
18B6:  BNZ   18E2
18B8:  INCF   x48,F
18BA:  BRA    18E2
18BC:  MOVF   x42,W
18BE:  IORLW  80
18C0:  SUBWF  x47,F
18C2:  BC    18E0
18C4:  MOVLW  01
18C6:  SUBWF  x48,F
18C8:  BC    18E0
18CA:  INCF   x48,F
18CC:  MOVF   x42,W
18CE:  IORLW  80
18D0:  ADDWF  x47,F
18D2:  MOVF   x43,W
18D4:  ADDWF  x46,F
18D6:  BNC   18AA
18D8:  INCF   x47,F
18DA:  BNZ   18AA
18DC:  INCF   x48,F
18DE:  BRA    18AA
18E0:  BSF    03.0
18E2:  DECFSZ x49,F
18E4:  BRA    18E8
18E6:  BRA    18FE
18E8:  BCF    FD8.0
18EA:  RLCF   x45,F
18EC:  RLCF   x46,F
18EE:  RLCF   x47,F
18F0:  RLCF   x48,F
18F2:  BCF    FD8.0
18F4:  RLCF   03,F
18F6:  RLCF   02,F
18F8:  RLCF   01,F
18FA:  RLCF   x4A,F
18FC:  BRA    1872
18FE:  BTFSS  x4A.0
1900:  BRA    190E
1902:  BCF    FD8.0
1904:  RRCF   01,F
1906:  RRCF   02,F
1908:  RRCF   03,F
190A:  RRCF   x4A,F
190C:  BRA    1912
190E:  DECF   00,F
1910:  BZ    197C
1912:  BTFSC  x4A.7
1914:  BRA    1952
1916:  BCF    FD8.0
1918:  RLCF   x45,F
191A:  RLCF   x46,F
191C:  RLCF   x47,F
191E:  RLCF   x48,F
1920:  MOVF   x44,W
1922:  SUBWF  x45,F
1924:  BC    1934
1926:  MOVLW  01
1928:  SUBWF  x46,F
192A:  BC    1934
192C:  SUBWF  x47,F
192E:  BC    1934
1930:  SUBWF  x48,F
1932:  BNC   1968
1934:  MOVF   x43,W
1936:  SUBWF  x46,F
1938:  BC    1944
193A:  MOVLW  01
193C:  SUBWF  x47,F
193E:  BC    1944
1940:  SUBWF  x48,F
1942:  BNC   1968
1944:  MOVF   x42,W
1946:  IORLW  80
1948:  SUBWF  x47,F
194A:  BC    1952
194C:  MOVLW  01
194E:  SUBWF  x48,F
1950:  BNC   1968
1952:  INCF   03,F
1954:  BNZ   1968
1956:  INCF   02,F
1958:  BNZ   1968
195A:  INCF   01,F
195C:  BNZ   1968
195E:  INCF   00,F
1960:  BZ    197C
1962:  RRCF   01,F
1964:  RRCF   02,F
1966:  RRCF   03,F
1968:  MOVFF  23E,249
196C:  MOVF   x42,W
196E:  XORWF  x49,F
1970:  BTFSS  x49.7
1972:  BRA    1978
1974:  BSF    01.7
1976:  BRA    1984
1978:  BCF    01.7
197A:  BRA    1984
197C:  CLRF   00
197E:  CLRF   01
1980:  CLRF   02
1982:  CLRF   03
1984:  MOVLB  0
1986:  RETURN 0
1988:  MOVLB  2
198A:  MOVF   x3D,W
198C:  BTFSC  FD8.2
198E:  BRA    1A72
1990:  MOVWF  00
1992:  MOVF   x41,W
1994:  BTFSC  FD8.2
1996:  BRA    1A72
1998:  ADDWF  00,F
199A:  BNC   19A4
199C:  MOVLW  81
199E:  ADDWF  00,F
19A0:  BC    1A72
19A2:  BRA    19AC
19A4:  MOVLW  7F
19A6:  SUBWF  00,F
19A8:  BNC   1A72
19AA:  BZ    1A72
19AC:  MOVFF  23E,245
19B0:  MOVF   x42,W
19B2:  XORWF  x45,F
19B4:  BSF    x3E.7
19B6:  BSF    x42.7
19B8:  MOVF   x40,W
19BA:  MULWF  x44
19BC:  MOVFF  FF4,247
19C0:  MOVF   x3F,W
19C2:  MULWF  x43
19C4:  MOVFF  FF4,03
19C8:  MOVFF  FF3,246
19CC:  MULWF  x44
19CE:  MOVF   FF3,W
19D0:  ADDWF  x47,F
19D2:  MOVF   FF4,W
19D4:  ADDWFC x46,F
19D6:  MOVLW  00
19D8:  ADDWFC 03,F
19DA:  MOVF   x40,W
19DC:  MULWF  x43
19DE:  MOVF   FF3,W
19E0:  ADDWF  x47,F
19E2:  MOVF   FF4,W
19E4:  ADDWFC x46,F
19E6:  MOVLW  00
19E8:  CLRF   02
19EA:  ADDWFC 03,F
19EC:  ADDWFC 02,F
19EE:  MOVF   x3E,W
19F0:  MULWF  x44
19F2:  MOVF   FF3,W
19F4:  ADDWF  x46,F
19F6:  MOVF   FF4,W
19F8:  ADDWFC 03,F
19FA:  MOVLW  00
19FC:  ADDWFC 02,F
19FE:  MOVF   x3E,W
1A00:  MULWF  x43
1A02:  MOVF   FF3,W
1A04:  ADDWF  03,F
1A06:  MOVF   FF4,W
1A08:  ADDWFC 02,F
1A0A:  MOVLW  00
1A0C:  CLRF   01
1A0E:  ADDWFC 01,F
1A10:  MOVF   x40,W
1A12:  MULWF  x42
1A14:  MOVF   FF3,W
1A16:  ADDWF  x46,F
1A18:  MOVF   FF4,W
1A1A:  ADDWFC 03,F
1A1C:  MOVLW  00
1A1E:  ADDWFC 02,F
1A20:  ADDWFC 01,F
1A22:  MOVF   x3F,W
1A24:  MULWF  x42
1A26:  MOVF   FF3,W
1A28:  ADDWF  03,F
1A2A:  MOVF   FF4,W
1A2C:  ADDWFC 02,F
1A2E:  MOVLW  00
1A30:  ADDWFC 01,F
1A32:  MOVF   x3E,W
1A34:  MULWF  x42
1A36:  MOVF   FF3,W
1A38:  ADDWF  02,F
1A3A:  MOVF   FF4,W
1A3C:  ADDWFC 01,F
1A3E:  INCF   00,F
1A40:  BTFSC  01.7
1A42:  BRA    1A4E
1A44:  RLCF   x46,F
1A46:  RLCF   03,F
1A48:  RLCF   02,F
1A4A:  RLCF   01,F
1A4C:  DECF   00,F
1A4E:  MOVLW  00
1A50:  BTFSS  x46.7
1A52:  BRA    1A68
1A54:  INCF   03,F
1A56:  ADDWFC 02,F
1A58:  ADDWFC 01,F
1A5A:  MOVF   01,W
1A5C:  BNZ   1A68
1A5E:  MOVF   02,W
1A60:  BNZ   1A68
1A62:  MOVF   03,W
1A64:  BNZ   1A68
1A66:  INCF   00,F
1A68:  BTFSC  x45.7
1A6A:  BSF    01.7
1A6C:  BTFSS  x45.7
1A6E:  BCF    01.7
1A70:  BRA    1A7A
1A72:  CLRF   00
1A74:  CLRF   01
1A76:  CLRF   02
1A78:  CLRF   03
1A7A:  MOVLB  0
1A7C:  RETURN 0
1A7E:  MOVLB  2
1A80:  MOVF   x3D,W
1A82:  SUBLW  B6
1A84:  MOVWF  x3D
1A86:  CLRF   03
1A88:  MOVFF  23E,241
1A8C:  BSF    x3E.7
1A8E:  BCF    FD8.0
1A90:  RRCF   x3E,F
1A92:  RRCF   x3F,F
1A94:  RRCF   x40,F
1A96:  RRCF   03,F
1A98:  RRCF   02,F
1A9A:  RRCF   01,F
1A9C:  RRCF   00,F
1A9E:  DECFSZ x3D,F
1AA0:  BRA    1A8E
1AA2:  BTFSS  x41.7
1AA4:  BRA    1ABC
1AA6:  COMF   00,F
1AA8:  COMF   01,F
1AAA:  COMF   02,F
1AAC:  COMF   03,F
1AAE:  INCF   00,F
1AB0:  BTFSC  FD8.2
1AB2:  INCF   01,F
1AB4:  BTFSC  FD8.2
1AB6:  INCF   02,F
1AB8:  BTFSC  FD8.2
1ABA:  INCF   03,F
1ABC:  MOVLB  0
1ABE:  RETURN 0
*
2258:  MOVLB  2
225A:  MOVF   x24,W
225C:  XORWF  x26,W
225E:  ANDLW  80
2260:  MOVWF  x28
2262:  BTFSS  x24.7
2264:  BRA    2270
2266:  COMF   x23,F
2268:  COMF   x24,F
226A:  INCF   x23,F
226C:  BTFSC  FD8.2
226E:  INCF   x24,F
2270:  BTFSS  x26.7
2272:  BRA    227E
2274:  COMF   x25,F
2276:  COMF   x26,F
2278:  INCF   x25,F
227A:  BTFSC  FD8.2
227C:  INCF   x26,F
227E:  MOVF   x23,W
2280:  MULWF  x25
2282:  MOVFF  FF3,01
2286:  MOVFF  FF4,00
228A:  MULWF  x26
228C:  MOVF   FF3,W
228E:  ADDWF  00,F
2290:  MOVF   x24,W
2292:  MULWF  x25
2294:  MOVF   FF3,W
2296:  ADDWFC 00,W
2298:  MOVWF  02
229A:  BTFSS  x28.7
229C:  BRA    22A8
229E:  COMF   01,F
22A0:  COMF   02,F
22A2:  INCF   01,F
22A4:  BTFSC  FD8.2
22A6:  INCF   02,F
22A8:  MOVLB  0
22AA:  RETURN 0
*
279A:  MOVFF  197,FEA
279E:  MOVFF  196,FE9
27A2:  MOVLB  2
27A4:  MOVFF  23D,FEF
27A8:  INCF   FE9,F
27AA:  BTFSC  FD8.2
27AC:  INCF   FEA,F
27AE:  CLRF   FEF
27B0:  MOVLB  1
27B2:  INCF   x96,F
27B4:  BTFSC  FD8.2
27B6:  INCF   x97,F
27B8:  MOVLB  0
27BA:  RETURN 0
27BC:  TBLRD*+
27BE:  MOVFF  FF6,231
27C2:  MOVFF  FF7,232
27C6:  MOVFF  FF5,23D
27CA:  RCALL  279A
27CC:  MOVFF  231,FF6
27D0:  MOVFF  232,FF7
27D4:  MOVLB  2
27D6:  DECFSZ x30,F
27D8:  BRA    27DC
27DA:  BRA    27E0
27DC:  MOVLB  0
27DE:  BRA    27BC
27E0:  MOVLB  0
27E2:  RETURN 0
27E4:  MOVFF  FEA,224
27E8:  MOVFF  FE9,223
27EC:  MOVLB  2
27EE:  SWAPF  x1D,W
27F0:  IORLW  F0
27F2:  MOVWF  x1F
27F4:  ADDWF  x1F,F
27F6:  ADDLW  E2
27F8:  MOVWF  x20
27FA:  ADDLW  32
27FC:  MOVWF  x22
27FE:  MOVF   x1D,W
2800:  ANDLW  0F
2802:  ADDWF  x20,F
2804:  ADDWF  x20,F
2806:  ADDWF  x22,F
2808:  ADDLW  E9
280A:  MOVWF  x21
280C:  ADDWF  x21,F
280E:  ADDWF  x21,F
2810:  SWAPF  x1C,W
2812:  ANDLW  0F
2814:  ADDWF  x21,F
2816:  ADDWF  x22,F
2818:  RLCF   x21,F
281A:  RLCF   x22,F
281C:  COMF   x22,F
281E:  RLCF   x22,F
2820:  MOVF   x1C,W
2822:  ANDLW  0F
2824:  ADDWF  x22,F
2826:  RLCF   x1F,F
2828:  MOVLW  07
282A:  MOVWF  x1E
282C:  MOVLW  0A
282E:  DECF   x21,F
2830:  ADDWF  x22,F
2832:  BNC   282E
2834:  DECF   x20,F
2836:  ADDWF  x21,F
2838:  BNC   2834
283A:  DECF   x1F,F
283C:  ADDWF  x20,F
283E:  BNC   283A
2840:  DECF   x1E,F
2842:  ADDWF  x1F,F
2844:  BNC   2840
2846:  MOVLW  02
2848:  MOVWF  FEA
284A:  MOVLW  1E
284C:  MOVWF  FE9
284E:  MOVLW  07
2850:  ANDWF  x23,W
2852:  BCF    x23.6
2854:  ADDWF  FE9,F
2856:  MOVLW  22
2858:  SUBWF  FE9,W
285A:  BTFSC  FD8.2
285C:  BSF    x23.6
285E:  MOVF   FEF,W
2860:  MOVWF  00
2862:  BNZ   2874
2864:  BTFSC  x23.6
2866:  BRA    2874
2868:  BTFSC  x23.4
286A:  BRA    2896
286C:  BTFSC  x23.3
286E:  BRA    2874
2870:  MOVLW  20
2872:  BRA    287A
2874:  BSF    x23.3
2876:  BCF    x23.4
2878:  MOVLW  30
287A:  ADDWF  00,F
287C:  MOVFF  FEA,21D
2880:  MOVFF  FE9,21C
2884:  MOVFF  00,23D
2888:  MOVLB  0
288A:  RCALL  279A
288C:  MOVFF  21D,FEA
2890:  MOVFF  21C,FE9
2894:  MOVLB  2
2896:  MOVF   FEE,W
2898:  BTFSS  x23.6
289A:  BRA    2856
289C:  MOVLB  0
289E:  RETURN 0
*
2908:  MOVLB  2
290A:  MOVF   x1F,W
290C:  CLRF   01
290E:  SUBWF  x1E,W
2910:  BC    2918
2912:  MOVFF  21E,00
2916:  BRA    2930
2918:  CLRF   00
291A:  MOVLW  08
291C:  MOVWF  x20
291E:  RLCF   x1E,F
2920:  RLCF   00,F
2922:  MOVF   x1F,W
2924:  SUBWF  00,W
2926:  BTFSC  FD8.0
2928:  MOVWF  00
292A:  RLCF   01,F
292C:  DECFSZ x20,F
292E:  BRA    291E
2930:  MOVLB  0
2932:  RETURN 0
2934:  MOVF   01,W
2936:  MOVFF  21C,21E
293A:  MOVLW  64
293C:  MOVLB  2
293E:  MOVWF  x1F
2940:  MOVLB  0
2942:  RCALL  2908
2944:  MOVFF  00,21C
2948:  MOVF   01,W
294A:  MOVLW  30
294C:  BNZ   295E
294E:  MOVLB  2
2950:  BTFSS  x1D.1
2952:  BRA    2972
2954:  BTFSC  x1D.3
2956:  BRA    2972
2958:  BTFSC  x1D.4
295A:  MOVLW  20
295C:  BRA    2966
295E:  MOVLB  2
2960:  BCF    x1D.3
2962:  BCF    x1D.4
2964:  BSF    x1D.0
2966:  ADDWF  01,F
2968:  MOVFF  01,23D
296C:  MOVLB  0
296E:  RCALL  279A
2970:  MOVLB  2
2972:  MOVFF  21C,21E
2976:  MOVLW  0A
2978:  MOVWF  x1F
297A:  MOVLB  0
297C:  RCALL  2908
297E:  MOVFF  00,21C
2982:  MOVF   01,W
2984:  MOVLW  30
2986:  BNZ   2998
2988:  MOVLB  2
298A:  BTFSC  x1D.3
298C:  BRA    29A2
298E:  BTFSS  x1D.0
2990:  BRA    29A2
2992:  BTFSC  x1D.4
2994:  MOVLW  20
2996:  MOVLB  0
2998:  ADDWF  01,F
299A:  MOVFF  01,23D
299E:  RCALL  279A
29A0:  MOVLB  2
29A2:  MOVLW  30
29A4:  ADDWF  x1C,F
29A6:  MOVFF  21C,23D
29AA:  MOVLB  0
29AC:  RCALL  279A
29AE:  RETURN 0
*
2B1A:  MOVLW  8E
2B1C:  MOVWF  00
2B1E:  MOVFF  233,01
2B22:  MOVFF  232,02
2B26:  CLRF   03
2B28:  BTFSS  01.7
2B2A:  BRA    2B36
2B2C:  COMF   01,F
2B2E:  COMF   02,F
2B30:  INCF   02,F
2B32:  BNZ   2B36
2B34:  INCF   01,F
2B36:  MOVF   01,F
2B38:  BNZ   2B4C
2B3A:  MOVFF  02,01
2B3E:  CLRF   02
2B40:  MOVLW  08
2B42:  SUBWF  00,F
2B44:  MOVF   01,F
2B46:  BNZ   2B4C
2B48:  CLRF   00
2B4A:  BRA    2B66
2B4C:  BCF    FD8.0
2B4E:  BTFSC  01.7
2B50:  BRA    2B5A
2B52:  RLCF   02,F
2B54:  RLCF   01,F
2B56:  DECF   00,F
2B58:  BRA    2B4C
2B5A:  MOVLB  2
2B5C:  BTFSS  x33.7
2B5E:  BRA    2B64
2B60:  MOVLB  0
2B62:  BRA    2B66
2B64:  BCF    01.7
2B66:  MOVLB  0
2B68:  GOTO   2E16 (RETURN)
2B6C:  MOVLW  80
2B6E:  BTFSS  FD8.1
2B70:  BRA    2B76
2B72:  MOVLB  2
2B74:  XORWF  x37,F
2B76:  MOVLB  2
2B78:  CLRF   x3C
2B7A:  CLRF   x3D
2B7C:  MOVFF  233,23B
2B80:  MOVF   x37,W
2B82:  XORWF  x3B,F
2B84:  MOVF   x32,W
2B86:  BTFSC  FD8.2
2B88:  BRA    2D48
2B8A:  MOVWF  x3A
2B8C:  MOVWF  00
2B8E:  MOVF   x36,W
2B90:  BTFSC  FD8.2
2B92:  BRA    2D5A
2B94:  SUBWF  x3A,F
2B96:  BTFSC  FD8.2
2B98:  BRA    2CA0
2B9A:  BNC   2C18
2B9C:  MOVFF  237,240
2BA0:  BSF    x40.7
2BA2:  MOVFF  238,23F
2BA6:  MOVFF  239,23E
2BAA:  CLRF   x3D
2BAC:  BCF    FD8.0
2BAE:  RRCF   x40,F
2BB0:  RRCF   x3F,F
2BB2:  RRCF   x3E,F
2BB4:  RRCF   x3D,F
2BB6:  DECFSZ x3A,F
2BB8:  BRA    2BAA
2BBA:  BTFSS  x3B.7
2BBC:  BRA    2BC4
2BBE:  BSF    x3C.0
2BC0:  BRA    2D82
2BC2:  BCF    x3C.0
2BC4:  BCF    x3A.0
2BC6:  BSF    x3C.4
2BC8:  MOVLW  02
2BCA:  MOVWF  FEA
2BCC:  MOVLW  35
2BCE:  MOVWF  FE9
2BD0:  BRA    2DA8
2BD2:  BCF    x3C.4
2BD4:  BTFSC  x3B.7
2BD6:  BRA    2BEC
2BD8:  BTFSS  x3A.0
2BDA:  BRA    2C02
2BDC:  RRCF   x40,F
2BDE:  RRCF   x3F,F
2BE0:  RRCF   x3E,F
2BE2:  RRCF   x3D,F
2BE4:  INCF   00,F
2BE6:  BTFSC  FD8.2
2BE8:  BRA    2D78
2BEA:  BRA    2C02
2BEC:  BTFSC  x40.7
2BEE:  BRA    2C08
2BF0:  BCF    FD8.0
2BF2:  RLCF   x3D,F
2BF4:  RLCF   x3E,F
2BF6:  RLCF   x3F,F
2BF8:  RLCF   x40,F
2BFA:  DECF   00,F
2BFC:  BTFSC  FD8.2
2BFE:  BRA    2D78
2C00:  BRA    2BEC
2C02:  BSF    x3C.6
2C04:  BRA    2CE0
2C06:  BCF    x3C.6
2C08:  MOVFF  233,23B
2C0C:  BTFSS  x33.7
2C0E:  BRA    2C14
2C10:  BSF    x40.7
2C12:  BRA    2D6A
2C14:  BCF    x40.7
2C16:  BRA    2D6A
2C18:  MOVFF  236,23A
2C1C:  MOVFF  236,00
2C20:  MOVF   x32,W
2C22:  SUBWF  x3A,F
2C24:  MOVFF  233,240
2C28:  BSF    x40.7
2C2A:  MOVFF  234,23F
2C2E:  MOVFF  235,23E
2C32:  CLRF   x3D
2C34:  BCF    FD8.0
2C36:  RRCF   x40,F
2C38:  RRCF   x3F,F
2C3A:  RRCF   x3E,F
2C3C:  RRCF   x3D,F
2C3E:  DECFSZ x3A,F
2C40:  BRA    2C32
2C42:  BTFSS  x3B.7
2C44:  BRA    2C4C
2C46:  BSF    x3C.1
2C48:  BRA    2D82
2C4A:  BCF    x3C.1
2C4C:  BCF    x3A.0
2C4E:  BSF    x3C.5
2C50:  MOVLW  02
2C52:  MOVWF  FEA
2C54:  MOVLW  39
2C56:  MOVWF  FE9
2C58:  BRA    2DA8
2C5A:  BCF    x3C.5
2C5C:  BTFSC  x3B.7
2C5E:  BRA    2C74
2C60:  BTFSS  x3A.0
2C62:  BRA    2C8A
2C64:  RRCF   x40,F
2C66:  RRCF   x3F,F
2C68:  RRCF   x3E,F
2C6A:  RRCF   x3D,F
2C6C:  INCF   00,F
2C6E:  BTFSC  FD8.2
2C70:  BRA    2D78
2C72:  BRA    2C8A
2C74:  BTFSC  x40.7
2C76:  BRA    2C90
2C78:  BCF    FD8.0
2C7A:  RLCF   x3D,F
2C7C:  RLCF   x3E,F
2C7E:  RLCF   x3F,F
2C80:  RLCF   x40,F
2C82:  DECF   00,F
2C84:  BTFSC  FD8.2
2C86:  BRA    2D78
2C88:  BRA    2C74
2C8A:  BSF    x3C.7
2C8C:  BRA    2CE0
2C8E:  BCF    x3C.7
2C90:  MOVFF  237,23B
2C94:  BTFSS  x37.7
2C96:  BRA    2C9C
2C98:  BSF    x40.7
2C9A:  BRA    2D6A
2C9C:  BCF    x40.7
2C9E:  BRA    2D6A
2CA0:  MOVFF  237,240
2CA4:  BSF    x40.7
2CA6:  MOVFF  238,23F
2CAA:  MOVFF  239,23E
2CAE:  BTFSS  x3B.7
2CB0:  BRA    2CBA
2CB2:  BCF    x40.7
2CB4:  BSF    x3C.2
2CB6:  BRA    2D82
2CB8:  BCF    x3C.2
2CBA:  CLRF   x3D
2CBC:  BCF    x3A.0
2CBE:  MOVLW  02
2CC0:  MOVWF  FEA
2CC2:  MOVLW  35
2CC4:  MOVWF  FE9
2CC6:  BRA    2DA8
2CC8:  BTFSC  x3B.7
2CCA:  BRA    2D04
2CCC:  MOVFF  233,23B
2CD0:  BTFSS  x3A.0
2CD2:  BRA    2CE0
2CD4:  RRCF   x40,F
2CD6:  RRCF   x3F,F
2CD8:  RRCF   x3E,F
2CDA:  RRCF   x3D,F
2CDC:  INCF   00,F
2CDE:  BZ    2D78
2CE0:  BTFSS  x3D.7
2CE2:  BRA    2CFA
2CE4:  INCF   x3E,F
2CE6:  BNZ   2CFA
2CE8:  INCF   x3F,F
2CEA:  BNZ   2CFA
2CEC:  INCF   x40,F
2CEE:  BNZ   2CFA
2CF0:  RRCF   x40,F
2CF2:  RRCF   x3F,F
2CF4:  RRCF   x3E,F
2CF6:  INCF   00,F
2CF8:  BZ    2D78
2CFA:  BTFSC  x3C.6
2CFC:  BRA    2C06
2CFE:  BTFSC  x3C.7
2D00:  BRA    2C8E
2D02:  BRA    2D3C
2D04:  MOVLW  80
2D06:  XORWF  x40,F
2D08:  BTFSS  x40.7
2D0A:  BRA    2D14
2D0C:  BRA    2D82
2D0E:  MOVFF  237,23B
2D12:  BRA    2D28
2D14:  MOVFF  233,23B
2D18:  MOVF   x40,F
2D1A:  BNZ   2D28
2D1C:  MOVF   x3F,F
2D1E:  BNZ   2D28
2D20:  MOVF   x3E,F
2D22:  BNZ   2D28
2D24:  CLRF   00
2D26:  BRA    2D6A
2D28:  BTFSC  x40.7
2D2A:  BRA    2D3C
2D2C:  BCF    FD8.0
2D2E:  RLCF   x3D,F
2D30:  RLCF   x3E,F
2D32:  RLCF   x3F,F
2D34:  RLCF   x40,F
2D36:  DECFSZ 00,F
2D38:  BRA    2D28
2D3A:  BRA    2D78
2D3C:  BTFSS  x3B.7
2D3E:  BRA    2D44
2D40:  BSF    x40.7
2D42:  BRA    2D6A
2D44:  BCF    x40.7
2D46:  BRA    2D6A
2D48:  MOVFF  236,00
2D4C:  MOVFF  237,240
2D50:  MOVFF  238,23F
2D54:  MOVFF  239,23E
2D58:  BRA    2D6A
2D5A:  MOVFF  232,00
2D5E:  MOVFF  233,240
2D62:  MOVFF  234,23F
2D66:  MOVFF  235,23E
2D6A:  MOVFF  240,01
2D6E:  MOVFF  23F,02
2D72:  MOVFF  23E,03
2D76:  BRA    2DE0
2D78:  CLRF   00
2D7A:  CLRF   01
2D7C:  CLRF   02
2D7E:  CLRF   03
2D80:  BRA    2DE0
2D82:  CLRF   x3D
2D84:  COMF   x3E,F
2D86:  COMF   x3F,F
2D88:  COMF   x40,F
2D8A:  COMF   x3D,F
2D8C:  INCF   x3D,F
2D8E:  BNZ   2D9A
2D90:  INCF   x3E,F
2D92:  BNZ   2D9A
2D94:  INCF   x3F,F
2D96:  BNZ   2D9A
2D98:  INCF   x40,F
2D9A:  BTFSC  x3C.0
2D9C:  BRA    2BC2
2D9E:  BTFSC  x3C.1
2DA0:  BRA    2C4A
2DA2:  BTFSC  x3C.2
2DA4:  BRA    2CB8
2DA6:  BRA    2D0E
2DA8:  MOVF   FEF,W
2DAA:  ADDWF  x3E,F
2DAC:  BNC   2DB8
2DAE:  INCF   x3F,F
2DB0:  BNZ   2DB8
2DB2:  INCF   x40,F
2DB4:  BTFSC  FD8.2
2DB6:  BSF    x3A.0
2DB8:  MOVF   FED,F
2DBA:  MOVF   FEF,W
2DBC:  ADDWF  x3F,F
2DBE:  BNC   2DC6
2DC0:  INCF   x40,F
2DC2:  BTFSC  FD8.2
2DC4:  BSF    x3A.0
2DC6:  MOVF   FED,F
2DC8:  MOVF   FEF,W
2DCA:  BTFSC  FEF.7
2DCC:  BRA    2DD0
2DCE:  XORLW  80
2DD0:  ADDWF  x40,F
2DD2:  BTFSC  FD8.0
2DD4:  BSF    x3A.0
2DD6:  BTFSC  x3C.4
2DD8:  BRA    2BD2
2DDA:  BTFSC  x3C.5
2DDC:  BRA    2C5A
2DDE:  BRA    2CC8
2DE0:  MOVLB  0
2DE2:  RETURN 0
*
2F3E:  MOVF   FE9,W
2F40:  MOVLB  2
2F42:  MOVWF  x35
2F44:  MOVF   x34,W
2F46:  MOVWF  x37
2F48:  BZ    2F82
2F4A:  MOVFF  233,240
2F4E:  MOVFF  232,23F
2F52:  MOVFF  231,23E
2F56:  MOVFF  230,23D
2F5A:  CLRF   x44
2F5C:  CLRF   x43
2F5E:  MOVLW  20
2F60:  MOVWF  x42
2F62:  MOVLW  82
2F64:  MOVWF  x41
2F66:  MOVLB  0
2F68:  CALL   1988
2F6C:  MOVFF  03,233
2F70:  MOVFF  02,232
2F74:  MOVFF  01,231
2F78:  MOVFF  00,230
2F7C:  MOVLB  2
2F7E:  DECFSZ x37,F
2F80:  BRA    2F4A
2F82:  MOVFF  233,240
2F86:  MOVFF  232,23F
2F8A:  MOVFF  231,23E
2F8E:  MOVFF  230,23D
2F92:  MOVLB  0
2F94:  CALL   1A7E
2F98:  MOVFF  03,233
2F9C:  MOVFF  02,232
2FA0:  MOVFF  01,231
2FA4:  MOVFF  00,230
2FA8:  MOVLB  2
2FAA:  BTFSS  x33.7
2FAC:  BRA    2FC8
2FAE:  DECF   x35,F
2FB0:  BSF    x35.5
2FB2:  COMF   x30,F
2FB4:  COMF   x31,F
2FB6:  COMF   x32,F
2FB8:  COMF   x33,F
2FBA:  INCF   x30,F
2FBC:  BTFSC  FD8.2
2FBE:  INCF   x31,F
2FC0:  BTFSC  FD8.2
2FC2:  INCF   x32,F
2FC4:  BTFSC  FD8.2
2FC6:  INCF   x33,F
2FC8:  MOVLW  3B
2FCA:  MOVWF  x3C
2FCC:  MOVLW  9A
2FCE:  MOVWF  x3B
2FD0:  MOVLW  CA
2FD2:  MOVWF  x3A
2FD4:  CLRF   x39
2FD6:  MOVLW  0A
2FD8:  MOVWF  x37
2FDA:  MOVF   x34,W
2FDC:  BTFSC  FD8.2
2FDE:  INCF   x35,F
2FE0:  BSF    FD8.1
2FE2:  MOVLW  02
2FE4:  MOVWF  FEA
2FE6:  MOVLW  30
2FE8:  MOVWF  FE9
2FEA:  MOVFF  233,240
2FEE:  MOVFF  232,23F
2FF2:  MOVFF  231,23E
2FF6:  MOVFF  230,23D
2FFA:  MOVFF  23C,244
2FFE:  MOVFF  23B,243
3002:  MOVFF  23A,242
3006:  MOVFF  239,241
300A:  MOVLB  0
300C:  CALL   1332
3010:  MOVF   01,W
3012:  MOVF   00,F
3014:  BNZ   303C
3016:  MOVLB  2
3018:  INCF   x34,W
301A:  SUBWF  x37,W
301C:  BTFSS  FD8.2
301E:  BRA    3024
3020:  MOVLB  0
3022:  BRA    303C
3024:  MOVF   x35,W
3026:  BZ    3042
3028:  ANDLW  0F
302A:  SUBWF  x37,W
302C:  BZ    3030
302E:  BC    30B8
3030:  BTFSC  x35.7
3032:  BRA    30B8
3034:  BTFSC  x35.6
3036:  BRA    3042
3038:  MOVLW  20
303A:  BRA    30AA
303C:  MOVLW  20
303E:  MOVLB  2
3040:  ANDWF  x35,F
3042:  BTFSS  x35.5
3044:  BRA    3064
3046:  BCF    x35.5
3048:  MOVF   x34,W
304A:  BTFSS  FD8.2
304C:  DECF   x35,F
304E:  MOVF   00,W
3050:  MOVWF  x35
3052:  MOVLW  2D
3054:  MOVWF  x3D
3056:  MOVLB  0
3058:  CALL   279A
305C:  MOVLB  2
305E:  MOVF   x35,W
3060:  MOVWF  00
3062:  CLRF   x35
3064:  MOVF   x34,W
3066:  SUBWF  x37,W
3068:  BNZ   3084
306A:  MOVF   00,W
306C:  MOVWF  x35
306E:  MOVLW  2E
3070:  MOVWF  x3D
3072:  MOVLB  0
3074:  CALL   279A
3078:  MOVLB  2
307A:  MOVF   x35,W
307C:  MOVWF  00
307E:  MOVLW  20
3080:  ANDWF  x35,F
3082:  MOVLW  00
3084:  MOVLW  30
3086:  BTFSS  x35.5
3088:  BRA    30AA
308A:  BCF    x35.5
308C:  MOVF   x34,W
308E:  BTFSS  FD8.2
3090:  DECF   x35,F
3092:  MOVF   00,W
3094:  MOVWF  x35
3096:  MOVLW  2D
3098:  MOVWF  x3D
309A:  MOVLB  0
309C:  CALL   279A
30A0:  MOVLB  2
30A2:  MOVF   x35,W
30A4:  MOVWF  00
30A6:  CLRF   x35
30A8:  MOVLW  30
30AA:  ADDWF  00,F
30AC:  MOVFF  00,23D
30B0:  MOVLB  0
30B2:  CALL   279A
30B6:  MOVLB  2
30B8:  BCF    FD8.1
30BA:  MOVFF  23C,240
30BE:  MOVFF  23B,23F
30C2:  MOVFF  23A,23E
30C6:  MOVFF  239,23D
30CA:  CLRF   x44
30CC:  CLRF   x43
30CE:  CLRF   x42
30D0:  MOVLW  0A
30D2:  MOVWF  x41
30D4:  MOVLB  0
30D6:  CALL   1332
30DA:  MOVFF  03,23C
30DE:  MOVFF  02,23B
30E2:  MOVFF  01,23A
30E6:  MOVFF  00,239
30EA:  MOVLB  2
30EC:  DECFSZ x37,F
30EE:  BRA    2FE0
30F0:  MOVLB  0
30F2:  GOTO   314A (RETURN)
*
319C:  TBLRD*+
319E:  MOVF   FF5,F
31A0:  BZ    31BC
31A2:  MOVFF  FF6,21B
31A6:  MOVFF  FF7,21C
31AA:  MOVFF  FF5,23D
31AE:  CALL   279A
31B2:  MOVFF  21B,FF6
31B6:  MOVFF  21C,FF7
31BA:  BRA    319C
31BC:  GOTO   4350 (RETURN)
*
32A0:  CLRF   01
32A2:  CLRF   02
32A4:  CLRF   00
32A6:  CLRF   03
32A8:  MOVLB  2
32AA:  MOVF   x1C,W
32AC:  BNZ   32B2
32AE:  MOVF   x1B,W
32B0:  BZ    32E2
32B2:  MOVLW  10
32B4:  MOVWF  x1D
32B6:  BCF    FD8.0
32B8:  RLCF   x19,F
32BA:  RLCF   x1A,F
32BC:  RLCF   00,F
32BE:  RLCF   03,F
32C0:  MOVF   x1C,W
32C2:  SUBWF  03,W
32C4:  BNZ   32CA
32C6:  MOVF   x1B,W
32C8:  SUBWF  00,W
32CA:  BNC   32DA
32CC:  MOVF   x1B,W
32CE:  SUBWF  00,F
32D0:  BTFSS  FD8.0
32D2:  DECF   03,F
32D4:  MOVF   x1C,W
32D6:  SUBWF  03,F
32D8:  BSF    FD8.0
32DA:  RLCF   01,F
32DC:  RLCF   02,F
32DE:  DECFSZ x1D,F
32E0:  BRA    32B6
32E2:  MOVLB  0
32E4:  RETURN 0
32E6:  MOVF   FEF,F
32E8:  BZ    330A
32EA:  MOVFF  FEA,21C
32EE:  MOVFF  FE9,21B
32F2:  MOVFF  FEF,23D
32F6:  CALL   279A
32FA:  MOVFF  21C,FEA
32FE:  MOVFF  21B,FE9
3302:  INCF   FE9,F
3304:  BTFSC  FD8.2
3306:  INCF   FEA,F
3308:  BRA    32E6
330A:  GOTO   4C58 (RETURN)
*
4F7E:  MOVFF  FF2,0D
4F82:  BCF    FF2.7
4F84:  ADDWF  FE8,W
4F86:  CLRF   FF7
4F88:  RLCF   FF7,F
4F8A:  ADDLW  A3
4F8C:  MOVWF  FF6
4F8E:  MOVLW  4F
4F90:  ADDWFC FF7,F
4F92:  TBLRD*-
4F94:  MOVF   FF5,W
4F96:  MOVWF  FFA
4F98:  TBLRD*
4F9A:  MOVF   FF5,W
4F9C:  BTFSC  0D.7
4F9E:  BSF    FF2.7
4FA0:  MOVWF  FF9
4FA2:  DATA E8,3F
4FA4:  DATA 0A,3F
4FA6:  DATA FA,3D
4FA8:  DATA 02,41
4FAA:  DATA FC,40
4FAC:  DATA F6,3B
4FAE:  DATA 02,41
4FB0:  DATA 02,41
4FB2:  DATA 02,41
4FB4:  DATA 02,41
4FB6:  DATA 02,41
4FB8:  DATA EC,40
4FBA:  DATA 02,41
4FBC:  DATA 02,41
4FBE:  DATA 02,41
4FC0:  DATA 76,3A
*
569E:  MOVLB  1
56A0:  BTFSC  xFC.7
56A2:  BRA    56C8
56A4:  MOVLW  0F
56A6:  MOVWF  00
56A8:  SWAPF  xFB,W
56AA:  ANDWF  00,F
56AC:  MOVLW  0A
56AE:  SUBWF  00,W
56B0:  BC    56B8
56B2:  MOVLW  30
56B4:  ADDWF  00,F
56B6:  BRA    56BC
56B8:  MOVF   xFC,W
56BA:  ADDWF  00,F
56BC:  MOVFF  00,23D
56C0:  MOVLB  0
56C2:  CALL   279A
56C6:  MOVLB  1
56C8:  MOVLW  0F
56CA:  ANDWF  xFB,F
56CC:  MOVLW  0A
56CE:  SUBWF  xFB,W
56D0:  BC    56D6
56D2:  MOVLW  30
56D4:  BRA    56DA
56D6:  BCF    xFC.7
56D8:  MOVF   xFC,W
56DA:  ADDWF  xFB,F
56DC:  MOVFF  1FB,23D
56E0:  MOVLB  0
56E2:  CALL   279A
56E6:  RETURN 0
*
62F2:  MOVFF  FF2,0D
62F6:  BCF    FF2.7
62F8:  ADDWF  FE8,W
62FA:  CLRF   FF7
62FC:  RLCF   FF7,F
62FE:  ADDLW  17
6300:  MOVWF  FF6
6302:  MOVLW  63
6304:  ADDWFC FF7,F
6306:  TBLRD*-
6308:  MOVF   FF5,W
630A:  MOVWF  FFA
630C:  TBLRD*
630E:  MOVF   FF5,W
6310:  BTFSC  0D.7
6312:  BSF    FF2.7
6314:  MOVWF  FF9
6316:  DATA 96,61
6318:  DATA 9C,61
631A:  DATA CE,61
631C:  DATA EE,62
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... //#define MAIN_ADDRESS 0x2700 
.................... //#include <boot.h> 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0B2E:  MOVLW  04
0B30:  MOVLB  2
0B32:  SUBWF  x5F,F
0B34:  BNC   0B4A
0B36:  MOVLW  02
0B38:  MOVWF  FEA
0B3A:  MOVLW  5F
0B3C:  MOVWF  FE9
0B3E:  MOVF   FEF,W
0B40:  BZ    0B4A
0B42:  BRA    0B46
0B44:  NOP   
0B46:  DECFSZ FEF,F
0B48:  BRA    0B44
0B4A:  MOVLB  0
0B4C:  RETURN 0
*
0DF4:  MOVLW  02
0DF6:  MOVWF  FEA
0DF8:  MOVLW  2D
0DFA:  MOVWF  FE9
0DFC:  MOVF   FEF,W
0DFE:  BZ    0E1C
0E00:  MOVLW  05
0E02:  MOVWF  01
0E04:  CLRF   00
0E06:  DECFSZ 00,F
0E08:  BRA    0E06
0E0A:  DECFSZ 01,F
0E0C:  BRA    0E04
0E0E:  MOVLW  2E
0E10:  MOVWF  00
0E12:  DECFSZ 00,F
0E14:  BRA    0E12
0E16:  BRA    0E18
0E18:  DECFSZ FEF,F
0E1A:  BRA    0E00
0E1C:  RETURN 0
.................... //#use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... #define VERSION "BA1520QTX V1.0" 
.................... #define VER 1 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           32000L       // in KHz   //was 10000 changed to 20000 1520Q 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
.................... //#define REFinMUL 		 2L 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... byte bitlow_power_level,bitpower_level;// VERSION 3.3 VP VL Change 29.02.2016 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0x2  //0010 - VOUT A 
.................... #define DAC_NEG_VOLT 0x6  //0110 - VOUT B 
.................... #define DAC_CONT_VOLT 0xA //1010 - VOUT C 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6  //was 6 yehuda 
....................  
.................... #define BINARY_STATUS_LENTGH 26 // requested be the client to be 26 bytes (16.11.16) 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... //UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... //UINT  TMR_SendStatus = 0;   //////////yehuda 1520Q cancel US,UT and BG  
.................... //UCHAR  SendStatusFlag = 0;  //////////yehuda 1520Q cancel US,UT and BG  
.................... //UCHAR  TMR_StartStatus = 0; //////////yehuda 1520Q cancel US,UT and BG  
.................... //UCHAR  StartStatusFlag = 0;   //////////yehuda 1520Q cancel US,UT and BG   
....................  
.................... UCHAR timerTick_1ms = 0; 
....................  
....................  
....................  
.................... //#bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... //#bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... //#bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... //#bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... //#bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... //#define RS485_EN  PIN_D5 
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define I_SENSE   PIN_B4     //was LED1 
.................... #define LED1      PIN_B5     //was LED2 
....................  
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
.................... #define FPGA_RSTN PIN_C5 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
.................... 	   UINT  cont_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
....................        UINT  cot; 
....................        UINT  rc; 
....................        UINT  rp; 
....................        UCHAR UART_Time; // VERSION 3.3 UT 
.................... //       UCHAR UART_Status; // VERSION 3.3 US 17.03.2016    //////////yehuda 1520Q cancel US,UT and BG   
....................        byte bitlow_power_level;// VERSION 3.3  VL Change 21.03.2016 
....................        byte bitpower_level;// VERSION 3.3 VP Change 21.03.2016 
....................        UINT	Block_per_second; // VERSION 3.3  Change 23.03.2016 Data block send speed  
....................        UINT setup_version; // the version of this specific setup 
.................... 	   //POWER_TRANS1 Ptrans1[23];  //1520Q yehuda make FFWR table configurable 
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT revp;// VERSION 3.3 Revers Power 0-good 1-bad 
.................... //SINT current_temperature;		//////////yehuda 1520Q cancel US,UT and BG  
.................... UINT current_power;// VERSION 3.3  FFWR 02.05.16 
.................... UINT gl_current_power_level = 0; 
.................... UINT gl_current_power_en_value = 0; 
.................... //SINT stay_on =0;		//////////yehuda 1520Q cancel US,UT and BG  
.................... UINT  tx_block_len;   // , TX_Counter = 0;  //////////yehuda 1520Q cancel US,UT and BG cancel TX_Counter 
.................... UINT  status_tx_index; 
.................... UCHAR status_buffer[BINARY_STATUS_LENTGH];  
....................  
.................... UCHAR ttccp_login = 1;		//yehuda cancel LI17592 
....................  
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
.................... void COM1_send_block(UINT len);// VERSION 3.3 VP Change 21.03.2016 
.................... UINT convert_power(UINT analog);// VERSION 3.3 VP Change 30.03.2016 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5314.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5314 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5314(int8 channel, int16 level) 
.................... { 
.................... 	output_low(DA2_SYN); 
*
0F62:  BCF    F89.2
.................... 	 
.................... //	if (channel) 
.................... //    output_high(DA2_DAT);    // send to VOUTB 
.................... //	else 
.................... //    output_low(DA2_DAT);    // send to VOUTA 
.................... //channel is 4 bit wide  
.................... //bit 3 - address A1 
.................... //bit 2 - address A0 
.................... //bit 1 - if 1 normal operation, if 0 power down (PD) 
.................... //bit 0 - if 1 only address input regs updated no change in the content, if 0 all updated on complition of write 
.................... 	 
.................... 	#ifdef SW_SPI 
.................... 		if(channel & 0x08)			//send bit 15 - A1 
0F64:  MOVLB  2
0F66:  BTFSS  x1D.3
0F68:  BRA    0F6E
.................... 		output_high(DA2_DAT); 
0F6A:  BSF    F89.4
0F6C:  BRA    0F70
.................... 		else  
.................... 		output_low(DA2_DAT); 
0F6E:  BCF    F89.4
.................... 		output_high(DA2_CLK);   
0F70:  BSF    F89.3
.................... 		delay_cycles(15); 
0F72:  MOVLW  04
0F74:  MOVWF  00
0F76:  DECFSZ 00,F
0F78:  BRA    0F76
0F7A:  BRA    0F7C
.................... 		output_low(DA2_CLK); 
0F7C:  BCF    F89.3
.................... 		delay_cycles(15); 
0F7E:  MOVLW  04
0F80:  MOVWF  00
0F82:  DECFSZ 00,F
0F84:  BRA    0F82
0F86:  BRA    0F88
.................... 		 
.................... 		if(channel & 0x04)			//send bit 14 - A0 
0F88:  BTFSS  x1D.2
0F8A:  BRA    0F90
.................... 		output_high(DA2_DAT); 
0F8C:  BSF    F89.4
0F8E:  BRA    0F92
.................... 		else  
.................... 		output_low(DA2_DAT); 
0F90:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
0F92:  BSF    F89.3
.................... 		delay_cycles(15); 
0F94:  MOVLW  04
0F96:  MOVWF  00
0F98:  DECFSZ 00,F
0F9A:  BRA    0F98
0F9C:  BRA    0F9E
.................... 		output_low(DA2_CLK); 
0F9E:  BCF    F89.3
.................... 		delay_cycles(15); 
0FA0:  MOVLW  04
0FA2:  MOVWF  00
0FA4:  DECFSZ 00,F
0FA6:  BRA    0FA4
0FA8:  BRA    0FAA
.................... 		 
.................... 		if(channel & 0x02)			//send bit 13 - PD - if 1 normal operation, if 0 power down (PD) 
0FAA:  BTFSS  x1D.1
0FAC:  BRA    0FB2
.................... 		output_high(DA2_DAT); 
0FAE:  BSF    F89.4
0FB0:  BRA    0FB4
.................... 		else  
.................... 		output_low(DA2_DAT); 
0FB2:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
0FB4:  BSF    F89.3
.................... 		delay_cycles(15); 
0FB6:  MOVLW  04
0FB8:  MOVWF  00
0FBA:  DECFSZ 00,F
0FBC:  BRA    0FBA
0FBE:  BRA    0FC0
.................... 		output_low(DA2_CLK); 
0FC0:  BCF    F89.3
.................... 		delay_cycles(15); 
0FC2:  MOVLW  04
0FC4:  MOVWF  00
0FC6:  DECFSZ 00,F
0FC8:  BRA    0FC6
0FCA:  BRA    0FCC
.................... 		 
.................... 		if(channel & 0x01)			//send bit 12 - LDAC - if 1 only address input regs updated no change in the content, if 0 all updated on complition of write 
0FCC:  BTFSS  x1D.0
0FCE:  BRA    0FD4
.................... 		output_high(DA2_DAT); 
0FD0:  BSF    F89.4
0FD2:  BRA    0FD6
.................... 		else  
.................... 		output_low(DA2_DAT); 
0FD4:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
0FD6:  BSF    F89.3
.................... 		delay_cycles(15); 
0FD8:  MOVLW  04
0FDA:  MOVWF  00
0FDC:  DECFSZ 00,F
0FDE:  BRA    0FDC
0FE0:  BRA    0FE2
.................... 		output_low(DA2_CLK); 
0FE2:  BCF    F89.3
.................... 		delay_cycles(15); 
0FE4:  MOVLW  04
0FE6:  MOVWF  00
0FE8:  DECFSZ 00,F
0FEA:  BRA    0FE8
0FEC:  BRA    0FEE
.................... 		 
.................... 		 
.................... 		output_high(DA2_CLK);    	//send bit 11 DATA 
0FEE:  BSF    F89.3
.................... 		if (level & 0x0200) 
0FF0:  ANDLW  00
0FF2:  MOVWF  00
0FF4:  MOVF   x1F,W
0FF6:  ANDLW  02
0FF8:  MOVWF  03
0FFA:  MOVF   00,W
0FFC:  IORWF  03,W
0FFE:  BZ    1004
.................... 		output_high(DA2_DAT); 
1000:  BSF    F89.4
1002:  BRA    1006
.................... 		else 
.................... 		output_low(DA2_DAT); 
1004:  BCF    F89.4
.................... 		delay_cycles(15); 
1006:  MOVLW  04
1008:  MOVWF  00
100A:  DECFSZ 00,F
100C:  BRA    100A
100E:  BRA    1010
.................... 		output_low(DA2_CLK); 
1010:  BCF    F89.3
.................... 		delay_cycles(15); 
1012:  MOVLW  04
1014:  MOVWF  00
1016:  DECFSZ 00,F
1018:  BRA    1016
101A:  BRA    101C
.................... 		 
.................... 		output_high(DA2_CLK);  		//send bit 10 DATA 
101C:  BSF    F89.3
.................... 		if (level & 0x0100) 
101E:  ANDLW  00
1020:  MOVWF  00
1022:  MOVF   x1F,W
1024:  ANDLW  01
1026:  MOVWF  03
1028:  MOVF   00,W
102A:  IORWF  03,W
102C:  BZ    1032
.................... 		output_high(DA2_DAT); 
102E:  BSF    F89.4
1030:  BRA    1034
.................... 		else 
.................... 		output_low(DA2_DAT); 
1032:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
1034:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 9 DATA 
1036:  BSF    F89.3
.................... 		if (level & 0x0080) 
1038:  MOVF   x1E,W
103A:  ANDLW  80
103C:  MOVWF  00
103E:  CLRF   03
1040:  MOVF   00,W
1042:  IORWF  03,W
1044:  BZ    104A
.................... 		output_high(DA2_DAT); 
1046:  BSF    F89.4
1048:  BRA    104C
.................... 		else 
.................... 		output_low(DA2_DAT); 
104A:  BCF    F89.4
.................... 		delay_cycles(15); 
104C:  MOVLW  04
104E:  MOVWF  00
1050:  DECFSZ 00,F
1052:  BRA    1050
1054:  BRA    1056
.................... 		output_low(DA2_CLK); 
1056:  BCF    F89.3
.................... 		delay_cycles(15); 
1058:  MOVLW  04
105A:  MOVWF  00
105C:  DECFSZ 00,F
105E:  BRA    105C
1060:  BRA    1062
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 8 DATA 
1062:  BSF    F89.3
.................... 		if (level & 0x0040) 
1064:  MOVF   x1E,W
1066:  ANDLW  40
1068:  MOVWF  00
106A:  CLRF   03
106C:  MOVF   00,W
106E:  IORWF  03,W
1070:  BZ    1076
.................... 		output_high(DA2_DAT); 
1072:  BSF    F89.4
1074:  BRA    1078
.................... 		else 
.................... 		output_low(DA2_DAT); 
1076:  BCF    F89.4
.................... 		delay_cycles(15); 
1078:  MOVLW  04
107A:  MOVWF  00
107C:  DECFSZ 00,F
107E:  BRA    107C
1080:  BRA    1082
.................... 		output_low(DA2_CLK); 
1082:  BCF    F89.3
.................... 		delay_cycles(15); 
1084:  MOVLW  04
1086:  MOVWF  00
1088:  DECFSZ 00,F
108A:  BRA    1088
108C:  BRA    108E
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 7 DATA 
108E:  BSF    F89.3
.................... 		if (level & 0x0020) 
1090:  MOVF   x1E,W
1092:  ANDLW  20
1094:  MOVWF  00
1096:  CLRF   03
1098:  MOVF   00,W
109A:  IORWF  03,W
109C:  BZ    10A2
.................... 		output_high(DA2_DAT); 
109E:  BSF    F89.4
10A0:  BRA    10A4
.................... 		else 
.................... 		output_low(DA2_DAT); 
10A2:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
10A4:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 6 DATA 
10A6:  BSF    F89.3
.................... 		if (level & 0x0010) 
10A8:  MOVF   x1E,W
10AA:  ANDLW  10
10AC:  MOVWF  00
10AE:  CLRF   03
10B0:  MOVF   00,W
10B2:  IORWF  03,W
10B4:  BZ    10BA
.................... 		output_high(DA2_DAT); 
10B6:  BSF    F89.4
10B8:  BRA    10BC
.................... 		else 
.................... 		output_low(DA2_DAT); 
10BA:  BCF    F89.4
.................... 		delay_cycles(15); 
10BC:  MOVLW  04
10BE:  MOVWF  00
10C0:  DECFSZ 00,F
10C2:  BRA    10C0
10C4:  BRA    10C6
.................... 		output_low(DA2_CLK); 
10C6:  BCF    F89.3
.................... 		delay_cycles(15); 
10C8:  MOVLW  04
10CA:  MOVWF  00
10CC:  DECFSZ 00,F
10CE:  BRA    10CC
10D0:  BRA    10D2
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 5 DATA 
10D2:  BSF    F89.3
.................... 		if (level & 0x0008) 
10D4:  MOVF   x1E,W
10D6:  ANDLW  08
10D8:  MOVWF  00
10DA:  CLRF   03
10DC:  MOVF   00,W
10DE:  IORWF  03,W
10E0:  BZ    10E6
.................... 		output_high(DA2_DAT); 
10E2:  BSF    F89.4
10E4:  BRA    10E8
.................... 		else 
.................... 		output_low(DA2_DAT); 
10E6:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
10E8:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 4 DATA 
10EA:  BSF    F89.3
.................... 		if (level & 0x0004) 
10EC:  MOVF   x1E,W
10EE:  ANDLW  04
10F0:  MOVWF  00
10F2:  CLRF   03
10F4:  MOVF   00,W
10F6:  IORWF  03,W
10F8:  BZ    10FE
.................... 		output_high(DA2_DAT); 
10FA:  BSF    F89.4
10FC:  BRA    1100
.................... 		else 
.................... 		output_low(DA2_DAT); 
10FE:  BCF    F89.4
.................... 		delay_cycles(15); 
1100:  MOVLW  04
1102:  MOVWF  00
1104:  DECFSZ 00,F
1106:  BRA    1104
1108:  BRA    110A
.................... 		output_low(DA2_CLK); 
110A:  BCF    F89.3
.................... 		delay_cycles(15); 
110C:  MOVLW  04
110E:  MOVWF  00
1110:  DECFSZ 00,F
1112:  BRA    1110
1114:  BRA    1116
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 3 DATA 
1116:  BSF    F89.3
.................... 		if (level & 0x0002) 
1118:  MOVF   x1E,W
111A:  ANDLW  02
111C:  MOVWF  00
111E:  CLRF   03
1120:  MOVF   00,W
1122:  IORWF  03,W
1124:  BZ    112A
.................... 		output_high(DA2_DAT); 
1126:  BSF    F89.4
1128:  BRA    112C
.................... 		else 
.................... 		output_low(DA2_DAT); 
112A:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
112C:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 2 DATA 
112E:  BSF    F89.3
.................... 		if (level & 0x0001) 
1130:  MOVF   x1E,W
1132:  ANDLW  01
1134:  MOVWF  00
1136:  CLRF   03
1138:  MOVF   00,W
113A:  IORWF  03,W
113C:  BZ    1142
.................... 		output_high(DA2_DAT); 
113E:  BSF    F89.4
1140:  BRA    1144
.................... 		else 
.................... 		output_low(DA2_DAT); 
1142:  BCF    F89.4
.................... 		delay_cycles(15); 
1144:  MOVLW  04
1146:  MOVWF  00
1148:  DECFSZ 00,F
114A:  BRA    1148
114C:  BRA    114E
.................... 		output_low(DA2_CLK); 
114E:  BCF    F89.3
.................... 		delay_cycles(15); 
1150:  MOVLW  04
1152:  MOVWF  00
1154:  DECFSZ 00,F
1156:  BRA    1154
1158:  BRA    115A
.................... 		 
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 1 X dont care 
115A:  BSF    F89.3
.................... 		delay_cycles(15); 
115C:  MOVLW  04
115E:  MOVWF  00
1160:  DECFSZ 00,F
1162:  BRA    1160
1164:  BRA    1166
.................... 		output_low(DA2_CLK); 
1166:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 0 X dont care 
1168:  BSF    F89.3
.................... 		delay_cycles(15); 
116A:  MOVLW  04
116C:  MOVWF  00
116E:  DECFSZ 00,F
1170:  BRA    116E
1172:  BRA    1174
.................... 		delay_cycles(15); 
1174:  MOVLW  04
1176:  MOVWF  00
1178:  DECFSZ 00,F
117A:  BRA    1178
117C:  BRA    117E
.................... 		output_low(DA2_CLK); 
117E:  BCF    F89.3
.................... 		delay_cycles(15); 
1180:  MOVLW  04
1182:  MOVWF  00
1184:  DECFSZ 00,F
1186:  BRA    1184
1188:  BRA    118A
.................... 		#else						//this else is for #ifdef SW_SPI above   
.................... 		level = (level << 2) | 0x8000; 
.................... 		SPI2BUF = (AD5314,make8(level,1)); 
.................... 		delay_cycles(15); 
.................... 		SPI2BUF = (AD5314,make8(level,0)); 
.................... 		delay_cycles(15); 
.................... 	#endif 
.................... 	 
.................... 	output_high(DA2_SYN); 
118A:  BSF    F89.2
.................... 	delay_cycles(15); 
118C:  MOVLW  04
118E:  MOVWF  00
1190:  DECFSZ 00,F
1192:  BRA    1190
1194:  BRA    1196
.................... 	output_low(DA2_LAT); 
1196:  BCF    F89.1
.................... 	delay_cycles(15); 
1198:  MOVLW  04
119A:  MOVWF  00
119C:  DECFSZ 00,F
119E:  BRA    119C
11A0:  BRA    11A2
.................... 	output_high(DA2_LAT); 
11A2:  BSF    F89.1
.................... 	delay_cycles(15); 
11A4:  MOVLW  04
11A6:  MOVWF  00
11A8:  DECFSZ 00,F
11AA:  BRA    11A8
11AC:  BRA    11AE
11AE:  MOVLB  0
11B0:  RETURN 0
.................... } 
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
.................... { 
.................... 	UCHAR dout, ix; 
.................... 	output_low(D2A_CSB); 
*
59FC:  BCF    F8A.1
.................... 	addr |= 0x80; 
59FE:  MOVLB  1
5A00:  BSF    xFB.7
.................... 	for (ix = 0; ix < 8; ix++, addr <<= 1) 
5A02:  CLRF   xFD
5A04:  MOVF   xFD,W
5A06:  SUBLW  07
5A08:  BNC   5A30
....................     { 
.................... 		output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5A0A:  MOVF   xFB,W
5A0C:  ANDLW  80
5A0E:  BNZ   5A14
5A10:  BCF    F8C.4
5A12:  BRA    5A16
5A14:  BSF    F8C.4
.................... 		delay_us(1); 
5A16:  BRA    5A18
5A18:  BRA    5A1A
.................... 		output_high(D2A_SCLK); 
5A1A:  BSF    F8C.0
.................... 		delay_us(1); 
5A1C:  BRA    5A1E
5A1E:  BRA    5A20
.................... 		output_low(D2A_SCLK); 
5A20:  BCF    F8C.0
.................... 		delay_us(1); 
5A22:  BRA    5A24
5A24:  BRA    5A26
5A26:  MOVF   xFD,W
5A28:  INCF   xFD,F
5A2A:  BCF    FD8.0
5A2C:  RLCF   xFB,F
5A2E:  BRA    5A04
.................... 	} 
.................... 	for (ix = 0; ix < 8; ix++) 
5A30:  CLRF   xFD
5A32:  MOVF   xFD,W
5A34:  SUBLW  07
5A36:  BNC   5A52
....................     { 
.................... 		output_high(D2A_SCLK); 
5A38:  BSF    F8C.0
.................... 		delay_us(1); 
5A3A:  BRA    5A3C
5A3C:  BRA    5A3E
.................... 		output_low(D2A_SCLK); 
5A3E:  BCF    F8C.0
.................... 		delay_us(1); 
5A40:  BRA    5A42
5A42:  BRA    5A44
.................... 		dout <<= 1; 
5A44:  BCF    FD8.0
5A46:  RLCF   xFC,F
.................... 		if (input(D2A_MISO)) 
5A48:  BTFSS  F83.1
5A4A:  BRA    5A4E
.................... 		dout |= 1; 
5A4C:  BSF    xFC.0
5A4E:  INCF   xFD,F
5A50:  BRA    5A32
.................... 	} 
.................... 	output_high(D2A_CSB); 
5A52:  BSF    F8A.1
.................... 	return dout; 
5A54:  MOVFF  1FC,01
5A58:  MOVLB  0
5A5A:  GOTO   5EAE (RETURN)
.................... } 
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
.................... { 
.................... 	UCHAR dout, ix; 
.................... 	output_low(D2A_CSB); 
*
512A:  BCF    F8A.1
.................... 	//  addr |= 0x80; 
.................... 	for (ix = 0; ix < 8; ix++, addr <<= 1) 
512C:  MOVLB  1
512E:  CLRF   xFE
5130:  MOVF   xFE,W
5132:  SUBLW  07
5134:  BNC   515C
....................     { 
.................... 		output_bit(D2A_MOSI, (addr & 0x80) != 0); 
5136:  MOVF   xFB,W
5138:  ANDLW  80
513A:  BNZ   5140
513C:  BCF    F8C.4
513E:  BRA    5142
5140:  BSF    F8C.4
.................... 		delay_us(1); 
5142:  BRA    5144
5144:  BRA    5146
.................... 		output_high(D2A_SCLK); 
5146:  BSF    F8C.0
.................... 		delay_us(1); 
5148:  BRA    514A
514A:  BRA    514C
.................... 		output_low(D2A_SCLK); 
514C:  BCF    F8C.0
.................... 		delay_us(1); 
514E:  BRA    5150
5150:  BRA    5152
5152:  MOVF   xFE,W
5154:  INCF   xFE,F
5156:  BCF    FD8.0
5158:  RLCF   xFB,F
515A:  BRA    5130
.................... 	} 
.................... 	for (ix = 0; ix < 8; ix++, din <<= 1) 
515C:  CLRF   xFE
515E:  MOVF   xFE,W
5160:  SUBLW  07
5162:  BNC   518A
....................     { 
.................... 		output_bit(D2A_MOSI, (din & 0x80) != 0); 
5164:  MOVF   xFC,W
5166:  ANDLW  80
5168:  BNZ   516E
516A:  BCF    F8C.4
516C:  BRA    5170
516E:  BSF    F8C.4
.................... 		delay_us(1); 
5170:  BRA    5172
5172:  BRA    5174
.................... 		output_high(D2A_SCLK); 
5174:  BSF    F8C.0
.................... 		delay_us(1); 
5176:  BRA    5178
5178:  BRA    517A
.................... 		output_low(D2A_SCLK); 
517A:  BCF    F8C.0
.................... 		delay_us(1); 
517C:  BRA    517E
517E:  BRA    5180
5180:  MOVF   xFE,W
5182:  INCF   xFE,F
5184:  BCF    FD8.0
5186:  RLCF   xFC,F
5188:  BRA    515E
.................... 	} 
.................... 	output_high(D2A_CSB); 
518A:  BSF    F8A.1
.................... 	return dout; 
518C:  MOVFF  1FD,01
5190:  MOVLB  0
5192:  RETURN 0
.................... } 
....................  
....................  
.................... #include "ADRF6703.c" 
.................... /* 
.................... 	REGISTERS FRO PLL ADF4350: 
.................... 	Flow= 2185MHz 
.................... 	Fhigh=2400MHz 
.................... 	Steps: 100KHz 
.................... 	Ref : 10MHz 
.................... 	Phase Detector: 10MHz 
.................... 	 
.................... 	REG0 = Calculated 
.................... 	REG1= Calculated 
.................... 	REG2=0x000002 
.................... 	REG3=0x70000b 
.................... 	REG4=0x02a7a4 
.................... 	REG5=0x0000e5 
.................... 	REG6=0x0000e5 
.................... 	REG7=0x1edd06 
.................... 	REg8=0x000007 
.................... 	 
.................... 	Examples for REG0, REG1: 
.................... 	2185MHz 
.................... 	REG0:DA8000 
.................... 	REG1: 8008191 
.................... 	 
.................... 	2300MHz 
.................... 	REG0:E60000 
.................... 	REG1: 8008191 
.................... 	 
.................... */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... //ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... ULONG  PLL_int, PLL_frac, PLL_mod; 
.................... /* 
.................... 	#define PLL_CLK       PIN_C2 
.................... 	#define PLL_DAT       PIN_C3 
.................... 	#define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
.................... { 
.................... 	UCHAR count; 
.................... 	for (count = 8; count ; count--, data <<= 1) 
*
1604:  MOVLW  08
1606:  MOVLB  2
1608:  MOVWF  x27
160A:  MOVF   x27,F
160C:  BZ    164A
....................     { 
.................... 		if (data & 0X80)                 
160E:  BTFSS  x26.7
1610:  BRA    1616
.................... 		output_high(PLL_DAT); 
1612:  BSF    F8B.3
1614:  BRA    1618
.................... 		else 
.................... 		output_low(PLL_DAT); 
1616:  BCF    F8B.3
.................... 		delay_us(10); 
1618:  MOVLW  0C
161A:  MOVWF  00
161C:  DECFSZ 00,F
161E:  BRA    161C
1620:  BRA    1622
1622:  NOP   
.................... 		output_high(PLL_CLK); 
1624:  BSF    F8B.2
.................... 		delay_us(10); 
1626:  MOVLW  0C
1628:  MOVWF  00
162A:  DECFSZ 00,F
162C:  BRA    162A
162E:  BRA    1630
1630:  NOP   
.................... 		output_low(PLL_CLK); 
1632:  BCF    F8B.2
.................... 		 
.................... 		delay_us(25); 
1634:  MOVLW  20
1636:  MOVWF  00
1638:  DECFSZ 00,F
163A:  BRA    1638
163C:  BRA    163E
163E:  NOP   
1640:  MOVF   x27,W
1642:  DECF   x27,F
1644:  BCF    FD8.0
1646:  RLCF   x26,F
1648:  BRA    160A
.................... 	} 
.................... 	output_low(PLL_DAT); 
164A:  BCF    F8B.3
.................... 	output_low(PLL_CLK); 
164C:  BCF    F8B.2
164E:  MOVLB  0
1650:  RETURN 0
.................... } 
....................  
.................... void PLL_send_word(ULONG prog) 
.................... { 
.................... 	restart_wdt(); 
1652:  CLRWDT
.................... 	disable_interrupts(GLOBAL); 
1654:  BCF    FF2.6
1656:  BCF    FF2.7
1658:  BTFSC  FF2.7
165A:  BRA    1656
.................... 	//PLL_send_bits(make8(prog, 3));               // send LSB 
.................... 	PLL_send_bits(make8(prog, 2));               // send LSB 
165C:  MOVFF  223,225
1660:  MOVFF  223,226
1664:  RCALL  1604
.................... 	PLL_send_bits(make8(prog, 1));               // send middle byte 
1666:  MOVFF  222,225
166A:  MOVFF  222,226
166E:  RCALL  1604
.................... 	PLL_send_bits(make8(prog, 0));               // send MSB 
1670:  MOVFF  221,225
1674:  MOVFF  221,226
1678:  RCALL  1604
.................... 	delay_us(40); 
167A:  MOVLW  34
167C:  MOVWF  00
167E:  DECFSZ 00,F
1680:  BRA    167E
1682:  BRA    1684
1684:  NOP   
.................... 	output_high(PLL_LAT);                 // latch 24 bits into register 
1686:  BSF    F8B.1
.................... 	delay_us(5); 
1688:  MOVLW  06
168A:  MOVWF  00
168C:  DECFSZ 00,F
168E:  BRA    168C
1690:  NOP   
.................... 	output_low(PLL_LAT);                 // latch 24 bits into register 
1692:  BCF    F8B.1
.................... 	output_low(PLL_DAT);                 // latch 24 bits into register 
1694:  BCF    F8B.3
.................... 	enable_interrupts(GLOBAL); 
1696:  MOVLW  C0
1698:  IORWF  FF2,F
.................... 	restart_wdt(); 
169A:  CLRWDT
169C:  RETURN 0
.................... } 
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... //const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
.................... //const ULONG PLL_REGISTERS[8] = { 0x0001e0L, 0x003201L, 0x000002L, 0x70000bL, 0x02a7a4L, 0x0000e5L, 0x1edd06L, 0x000007L }; 
.................... const ULONG PLL_REGISTERS[8] = { 0x0001c8L, 0x000c81L, 0x000642L, 0x70000bL, 0x02a7a4L, 0x0000e5L, 0x1edd06L, 0x000007L }; 
....................  
.................... void PLL_initialize(void) 
.................... { 
.................... 	ULONG prog; 
.................... 	UCHAR idx, count; 
.................... 	for (count = 0, idx = 7; count < 8; count++, idx--) 
*
2000:  MOVLB  1
2002:  CLRF   xB0
2004:  MOVLW  07
2006:  MOVWF  xAF
2008:  MOVF   xB0,W
200A:  SUBLW  07
200C:  BNC   207E
....................     { 
.................... 		prog = PLL_REGISTERS[idx]; 
200E:  MOVF   xAF,W
2010:  MULLW  04
2012:  MOVF   FF3,W
2014:  CLRF   03
2016:  MOVFF  FF2,1B1
201A:  BCF    FF2.7
201C:  MOVLB  0
201E:  CALL   00D2
2022:  TBLRD*+
2024:  MOVFF  FF5,01
2028:  TBLRD*+
202A:  MOVFF  FF5,02
202E:  TBLRD*+
2030:  MOVFF  FF5,03
2034:  MOVLB  1
2036:  BTFSC  xB1.7
2038:  BSF    FF2.7
203A:  MOVFF  03,1AE
203E:  MOVFF  02,1AD
2042:  MOVFF  01,1AC
2046:  MOVWF  xAB
.................... 		prog |= (ULONG)idx; 
2048:  CLRF   01
204A:  CLRF   02
204C:  CLRF   03
204E:  MOVF   xAF,W
2050:  IORWF  xAB,F
2052:  MOVF   01,W
2054:  IORWF  xAC,F
2056:  MOVF   02,W
2058:  IORWF  xAD,F
205A:  MOVF   03,W
205C:  IORWF  xAE,F
.................... 		PLL_send_word(prog); 
205E:  MOVFF  1AE,224
2062:  MOVFF  1AD,223
2066:  MOVFF  1AC,222
206A:  MOVFF  1AB,221
206E:  MOVLB  0
2070:  CALL   1652
2074:  MOVLB  1
2076:  MOVF   xB0,W
2078:  INCF   xB0,F
207A:  DECF   xAF,F
207C:  BRA    2008
.................... 	} 
.................... 	delay_ms(250); 
207E:  MOVLW  FA
2080:  MOVLB  2
2082:  MOVWF  x2D
2084:  MOVLB  0
2086:  CALL   0DF4
.................... 	PLL_send_word(prog); 
208A:  MOVFF  1AE,224
208E:  MOVFF  1AD,223
2092:  MOVFF  1AC,222
2096:  MOVFF  1AB,221
209A:  CALL   1652
.................... 	delay_ms(250); 
209E:  MOVLW  FA
20A0:  MOVLB  2
20A2:  MOVWF  x2D
20A4:  MOVLB  0
20A6:  CALL   0DF4
20AA:  GOTO   6460 (RETURN)
.................... } 
....................  
.................... //--------- frequency computation functions -------------------- 
.................... //the ADRF software use clock 38.4 clock, here i use 20.0 clock 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
*
13C6:  MOVLB  2
13C8:  CLRF   x2E
13CA:  CLRF   x2D
13CC:  CLRF   x2C
13CE:  MOVLW  02
13D0:  MOVWF  x2B
.................... { 
.................... 	ULONG Fvco, D, RFdiv = 2; 
.................... 	restart_wdt(); 
13D2:  CLRWDT
.................... 	D = Frequest; 
13D4:  CLRF   x2A
13D6:  CLRF   x29
13D8:  MOVFF  222,228
13DC:  MOVFF  221,227
.................... 	if (Frequest >= 22000) 
13E0:  MOVF   x22,W
13E2:  SUBLW  54
13E4:  BC    13FA
13E6:  XORLW  FF
13E8:  BNZ   13F0
13EA:  MOVF   x21,W
13EC:  SUBLW  EF
13EE:  BC    13FA
....................     { 
.................... 		RFdiv = 1; 
13F0:  CLRF   x2E
13F2:  CLRF   x2D
13F4:  CLRF   x2C
13F6:  MOVLW  01
13F8:  MOVWF  x2B
.................... 	} 
.................... 	restart_wdt(); 
13FA:  CLRWDT
.................... 	D = D * RFdiv * FREQ_STEP; 
13FC:  MOVFF  22A,236
1400:  MOVFF  229,235
1404:  MOVFF  228,234
1408:  MOVFF  227,233
140C:  MOVFF  22E,23A
1410:  MOVFF  22D,239
1414:  MOVFF  22C,238
1418:  MOVFF  22B,237
141C:  MOVLB  0
141E:  RCALL  12D6
1420:  MOVFF  03,232
1424:  MOVFF  02,231
1428:  MOVFF  01,230
142C:  MOVFF  00,22F
1430:  MOVFF  03,236
1434:  MOVFF  02,235
1438:  MOVFF  01,234
143C:  MOVFF  00,233
1440:  MOVLB  2
1442:  CLRF   x3A
1444:  CLRF   x39
1446:  CLRF   x38
1448:  MOVLW  64
144A:  MOVWF  x37
144C:  MOVLB  0
144E:  RCALL  12D6
1450:  MOVFF  03,22A
1454:  MOVFF  02,229
1458:  MOVFF  01,228
145C:  MOVFF  00,227
.................... 	restart_wdt(); 
1460:  CLRWDT
.................... 	PLL_int = D / FREQ_OSC; 
1462:  BCF    FD8.1
1464:  MOVFF  22A,240
1468:  MOVFF  229,23F
146C:  MOVFF  228,23E
1470:  MOVFF  227,23D
1474:  MOVLB  2
1476:  CLRF   x44
1478:  CLRF   x43
147A:  MOVLW  7D
147C:  MOVWF  x42
147E:  CLRF   x41
1480:  MOVLB  0
1482:  RCALL  1332
1484:  MOVFF  03,12C
1488:  MOVFF  02,12B
148C:  MOVFF  01,12A
1490:  MOVFF  00,129
.................... 	restart_wdt(); 
1494:  CLRWDT
.................... 	PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
1496:  MOVFF  12C,236
149A:  MOVFF  12B,235
149E:  MOVFF  12A,234
14A2:  MOVFF  129,233
14A6:  MOVLB  2
14A8:  CLRF   x3A
14AA:  CLRF   x39
14AC:  MOVLW  7D
14AE:  MOVWF  x38
14B0:  CLRF   x37
14B2:  MOVLB  0
14B4:  RCALL  12D6
14B6:  MOVF   00,W
14B8:  MOVLB  2
14BA:  SUBWF  x27,W
14BC:  MOVWF  x2F
14BE:  MOVF   01,W
14C0:  SUBWFB x28,W
14C2:  MOVWF  x30
14C4:  MOVF   02,W
14C6:  SUBWFB x29,W
14C8:  MOVWF  x31
14CA:  MOVF   03,W
14CC:  SUBWFB x2A,W
14CE:  MOVWF  x32
14D0:  CLRF   x36
14D2:  CLRF   x35
14D4:  CLRF   x34
14D6:  MOVLW  64
14D8:  MOVWF  x33
14DA:  MOVFF  22E,23A
14DE:  MOVFF  22D,239
14E2:  MOVFF  22C,238
14E6:  MOVFF  22B,237
14EA:  MOVLB  0
14EC:  RCALL  12D6
14EE:  MOVFF  03,236
14F2:  MOVFF  02,235
14F6:  MOVFF  01,234
14FA:  MOVFF  00,233
14FE:  BCF    FD8.1
1500:  MOVFF  232,240
1504:  MOVFF  231,23F
1508:  MOVFF  230,23E
150C:  MOVFF  22F,23D
1510:  MOVFF  03,244
1514:  MOVFF  02,243
1518:  MOVFF  01,242
151C:  MOVFF  00,241
1520:  RCALL  1332
1522:  MOVFF  03,130
1526:  MOVFF  02,12F
152A:  MOVFF  01,12E
152E:  MOVFF  00,12D
.................... 	PLL_mod = (FREQ_MOD << 3) + 1L; 
1532:  BCF    FD8.1
1534:  MOVLB  2
1536:  CLRF   x40
1538:  CLRF   x3F
153A:  MOVLW  01
153C:  MOVWF  x3E
153E:  MOVLW  40
1540:  MOVWF  x3D
1542:  MOVFF  22E,244
1546:  MOVFF  22D,243
154A:  MOVFF  22C,242
154E:  MOVFF  22B,241
1552:  MOVLB  0
1554:  RCALL  1332
1556:  MOVFF  03,232
155A:  MOVFF  02,231
155E:  MOVFF  01,230
1562:  MOVFF  00,22F
1566:  MOVLB  2
1568:  RLCF   x2F,F
156A:  RLCF   x30,F
156C:  RLCF   x31,F
156E:  RLCF   x32,F
1570:  RLCF   x2F,F
1572:  RLCF   x30,F
1574:  RLCF   x31,F
1576:  RLCF   x32,F
1578:  RLCF   x2F,F
157A:  RLCF   x30,F
157C:  RLCF   x31,F
157E:  RLCF   x32,F
1580:  MOVLW  F8
1582:  ANDWF  x2F,F
1584:  MOVLW  01
1586:  ADDWF  x2F,W
1588:  MOVLB  1
158A:  MOVWF  x31
158C:  MOVLW  00
158E:  MOVLB  2
1590:  ADDWFC x30,W
1592:  MOVLB  1
1594:  MOVWF  x32
1596:  MOVLW  00
1598:  MOVLB  2
159A:  ADDWFC x31,W
159C:  MOVLB  1
159E:  MOVWF  x33
15A0:  MOVLW  00
15A2:  MOVLB  2
15A4:  ADDWFC x32,W
15A6:  MOVLB  1
15A8:  MOVWF  x34
.................... 	restart_wdt(); 
15AA:  CLRWDT
.................... 	PLL_int *= 8L; 
15AC:  RLCF   x29,F
15AE:  RLCF   x2A,F
15B0:  RLCF   x2B,F
15B2:  RLCF   x2C,F
15B4:  RLCF   x29,F
15B6:  RLCF   x2A,F
15B8:  RLCF   x2B,F
15BA:  RLCF   x2C,F
15BC:  RLCF   x29,F
15BE:  RLCF   x2A,F
15C0:  RLCF   x2B,F
15C2:  RLCF   x2C,F
15C4:  MOVLW  F8
15C6:  ANDWF  x29,F
.................... 	PLL_frac *= 8L; 
15C8:  RLCF   x2D,F
15CA:  RLCF   x2E,F
15CC:  RLCF   x2F,F
15CE:  RLCF   x30,F
15D0:  RLCF   x2D,F
15D2:  RLCF   x2E,F
15D4:  RLCF   x2F,F
15D6:  RLCF   x30,F
15D8:  RLCF   x2D,F
15DA:  RLCF   x2E,F
15DC:  RLCF   x2F,F
15DE:  RLCF   x30,F
15E0:  ANDWF  x2D,F
.................... 	PLL_frac += 2L; 
15E2:  MOVLW  02
15E4:  ADDWF  x2D,F
15E6:  MOVLW  00
15E8:  ADDWFC x2E,F
15EA:  ADDWFC x2F,F
15EC:  ADDWFC x30,F
.................... 	Fvco++; 
15EE:  MOVLW  01
15F0:  MOVLB  2
15F2:  ADDWF  x23,F
15F4:  BTFSC  FD8.0
15F6:  INCF   x24,F
15F8:  BTFSC  FD8.2
15FA:  INCF   x25,F
15FC:  BTFSC  FD8.2
15FE:  INCF   x26,F
1600:  MOVLB  0
1602:  RETURN 0
.................... } 
....................  
....................  
.................... void PLL_update(void) 
.................... { 
.................... 	//ULONG prog; 
.................... 	restart_wdt(); 
*
169E:  CLRWDT
.................... 	PLL_send_word(PLL_int); 
16A0:  MOVFF  12C,224
16A4:  MOVFF  12B,223
16A8:  MOVFF  12A,222
16AC:  MOVFF  129,221
16B0:  RCALL  1652
.................... 	delay_us(20); 
16B2:  MOVLW  1A
16B4:  MOVWF  00
16B6:  DECFSZ 00,F
16B8:  BRA    16B6
16BA:  NOP   
.................... 	restart_wdt(); 
16BC:  CLRWDT
.................... 	PLL_send_word(PLL_mod); 
16BE:  MOVFF  134,224
16C2:  MOVFF  133,223
16C6:  MOVFF  132,222
16CA:  MOVFF  131,221
16CE:  RCALL  1652
.................... 	delay_us(20); 
16D0:  MOVLW  1A
16D2:  MOVWF  00
16D4:  DECFSZ 00,F
16D6:  BRA    16D4
16D8:  NOP   
.................... 	restart_wdt(); 
16DA:  CLRWDT
.................... 	PLL_send_word(PLL_frac); 
16DC:  MOVFF  130,224
16E0:  MOVFF  12F,223
16E4:  MOVFF  12E,222
16E8:  MOVFF  12D,221
16EC:  RCALL  1652
16EE:  RETURN 0
.................... 	 
.................... } 
....................  
.................... #separate 
.................... void PLL_reset(void) 
.................... { 
.................... 	output_low(PLL_DAT); 
.................... 	output_low(PLL_CLK); 
.................... 	delay_us(1000); 
.................... 	PLL_initialize(); 
.................... } 
....................  
....................  
....................  
.................... #include "BA1520QTX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
.................... { 
.................... 	 
.................... } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0AE4:  BCF    F7E.0
0AE6:  GOTO   0090
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
.................... { 
....................     timerTick_1ms = 1; 
0AEA:  MOVLW  01
0AEC:  MOVWF  2B
.................... 	//    TMR_1mS_Flags = 0xFF; 
.................... 	//    TMR_1mS_Count++; 
.................... 	//    if (++TMR_1mS_Cnt >= 10) { 
.................... 	//        TMR_1mS_Cnt = 0; 
.................... 	//        TMR_10mS_Flags = 0xFF; 
.................... 	//        if (++TMR_10mS_Cnt >= 10) { 
.................... 	//            TMR_10mS_Cnt = 0; 
.................... 	//            TMR_100mS_Flags = 0xFF; 
.................... 	//            if (++TMR_100mS_Cnt >= 10) 
.................... 	//            { 
.................... 	//                TMR_100mS_Cnt = 0; 
.................... 	//                TMR_1sec_Flags = 0xFF; 
.................... 	//            } 
.................... 	//        } 
.................... 	//    } 
.................... } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0AEE:  BCF    F9E.1
0AF0:  GOTO   0090
.................... #int_EXT 
.................... void  EXT_isr(void) 
.................... { 
.................... 	 
.................... } 
....................  
.................... //-------------------------------------------------------------------------- 
0AF4:  BCF    FF2.1
0AF6:  GOTO   0090
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
.................... { 
.................... 	 
.................... } 
....................  
.................... //-------------------------------------------------------------- 
0AFA:  BCF    FF0.0
0AFC:  GOTO   0090
.................... #int_RDA 
.................... void  RDA_isr(void) 
.................... { 
.................... 	int8 x; 
.................... 	x = RCREG1; 
0B00:  MOVFF  FAE,25E
.................... 	COM1_rbuf[COM1_rxi] = x; 
0B04:  CLRF   03
0B06:  MOVF   2D,W
0B08:  ADDLW  2F
0B0A:  MOVWF  FE9
0B0C:  MOVLW  00
0B0E:  ADDWFC 03,W
0B10:  MOVWF  FEA
0B12:  MOVFF  25E,FEF
.................... 	if (++COM1_rxi >= COM1_RX_LEN) 
0B16:  INCF   2D,F
0B18:  MOVF   2D,W
0B1A:  SUBLW  1F
0B1C:  BC    0B20
....................     COM1_rxi = 0; 
0B1E:  CLRF   2D
.................... 	if (COM1_rcnt < COM1_RX_LEN) 
0B20:  MOVF   2C,W
0B22:  SUBLW  1F
0B24:  BNC   0B28
....................     COM1_rcnt++; 
0B26:  INCF   2C,F
.................... } 
....................  
0B28:  BCF    F9E.5
0B2A:  GOTO   0090
.................... #int_TBE // VERSION 3.3 17.1.2016 
.................... void TBE_isr(void) 
.................... { 
....................     disable_interrupts(int_TIMER2); 
*
0B4E:  BCF    F9D.1
....................     output_high(RS485_EN); 
0B50:  BSF    F8C.5
....................     status_tx_index = 0; 
0B52:  MOVLB  1
0B54:  CLRF   x0D
0B56:  CLRF   x0C
....................     while (tx_block_len--) 
0B58:  MOVFF  10B,03
0B5C:  MOVF   x0A,W
0B5E:  BTFSC  FD8.2
0B60:  DECF   x0B,F
0B62:  DECF   x0A,F
0B64:  IORWF  03,W
0B66:  BZ    0BA2
....................     { 
....................         output_high(RS485_EN); 
0B68:  BSF    F8C.5
....................         TXREG1 = status_buffer[status_tx_index++]; 
0B6A:  MOVFF  10D,03
0B6E:  MOVF   x0C,W
0B70:  INCF   x0C,F
0B72:  BTFSC  FD8.2
0B74:  INCF   x0D,F
0B76:  MOVLB  2
0B78:  MOVWF  x5E
0B7A:  MOVLW  0E
0B7C:  ADDWF  x5E,W
0B7E:  MOVWF  FE9
0B80:  MOVLW  01
0B82:  ADDWFC 03,W
0B84:  MOVWF  FEA
0B86:  MOVFF  FEF,FAD
....................         delay_us(500);  
0B8A:  MOVLW  02
0B8C:  MOVWF  x5E
0B8E:  MOVLW  F9
0B90:  MOVWF  x5F
0B92:  MOVLB  0
0B94:  RCALL  0B2E
0B96:  MOVLB  2
0B98:  DECFSZ x5E,F
0B9A:  BRA    0B8E
....................         output_low(RS485_EN); 
0B9C:  BCF    F8C.5
0B9E:  MOVLB  1
0BA0:  BRA    0B58
.................... 	} 
....................     disable_interrupts(int_TBE);     
0BA2:  BCF    F9D.4
....................     enable_interrupts(int_TIMER2); 
0BA4:  BSF    F9D.1
.................... } 
....................  
....................  
....................  
0BA6:  BCF    F9E.4
0BA8:  MOVLB  0
0BAA:  GOTO   0090
.................... #include "BA1520QTX_serial.c" 
....................  
....................  
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 1;    //yehuda 1520Q cancel LI17592 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
....................  
.................... //UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
.................... UCHAR rp_command,  pwr_command; 
.................... //bit revp_status; // VERSION 3.3: 2.2.2016   //////////yehuda 1520Q cancel US,UT and BG  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
.................... { 
.................... 	UCHAR x; 
.................... 	x = COM1_rbuf[COM1_rxo]; 
*
21A6:  CLRF   03
21A8:  MOVF   2E,W
21AA:  ADDLW  2F
21AC:  MOVWF  FE9
21AE:  MOVLW  00
21B0:  ADDWFC 03,W
21B2:  MOVWF  FEA
21B4:  MOVFF  FEF,1C4
.................... 	if (++COM1_rxo >= COM1_RX_LEN) 
21B8:  INCF   2E,F
21BA:  MOVF   2E,W
21BC:  SUBLW  1F
21BE:  BC    21C2
....................     COM1_rxo = 0; 
21C0:  CLRF   2E
.................... 	if (COM1_rcnt) 
21C2:  MOVF   2C,F
21C4:  BZ    21C8
....................     COM1_rcnt--; 
21C6:  DECF   2C,F
.................... 	return x; 
21C8:  MOVLB  1
21CA:  MOVFF  1C4,01
21CE:  MOVLB  0
21D0:  RETURN 0
.................... } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
.................... { 
.................... 	UCHAR x, pos, tab_stop; 
.................... 	disable_interrupts(int_RDA); 
*
20AE:  BCF    F9D.5
.................... 	output_high(RS485_EN); 
20B0:  BSF    F8C.5
.................... 	delay_us(100); 
20B2:  MOVLW  84
20B4:  MOVWF  00
20B6:  DECFSZ 00,F
20B8:  BRA    20B6
20BA:  BRA    20BC
20BC:  NOP   
.................... 	pos = 0; 
20BE:  MOVLB  2
20C0:  CLRF   x57
.................... 	while (*str) 
20C2:  MOVFF  255,03
20C6:  MOVFF  254,FE9
20CA:  MOVFF  255,FEA
20CE:  MOVF   FEF,F
20D0:  BZ    215E
....................     { 
.................... 		x = *str++; 
20D2:  MOVFF  255,03
20D6:  MOVF   x54,W
20D8:  INCF   x54,F
20DA:  BTFSC  FD8.2
20DC:  INCF   x55,F
20DE:  MOVWF  FE9
20E0:  MOVFF  03,FEA
20E4:  MOVFF  FEF,256
.................... 		if (x != '\t') 
20E8:  MOVF   x56,W
20EA:  SUBLW  09
20EC:  BZ    211A
.................... 		{ 
.................... 			TXREG1 = x; 
20EE:  MOVFF  256,FAD
.................... 			pos++; 
20F2:  INCF   x57,F
.................... 			delay_us(300);  
20F4:  MOVLW  02
20F6:  MOVWF  x59
20F8:  CLRF   16
20FA:  BTFSC  FF2.7
20FC:  BSF    16.7
20FE:  BCF    FF2.7
2100:  MOVLW  95
2102:  MOVWF  x5F
2104:  MOVLB  0
2106:  CALL   0B2E
210A:  BTFSC  16.7
210C:  BSF    FF2.7
210E:  MOVLB  2
2110:  DECFSZ x59,F
2112:  BRA    20F8
.................... 			x = RCREG1; 
2114:  MOVFF  FAE,256
.................... 		} 
2118:  BRA    215C
.................... 		else 
.................... 		{ 
.................... 			tab_stop = 32; 
211A:  MOVLW  20
211C:  MOVWF  x58
.................... 			if (pos >= tab_stop) 
211E:  MOVF   x58,W
2120:  SUBWF  x57,W
2122:  BNC   212A
.................... 			tab_stop = pos + 2; 
2124:  MOVLW  02
2126:  ADDWF  x57,W
2128:  MOVWF  x58
.................... 			while (pos < tab_stop) 
212A:  MOVF   x58,W
212C:  SUBWF  x57,W
212E:  BC    215C
.................... 			{ 
.................... 				TXREG1 = ' '; 
2130:  MOVLW  20
2132:  MOVWF  FAD
.................... 				pos++; 
2134:  INCF   x57,F
.................... 				delay_us(300); 
2136:  MOVLW  02
2138:  MOVWF  x59
213A:  CLRF   16
213C:  BTFSC  FF2.7
213E:  BSF    16.7
2140:  BCF    FF2.7
2142:  MOVLW  95
2144:  MOVWF  x5F
2146:  MOVLB  0
2148:  CALL   0B2E
214C:  BTFSC  16.7
214E:  BSF    FF2.7
2150:  MOVLB  2
2152:  DECFSZ x59,F
2154:  BRA    213A
.................... 				x = RCREG1; 
2156:  MOVFF  FAE,256
215A:  BRA    212A
.................... 			} 
.................... 		} 
215C:  BRA    20C2
.................... 	} 
.................... 	delay_us(100); 
215E:  MOVLW  84
2160:  MOVWF  00
2162:  DECFSZ 00,F
2164:  BRA    2162
2166:  BRA    2168
2168:  NOP   
.................... 	output_low(RS485_EN); 
216A:  BCF    F8C.5
.................... 	x = RCREG1; 
216C:  MOVFF  FAE,256
.................... 	enable_interrupts(int_RDA); 
2170:  BSF    F9D.5
2172:  MOVLB  0
2174:  RETURN 0
.................... } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_block(UINT len) // VERSION 3.3: 17.1.2016  
.................... { 
.................... 	UCHAR pos;//, tab_stop; 
.................... 	pos = 0; 
.................... 	tx_block_len = len ; 
.................... 	//status_tx_index = 0; 
.................... 	 
.................... 	//TXREG1 = status_buffer[0]; 
.................... 	clear_interrupt(int_TBE); 
.................... 	enable_interrupts(int_TBE); 
.................... 	//TXREG1 = status_buffer[0]; 
.................... 	//output_high(RS485_EN);  
.................... } 
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
.................... { 
.................... 	ttccp_error_message[0] = 0; 
*
0E42:  MOVLB  1
0E44:  CLRF   x6C
.................... 	COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
0E46:  CLRF   2C
0E48:  MOVFF  2C,2E
0E4C:  MOVFF  2E,2D
.................... 	comm_state = COMM_INIT; 
0E50:  CLRF   4F
.................... 	enable_interrupts(int_RDA); 
0E52:  BSF    F9D.5
0E54:  MOVLB  0
0E56:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
.................... { 
.................... 	return comm_buf[comm_ptr++]; 
*
21F0:  MOVLB  1
21F2:  MOVF   x35,W
21F4:  INCF   x35,F
21F6:  CLRF   03
21F8:  ADDLW  51
21FA:  MOVWF  FE9
21FC:  MOVLW  00
21FE:  ADDWFC 03,W
2200:  MOVWF  FEA
2202:  CLRF   03
2204:  MOVFF  FEF,01
2208:  MOVFF  03,02
220C:  MOVLB  0
220E:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
.................... { 
.................... 	//  skip_spc(); 
.................... 	return comm_buf[comm_ptr]; 
*
21D2:  CLRF   03
21D4:  MOVLB  1
21D6:  MOVF   x35,W
21D8:  ADDLW  51
21DA:  MOVWF  FE9
21DC:  MOVLW  00
21DE:  ADDWFC 03,W
21E0:  MOVWF  FEA
21E2:  CLRF   03
21E4:  MOVFF  FEF,01
21E8:  MOVFF  03,02
21EC:  MOVLB  0
21EE:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
.................... { 
.................... 	while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
*
2210:  CLRF   03
2212:  MOVLB  1
2214:  MOVF   x35,W
2216:  ADDLW  51
2218:  MOVWF  FE9
221A:  MOVLW  00
221C:  ADDWFC 03,W
221E:  MOVWF  FEA
2220:  MOVF   FEF,F
2222:  BZ    2254
2224:  CLRF   03
2226:  MOVF   x35,W
2228:  ADDLW  51
222A:  MOVWF  FE9
222C:  MOVLW  00
222E:  ADDWFC 03,W
2230:  MOVWF  FEA
2232:  MOVF   FEF,W
2234:  SUBLW  2C
2236:  BZ    224C
2238:  CLRF   03
223A:  MOVF   x35,W
223C:  ADDLW  51
223E:  MOVWF  FE9
2240:  MOVLW  00
2242:  ADDWFC 03,W
2244:  MOVWF  FEA
2246:  MOVF   FEF,W
2248:  SUBLW  20
224A:  BNZ   2254
....................     comm_ptr++; 
224C:  INCF   x35,F
224E:  MOVLB  0
2250:  BRA    2210
2252:  MOVLB  1
2254:  MOVLB  0
2256:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
*
22AC:  MOVLB  2
22AE:  CLRF   x22
22B0:  MOVLW  01
22B2:  MOVWF  x21
.................... { 
.................... 	SINT num, sign = 1; 
.................... 	skip_spc(); 
22B4:  MOVLB  0
22B6:  RCALL  2210
.................... 	if (comm_buf[comm_ptr]) 
22B8:  CLRF   03
22BA:  MOVLB  1
22BC:  MOVF   x35,W
22BE:  ADDLW  51
22C0:  MOVWF  FE9
22C2:  MOVLW  00
22C4:  ADDWFC 03,W
22C6:  MOVWF  FEA
22C8:  MOVF   FEF,F
22CA:  BZ    2356
....................     { 
.................... 		num = 0; 
22CC:  MOVLB  2
22CE:  CLRF   x20
22D0:  CLRF   x1F
.................... 		if (peek_char() == '-') 
22D2:  MOVLB  0
22D4:  RCALL  21D2
22D6:  MOVFF  02,224
22DA:  MOVFF  01,223
22DE:  MOVLB  2
22E0:  MOVF   01,W
22E2:  SUBLW  2D
22E4:  BNZ   22F4
22E6:  MOVF   x24,F
22E8:  BNZ   22F4
.................... 		{ 
.................... 			sign = -1; 
22EA:  SETF   x22
22EC:  SETF   x21
.................... 			get_char(); 
22EE:  MOVLB  0
22F0:  RCALL  21F0
22F2:  MOVLB  2
.................... 		} 
.................... 		while (isdigit(comm_buf[comm_ptr])) 
22F4:  CLRF   03
22F6:  MOVLB  1
22F8:  MOVF   x35,W
22FA:  ADDLW  51
22FC:  MOVWF  FE9
22FE:  MOVLW  00
2300:  ADDWFC 03,W
2302:  MOVWF  FEA
2304:  MOVFF  FEF,223
2308:  MOVLB  2
230A:  MOVF   x23,W
230C:  SUBLW  2F
230E:  BC    2354
2310:  MOVF   x23,W
2312:  SUBLW  39
2314:  BNC   2354
.................... 		num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
2316:  MOVFF  220,224
231A:  MOVFF  21F,223
231E:  CLRF   x26
2320:  MOVLW  0A
2322:  MOVWF  x25
2324:  MOVLB  0
2326:  RCALL  2258
2328:  MOVFF  02,224
232C:  MOVFF  01,223
2330:  MOVLB  1
2332:  MOVF   x35,W
2334:  INCF   x35,F
2336:  CLRF   03
2338:  ADDLW  51
233A:  MOVWF  FE9
233C:  MOVLW  00
233E:  ADDWFC 03,W
2340:  MOVWF  FEA
2342:  MOVLW  30
2344:  SUBWF  FEF,W
2346:  MOVLB  2
2348:  ADDWF  01,W
234A:  MOVWF  x1F
234C:  MOVLW  00
234E:  ADDWFC 02,W
2350:  MOVWF  x20
2352:  BRA    22F4
2354:  MOVLB  1
.................... 	} 
.................... 	//  skip_spc(); 
.................... 	return num * sign; 
2356:  MOVFF  220,224
235A:  MOVFF  21F,223
235E:  MOVFF  222,226
2362:  MOVFF  221,225
2366:  MOVLB  0
2368:  RCALL  2258
236A:  MOVFF  02,03
236E:  MOVFF  02,02
2372:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
.................... { 
.................... 	ULONG num; 
.................... 	skip_spc(); 
*
5802:  CALL   2210
.................... 	if (comm_buf[comm_ptr]) 
5806:  CLRF   03
5808:  MOVLB  1
580A:  MOVF   x35,W
580C:  ADDLW  51
580E:  MOVWF  FE9
5810:  MOVLW  00
5812:  ADDWFC 03,W
5814:  MOVWF  FEA
5816:  MOVF   FEF,F
5818:  BZ    58AC
....................     { 
.................... 		num = 0; 
581A:  CLRF   xFE
581C:  CLRF   xFD
581E:  CLRF   xFC
5820:  CLRF   xFB
.................... 		while (isdigit(comm_buf[comm_ptr])) 
5822:  CLRF   03
5824:  MOVF   x35,W
5826:  ADDLW  51
5828:  MOVWF  FE9
582A:  MOVLW  00
582C:  ADDWFC 03,W
582E:  MOVWF  FEA
5830:  MOVFF  FEF,1FF
5834:  MOVF   xFF,W
5836:  SUBLW  2F
5838:  BC    58AC
583A:  MOVF   xFF,W
583C:  SUBLW  39
583E:  BNC   58AC
.................... 		num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
5840:  MOVFF  1FE,236
5844:  MOVFF  1FD,235
5848:  MOVFF  1FC,234
584C:  MOVFF  1FB,233
5850:  MOVLB  2
5852:  CLRF   x3A
5854:  CLRF   x39
5856:  CLRF   x38
5858:  MOVLW  0A
585A:  MOVWF  x37
585C:  MOVLB  0
585E:  CALL   12D6
5862:  MOVFF  03,202
5866:  MOVFF  02,201
586A:  MOVFF  01,200
586E:  MOVFF  00,1FF
5872:  MOVLB  1
5874:  MOVF   x35,W
5876:  INCF   x35,F
5878:  CLRF   03
587A:  ADDLW  51
587C:  MOVWF  FE9
587E:  MOVLW  00
5880:  ADDWFC 03,W
5882:  MOVWF  FEA
5884:  MOVLW  30
5886:  SUBWF  FEF,W
5888:  ADDWF  00,W
588A:  MOVWF  xFB
588C:  MOVLW  00
588E:  MOVLB  2
5890:  ADDWFC 01,W
5892:  MOVLB  1
5894:  MOVWF  xFC
5896:  MOVLW  00
5898:  MOVLB  2
589A:  ADDWFC 02,W
589C:  MOVLB  1
589E:  MOVWF  xFD
58A0:  MOVLW  00
58A2:  MOVLB  2
58A4:  ADDWFC x02,W
58A6:  MOVLB  1
58A8:  MOVWF  xFE
58AA:  BRA    5822
.................... 	} 
.................... 	//  skip_spc(); 
.................... 	return num; 
58AC:  MOVFF  1FB,00
58B0:  MOVFF  1FC,01
58B4:  MOVFF  1FD,02
58B8:  MOVFF  1FE,03
58BC:  MOVLB  0
58BE:  GOTO   5DD6 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
.................... { 
.................... 	ULONG num; 
.................... 	UCHAR chr; 
.................... 	skip_spc(); 
*
56E8:  CALL   2210
.................... 	if (peek_char()) 
56EC:  CALL   21D2
56F0:  MOVF   01,W
56F2:  IORWF  02,W
56F4:  BTFSC  FD8.2
56F6:  BRA    57F0
....................     { 
.................... 		num = 0; 
56F8:  MOVLB  1
56FA:  CLRF   xFE
56FC:  CLRF   xFD
56FE:  CLRF   xFC
5700:  CLRF   xFB
.................... 		while (isxdigit(peek_char())) 
5702:  MOVLB  0
5704:  CALL   21D2
5708:  MOVFF  02,201
570C:  MOVFF  01,200
5710:  MOVLB  2
5712:  MOVF   x01,F
5714:  BNZ   571C
5716:  MOVF   x00,W
5718:  SUBLW  2F
571A:  BC    5726
571C:  MOVF   x01,F
571E:  BNZ   5726
5720:  MOVF   x00,W
5722:  SUBLW  39
5724:  BC    574E
5726:  MOVF   x01,F
5728:  BNZ   5730
572A:  MOVF   x00,W
572C:  SUBLW  40
572E:  BC    573A
5730:  MOVF   x01,F
5732:  BNZ   573A
5734:  MOVF   x00,W
5736:  SUBLW  46
5738:  BC    574E
573A:  MOVF   x01,F
573C:  BNZ   5744
573E:  MOVF   x00,W
5740:  SUBLW  60
5742:  BC    57EE
5744:  MOVF   x01,F
5746:  BNZ   57EE
5748:  MOVF   x00,W
574A:  SUBLW  66
574C:  BNC   57EE
.................... 		{ 
.................... 			chr = get_char(); 
574E:  MOVLB  0
5750:  CALL   21F0
5754:  MOVFF  01,1FF
.................... 			chr = toupper(chr); 
5758:  MOVLB  1
575A:  MOVF   xFF,W
575C:  SUBLW  60
575E:  BC    576C
5760:  MOVF   xFF,W
5762:  SUBLW  7A
5764:  BNC   576C
5766:  MOVF   xFF,W
5768:  ANDLW  DF
576A:  BRA    576E
576C:  MOVF   xFF,W
576E:  MOVWF  xFF
.................... 			if (chr <= '9') 
5770:  MOVF   xFF,W
5772:  SUBLW  39
5774:  BNC   577C
.................... 			chr -= '0'; 
5776:  MOVLW  30
5778:  SUBWF  xFF,F
577A:  BRA    5780
.................... 			else 
.................... 			chr = chr - ('A' - 10); 
577C:  MOVLW  37
577E:  SUBWF  xFF,F
.................... 			num = num * 16 + (ULONG)chr; 
5780:  RLCF   xFB,W
5782:  MOVLB  2
5784:  MOVWF  x00
5786:  MOVLB  1
5788:  RLCF   xFC,W
578A:  MOVLB  2
578C:  MOVWF  x01
578E:  MOVLB  1
5790:  RLCF   xFD,W
5792:  MOVLB  2
5794:  MOVWF  x02
5796:  MOVLB  1
5798:  RLCF   xFE,W
579A:  MOVLB  2
579C:  MOVWF  x03
579E:  RLCF   x00,F
57A0:  RLCF   x01,F
57A2:  RLCF   x02,F
57A4:  RLCF   x03,F
57A6:  RLCF   x00,F
57A8:  RLCF   x01,F
57AA:  RLCF   x02,F
57AC:  RLCF   x03,F
57AE:  RLCF   x00,F
57B0:  RLCF   x01,F
57B2:  RLCF   x02,F
57B4:  RLCF   x03,F
57B6:  MOVLW  F0
57B8:  ANDWF  x00,F
57BA:  MOVFF  1FF,00
57BE:  CLRF   01
57C0:  CLRF   02
57C2:  CLRF   03
57C4:  MOVF   00,W
57C6:  ADDWF  x00,W
57C8:  MOVLB  1
57CA:  MOVWF  xFB
57CC:  MOVF   01,W
57CE:  MOVLB  2
57D0:  ADDWFC x01,W
57D2:  MOVLB  1
57D4:  MOVWF  xFC
57D6:  MOVF   02,W
57D8:  MOVLB  2
57DA:  ADDWFC x02,W
57DC:  MOVLB  1
57DE:  MOVWF  xFD
57E0:  MOVF   03,W
57E2:  MOVLB  2
57E4:  ADDWFC x03,W
57E6:  MOVLB  1
57E8:  MOVWF  xFE
57EA:  BRA    5702
57EC:  MOVLB  2
57EE:  MOVLB  0
.................... 		} 
.................... 	} 
.................... 	return num; 
57F0:  MOVFF  1FB,00
57F4:  MOVFF  1FC,01
57F8:  MOVFF  1FD,02
57FC:  MOVFF  1FE,03
5800:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
.................... { 
.................... 	UINT freq; 
.................... 	freq = get_int() * 10; 
*
28A0:  RCALL  22AC
28A2:  MOVFF  02,21A
28A6:  MOVFF  01,219
28AA:  MOVFF  02,224
28AE:  MOVFF  01,223
28B2:  MOVLB  2
28B4:  CLRF   x26
28B6:  MOVLW  0A
28B8:  MOVWF  x25
28BA:  MOVLB  0
28BC:  RCALL  2258
28BE:  MOVFF  02,218
28C2:  MOVLB  2
28C4:  MOVFF  01,217
.................... 	if (peek_char() == '.') 
28C8:  MOVLB  0
28CA:  RCALL  21D2
28CC:  MOVFF  02,21A
28D0:  MOVFF  01,219
28D4:  MOVLB  2
28D6:  MOVF   01,W
28D8:  SUBLW  2E
28DA:  BNZ   28FC
28DC:  MOVF   x1A,F
28DE:  BNZ   28FC
....................     { 
.................... 		get_char(); // skip '.' 
28E0:  MOVLB  0
28E2:  RCALL  21F0
.................... 		freq += get_char() - '0'; 
28E4:  RCALL  21F0
28E6:  MOVLW  30
28E8:  MOVLB  2
28EA:  SUBWF  01,W
28EC:  MOVWF  00
28EE:  MOVLW  00
28F0:  SUBWFB 02,W
28F2:  MOVWF  03
28F4:  MOVF   00,W
28F6:  ADDWF  x17,F
28F8:  MOVF   03,W
28FA:  ADDWFC x18,F
.................... 	} 
.................... 	return freq; 
28FC:  MOVFF  217,01
2900:  MOVFF  218,02
2904:  MOVLB  0
2906:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
.................... { 
.................... 	UINT incdec; 
.................... 	switch (chr) 
*
51B2:  MOVLB  1
51B4:  MOVF   xC4,W
51B6:  XORLW  69
51B8:  MOVLB  0
51BA:  BZ    51EE
51BC:  XORLW  20
51BE:  BZ    521C
51C0:  XORLW  2D
51C2:  BZ    524A
51C4:  XORLW  20
51C6:  BZ    527C
51C8:  XORLW  6F
51CA:  BTFSC  FD8.2
51CC:  BRA    52AE
51CE:  XORLW  16
51D0:  BTFSC  FD8.2
51D2:  BRA    52FC
51D4:  XORLW  10
51D6:  BTFSC  FD8.2
51D8:  BRA    534A
51DA:  XORLW  72
51DC:  BTFSC  FD8.2
51DE:  BRA    539C
51E0:  XORLW  61
51E2:  BTFSC  FD8.2
51E4:  BRA    53EE
51E6:  XORLW  02
51E8:  BTFSC  FD8.2
51EA:  BRA    5406
51EC:  BRA    541A
....................     { 
.................... 		case 'i': 
.................... 		if (++D2A_image[11] == 0) 
51EE:  MOVLB  1
51F0:  INCF   x63,F
51F2:  BNZ   5200
....................         if (++D2A_image[12] > 3) 
51F4:  INCF   x64,F
51F6:  MOVF   x64,W
51F8:  SUBLW  03
51FA:  BC    5200
.................... 		{ 
.................... 			D2A_image[11] = 0; 
51FC:  CLRF   x63
.................... 			D2A_image[12] = 0; 
51FE:  CLRF   x64
.................... 		} 
.................... 		write_D2A(11, D2A_image[11]); 
5200:  MOVLW  0B
5202:  MOVWF  xFB
5204:  MOVFF  163,1FC
5208:  MOVLB  0
520A:  RCALL  512A
.................... 		write_D2A(12, D2A_image[12]); 
520C:  MOVLW  0C
520E:  MOVLB  1
5210:  MOVWF  xFB
5212:  MOVFF  164,1FC
5216:  MOVLB  0
5218:  RCALL  512A
.................... 		break; 
521A:  BRA    541A
.................... 		case 'I': 
.................... 		if (++D2A_image[15] == 0) 
521C:  MOVLB  1
521E:  INCF   x67,F
5220:  BNZ   522E
....................         if (++D2A_image[16] > 3) 
5222:  INCF   x68,F
5224:  MOVF   x68,W
5226:  SUBLW  03
5228:  BC    522E
.................... 		{ 
.................... 			D2A_image[15] = 0; 
522A:  CLRF   x67
.................... 			D2A_image[16] = 0; 
522C:  CLRF   x68
.................... 		} 
.................... 		write_D2A(15, D2A_image[15]); 
522E:  MOVLW  0F
5230:  MOVWF  xFB
5232:  MOVFF  167,1FC
5236:  MOVLB  0
5238:  RCALL  512A
.................... 		write_D2A(16, D2A_image[16]); 
523A:  MOVLW  10
523C:  MOVLB  1
523E:  MOVWF  xFB
5240:  MOVFF  168,1FC
5244:  MOVLB  0
5246:  RCALL  512A
.................... 		break; 
5248:  BRA    541A
.................... 		case 'd': 
.................... 		if (--D2A_image[11] == 255) 
524A:  MOVLB  1
524C:  DECF   x63,F
524E:  INCFSZ x63,W
5250:  BRA    5260
....................         if (--D2A_image[12] > 3) 
5252:  DECF   x64,F
5254:  MOVF   x64,W
5256:  SUBLW  03
5258:  BC    5260
.................... 		{ 
.................... 			D2A_image[11] = 255; 
525A:  SETF   x63
.................... 			D2A_image[12] = 3; 
525C:  MOVLW  03
525E:  MOVWF  x64
.................... 		} 
.................... 		write_D2A(11, D2A_image[11]); 
5260:  MOVLW  0B
5262:  MOVWF  xFB
5264:  MOVFF  163,1FC
5268:  MOVLB  0
526A:  RCALL  512A
.................... 		write_D2A(12, D2A_image[12]); 
526C:  MOVLW  0C
526E:  MOVLB  1
5270:  MOVWF  xFB
5272:  MOVFF  164,1FC
5276:  MOVLB  0
5278:  RCALL  512A
.................... 		break; 
527A:  BRA    541A
.................... 		case 'D': 
.................... 		if (--D2A_image[15] == 255) 
527C:  MOVLB  1
527E:  DECF   x67,F
5280:  INCFSZ x67,W
5282:  BRA    5292
....................         if (--D2A_image[16] > 3) 
5284:  DECF   x68,F
5286:  MOVF   x68,W
5288:  SUBLW  03
528A:  BC    5292
.................... 		{ 
.................... 			D2A_image[15] = 255; 
528C:  SETF   x67
.................... 			D2A_image[16] = 3; 
528E:  MOVLW  03
5290:  MOVWF  x68
.................... 		} 
.................... 		write_D2A(15, D2A_image[15]); 
5292:  MOVLW  0F
5294:  MOVWF  xFB
5296:  MOVFF  167,1FC
529A:  MOVLB  0
529C:  RCALL  512A
.................... 		write_D2A(16, D2A_image[16]); 
529E:  MOVLW  10
52A0:  MOVLB  1
52A2:  MOVWF  xFB
52A4:  MOVFF  168,1FC
52A8:  MOVLB  0
52AA:  RCALL  512A
.................... 		break; 
52AC:  BRA    541A
.................... 		case '+': 
.................... 		incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
52AE:  MOVLB  1
52B0:  MOVFF  165,1C5
52B4:  MOVF   x66,W
52B6:  ANDLW  03
52B8:  MOVWF  xC6
.................... 		if (++incdec > 0x3FF) 
52BA:  INCF   xC5,F
52BC:  BTFSC  FD8.2
52BE:  INCF   xC6,F
52C0:  MOVF   xC6,W
52C2:  SUBLW  03
52C4:  BC    52CA
....................         incdec = 0; 
52C6:  CLRF   xC6
52C8:  CLRF   xC5
.................... 		incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
52CA:  MOVF   x66,W
52CC:  ANDLW  C0
52CE:  MOVWF  xC7
52D0:  MOVLW  00
52D2:  IORWF  xC5,F
52D4:  MOVF   xC7,W
52D6:  IORWF  xC6,F
.................... 		D2A_image[13] = make8(incdec, 0); 
52D8:  MOVFF  1C5,165
.................... 		D2A_image[14] = make8(incdec, 1); 
52DC:  MOVFF  1C6,166
.................... 		write_D2A(11, D2A_image[13]); 
52E0:  MOVLW  0B
52E2:  MOVWF  xFB
52E4:  MOVFF  165,1FC
52E8:  MOVLB  0
52EA:  RCALL  512A
.................... 		write_D2A(12, D2A_image[14]); 
52EC:  MOVLW  0C
52EE:  MOVLB  1
52F0:  MOVWF  xFB
52F2:  MOVFF  166,1FC
52F6:  MOVLB  0
52F8:  RCALL  512A
.................... 		break; 
52FA:  BRA    541A
.................... 		case '=': 
.................... 		incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
52FC:  MOVLB  1
52FE:  MOVFF  169,1C5
5302:  MOVF   x6A,W
5304:  ANDLW  03
5306:  MOVWF  xC6
.................... 		if (++incdec > 0x3FF) 
5308:  INCF   xC5,F
530A:  BTFSC  FD8.2
530C:  INCF   xC6,F
530E:  MOVF   xC6,W
5310:  SUBLW  03
5312:  BC    5318
....................         incdec = 0; 
5314:  CLRF   xC6
5316:  CLRF   xC5
.................... 		incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5318:  MOVF   x6A,W
531A:  ANDLW  C0
531C:  MOVWF  xC7
531E:  MOVLW  00
5320:  IORWF  xC5,F
5322:  MOVF   xC7,W
5324:  IORWF  xC6,F
.................... 		D2A_image[17] = make8(incdec, 0); 
5326:  MOVFF  1C5,169
.................... 		D2A_image[18] = make8(incdec, 1); 
532A:  MOVFF  1C6,16A
.................... 		write_D2A(11, D2A_image[17]); 
532E:  MOVLW  0B
5330:  MOVWF  xFB
5332:  MOVFF  169,1FC
5336:  MOVLB  0
5338:  RCALL  512A
.................... 		write_D2A(12, D2A_image[18]); 
533A:  MOVLW  0C
533C:  MOVLB  1
533E:  MOVWF  xFB
5340:  MOVFF  16A,1FC
5344:  MOVLB  0
5346:  RCALL  512A
.................... 		break; 
5348:  BRA    541A
.................... 		case '-': 
.................... 		incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
534A:  MOVLB  1
534C:  MOVFF  165,1C5
5350:  MOVF   x66,W
5352:  ANDLW  03
5354:  MOVWF  xC6
.................... 		if (--incdec > 0x3FF) 
5356:  MOVF   xC5,W
5358:  BTFSC  FD8.2
535A:  DECF   xC6,F
535C:  DECF   xC5,F
535E:  MOVF   xC6,W
5360:  SUBLW  03
5362:  BC    536A
....................         incdec = 0x3FF; 
5364:  MOVLW  03
5366:  MOVWF  xC6
5368:  SETF   xC5
.................... 		incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
536A:  MOVF   x66,W
536C:  ANDLW  C0
536E:  MOVWF  xC7
5370:  MOVLW  00
5372:  IORWF  xC5,F
5374:  MOVF   xC7,W
5376:  IORWF  xC6,F
.................... 		D2A_image[13] = make8(incdec, 0); 
5378:  MOVFF  1C5,165
.................... 		D2A_image[14] = make8(incdec, 1); 
537C:  MOVFF  1C6,166
.................... 		write_D2A(11, D2A_image[13]); 
5380:  MOVLW  0B
5382:  MOVWF  xFB
5384:  MOVFF  165,1FC
5388:  MOVLB  0
538A:  RCALL  512A
.................... 		write_D2A(12, D2A_image[14]); 
538C:  MOVLW  0C
538E:  MOVLB  1
5390:  MOVWF  xFB
5392:  MOVFF  166,1FC
5396:  MOVLB  0
5398:  RCALL  512A
.................... 		break; 
539A:  BRA    541A
.................... 		case '_': 
.................... 		incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
539C:  MOVLB  1
539E:  MOVFF  169,1C5
53A2:  MOVF   x6A,W
53A4:  ANDLW  03
53A6:  MOVWF  xC6
.................... 		if (--incdec > 0x3FF) 
53A8:  MOVF   xC5,W
53AA:  BTFSC  FD8.2
53AC:  DECF   xC6,F
53AE:  DECF   xC5,F
53B0:  MOVF   xC6,W
53B2:  SUBLW  03
53B4:  BC    53BC
....................         incdec = 0x3FF; 
53B6:  MOVLW  03
53B8:  MOVWF  xC6
53BA:  SETF   xC5
.................... 		incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
53BC:  MOVF   x6A,W
53BE:  ANDLW  C0
53C0:  MOVWF  xC7
53C2:  MOVLW  00
53C4:  IORWF  xC5,F
53C6:  MOVF   xC7,W
53C8:  IORWF  xC6,F
.................... 		D2A_image[17] = make8(incdec, 0); 
53CA:  MOVFF  1C5,169
.................... 		D2A_image[18] = make8(incdec, 1); 
53CE:  MOVFF  1C6,16A
.................... 		write_D2A(11, D2A_image[17]); 
53D2:  MOVLW  0B
53D4:  MOVWF  xFB
53D6:  MOVFF  169,1FC
53DA:  MOVLB  0
53DC:  RCALL  512A
.................... 		write_D2A(12, D2A_image[18]); 
53DE:  MOVLW  0C
53E0:  MOVLB  1
53E2:  MOVWF  xFB
53E4:  MOVFF  16A,1FC
53E8:  MOVLB  0
53EA:  RCALL  512A
.................... 		break; 
53EC:  BRA    541A
.................... 		case '>': 
.................... 		if (setup.phase_offset < 255) 
53EE:  INCFSZ xB5,W
53F0:  BRA    53F4
53F2:  BRA    53F6
....................         setup.phase_offset++; 
53F4:  INCF   xB5,F
.................... 		update_FPGA(1, setup.phase_offset); 
53F6:  MOVLW  01
53F8:  MOVLB  1
53FA:  MOVWF  xC7
53FC:  MOVFF  B5,1C8
5400:  MOVLB  0
5402:  RCALL  5194
.................... 		break; 
5404:  BRA    541A
.................... 		case '<': 
.................... 		if (setup.phase_offset) 
5406:  MOVF   xB5,F
5408:  BZ    540C
....................         setup.phase_offset--; 
540A:  DECF   xB5,F
.................... 		update_FPGA(1, setup.phase_offset); 
540C:  MOVLW  01
540E:  MOVLB  1
5410:  MOVWF  xC7
5412:  MOVFF  B5,1C8
5416:  MOVLB  0
5418:  RCALL  5194
.................... 		break; 
.................... 	} 
541A:  GOTO   61CC (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
.................... { 
.................... 	COM1_send_str("\r\n"); 
541E:  MOVLW  0D
5420:  MOVLB  1
5422:  MOVWF  xFB
5424:  MOVLW  0A
5426:  MOVWF  xFC
5428:  CLRF   xFD
542A:  MOVLW  01
542C:  MOVLB  2
542E:  MOVWF  x55
5430:  MOVLW  FB
5432:  MOVWF  x54
5434:  MOVLB  0
5436:  CALL   20AE
.................... 	COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
543A:  MOVLW  01
543C:  MOVWF  FEA
543E:  MOVLW  FB
5440:  MOVWF  FE9
5442:  MOVFF  FF2,23D
5446:  BCF    FF2.7
5448:  MOVLW  3D
544A:  MOVWF  01
544C:  CLRF   FF7
544E:  MOVLW  00
5450:  CALL   010C
5454:  TBLRD*-
5456:  TBLRD*+
5458:  MOVFF  FF5,FEE
545C:  DECFSZ 01,F
545E:  BRA    5456
5460:  MOVLB  2
5462:  BTFSC  x3D.7
5464:  BSF    FF2.7
5466:  MOVLW  01
5468:  MOVWF  x55
546A:  MOVLW  FB
546C:  MOVWF  x54
546E:  MOVLB  0
5470:  CALL   20AE
.................... 	COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
5474:  MOVLW  01
5476:  MOVWF  FEA
5478:  MOVLW  FB
547A:  MOVWF  FE9
547C:  MOVFF  FF2,23D
5480:  BCF    FF2.7
5482:  MOVLW  2E
5484:  MOVWF  01
5486:  CLRF   FF7
5488:  MOVLW  00
548A:  CALL   0164
548E:  TBLRD*-
5490:  TBLRD*+
5492:  MOVFF  FF5,FEE
5496:  DECFSZ 01,F
5498:  BRA    5490
549A:  MOVLB  2
549C:  BTFSC  x3D.7
549E:  BSF    FF2.7
54A0:  MOVLW  01
54A2:  MOVWF  x55
54A4:  MOVLW  FB
54A6:  MOVWF  x54
54A8:  MOVLB  0
54AA:  CALL   20AE
.................... 	COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
54AE:  MOVLW  01
54B0:  MOVWF  FEA
54B2:  MOVLW  FB
54B4:  MOVWF  FE9
54B6:  MOVFF  FF2,23D
54BA:  BCF    FF2.7
54BC:  MOVLW  42
54BE:  MOVWF  01
54C0:  CLRF   FF7
54C2:  MOVLW  00
54C4:  CALL   01AC
54C8:  TBLRD*-
54CA:  TBLRD*+
54CC:  MOVFF  FF5,FEE
54D0:  DECFSZ 01,F
54D2:  BRA    54CA
54D4:  MOVLB  2
54D6:  BTFSC  x3D.7
54D8:  BSF    FF2.7
54DA:  MOVLW  01
54DC:  MOVWF  x55
54DE:  MOVLW  FB
54E0:  MOVWF  x54
54E2:  MOVLB  0
54E4:  CALL   20AE
.................... 	COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
54E8:  MOVLW  01
54EA:  MOVWF  FEA
54EC:  MOVLW  FB
54EE:  MOVWF  FE9
54F0:  MOVFF  FF2,23D
54F4:  BCF    FF2.7
54F6:  MOVLW  23
54F8:  MOVWF  01
54FA:  CLRF   FF7
54FC:  MOVLW  00
54FE:  CALL   0208
5502:  TBLRD*-
5504:  TBLRD*+
5506:  MOVFF  FF5,FEE
550A:  DECFSZ 01,F
550C:  BRA    5504
550E:  MOVLB  2
5510:  BTFSC  x3D.7
5512:  BSF    FF2.7
5514:  MOVLW  01
5516:  MOVWF  x55
5518:  MOVLW  FB
551A:  MOVWF  x54
551C:  MOVLB  0
551E:  CALL   20AE
.................... 	COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
5522:  MOVLW  01
5524:  MOVWF  FEA
5526:  MOVLW  FB
5528:  MOVWF  FE9
552A:  MOVFF  FF2,23D
552E:  BCF    FF2.7
5530:  MOVLW  2D
5532:  MOVWF  01
5534:  CLRF   FF7
5536:  MOVLW  00
5538:  CALL   0246
553C:  TBLRD*-
553E:  TBLRD*+
5540:  MOVFF  FF5,FEE
5544:  DECFSZ 01,F
5546:  BRA    553E
5548:  MOVLB  2
554A:  BTFSC  x3D.7
554C:  BSF    FF2.7
554E:  MOVLW  01
5550:  MOVWF  x55
5552:  MOVLW  FB
5554:  MOVWF  x54
5556:  MOVLB  0
5558:  CALL   20AE
.................... 	COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
555C:  MOVLW  01
555E:  MOVWF  FEA
5560:  MOVLW  FB
5562:  MOVWF  FE9
5564:  MOVFF  FF2,23D
5568:  BCF    FF2.7
556A:  MOVLW  2E
556C:  MOVWF  01
556E:  CLRF   FF7
5570:  MOVLW  00
5572:  CALL   028E
5576:  TBLRD*-
5578:  TBLRD*+
557A:  MOVFF  FF5,FEE
557E:  DECFSZ 01,F
5580:  BRA    5578
5582:  MOVLB  2
5584:  BTFSC  x3D.7
5586:  BSF    FF2.7
5588:  MOVLW  01
558A:  MOVWF  x55
558C:  MOVLW  FB
558E:  MOVWF  x54
5590:  MOVLB  0
5592:  CALL   20AE
.................... 	COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
5596:  MOVLW  01
5598:  MOVWF  FEA
559A:  MOVLW  FB
559C:  MOVWF  FE9
559E:  MOVFF  FF2,23D
55A2:  BCF    FF2.7
55A4:  MOVLW  36
55A6:  MOVWF  01
55A8:  CLRF   FF7
55AA:  MOVLW  00
55AC:  CALL   02D6
55B0:  TBLRD*-
55B2:  TBLRD*+
55B4:  MOVFF  FF5,FEE
55B8:  DECFSZ 01,F
55BA:  BRA    55B2
55BC:  MOVLB  2
55BE:  BTFSC  x3D.7
55C0:  BSF    FF2.7
55C2:  MOVLW  01
55C4:  MOVWF  x55
55C6:  MOVLW  FB
55C8:  MOVWF  x54
55CA:  MOVLB  0
55CC:  CALL   20AE
.................... 	COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
55D0:  MOVLW  01
55D2:  MOVWF  FEA
55D4:  MOVLW  FB
55D6:  MOVWF  FE9
55D8:  MOVFF  FF2,23D
55DC:  BCF    FF2.7
55DE:  MOVLW  16
55E0:  MOVWF  01
55E2:  CLRF   FF7
55E4:  MOVLW  00
55E6:  CALL   0326
55EA:  TBLRD*-
55EC:  TBLRD*+
55EE:  MOVFF  FF5,FEE
55F2:  DECFSZ 01,F
55F4:  BRA    55EC
55F6:  MOVLB  2
55F8:  BTFSC  x3D.7
55FA:  BSF    FF2.7
55FC:  MOVLW  01
55FE:  MOVWF  x55
5600:  MOVLW  FB
5602:  MOVWF  x54
5604:  MOVLB  0
5606:  CALL   20AE
.................... 	COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
560A:  MOVLW  01
560C:  MOVWF  FEA
560E:  MOVLW  FB
5610:  MOVWF  FE9
5612:  MOVFF  FF2,23D
5616:  BCF    FF2.7
5618:  MOVLW  3C
561A:  MOVWF  01
561C:  CLRF   FF7
561E:  MOVLW  00
5620:  CALL   0356
5624:  TBLRD*-
5626:  TBLRD*+
5628:  MOVFF  FF5,FEE
562C:  DECFSZ 01,F
562E:  BRA    5626
5630:  MOVLB  2
5632:  BTFSC  x3D.7
5634:  BSF    FF2.7
5636:  MOVLW  01
5638:  MOVWF  x55
563A:  MOVLW  FB
563C:  MOVWF  x54
563E:  MOVLB  0
5640:  CALL   20AE
.................... 	COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
5644:  MOVLW  01
5646:  MOVWF  FEA
5648:  MOVLW  FB
564A:  MOVWF  FE9
564C:  MOVFF  FF2,23D
5650:  BCF    FF2.7
5652:  MOVLW  3D
5654:  MOVWF  01
5656:  CLRF   FF7
5658:  MOVLW  00
565A:  CALL   03AC
565E:  TBLRD*-
5660:  TBLRD*+
5662:  MOVFF  FF5,FEE
5666:  DECFSZ 01,F
5668:  BRA    5660
566A:  MOVLB  2
566C:  BTFSC  x3D.7
566E:  BSF    FF2.7
5670:  MOVLW  01
5672:  MOVWF  x55
5674:  MOVLW  FB
5676:  MOVWF  x54
5678:  MOVLB  0
567A:  CALL   20AE
.................... 	COM1_send_str("\r\n"); 
567E:  MOVLW  0D
5680:  MOVLB  1
5682:  MOVWF  xFB
5684:  MOVLW  0A
5686:  MOVWF  xFC
5688:  CLRF   xFD
568A:  MOVLW  01
568C:  MOVLB  2
568E:  MOVWF  x55
5690:  MOVLW  FB
5692:  MOVWF  x54
5694:  MOVLB  0
5696:  CALL   20AE
569A:  GOTO   5AF4 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... void send_fail_message(void) // VERSION 3.3 17.1.2016 
.................... { 
.................... 	//COM1_send_str("\r\nFAIL\r\n"); 
.................... } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... float read_temperature(void)  
.................... { 
.................... 	float temp; 
.................... 	SINT val; 
.................... 	set_adc_channel(A2D_TEMP); // read temperature 
*
2DE4:  MOVLW  18
2DE6:  MOVWF  01
2DE8:  MOVF   FC2,W
2DEA:  ANDLW  83
2DEC:  IORWF  01,W
2DEE:  MOVWF  FC2
.................... 	delay_us(50); 
2DF0:  MOVLW  42
2DF2:  MOVWF  00
2DF4:  DECFSZ 00,F
2DF6:  BRA    2DF4
2DF8:  NOP   
.................... 	val = read_adc(); 
2DFA:  BSF    FC2.1
2DFC:  BTFSC  FC2.1
2DFE:  BRA    2DFC
2E00:  MOVFF  FC4,231
2E04:  MOVLB  2
2E06:  MOVFF  FC3,230
.................... 	temp = (float)val / 1024.0 * 3.3; 
2E0A:  MOVFF  231,233
2E0E:  MOVFF  230,232
2E12:  MOVLB  0
2E14:  BRA    2B1A
2E16:  MOVFF  03,235
2E1A:  MOVFF  02,234
2E1E:  MOVFF  01,233
2E22:  MOVFF  00,232
2E26:  MOVFF  03,240
2E2A:  MOVFF  02,23F
2E2E:  MOVFF  01,23E
2E32:  MOVFF  00,23D
2E36:  MOVLB  2
2E38:  CLRF   x44
2E3A:  CLRF   x43
2E3C:  CLRF   x42
2E3E:  MOVLW  89
2E40:  MOVWF  x41
2E42:  MOVLB  0
2E44:  CALL   182A
2E48:  MOVFF  03,235
2E4C:  MOVFF  02,234
2E50:  MOVFF  01,233
2E54:  MOVFF  00,232
2E58:  MOVFF  03,240
2E5C:  MOVFF  02,23F
2E60:  MOVFF  01,23E
2E64:  MOVFF  00,23D
2E68:  MOVLW  33
2E6A:  MOVLB  2
2E6C:  MOVWF  x44
2E6E:  MOVWF  x43
2E70:  MOVLW  53
2E72:  MOVWF  x42
2E74:  MOVLW  80
2E76:  MOVWF  x41
2E78:  MOVLB  0
2E7A:  CALL   1988
2E7E:  MOVFF  03,22F
2E82:  MOVFF  02,22E
2E86:  MOVFF  01,22D
2E8A:  MOVFF  00,22C
.................... 	temp -= 0.75; 
2E8E:  BSF    FD8.1
2E90:  MOVFF  22F,235
2E94:  MOVFF  22E,234
2E98:  MOVFF  22D,233
2E9C:  MOVFF  22C,232
2EA0:  MOVLB  2
2EA2:  CLRF   x39
2EA4:  CLRF   x38
2EA6:  MOVLW  40
2EA8:  MOVWF  x37
2EAA:  MOVLW  7E
2EAC:  MOVWF  x36
2EAE:  MOVLB  0
2EB0:  RCALL  2B6C
2EB2:  MOVFF  03,22F
2EB6:  MOVFF  02,22E
2EBA:  MOVFF  01,22D
2EBE:  MOVFF  00,22C
.................... 	temp *= 100; 
2EC2:  MOVFF  22F,240
2EC6:  MOVFF  22E,23F
2ECA:  MOVFF  22D,23E
2ECE:  MOVFF  22C,23D
2ED2:  MOVLB  2
2ED4:  CLRF   x44
2ED6:  CLRF   x43
2ED8:  MOVLW  48
2EDA:  MOVWF  x42
2EDC:  MOVLW  85
2EDE:  MOVWF  x41
2EE0:  MOVLB  0
2EE2:  CALL   1988
2EE6:  MOVFF  03,22F
2EEA:  MOVFF  02,22E
2EEE:  MOVFF  01,22D
2EF2:  MOVFF  00,22C
.................... 	temp += 25.0; 
2EF6:  BCF    FD8.1
2EF8:  MOVFF  22F,235
2EFC:  MOVFF  22E,234
2F00:  MOVFF  22D,233
2F04:  MOVFF  22C,232
2F08:  MOVLB  2
2F0A:  CLRF   x39
2F0C:  CLRF   x38
2F0E:  MOVLW  48
2F10:  MOVWF  x37
2F12:  MOVLW  83
2F14:  MOVWF  x36
2F16:  MOVLB  0
2F18:  RCALL  2B6C
2F1A:  MOVFF  03,22F
2F1E:  MOVFF  02,22E
2F22:  MOVFF  01,22D
2F26:  MOVFF  00,22C
.................... 	return temp; 
2F2A:  MOVFF  22C,00
2F2E:  MOVFF  22D,01
2F32:  MOVFF  22E,02
2F36:  MOVFF  22F,03
2F3A:  GOTO   30FE (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
.................... /*  //////////yehuda 1520Q cancel US,UT and BG   
.................... SINT Bits_status1(void)// VERSION 3.3 21.1.2016 
.................... { 
.................... 	// float temp; 
.................... 	byte t = 0; 
.................... 	t =          (bit)setup.data_source ; 
.................... 	t = t + ( (bit)setup.data_polarity <<  1); 
.................... 	t = t + ( (bit)setup.randomizer <<     2); 
.................... 	t = t + ( (bit)setup.clock_source <<   3); 
.................... 	t = t + ( (bit)setup.clock_polarity << 4); 
.................... 	t = t + ( (bit)setup.SOQPSK <<         5); 
.................... 	t = t + ( (bit)0 <<       6); 
.................... 	t = t + ( (bit)0 <<       7); 
.................... 	 
.................... 	//  setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
.................... 	return t; 
.................... } 
.................... */ 
.................... //---------------------------------------------------------------------------- 
.................... /*  //////////yehuda 1520Q cancel US,UT and BG   
.................... SINT Bits_status2(void)// VERSION 3.3 2.2.2016 
.................... { 
.................... 	// float temp; 
.................... 	set_adc_channel(A2D_PREV); // select forward power input 
.................... 	delay_us(20); 
.................... 	revp = read_adc(); 
.................... 	if (revp <= 580) 
....................     revp_status = 0;// Q strcpy(revstat, "GOOD"); 
.................... 	else 
.................... 	revp_status = 1;//Q strcpy(revstat, "BAD"); 
.................... 	 
.................... 	byte t = 0; 
.................... 	t =       (bit)setup.cot ; //RB 
.................... 	t = t + ( (bit)setup.rc <<  1); 
.................... 	t = t + ( (bit)gl_current_power_en_value << 2);//RF 
.................... 	t = t + ( (bit)(gl_current_power_level == power_level) <<  3); 
.................... 	t = t + ( (bit)setup.UART_Status << 4); 
.................... 	t = t + ( (bit)revp_status <<       5); 
.................... 	t = t + ( (bit)0 <<       6); 
.................... 	t = t + ( (bit)0 <<       7); 
.................... 	 
.................... 	 
.................... 	return t; 
.................... } 
.................... */ 
.................... //---------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------   
.................... SINT  set_power_level(void) 
.................... { 
.................... 	UINT idx; 
.................... 	idx = get_int(); 
*
3230:  CALL   22AC
3234:  MOVFF  02,218
3238:  MOVFF  01,217
.................... 	setup.bitpower_level = idx;// VERSION 3.3 29.02.2016 
323C:  MOVFF  217,FB
.................... 	if (idx <= 40 && idx >= 20) 
3240:  MOVLB  2
3242:  MOVF   x18,F
3244:  BNZ   3294
3246:  MOVF   x17,W
3248:  SUBLW  28
324A:  BNC   3294
324C:  MOVF   x18,F
324E:  BNZ   3256
3250:  MOVF   x17,W
3252:  SUBLW  13
3254:  BC    3294
....................     { 
.................... 		setup.power_level = idx - 20; 
3256:  MOVLW  14
3258:  SUBWF  x17,W
325A:  MOVLB  0
325C:  MOVWF  xB3
325E:  MOVLW  00
3260:  MOVLB  2
3262:  SUBWFB x18,W
3264:  MOVLB  0
3266:  MOVWF  xB4
.................... 		power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
3268:  BCF    FD8.0
326A:  RLCF   xB3,W
326C:  MOVWF  02
326E:  RLCF   xB4,W
3270:  MOVWF  03
3272:  MOVF   02,W
3274:  ADDLW  C2
3276:  MOVWF  FE9
3278:  MOVLW  00
327A:  ADDWFC 03,W
327C:  MOVWF  FEA
327E:  MOVFF  FEC,1A
3282:  MOVF   FED,F
3284:  MOVFF  FEF,19
.................... 		return 1; 
3288:  MOVLW  01
328A:  MOVWF  01
328C:  MOVLW  00
328E:  MOVWF  02
3290:  BRA    329A
3292:  MOVLB  2
.................... 	} 
.................... 	return 0; 
3294:  MOVLW  00
3296:  MOVWF  01
3298:  MOVWF  02
329A:  MOVLB  0
329C:  GOTO   4624 (RETURN)
.................... } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT  set_low_power_level(void) 
.................... { 
.................... 	UINT idx; 
.................... 	idx = get_int(); 
*
31C0:  CALL   22AC
31C4:  MOVFF  02,218
31C8:  MOVFF  01,217
.................... 	setup.bitlow_power_level  = idx;// VERSION 3.3 29.02.2016 
31CC:  MOVFF  217,FA
.................... 	if (idx <= 40 && idx >= 20) 
31D0:  MOVLB  2
31D2:  MOVF   x18,F
31D4:  BNZ   3224
31D6:  MOVF   x17,W
31D8:  SUBLW  28
31DA:  BNC   3224
31DC:  MOVF   x18,F
31DE:  BNZ   31E6
31E0:  MOVF   x17,W
31E2:  SUBLW  13
31E4:  BC    3224
....................     { 
.................... 		setup.power_low_level = idx - 20; 
31E6:  MOVLW  14
31E8:  SUBWF  x17,W
31EA:  MOVLB  0
31EC:  MOVWF  xF1
31EE:  MOVLW  00
31F0:  MOVLB  2
31F2:  SUBWFB x18,W
31F4:  MOVLB  0
31F6:  MOVWF  xF2
.................... 		low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
31F8:  BCF    FD8.0
31FA:  RLCF   xF1,W
31FC:  MOVWF  02
31FE:  RLCF   xF2,W
3200:  MOVWF  03
3202:  MOVF   02,W
3204:  ADDLW  C2
3206:  MOVWF  FE9
3208:  MOVLW  00
320A:  ADDWFC 03,W
320C:  MOVWF  FEA
320E:  MOVFF  FEC,18
3212:  MOVF   FED,F
3214:  MOVFF  FEF,17
.................... 		return 1; 
3218:  MOVLW  01
321A:  MOVWF  01
321C:  MOVLW  00
321E:  MOVWF  02
3220:  BRA    322A
3222:  MOVLB  2
.................... 	} 
.................... 	return 0; 
3224:  MOVLW  00
3226:  MOVWF  01
3228:  MOVWF  02
322A:  MOVLB  0
322C:  GOTO   456C (RETURN)
.................... } 
....................  
.................... void update_temperature_string()  
.................... { 
.................... 	if(setup.pwr) 
*
30F6:  MOVF   xA5,W
30F8:  IORWF  xA6,W
30FA:  BZ    3160
.................... 	{ 
.................... 		sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", read_temperature()); 
30FC:  BRA    2DE4
30FE:  MOVFF  03,22F
3102:  MOVFF  02,22E
3106:  MOVFF  01,22D
310A:  MOVFF  00,22C
310E:  MOVLW  01
3110:  MOVLB  1
3112:  MOVWF  x97
3114:  MOVLW  6C
3116:  MOVWF  x96
3118:  MOVLW  AE
311A:  MOVWF  FF6
311C:  MOVLW  0B
311E:  MOVWF  FF7
3120:  MOVLW  06
3122:  MOVLB  2
3124:  MOVWF  x30
3126:  MOVLB  0
3128:  CALL   27BC
312C:  MOVLW  05
312E:  MOVWF  FE9
3130:  MOVFF  22F,233
3134:  MOVFF  22E,232
3138:  MOVFF  22D,231
313C:  MOVFF  22C,230
3140:  MOVLW  02
3142:  MOVLB  2
3144:  MOVWF  x34
3146:  MOVLB  0
3148:  BRA    2F3E
314A:  MOVLW  B9
314C:  MOVWF  FF6
314E:  MOVLW  0B
3150:  MOVWF  FF7
3152:  MOVLW  08
3154:  MOVLB  2
3156:  MOVWF  x30
3158:  MOVLB  0
315A:  CALL   27BC
.................... 	} 
315E:  BRA    319A
.................... 	else 
.................... 	{ 
.................... 		COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
3160:  MOVLW  02
3162:  MOVWF  FEA
3164:  MOVLW  17
3166:  MOVWF  FE9
3168:  MOVFF  FF2,22C
316C:  BCF    FF2.7
316E:  MOVLW  15
3170:  MOVWF  01
3172:  CLRF   FF7
3174:  MOVLW  00
3176:  CALL   0404
317A:  TBLRD*-
317C:  TBLRD*+
317E:  MOVFF  FF5,FEE
3182:  DECFSZ 01,F
3184:  BRA    317C
3186:  MOVLB  2
3188:  BTFSC  x2C.7
318A:  BSF    FF2.7
318C:  MOVLW  02
318E:  MOVWF  x55
3190:  MOVLW  17
3192:  MOVWF  x54
3194:  MOVLB  0
3196:  CALL   20AE
.................... 	} 
319A:  RETURN 0
.................... } 
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... // VERSION 3.3 17.1.2016 
.................... //---------------------------------------------------------------------------- 
.................... /* 
.................... 	The message structure is defined below. 
.................... 	 
.................... 	Byte# Description Remarks 
.................... 	1 Header  Constant - 47 Hex 
.................... 	2 Temperature Send 2's complement 
.................... 	3 Power level 
.................... 	4 Current 
.................... 	5 PLL lock 
.................... 	6 Checksum  Checksum of all preceding bytes 
.................... 	 
.................... 	Table 1 - Status Packet structure 
.................... 	 
.................... 	The status message consists of 6 serial bytes of 10 bits, for a total of 60 bits. 
.................... 	Transmission time is 0.52mS, max PRI 10mS. 
.................... */ 
....................  
.................... /*  //////////yehuda 1520Q cancel US,UT and BG   
.................... void prepare_binary_status(void) 
.................... { 
.................... 	UINT chksum = 0, idx; 
.................... 	SINT current_temperature;   
.................... 	power_output(); 
.................... 	byte BitsStatus1,BitsStatus2; 
.................... 	BitsStatus1 = Bits_status1(); 
.................... 	BitsStatus2 = Bits_status2(); 
.................... 	 
.................... 	current_temperature = (SINT)(read_temperature() * 100); 
.................... 	//measured_current = read_current(); 
.................... 	//power_level_stat = current_power; 
.................... 	status_buffer[0] = 0xFB;                              // Synchronization Byte 1 
.................... 	status_buffer[1] = 0x60;                              // Synchronization Byte 2 
.................... 	status_buffer[2] = TX_Counter;                        // The counter increments by one each time an update is sent 0 to 255 
.................... 	status_buffer[3] = (setup.frequency >> 8) & 0xff;      // MSB TX frequency  
.................... 	status_buffer[4] = setup.frequency & 0xff;            // LSB TX frequency  
.................... 	status_buffer[5] = setup.mode;                        // State of modulation state 
.................... 	status_buffer[6] = BitsStatus1;                       // Bits status of: spare, spare, Differential encoding ,Clock inverted ,Clock source ,Data randomization ,Data inverted, Data source 
.................... 	if(setup.pwr && gl_current_power_en_value) 
.................... 	{ 
.................... 		status_buffer[7] = (current_temperature >> 8) & 0xff;  // MSB TX Temperature  
.................... 		status_buffer[8] = current_temperature & 0xff;        // LSB TX Temperature  
.................... 	}  
.................... 	else  
.................... 	{ 
.................... 		// signal that the transmiter is off 
.................... 		status_buffer[7] = 0x7f; 
.................... 		status_buffer[8] = 0xff; 
.................... 	} 
.................... 	status_buffer[9] = (setup.bitrate >> 8) & 0xff;       // MSB Bit rate state 
.................... 	status_buffer[10] = setup.bitrate & 0xff;             // LSB Bit rate state  
.................... 	status_buffer[11] = current_power;                    // TX power in dBm 
.................... 	status_buffer[12] = setup.internal_pattern;           // Data type while using internal data 
.................... 	status_buffer[13] = BitsStatus2;                      // Bits status of: Reverse Power N/A 
.................... 	status_buffer[14] = setup.bitlow_power_level;         // TX low power in dBm (VL) 
.................... 	status_buffer[15] = setup.bitpower_level;             // TX low power in dBm (VP) 
.................... 	status_buffer[16] = revp/2;                           // Revers power div by 2 in order to make it 1 BIT 
.................... 	status_buffer[17] = VER;                              // TX VERSION 
.................... 	status_buffer[18] = (setup.unit_ID >> 8) & 0xff;      // MSB TX Serial number 
.................... 	status_buffer[19] = setup.unit_ID & 0xff;             // LSB TX Serial number 
.................... 	status_buffer[20] = (setup.setup_version >> 8)&0xff;  // MSB of the config version 
.................... 	status_buffer[21] = setup.setup_version & 0xff;       // LSB of the config version 
.................... 	status_buffer[22] = 0xAA;                             // Spare 
.................... 	status_buffer[23] = 0xAA;                             // Spare 
.................... 	 
.................... 	for (idx = 0; idx < BINARY_STATUS_LENTGH-2; idx++) 
.................... 	{ 
.................... 		chksum += status_buffer[idx]; 
.................... 	} 
.................... 	// add the checksum to the end of the binary message, LSB first (request by the client 16.11.16) 
.................... 	status_buffer[BINARY_STATUS_LENTGH-2] = chksum & 0xff; 
.................... 	status_buffer[BINARY_STATUS_LENTGH-1] =(chksum >> 8) & 0xff; 
.................... } 
.................... */ 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
.................... { 
.................... 	UCHAR chr, idx, device, addr, data, buf[40]; 
.................... 	ULONG freq, bitrate; 
.................... 	UINT  value; 
.................... 	chr = 2; 
*
5A5E:  MOVLW  02
5A60:  MOVLB  1
5A62:  MOVWF  xC4
.................... 	comm_ptr = 0; 
5A64:  CLRF   x35
.................... 	switch (toupper(get_char())) 
5A66:  MOVLB  0
5A68:  CALL   21F0
5A6C:  MOVFF  02,1FC
5A70:  MOVFF  01,1FB
5A74:  MOVLB  1
5A76:  MOVF   xFC,F
5A78:  BNZ   5A80
5A7A:  MOVF   xFB,W
5A7C:  SUBLW  60
5A7E:  BC    5A90
5A80:  MOVF   xFC,F
5A82:  BNZ   5A90
5A84:  MOVF   xFB,W
5A86:  SUBLW  7A
5A88:  BNC   5A90
5A8A:  MOVF   xFB,W
5A8C:  ANDLW  DF
5A8E:  BRA    5A92
5A90:  MOVF   xFB,W
5A92:  XORLW  48
5A94:  MOVLB  0
5A96:  BZ    5AF2
5A98:  XORLW  09
5A9A:  BZ    5AFC
5A9C:  XORLW  02
5A9E:  BTFSC  FD8.2
5AA0:  BRA    5BCE
5AA2:  XORLW  07
5AA4:  BTFSC  FD8.2
5AA6:  BRA    5CA2
5AA8:  XORLW  0B
5AAA:  BTFSC  FD8.2
5AAC:  BRA    5D20
5AAE:  XORLW  1D
5AB0:  BTFSC  FD8.2
5AB2:  BRA    5D60
5AB4:  XORLW  10
5AB6:  BTFSC  FD8.2
5AB8:  BRA    5DA4
5ABA:  XORLW  05
5ABC:  BTFSC  FD8.2
5ABE:  BRA    5DFE
5AC0:  XORLW  01
5AC2:  BTFSC  FD8.2
5AC4:  BRA    5F1A
5AC6:  XORLW  15
5AC8:  BTFSC  FD8.2
5ACA:  BRA    5FD2
5ACC:  XORLW  07
5ACE:  BTFSC  FD8.2
5AD0:  BRA    6078
5AD2:  XORLW  65
5AD4:  BTFSC  FD8.2
5AD6:  BRA    613E
5AD8:  XORLW  03
5ADA:  BTFSC  FD8.2
5ADC:  BRA    614C
5ADE:  XORLW  01
5AE0:  BTFSC  FD8.2
5AE2:  GOTO   6156
5AE6:  XORLW  64
5AE8:  BTFSC  FD8.2
5AEA:  GOTO   6164
5AEE:  GOTO   617A
....................     { 
.................... 		case 'H': 
.................... 		list_help1(); 
5AF2:  BRA    541E
.................... 		return 0; 
5AF4:  MOVLW  00
5AF6:  MOVWF  01
5AF8:  GOTO   6184
.................... 		case 'A': 
.................... 		switch (toupper(get_char())) 
5AFC:  CALL   21F0
5B00:  MOVFF  02,1FC
5B04:  MOVFF  01,1FB
5B08:  MOVLB  1
5B0A:  MOVF   xFC,F
5B0C:  BNZ   5B14
5B0E:  MOVF   xFB,W
5B10:  SUBLW  60
5B12:  BC    5B24
5B14:  MOVF   xFC,F
5B16:  BNZ   5B24
5B18:  MOVF   xFB,W
5B1A:  SUBLW  7A
5B1C:  BNC   5B24
5B1E:  MOVF   xFB,W
5B20:  ANDLW  DF
5B22:  BRA    5B26
5B24:  MOVF   xFB,W
5B26:  XORLW  54
5B28:  MOVLB  0
5B2A:  BZ    5B32
5B2C:  XORLW  1D
5B2E:  BZ    5B3C
5B30:  BRA    5BCC
....................         { 
.................... 			case 'T': 
.................... 			idx = get_int(); 
5B32:  CALL   22AC
5B36:  MOVFF  01,1C5
.................... 			 
.................... 			// write to attenuator 
.................... 			break; 
5B3A:  BRA    5BCC
.................... 			case 'I': 
.................... 			idx = get_int(); 
5B3C:  CALL   22AC
5B40:  MOVFF  01,1C5
.................... 			if (idx && idx < 4) 
5B44:  MOVLB  1
5B46:  MOVF   xC5,F
5B48:  BZ    5BCA
5B4A:  MOVF   xC5,W
5B4C:  SUBLW  03
5B4E:  BNC   5BCA
....................             { 
.................... 				set_adc_channel(idx-1); 
5B50:  MOVLW  01
5B52:  SUBWF  xC5,W
5B54:  MOVWF  xFB
5B56:  RLCF   xFB,W
5B58:  MOVWF  00
5B5A:  RLCF   00,F
5B5C:  MOVLW  FC
5B5E:  ANDWF  00,F
5B60:  MOVF   FC2,W
5B62:  ANDLW  83
5B64:  IORWF  00,W
5B66:  MOVWF  FC2
.................... 				delay_us(30); 
5B68:  MOVLW  27
5B6A:  MOVWF  00
5B6C:  DECFSZ 00,F
5B6E:  BRA    5B6C
5B70:  BRA    5B72
.................... 				value = read_adc(); 
5B72:  BSF    FC2.1
5B74:  BTFSC  FC2.1
5B76:  BRA    5B74
5B78:  MOVFF  FC3,1F9
5B7C:  MOVFF  FC4,1FA
.................... 				sprintf(buf, "$AR %lu\r", value); 
5B80:  MOVLW  01
5B82:  MOVWF  x97
5B84:  MOVLW  C9
5B86:  MOVWF  x96
5B88:  MOVLW  C2
5B8A:  MOVWF  FF6
5B8C:  MOVLW  0B
5B8E:  MOVWF  FF7
5B90:  MOVLW  04
5B92:  MOVLB  2
5B94:  MOVWF  x30
5B96:  MOVLB  0
5B98:  CALL   27BC
5B9C:  MOVLW  10
5B9E:  MOVWF  FE9
5BA0:  MOVFF  1FA,21D
5BA4:  MOVFF  1F9,21C
5BA8:  CALL   27E4
5BAC:  MOVLW  0D
5BAE:  MOVLB  2
5BB0:  MOVWF  x3D
5BB2:  MOVLB  0
5BB4:  CALL   279A
.................... 				COM1_send_str(buf); 
5BB8:  MOVLW  01
5BBA:  MOVLB  2
5BBC:  MOVWF  x55
5BBE:  MOVLW  C9
5BC0:  MOVWF  x54
5BC2:  MOVLB  0
5BC4:  CALL   20AE
5BC8:  MOVLB  1
.................... 			} 
.................... 			break; 
5BCA:  MOVLB  0
.................... 		} 
.................... 		break; 
5BCC:  BRA    6180
.................... 		case 'C': 
.................... 		chr = toupper(get_char()); 
5BCE:  CALL   21F0
5BD2:  MOVFF  02,1FC
5BD6:  MOVFF  01,1FB
5BDA:  MOVLB  1
5BDC:  MOVF   xFC,F
5BDE:  BNZ   5BE6
5BE0:  MOVF   xFB,W
5BE2:  SUBLW  60
5BE4:  BC    5BF6
5BE6:  MOVF   xFC,F
5BE8:  BNZ   5BF6
5BEA:  MOVF   xFB,W
5BEC:  SUBLW  7A
5BEE:  BNC   5BF6
5BF0:  MOVF   xFB,W
5BF2:  ANDLW  DF
5BF4:  BRA    5BF8
5BF6:  MOVF   xFB,W
5BF8:  MOVWF  xC4
.................... 		if (chr == 'F') 
5BFA:  MOVF   xC4,W
5BFC:  SUBLW  46
5BFE:  BNZ   5C32
....................         { 
.................... 			freq = get_frequency(); 
5C00:  MOVLB  0
5C02:  CALL   28A0
5C06:  MOVLB  1
5C08:  CLRF   xF4
5C0A:  CLRF   xF3
5C0C:  MOVFF  02,1F2
5C10:  MOVFF  01,1F1
.................... 			PLL_compute_freq_parameters(freq); 
5C14:  MOVFF  1F2,1FC
5C18:  MOVFF  1F1,1FB
5C1C:  MOVFF  1F2,222
5C20:  MOVFF  1F1,221
5C24:  MOVLB  0
5C26:  CALL   13C6
.................... 			PLL_update(); 
5C2A:  CALL   169E
.................... 		} 
5C2E:  BRA    5C9C
5C30:  MOVLB  1
.................... 		else if (chr == 'P') 
5C32:  MOVF   xC4,W
5C34:  SUBLW  50
5C36:  BNZ   5C9E
....................         { 
.................... 			idx = get_int(); 
5C38:  MOVLB  0
5C3A:  CALL   22AC
5C3E:  MOVFF  01,1C5
.................... 			if (idx < 2) 
5C42:  MOVLB  1
5C44:  MOVF   xC5,W
5C46:  SUBLW  01
5C48:  BNC   5C9E
.................... 			{ 
.................... 				setup.clock_polarity = idx & 1; 
5C4A:  MOVF   xC5,W
5C4C:  ANDLW  01
5C4E:  MOVLB  0
5C50:  MOVWF  xA8
.................... 				sprintf(buf, "$CP %u\r", idx); 
5C52:  MOVLW  01
5C54:  MOVLB  1
5C56:  MOVWF  x97
5C58:  MOVLW  C9
5C5A:  MOVWF  x96
5C5C:  MOVLW  CC
5C5E:  MOVWF  FF6
5C60:  MOVLW  0B
5C62:  MOVWF  FF7
5C64:  MOVLW  04
5C66:  MOVLB  2
5C68:  MOVWF  x30
5C6A:  MOVLB  0
5C6C:  CALL   27BC
5C70:  MOVFF  1C5,21C
5C74:  MOVLW  1B
5C76:  MOVLB  2
5C78:  MOVWF  x1D
5C7A:  MOVLB  0
5C7C:  CALL   2934
5C80:  MOVLW  0D
5C82:  MOVLB  2
5C84:  MOVWF  x3D
5C86:  MOVLB  0
5C88:  CALL   279A
.................... 				COM1_send_str(buf); 
5C8C:  MOVLW  01
5C8E:  MOVLB  2
5C90:  MOVWF  x55
5C92:  MOVLW  C9
5C94:  MOVWF  x54
5C96:  MOVLB  0
5C98:  CALL   20AE
5C9C:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		break; 
5C9E:  MOVLB  0
5CA0:  BRA    6180
.................... 		case 'D': 
.................... 		if (toupper(get_char()) == 'I') 
5CA2:  CALL   21F0
5CA6:  MOVFF  02,1FC
5CAA:  MOVFF  01,1FB
5CAE:  MOVLB  1
5CB0:  MOVF   xFC,F
5CB2:  BNZ   5CBA
5CB4:  MOVF   xFB,W
5CB6:  SUBLW  60
5CB8:  BC    5CCA
5CBA:  MOVF   xFC,F
5CBC:  BNZ   5CCA
5CBE:  MOVF   xFB,W
5CC0:  SUBLW  7A
5CC2:  BNC   5CCA
5CC4:  MOVF   xFB,W
5CC6:  ANDLW  DF
5CC8:  BRA    5CCC
5CCA:  MOVF   xFB,W
5CCC:  SUBLW  49
5CCE:  BNZ   5D1C
....................         { 
.................... 			idx = input_c(); // change to REAL input ports 
5CD0:  MOVFF  F82,1C5
.................... 			sprintf(buf, "$DR %02X\r", idx); 
5CD4:  MOVLW  01
5CD6:  MOVWF  x97
5CD8:  MOVLW  C9
5CDA:  MOVWF  x96
5CDC:  MOVLW  D4
5CDE:  MOVWF  FF6
5CE0:  MOVLW  0B
5CE2:  MOVWF  FF7
5CE4:  MOVLW  04
5CE6:  MOVLB  2
5CE8:  MOVWF  x30
5CEA:  MOVLB  0
5CEC:  CALL   27BC
5CF0:  MOVFF  1C5,1FB
5CF4:  MOVLW  37
5CF6:  MOVLB  1
5CF8:  MOVWF  xFC
5CFA:  MOVLB  0
5CFC:  RCALL  569E
5CFE:  MOVLW  0D
5D00:  MOVLB  2
5D02:  MOVWF  x3D
5D04:  MOVLB  0
5D06:  CALL   279A
.................... 			COM1_send_str(buf); 
5D0A:  MOVLW  01
5D0C:  MOVLB  2
5D0E:  MOVWF  x55
5D10:  MOVLW  C9
5D12:  MOVWF  x54
5D14:  MOVLB  0
5D16:  CALL   20AE
5D1A:  MOVLB  1
.................... 		} 
.................... 		break; 
5D1C:  MOVLB  0
5D1E:  BRA    6180
.................... 		case 'O': 
.................... 		if (toupper(get_char()) == 'T') 
5D20:  CALL   21F0
5D24:  MOVFF  02,1FC
5D28:  MOVFF  01,1FB
5D2C:  MOVLB  1
5D2E:  MOVF   xFC,F
5D30:  BNZ   5D38
5D32:  MOVF   xFB,W
5D34:  SUBLW  60
5D36:  BC    5D48
5D38:  MOVF   xFC,F
5D3A:  BNZ   5D48
5D3C:  MOVF   xFB,W
5D3E:  SUBLW  7A
5D40:  BNC   5D48
5D42:  MOVF   xFB,W
5D44:  ANDLW  DF
5D46:  BRA    5D4A
5D48:  MOVF   xFB,W
5D4A:  SUBLW  54
5D4C:  BNZ   5D5C
....................         { 
.................... 			value = get_hex(); 
5D4E:  MOVLB  0
5D50:  RCALL  56E8
5D52:  MOVFF  01,1FA
5D56:  MOVFF  00,1F9
5D5A:  MOVLB  1
.................... 			// output bits 
.................... 		} 
.................... 		break; 
5D5C:  MOVLB  0
5D5E:  BRA    6180
.................... 		case 'R': 
.................... 		if (toupper(get_char()) == 'D') 
5D60:  CALL   21F0
5D64:  MOVFF  02,1FC
5D68:  MOVFF  01,1FB
5D6C:  MOVLB  1
5D6E:  MOVF   xFC,F
5D70:  BNZ   5D78
5D72:  MOVF   xFB,W
5D74:  SUBLW  60
5D76:  BC    5D88
5D78:  MOVF   xFC,F
5D7A:  BNZ   5D88
5D7C:  MOVF   xFB,W
5D7E:  SUBLW  7A
5D80:  BNC   5D88
5D82:  MOVF   xFB,W
5D84:  ANDLW  DF
5D86:  BRA    5D8A
5D88:  MOVF   xFB,W
5D8A:  SUBLW  44
5D8C:  BNZ   5DA0
....................         { 
.................... 			output_high(D2A_RESET); 
5D8E:  BSF    F8A.3
.................... 			delay_ms(100); 
5D90:  MOVLW  64
5D92:  MOVLB  2
5D94:  MOVWF  x2D
5D96:  MOVLB  0
5D98:  CALL   0DF4
.................... 			output_low(D2A_RESET); 
5D9C:  BCF    F8A.3
5D9E:  MOVLB  1
.................... 		} 
.................... 		break; 
5DA0:  MOVLB  0
5DA2:  BRA    6180
.................... 		case 'B':             // bit rate 
.................... 		if (toupper(get_char()) == 'R') 
5DA4:  CALL   21F0
5DA8:  MOVFF  02,1FC
5DAC:  MOVFF  01,1FB
5DB0:  MOVLB  1
5DB2:  MOVF   xFC,F
5DB4:  BNZ   5DBC
5DB6:  MOVF   xFB,W
5DB8:  SUBLW  60
5DBA:  BC    5DCC
5DBC:  MOVF   xFC,F
5DBE:  BNZ   5DCC
5DC0:  MOVF   xFB,W
5DC2:  SUBLW  7A
5DC4:  BNC   5DCC
5DC6:  MOVF   xFB,W
5DC8:  ANDLW  DF
5DCA:  BRA    5DCE
5DCC:  MOVF   xFB,W
5DCE:  SUBLW  52
5DD0:  BNZ   5DFA
....................         { 
.................... 			bitrate = str_to_long(); 
5DD2:  MOVLB  0
5DD4:  BRA    5802
5DD6:  MOVFF  03,1F8
5DDA:  MOVFF  02,1F7
5DDE:  MOVFF  01,1F6
5DE2:  MOVFF  00,1F5
.................... 			set_bitrate(bitrate); 
5DE6:  MOVFF  1F6,1FC
5DEA:  MOVFF  1F5,1FB
5DEE:  MOVFF  1F6,1FE
5DF2:  MOVFF  1F5,1FD
5DF6:  BRA    58C2
5DF8:  MOVLB  1
.................... 		} 
.................... 		break; 
5DFA:  MOVLB  0
5DFC:  BRA    6180
.................... 		case 'G': 
.................... 		device = get_char(); 
5DFE:  CALL   21F0
5E02:  MOVFF  01,1C6
.................... 		addr = get_hex(); 
5E06:  RCALL  56E8
5E08:  MOVFF  00,1C7
.................... 		switch (toupper(device)) 
5E0C:  MOVLB  1
5E0E:  MOVF   xC6,W
5E10:  SUBLW  60
5E12:  BC    5E20
5E14:  MOVF   xC6,W
5E16:  SUBLW  7A
5E18:  BNC   5E20
5E1A:  MOVF   xC6,W
5E1C:  ANDLW  DF
5E1E:  BRA    5E22
5E20:  MOVF   xC6,W
5E22:  XORLW  46
5E24:  MOVLB  0
5E26:  BZ    5E2E
5E28:  XORLW  02
5E2A:  BZ    5EA8
5E2C:  BRA    5F18
....................         { 
.................... 			case 'F': 
.................... 			chr = get_FPGA_register(addr, &data); 
5E2E:  MOVFF  1C7,1FB
5E32:  MOVLW  01
5E34:  MOVLB  1
5E36:  MOVWF  xFD
5E38:  MOVLW  C8
5E3A:  MOVWF  xFC
5E3C:  MOVLB  0
5E3E:  BRA    5952
5E40:  MOVFF  01,1C4
.................... 			sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
5E44:  MOVLW  01
5E46:  MOVLB  1
5E48:  MOVWF  x97
5E4A:  MOVLW  C9
5E4C:  MOVWF  x96
5E4E:  MOVLW  DE
5E50:  MOVWF  FF6
5E52:  MOVLW  0B
5E54:  MOVWF  FF7
5E56:  MOVLW  07
5E58:  MOVLB  2
5E5A:  MOVWF  x30
5E5C:  MOVLB  0
5E5E:  CALL   27BC
5E62:  MOVFF  1C7,1FB
5E66:  MOVLW  37
5E68:  MOVLB  1
5E6A:  MOVWF  xFC
5E6C:  MOVLB  0
5E6E:  RCALL  569E
5E70:  MOVLW  20
5E72:  MOVLB  2
5E74:  MOVWF  x3D
5E76:  MOVLB  0
5E78:  CALL   279A
5E7C:  MOVFF  1C4,1FB
5E80:  MOVLW  37
5E82:  MOVLB  1
5E84:  MOVWF  xFC
5E86:  MOVLB  0
5E88:  RCALL  569E
5E8A:  MOVLW  0D
5E8C:  MOVLB  2
5E8E:  MOVWF  x3D
5E90:  MOVLB  0
5E92:  CALL   279A
.................... 			COM1_send_str(buf); 
5E96:  MOVLW  01
5E98:  MOVLB  2
5E9A:  MOVWF  x55
5E9C:  MOVLW  C9
5E9E:  MOVWF  x54
5EA0:  MOVLB  0
5EA2:  CALL   20AE
.................... 			break; 
5EA6:  BRA    5F18
.................... 			case 'D': 
.................... 			data = read_D2A(addr); 
5EA8:  MOVFF  1C7,1FB
5EAC:  BRA    59FC
5EAE:  MOVFF  01,1C8
.................... 			sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
5EB2:  MOVLW  01
5EB4:  MOVLB  1
5EB6:  MOVWF  x97
5EB8:  MOVLW  C9
5EBA:  MOVWF  x96
5EBC:  MOVLW  F0
5EBE:  MOVWF  FF6
5EC0:  MOVLW  0B
5EC2:  MOVWF  FF7
5EC4:  MOVLW  07
5EC6:  MOVLB  2
5EC8:  MOVWF  x30
5ECA:  MOVLB  0
5ECC:  CALL   27BC
5ED0:  MOVFF  1C7,1FB
5ED4:  MOVLW  37
5ED6:  MOVLB  1
5ED8:  MOVWF  xFC
5EDA:  MOVLB  0
5EDC:  CALL   569E
5EE0:  MOVLW  20
5EE2:  MOVLB  2
5EE4:  MOVWF  x3D
5EE6:  MOVLB  0
5EE8:  CALL   279A
5EEC:  MOVFF  1C8,1FB
5EF0:  MOVLW  37
5EF2:  MOVLB  1
5EF4:  MOVWF  xFC
5EF6:  MOVLB  0
5EF8:  CALL   569E
5EFC:  MOVLW  0D
5EFE:  MOVLB  2
5F00:  MOVWF  x3D
5F02:  MOVLB  0
5F04:  CALL   279A
.................... 			COM1_send_str(buf); 
5F08:  MOVLW  01
5F0A:  MOVLB  2
5F0C:  MOVWF  x55
5F0E:  MOVLW  C9
5F10:  MOVWF  x54
5F12:  MOVLB  0
5F14:  CALL   20AE
.................... 			break; 
.................... 		} 
.................... 		break; 
5F18:  BRA    6180
.................... 		case 'F': // fill tables 
.................... 		skip_spc(); 
5F1A:  CALL   2210
.................... 		idx = get_char(); // get table designator 
5F1E:  CALL   21F0
5F22:  MOVFF  01,1C5
.................... 		addr = get_int(); // get table index 
5F26:  CALL   22AC
5F2A:  MOVFF  01,1C7
.................... 		value = get_int(); // get value to put into table 
5F2E:  CALL   22AC
5F32:  MOVFF  02,1FA
5F36:  MOVFF  01,1F9
.................... 		switch (toupper(idx)) 
5F3A:  MOVLB  1
5F3C:  MOVF   xC5,W
5F3E:  SUBLW  60
5F40:  BC    5F4E
5F42:  MOVF   xC5,W
5F44:  SUBLW  7A
5F46:  BNC   5F4E
5F48:  MOVF   xC5,W
5F4A:  ANDLW  DF
5F4C:  BRA    5F50
5F4E:  MOVF   xC5,W
5F50:  XORLW  4E
5F52:  MOVLB  0
5F54:  BZ    5F60
5F56:  XORLW  1E
5F58:  BZ    5F86
5F5A:  XORLW  13
5F5C:  BZ    5FAC
5F5E:  BRA    5FD0
....................         { 
.................... 			case 'N': // negative voltage 
.................... 			if (addr < 3) 
5F60:  MOVLB  1
5F62:  MOVF   xC7,W
5F64:  SUBLW  02
5F66:  BNC   5F82
....................             { 
.................... 				setup.negative_voltage[addr] = value; 
5F68:  BCF    FD8.0
5F6A:  RLCF   xC7,W
5F6C:  CLRF   03
5F6E:  ADDLW  B6
5F70:  MOVWF  FE9
5F72:  MOVLW  00
5F74:  ADDWFC 03,W
5F76:  MOVWF  FEA
5F78:  MOVFF  1FA,FEC
5F7C:  MOVF   FED,F
5F7E:  MOVFF  1F9,FEF
.................... 			} 
.................... 			break; 
5F82:  MOVLB  0
5F84:  BRA    5FD0
.................... 			case 'P': // positive voltage 
.................... 			if (addr < 21) 
5F86:  MOVLB  1
5F88:  MOVF   xC7,W
5F8A:  SUBLW  14
5F8C:  BNC   5FA8
....................             { 
.................... 				setup.power_in[addr] = value; 
5F8E:  BCF    FD8.0
5F90:  RLCF   xC7,W
5F92:  CLRF   03
5F94:  ADDLW  C2
5F96:  MOVWF  FE9
5F98:  MOVLW  00
5F9A:  ADDWFC 03,W
5F9C:  MOVWF  FEA
5F9E:  MOVFF  1FA,FEC
5FA2:  MOVF   FED,F
5FA4:  MOVFF  1F9,FEF
.................... 			} 
.................... 			break; 
5FA8:  MOVLB  0
5FAA:  BRA    5FD0
.................... 			case 'C': // cont voltage 
.................... 			if (addr < 3) 
5FAC:  MOVLB  1
5FAE:  MOVF   xC7,W
5FB0:  SUBLW  02
5FB2:  BNC   5FCE
....................             { 
.................... 				setup.cont_voltage[addr] = value; 
5FB4:  BCF    FD8.0
5FB6:  RLCF   xC7,W
5FB8:  CLRF   03
5FBA:  ADDLW  BC
5FBC:  MOVWF  FE9
5FBE:  MOVLW  00
5FC0:  ADDWFC 03,W
5FC2:  MOVWF  FEA
5FC4:  MOVFF  1FA,FEC
5FC8:  MOVF   FED,F
5FCA:  MOVFF  1F9,FEF
.................... 			} 
.................... 			break; 
5FCE:  MOVLB  0
....................  
.................... 		} 
.................... 		break; 
5FD0:  BRA    6180
.................... 		case 'S': 
.................... 		device = get_char(); 
5FD2:  CALL   21F0
5FD6:  MOVFF  01,1C6
.................... 		addr = get_hex(); 
5FDA:  CALL   56E8
5FDE:  MOVFF  00,1C7
.................... 		data = get_hex(); 
5FE2:  CALL   56E8
5FE6:  MOVFF  00,1C8
.................... 		switch (toupper(device)) 
5FEA:  MOVLB  1
5FEC:  MOVF   xC6,W
5FEE:  SUBLW  60
5FF0:  BC    5FFE
5FF2:  MOVF   xC6,W
5FF4:  SUBLW  7A
5FF6:  BNC   5FFE
5FF8:  MOVF   xC6,W
5FFA:  ANDLW  DF
5FFC:  BRA    6000
5FFE:  MOVF   xC6,W
6000:  XORLW  46
6002:  MOVLB  0
6004:  BZ    6010
6006:  XORLW  02
6008:  BZ    6042
600A:  XORLW  12
600C:  BZ    6066
600E:  BRA    6076
....................         { 
.................... 			case 'F': 
.................... 			buf[0] = addr; 
6010:  MOVFF  1C7,1C9
.................... 			buf[1] = data; 
6014:  MOVFF  1C8,1CA
.................... 			FPGA_image[addr] = data; 
6018:  CLRF   03
601A:  MOVLB  1
601C:  MOVF   xC7,W
601E:  ADDLW  38
6020:  MOVWF  FE9
6022:  MOVLW  01
6024:  ADDWFC 03,W
6026:  MOVWF  FEA
6028:  MOVFF  1C8,FEF
.................... 			send_FPGA_command(2, buf); 
602C:  MOVLW  02
602E:  MOVLB  2
6030:  MOVWF  x2D
6032:  MOVLW  01
6034:  MOVWF  x2F
6036:  MOVLW  C9
6038:  MOVWF  x2E
603A:  MOVLB  0
603C:  CALL   16F0
.................... 			break; 
6040:  BRA    6076
.................... 			case 'D': 
.................... 			D2A_image[addr] = data; 
6042:  CLRF   03
6044:  MOVLB  1
6046:  MOVF   xC7,W
6048:  ADDLW  58
604A:  MOVWF  FE9
604C:  MOVLW  01
604E:  ADDWFC 03,W
6050:  MOVWF  FEA
6052:  MOVFF  1C8,FEF
.................... 			write_D2A(addr, data); 
6056:  MOVFF  1C7,1FB
605A:  MOVFF  1C8,1FC
605E:  MOVLB  0
6060:  CALL   512A
.................... 			break; 
6064:  BRA    6076
.................... 			case 'V': 
.................... 			allow_write = 2975; 
6066:  MOVLW  0B
6068:  MOVLB  1
606A:  MOVWF  x01
606C:  MOVLW  9F
606E:  MOVWF  x00
.................... 			write_setup(); 
6070:  MOVLB  0
6072:  CALL   2A20
.................... 			break; 
.................... 		} 
.................... 		break; 
6076:  BRA    6180
.................... 		case 'T': 
.................... 		if (toupper(get_char()) == 'T') 
6078:  CALL   21F0
607C:  MOVFF  02,1FC
6080:  MOVFF  01,1FB
6084:  MOVLB  1
6086:  MOVF   xFC,F
6088:  BNZ   6090
608A:  MOVF   xFB,W
608C:  SUBLW  60
608E:  BC    60A0
6090:  MOVF   xFC,F
6092:  BNZ   60A0
6094:  MOVF   xFB,W
6096:  SUBLW  7A
6098:  BNC   60A0
609A:  MOVF   xFB,W
609C:  ANDLW  DF
609E:  BRA    60A2
60A0:  MOVF   xFB,W
60A2:  SUBLW  54
60A4:  BNZ   613A
....................         if (toupper(get_char()) == 'C') 
60A6:  MOVLB  0
60A8:  CALL   21F0
60AC:  MOVFF  02,1FC
60B0:  MOVFF  01,1FB
60B4:  MOVLB  1
60B6:  MOVF   xFC,F
60B8:  BNZ   60C0
60BA:  MOVF   xFB,W
60BC:  SUBLW  60
60BE:  BC    60D0
60C0:  MOVF   xFC,F
60C2:  BNZ   60D0
60C4:  MOVF   xFB,W
60C6:  SUBLW  7A
60C8:  BNC   60D0
60CA:  MOVF   xFB,W
60CC:  ANDLW  DF
60CE:  BRA    60D2
60D0:  MOVF   xFB,W
60D2:  SUBLW  43
60D4:  BNZ   613A
.................... 		if (toupper(get_char()) == 'C') 
60D6:  MOVLB  0
60D8:  CALL   21F0
60DC:  MOVFF  02,1FC
60E0:  MOVFF  01,1FB
60E4:  MOVLB  1
60E6:  MOVF   xFC,F
60E8:  BNZ   60F0
60EA:  MOVF   xFB,W
60EC:  SUBLW  60
60EE:  BC    6100
60F0:  MOVF   xFC,F
60F2:  BNZ   6100
60F4:  MOVF   xFB,W
60F6:  SUBLW  7A
60F8:  BNC   6100
60FA:  MOVF   xFB,W
60FC:  ANDLW  DF
60FE:  BRA    6102
6100:  MOVF   xFB,W
6102:  SUBLW  43
6104:  BNZ   613A
.................... 		if (toupper(get_char()) == 'P') 
6106:  MOVLB  0
6108:  CALL   21F0
610C:  MOVFF  02,1FC
6110:  MOVFF  01,1FB
6114:  MOVLB  1
6116:  MOVF   xFC,F
6118:  BNZ   6120
611A:  MOVF   xFB,W
611C:  SUBLW  60
611E:  BC    6130
6120:  MOVF   xFC,F
6122:  BNZ   6130
6124:  MOVF   xFB,W
6126:  SUBLW  7A
6128:  BNC   6130
612A:  MOVF   xFB,W
612C:  ANDLW  DF
612E:  BRA    6132
6130:  MOVF   xFB,W
6132:  SUBLW  50
6134:  BNZ   613A
.................... 		ttccp = 1; 
6136:  MOVLW  01
6138:  MOVWF  x36
.................... 		break; 
613A:  MOVLB  0
613C:  BRA    6180
.................... 		case '1': // year 
.................... 		setup.year = get_int(); 
613E:  CALL   22AC
6142:  MOVFF  02,ED
6146:  MOVFF  01,EC
.................... 		break; 
614A:  BRA    6180
.................... 		case '2': // week 
.................... 		setup.week = get_int(); 
614C:  CALL   22AC
6150:  MOVFF  01,EE
.................... 		break; 
6154:  BRA    6180
.................... 		case '3': // unit ID 
.................... 		setup.unit_ID = get_int(); 
6156:  CALL   22AC
615A:  MOVFF  02,F0
615E:  MOVFF  01,EF
.................... 		break; 
6162:  BRA    6180
....................  
....................  
....................  
.................... case 'W':  
.................... 		power_output(); 
6164:  CALL   1E42
.................... 		delay_ms(50); 
6168:  MOVLW  32
616A:  MOVLB  2
616C:  MOVWF  x2D
616E:  MOVLB  0
6170:  CALL   0DF4
.................... 		//ret = 1; 
.................... 		update_all(); 
6174:  CALL   1CAC
.................... 		break; 
6178:  BRA    6180
....................  
....................  
....................  
.................... 		default: 
.................... 		return 0; 
617A:  MOVLW  00
617C:  MOVWF  01
617E:  BRA    6184
.................... 	} 
.................... 	return 0; 
6180:  MOVLW  00
6182:  MOVWF  01
6184:  GOTO   6214 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
.................... { 
.................... 	ULONG bitrate, sub; 
.................... 	bitrate = get_int();//* 100; 
*
2A4E:  RCALL  22AC
2A50:  MOVFF  01,00
2A54:  MOVFF  02,01
2A58:  CLRF   02
2A5A:  CLRF   03
2A5C:  MOVFF  03,21A
2A60:  MOVFF  02,219
2A64:  MOVFF  01,218
2A68:  MOVFF  00,217
.................... 	get_char(); 
2A6C:  CALL   21F0
.................... 	sub = get_int(); 
2A70:  RCALL  22AC
2A72:  MOVFF  01,00
2A76:  MOVFF  02,01
2A7A:  CLRF   02
2A7C:  CLRF   03
2A7E:  MOVFF  03,21E
2A82:  MOVFF  02,21D
2A86:  MOVFF  01,21C
2A8A:  MOVFF  00,21B
.................... 	 
.................... 	if (peek_char() == '.') 
2A8E:  CALL   21D2
2A92:  MOVFF  02,220
2A96:  MOVFF  01,21F
2A9A:  MOVLB  2
2A9C:  MOVF   01,W
2A9E:  SUBLW  2E
2AA0:  BNZ   2ADE
2AA2:  MOVF   x20,F
2AA4:  BNZ   2ADE
.................... 	{ 
.................... 		get_char(); 
2AA6:  MOVLB  0
2AA8:  CALL   21F0
.................... 		sub = get_int(); 
2AAC:  CALL   22AC
2AB0:  MOVFF  01,00
2AB4:  MOVFF  02,01
2AB8:  CLRF   02
2ABA:  CLRF   03
2ABC:  MOVFF  03,21E
2AC0:  MOVFF  02,21D
2AC4:  MOVFF  01,21C
2AC8:  MOVFF  00,21B
.................... 		bitrate += sub; 
2ACC:  MOVLB  2
2ACE:  MOVF   x1B,W
2AD0:  ADDWF  x17,F
2AD2:  MOVF   x1C,W
2AD4:  ADDWFC x18,F
2AD6:  MOVF   x1D,W
2AD8:  ADDWFC x19,F
2ADA:  MOVF   x1E,W
2ADC:  ADDWFC x1A,F
.................... 	} 
.................... 	 
.................... 	setup.bitrate = bitrate * 100 + sub; 
2ADE:  MOVFF  21A,236
2AE2:  MOVFF  219,235
2AE6:  MOVFF  218,234
2AEA:  MOVFF  217,233
2AEE:  CLRF   x3A
2AF0:  CLRF   x39
2AF2:  CLRF   x38
2AF4:  MOVLW  64
2AF6:  MOVWF  x37
2AF8:  MOVLB  0
2AFA:  CALL   12D6
2AFE:  MOVLB  2
2B00:  MOVF   x1B,W
2B02:  ADDWF  00,W
2B04:  MOVLB  0
2B06:  MOVWF  xA3
2B08:  MOVLB  2
2B0A:  MOVF   x1C,W
2B0C:  ADDWFC 01,W
2B0E:  MOVLB  0
2B10:  MOVWF  xA4
.................... 	//	setup.bitrate1= setup.bitrate; 
.................... 	FPGA_set_bitrate(); 
2B12:  CALL   1BB8
2B16:  GOTO   42BE (RETURN)
.................... 	 
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
.................... { 
.................... 	COM1_send_str("\r\n\n"); 
*
2374:  MOVLW  0D
2376:  MOVLB  2
2378:  MOVWF  x17
237A:  MOVLW  0A
237C:  MOVWF  x18
237E:  MOVWF  x19
2380:  CLRF   x1A
2382:  MOVLW  02
2384:  MOVWF  x55
2386:  MOVLW  17
2388:  MOVWF  x54
238A:  MOVLB  0
238C:  RCALL  20AE
.................... 	COM1_send_str("DS <data soure><cr>  \tSet data source (0-1)\r\n"); 
238E:  MOVLW  02
2390:  MOVWF  FEA
2392:  MOVLW  17
2394:  MOVWF  FE9
2396:  MOVFF  FF2,252
239A:  BCF    FF2.7
239C:  MOVLW  2E
239E:  MOVWF  01
23A0:  CLRF   FF7
23A2:  MOVLW  00
23A4:  CALL   0434
23A8:  TBLRD*-
23AA:  TBLRD*+
23AC:  MOVFF  FF5,FEE
23B0:  DECFSZ 01,F
23B2:  BRA    23AA
23B4:  MOVLB  2
23B6:  BTFSC  x52.7
23B8:  BSF    FF2.7
23BA:  MOVLW  02
23BC:  MOVWF  x55
23BE:  MOVLW  17
23C0:  MOVWF  x54
23C2:  MOVLB  0
23C4:  RCALL  20AE
.................... 	COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
23C6:  MOVLW  02
23C8:  MOVWF  FEA
23CA:  MOVLW  17
23CC:  MOVWF  FE9
23CE:  MOVFF  FF2,252
23D2:  BCF    FF2.7
23D4:  MOVLW  33
23D6:  MOVWF  01
23D8:  CLRF   FF7
23DA:  MOVLW  00
23DC:  CALL   047C
23E0:  TBLRD*-
23E2:  TBLRD*+
23E4:  MOVFF  FF5,FEE
23E8:  DECFSZ 01,F
23EA:  BRA    23E2
23EC:  MOVLB  2
23EE:  BTFSC  x52.7
23F0:  BSF    FF2.7
23F2:  MOVLW  02
23F4:  MOVWF  x55
23F6:  MOVLW  17
23F8:  MOVWF  x54
23FA:  MOVLB  0
23FC:  RCALL  20AE
.................... 	COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
23FE:  MOVLW  02
2400:  MOVWF  FEA
2402:  MOVLW  17
2404:  MOVWF  FE9
2406:  MOVFF  FF2,252
240A:  BCF    FF2.7
240C:  MOVLW  31
240E:  MOVWF  01
2410:  CLRF   FF7
2412:  MOVLW  00
2414:  CALL   04CA
2418:  TBLRD*-
241A:  TBLRD*+
241C:  MOVFF  FF5,FEE
2420:  DECFSZ 01,F
2422:  BRA    241A
2424:  MOVLB  2
2426:  BTFSC  x52.7
2428:  BSF    FF2.7
242A:  MOVLW  02
242C:  MOVWF  x55
242E:  MOVLW  17
2430:  MOVWF  x54
2432:  MOVLB  0
2434:  RCALL  20AE
.................... 	COM1_send_str("RP <power height><cr>  \tSet power height (0-1)\r\n"); 
2436:  MOVLW  02
2438:  MOVWF  FEA
243A:  MOVLW  17
243C:  MOVWF  FE9
243E:  MOVFF  FF2,252
2442:  BCF    FF2.7
2444:  MOVLW  31
2446:  MOVWF  01
2448:  CLRF   FF7
244A:  MOVLW  00
244C:  CALL   0516
2450:  TBLRD*-
2452:  TBLRD*+
2454:  MOVFF  FF5,FEE
2458:  DECFSZ 01,F
245A:  BRA    2452
245C:  MOVLB  2
245E:  BTFSC  x52.7
2460:  BSF    FF2.7
2462:  MOVLW  02
2464:  MOVWF  x55
2466:  MOVLW  17
2468:  MOVWF  x54
246A:  MOVLB  0
246C:  RCALL  20AE
.................... 	COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
246E:  MOVLW  02
2470:  MOVWF  FEA
2472:  MOVLW  17
2474:  MOVWF  FE9
2476:  MOVFF  FF2,252
247A:  BCF    FF2.7
247C:  MOVLW  31
247E:  MOVWF  01
2480:  CLRF   FF7
2482:  MOVLW  00
2484:  CALL   0562
2488:  TBLRD*-
248A:  TBLRD*+
248C:  MOVFF  FF5,FEE
2490:  DECFSZ 01,F
2492:  BRA    248A
2494:  MOVLB  2
2496:  BTFSC  x52.7
2498:  BSF    FF2.7
249A:  MOVLW  02
249C:  MOVWF  x55
249E:  MOVLW  17
24A0:  MOVWF  x54
24A2:  MOVLB  0
24A4:  RCALL  20AE
.................... 	COM1_send_str("RA <randomizer><cr>  \tSet with/without randomizer (0-1)\r\n"); 
24A6:  MOVLW  02
24A8:  MOVWF  FEA
24AA:  MOVLW  17
24AC:  MOVWF  FE9
24AE:  MOVFF  FF2,252
24B2:  BCF    FF2.7
24B4:  MOVLW  3A
24B6:  MOVWF  01
24B8:  CLRF   FF7
24BA:  MOVLW  00
24BC:  CALL   05AE
24C0:  TBLRD*-
24C2:  TBLRD*+
24C4:  MOVFF  FF5,FEE
24C8:  DECFSZ 01,F
24CA:  BRA    24C2
24CC:  MOVLB  2
24CE:  BTFSC  x52.7
24D0:  BSF    FF2.7
24D2:  MOVLW  02
24D4:  MOVWF  x55
24D6:  MOVLW  17
24D8:  MOVWF  x54
24DA:  MOVLB  0
24DC:  RCALL  20AE
.................... 	COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
24DE:  MOVLW  02
24E0:  MOVWF  FEA
24E2:  MOVLW  17
24E4:  MOVWF  FE9
24E6:  MOVFF  FF2,252
24EA:  BCF    FF2.7
24EC:  MOVLW  35
24EE:  MOVWF  01
24F0:  CLRF   FF7
24F2:  MOVLW  00
24F4:  CALL   0602
24F8:  TBLRD*-
24FA:  TBLRD*+
24FC:  MOVFF  FF5,FEE
2500:  DECFSZ 01,F
2502:  BRA    24FA
2504:  MOVLB  2
2506:  BTFSC  x52.7
2508:  BSF    FF2.7
250A:  MOVLW  02
250C:  MOVWF  x55
250E:  MOVLW  17
2510:  MOVWF  x54
2512:  MOVLB  0
2514:  RCALL  20AE
.................... 	COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
2516:  MOVLW  02
2518:  MOVWF  FEA
251A:  MOVLW  17
251C:  MOVWF  FE9
251E:  MOVFF  FF2,252
2522:  BCF    FF2.7
2524:  MOVLW  21
2526:  MOVWF  01
2528:  CLRF   FF7
252A:  MOVLW  00
252C:  CALL   0652
2530:  TBLRD*-
2532:  TBLRD*+
2534:  MOVFF  FF5,FEE
2538:  DECFSZ 01,F
253A:  BRA    2532
253C:  MOVLB  2
253E:  BTFSC  x52.7
2540:  BSF    FF2.7
2542:  MOVLW  02
2544:  MOVWF  x55
2546:  MOVLW  17
2548:  MOVWF  x54
254A:  MOVLB  0
254C:  RCALL  20AE
.................... 	COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
254E:  MOVLW  02
2550:  MOVWF  FEA
2552:  MOVLW  17
2554:  MOVWF  FE9
2556:  MOVFF  FF2,252
255A:  BCF    FF2.7
255C:  MOVLW  32
255E:  MOVWF  01
2560:  CLRF   FF7
2562:  MOVLW  00
2564:  CALL   068E
2568:  TBLRD*-
256A:  TBLRD*+
256C:  MOVFF  FF5,FEE
2570:  DECFSZ 01,F
2572:  BRA    256A
2574:  MOVLB  2
2576:  BTFSC  x52.7
2578:  BSF    FF2.7
257A:  MOVLW  02
257C:  MOVWF  x55
257E:  MOVLW  17
2580:  MOVWF  x54
2582:  MOVLB  0
2584:  RCALL  20AE
.................... 	COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2586:  MOVLW  02
2588:  MOVWF  FEA
258A:  MOVLW  17
258C:  MOVWF  FE9
258E:  MOVFF  FF2,252
2592:  BCF    FF2.7
2594:  MOVLW  39
2596:  MOVWF  01
2598:  CLRF   FF7
259A:  MOVLW  00
259C:  CALL   06DA
25A0:  TBLRD*-
25A2:  TBLRD*+
25A4:  MOVFF  FF5,FEE
25A8:  DECFSZ 01,F
25AA:  BRA    25A2
25AC:  MOVLB  2
25AE:  BTFSC  x52.7
25B0:  BSF    FF2.7
25B2:  MOVLW  02
25B4:  MOVWF  x55
25B6:  MOVLW  17
25B8:  MOVWF  x54
25BA:  MOVLB  0
25BC:  RCALL  20AE
.................... 	COM1_send_str("VE <cr>  \tdisplay version info\r\n"); 
25BE:  MOVLW  02
25C0:  MOVWF  FEA
25C2:  MOVLW  17
25C4:  MOVWF  FE9
25C6:  MOVFF  FF2,252
25CA:  BCF    FF2.7
25CC:  MOVLW  21
25CE:  MOVWF  01
25D0:  CLRF   FF7
25D2:  MOVLW  00
25D4:  CALL   072E
25D8:  TBLRD*-
25DA:  TBLRD*+
25DC:  MOVFF  FF5,FEE
25E0:  DECFSZ 01,F
25E2:  BRA    25DA
25E4:  MOVLB  2
25E6:  BTFSC  x52.7
25E8:  BSF    FF2.7
25EA:  MOVLW  02
25EC:  MOVWF  x55
25EE:  MOVLW  17
25F0:  MOVWF  x54
25F2:  MOVLB  0
25F4:  RCALL  20AE
.................... 	COM1_send_str("VS <major>.<minor> <cr>  \tset the setup file version\r\n"); 
25F6:  MOVLW  02
25F8:  MOVWF  FEA
25FA:  MOVLW  17
25FC:  MOVWF  FE9
25FE:  MOVFF  FF2,252
2602:  BCF    FF2.7
2604:  MOVLW  37
2606:  MOVWF  01
2608:  CLRF   FF7
260A:  MOVLW  00
260C:  CALL   076A
2610:  TBLRD*-
2612:  TBLRD*+
2614:  MOVFF  FF5,FEE
2618:  DECFSZ 01,F
261A:  BRA    2612
261C:  MOVLB  2
261E:  BTFSC  x52.7
2620:  BSF    FF2.7
2622:  MOVLW  02
2624:  MOVWF  x55
2626:  MOVLW  17
2628:  MOVWF  x54
262A:  MOVLB  0
262C:  RCALL  20AE
.................... 	COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
262E:  MOVLW  02
2630:  MOVWF  FEA
2632:  MOVLW  17
2634:  MOVWF  FE9
2636:  MOVFF  FF2,252
263A:  BCF    FF2.7
263C:  MOVLW  31
263E:  MOVWF  01
2640:  CLRF   FF7
2642:  MOVLW  00
2644:  CALL   07BC
2648:  TBLRD*-
264A:  TBLRD*+
264C:  MOVFF  FF5,FEE
2650:  DECFSZ 01,F
2652:  BRA    264A
2654:  MOVLB  2
2656:  BTFSC  x52.7
2658:  BSF    FF2.7
265A:  MOVLW  02
265C:  MOVWF  x55
265E:  MOVLW  17
2660:  MOVWF  x54
2662:  MOVLB  0
2664:  RCALL  20AE
.................... 	COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
2666:  MOVLW  02
2668:  MOVWF  FEA
266A:  MOVLW  17
266C:  MOVWF  FE9
266E:  MOVFF  FF2,252
2672:  BCF    FF2.7
2674:  MOVLW  35
2676:  MOVWF  01
2678:  CLRF   FF7
267A:  MOVLW  00
267C:  CALL   0808
2680:  TBLRD*-
2682:  TBLRD*+
2684:  MOVFF  FF5,FEE
2688:  DECFSZ 01,F
268A:  BRA    2682
268C:  MOVLB  2
268E:  BTFSC  x52.7
2690:  BSF    FF2.7
2692:  MOVLW  02
2694:  MOVWF  x55
2696:  MOVLW  17
2698:  MOVWF  x54
269A:  MOVLB  0
269C:  RCALL  20AE
.................... 	COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
269E:  MOVLW  02
26A0:  MOVWF  FEA
26A2:  MOVLW  17
26A4:  MOVWF  FE9
26A6:  MOVFF  FF2,252
26AA:  BCF    FF2.7
26AC:  MOVLW  3B
26AE:  MOVWF  01
26B0:  CLRF   FF7
26B2:  MOVLW  00
26B4:  CALL   0858
26B8:  TBLRD*-
26BA:  TBLRD*+
26BC:  MOVFF  FF5,FEE
26C0:  DECFSZ 01,F
26C2:  BRA    26BA
26C4:  MOVLB  2
26C6:  BTFSC  x52.7
26C8:  BSF    FF2.7
26CA:  MOVLW  02
26CC:  MOVWF  x55
26CE:  MOVLW  17
26D0:  MOVWF  x54
26D2:  MOVLB  0
26D4:  RCALL  20AE
.................... 	COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
26D6:  MOVLW  02
26D8:  MOVWF  FEA
26DA:  MOVLW  17
26DC:  MOVWF  FE9
26DE:  MOVFF  FF2,252
26E2:  BCF    FF2.7
26E4:  MOVLW  3B
26E6:  MOVWF  01
26E8:  CLRF   FF7
26EA:  MOVLW  00
26EC:  CALL   08AE
26F0:  TBLRD*-
26F2:  TBLRD*+
26F4:  MOVFF  FF5,FEE
26F8:  DECFSZ 01,F
26FA:  BRA    26F2
26FC:  MOVLB  2
26FE:  BTFSC  x52.7
2700:  BSF    FF2.7
2702:  MOVLW  02
2704:  MOVWF  x55
2706:  MOVLW  17
2708:  MOVWF  x54
270A:  MOVLB  0
270C:  RCALL  20AE
.................... 	COM1_send_str("CS <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
270E:  MOVLW  02
2710:  MOVWF  FEA
2712:  MOVLW  17
2714:  MOVWF  FE9
2716:  MOVFF  FF2,252
271A:  BCF    FF2.7
271C:  MOVLW  2F
271E:  MOVWF  01
2720:  CLRF   FF7
2722:  MOVLW  00
2724:  CALL   0904
2728:  TBLRD*-
272A:  TBLRD*+
272C:  MOVFF  FF5,FEE
2730:  DECFSZ 01,F
2732:  BRA    272A
2734:  MOVLB  2
2736:  BTFSC  x52.7
2738:  BSF    FF2.7
273A:  MOVLW  02
273C:  MOVWF  x55
273E:  MOVLW  17
2740:  MOVWF  x54
2742:  MOVLB  0
2744:  RCALL  20AE
.................... 	//COM1_send_str("UT <UART Time><cr>  \tSet the stop time, default 15 (0-240)\r\n");// VERSION 3.3  21.03.2016 
.................... 	//COM1_send_str("US <UART Status><cr>  \tSet the Block (0-1)\r\n");// VERSION 3.3  21.03.2016 
.................... 	//COM1_send_str("BG <UART Change><cr>  \tSet the UART refresh rate [Hz] (1-20)\r\n");// VERSION 3.3  23.03.2016  //yehuda 1520Q remove BG command 
.................... 	COM1_send_str("SV <save all><cr>  \tSave parameters\r"); 
2746:  MOVLW  02
2748:  MOVWF  FEA
274A:  MOVLW  17
274C:  MOVWF  FE9
274E:  MOVFF  FF2,252
2752:  BCF    FF2.7
2754:  MOVLW  25
2756:  MOVWF  01
2758:  CLRF   FF7
275A:  MOVLW  00
275C:  CALL   094E
2760:  TBLRD*-
2762:  TBLRD*+
2764:  MOVFF  FF5,FEE
2768:  DECFSZ 01,F
276A:  BRA    2762
276C:  MOVLB  2
276E:  BTFSC  x52.7
2770:  BSF    FF2.7
2772:  MOVLW  02
2774:  MOVWF  x55
2776:  MOVLW  17
2778:  MOVWF  x54
277A:  MOVLB  0
277C:  RCALL  20AE
.................... 	COM1_send_str("\r\n"); 
277E:  MOVLW  0D
2780:  MOVLB  2
2782:  MOVWF  x17
2784:  MOVLW  0A
2786:  MOVWF  x18
2788:  CLRF   x19
278A:  MOVLW  02
278C:  MOVWF  x55
278E:  MOVLW  17
2790:  MOVWF  x54
2792:  MOVLB  0
2794:  RCALL  20AE
2796:  GOTO   4F76 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
*
330E:  MOVLB  1
3310:  CLRF   xB7
3312:  CLRF   xE1
.................... { 
.................... 	UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
.................... 	ULONG freq;		//, sub;   //////////yehuda 1520Q cancel US,UT and BG  
.................... 	UINT  val, rp; //VERSION 3.3 us UINT  val, revp, rp; 
.................... 	chr = 2; 
3314:  MOVLW  02
3316:  MOVWF  xB8
.................... 	comm_ptr = 0; 
3318:  CLRF   x35
....................     if (peek_char() == ':') // addressed message? 
331A:  MOVLB  0
331C:  CALL   21D2
3320:  MOVFF  02,218
3324:  MOVFF  01,217
3328:  MOVLB  2
332A:  MOVF   01,W
332C:  SUBLW  3A
332E:  BNZ   336E
3330:  MOVF   x18,F
3332:  BNZ   336E
....................     { 
.................... 		get_char(); // skip ':' 
3334:  MOVLB  0
3336:  CALL   21F0
.................... 		addr = get_int(); 
333A:  CALL   22AC
333E:  MOVFF  01,1F0
.................... 		if (get_char() != ':') 
3342:  CALL   21F0
3346:  MOVFF  02,218
334A:  MOVFF  01,217
334E:  MOVLB  2
3350:  MOVF   01,W
3352:  SUBLW  3A
3354:  BNZ   335A
3356:  MOVF   x18,F
3358:  BNZ   335A
.................... 		break; 
.................... 		if (setup.unit_id != addr) 
335A:  MOVLB  1
335C:  MOVF   xF0,W
335E:  MOVLB  0
3360:  SUBWF  xEF,W
3362:  BNZ   3368
3364:  MOVF   xF0,F
3366:  BZ    336C
.................... 		goto aaa; 
3368:  GOTO   4F76
336C:  MOVLB  2
.................... 	} 
....................     break; 
.................... 	c1 = toupper(get_char()); 
336E:  MOVLB  0
3370:  CALL   21F0
3374:  MOVFF  02,218
3378:  MOVFF  01,217
337C:  MOVLB  2
337E:  MOVF   x18,F
3380:  BNZ   3388
3382:  MOVF   x17,W
3384:  SUBLW  60
3386:  BC    3398
3388:  MOVF   x18,F
338A:  BNZ   3398
338C:  MOVF   x17,W
338E:  SUBLW  7A
3390:  BNC   3398
3392:  MOVF   x17,W
3394:  ANDLW  DF
3396:  BRA    339A
3398:  MOVF   x17,W
339A:  MOVLB  1
339C:  MOVWF  xE2
.................... 	c2 = toupper(get_char()); 
339E:  MOVLB  0
33A0:  CALL   21F0
33A4:  MOVFF  02,218
33A8:  MOVFF  01,217
33AC:  MOVLB  2
33AE:  MOVF   x18,F
33B0:  BNZ   33B8
33B2:  MOVF   x17,W
33B4:  SUBLW  60
33B6:  BC    33C8
33B8:  MOVF   x18,F
33BA:  BNZ   33C8
33BC:  MOVF   x17,W
33BE:  SUBLW  7A
33C0:  BNC   33C8
33C2:  MOVF   x17,W
33C4:  ANDLW  DF
33C6:  BRA    33CA
33C8:  MOVF   x17,W
33CA:  MOVLB  1
33CC:  MOVWF  xE3
.................... 	skip_spc(); 
33CE:  MOVLB  0
33D0:  CALL   2210
.................... 	 
.................... 	if (peek_char() == 13) // is this a query? 
33D4:  CALL   21D2
33D8:  MOVFF  02,218
33DC:  MOVFF  01,217
33E0:  MOVLB  2
33E2:  MOVF   01,W
33E4:  SUBLW  0D
33E6:  BNZ   33F4
33E8:  MOVF   x18,F
33EA:  BNZ   33F4
....................     query = 1; // YES 
33EC:  MOVLW  01
33EE:  MOVLB  1
33F0:  MOVWF  xE1
33F2:  MOVLB  2
.................... 	switch (c1) 
33F4:  MOVLB  1
33F6:  MOVF   xE2,W
33F8:  XORLW  4C
33FA:  MOVLB  0
33FC:  BZ    3464
33FE:  XORLW  68
3400:  BZ    34A4
3402:  XORLW  6C
3404:  BTFSC  FD8.2
3406:  BRA    34F6
3408:  XORLW  0E
340A:  BTFSC  FD8.2
340C:  BRA    3538
340E:  XORLW  0B
3410:  BTFSC  FD8.2
3412:  BRA    362E
3414:  XORLW  09
3416:  BTFSC  FD8.2
3418:  BRA    373E
341A:  XORLW  16
341C:  BTFSC  FD8.2
341E:  BRA    3A62
3420:  XORLW  05
3422:  BTFSC  FD8.2
3424:  GOTO   410A
3428:  XORLW  04
342A:  BTFSC  FD8.2
342C:  GOTO   411C
3430:  XORLW  1A
3432:  BTFSC  FD8.2
3434:  GOTO   4152
3438:  XORLW  1D
343A:  BTFSC  FD8.2
343C:  GOTO   42CA
3440:  XORLW  02
3442:  BTFSC  FD8.2
3444:  GOTO   42E2
3448:  XORLW  15
344A:  BTFSC  FD8.2
344C:  GOTO   4724
3450:  XORLW  04
3452:  BTFSC  FD8.2
3454:  GOTO   4934
3458:  XORLW  16
345A:  BTFSC  FD8.2
345C:  GOTO   4A3A
3460:  GOTO   4F3C
....................     { 
.................... 		case 'L': // login or logout 
.................... 		switch (c2) 
3464:  MOVLB  1
3466:  MOVF   xE3,W
3468:  XORLW  49
346A:  MOVLB  0
346C:  BZ    3474
346E:  XORLW  06
3470:  BZ    349A
3472:  BRA    34A0
....................         { 
.................... 			case 'I':               // login 
.................... 			val = get_int(); 
3474:  CALL   22AC
3478:  MOVFF  02,1F6
347C:  MOVFF  01,1F5
.................... 			if (val == 17592) 
3480:  MOVLB  1
3482:  MOVF   xF5,W
3484:  SUBLW  B8
3486:  BNZ   3492
3488:  MOVF   xF6,W
348A:  SUBLW  44
348C:  BNZ   3492
....................             ttccp_login = 1; 
348E:  MOVLW  01
3490:  MOVWF  x28
.................... 			debug_mode = 1; 
3492:  MOVLW  01
3494:  MOVWF  x37
.................... 			break; 
3496:  MOVLB  0
3498:  BRA    34A0
.................... 			case 'O':              // logout 
.................... 			ttccp_login = 0; 
349A:  MOVLB  1
349C:  CLRF   x28
.................... 			break; 
349E:  MOVLB  0
.................... 		} 
.................... 		break; 
34A0:  GOTO   4F76
.................... 		case '$': 
.................... //		if (!ttccp_login) break; 
.................... 		if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
34A4:  MOVLB  1
34A6:  MOVF   xE3,W
34A8:  SUBLW  52
34AA:  BNZ   34F0
....................         { 
.................... 			val = get_int(); 
34AC:  MOVLB  0
34AE:  CALL   22AC
34B2:  MOVFF  02,1F6
34B6:  MOVFF  01,1F5
.................... 			if (val != 17591) 
34BA:  MOVLB  1
34BC:  MOVF   xF5,W
34BE:  SUBLW  B7
34C0:  BNZ   34C8
34C2:  MOVF   xF6,W
34C4:  SUBLW  44
34C6:  BZ    34CC
....................             return; 
34C8:  GOTO   4F78
.................... 			ttccp = 0; 
34CC:  CLRF   x36
.................... 			COM1_send_str("\r\n\n*"); 
34CE:  MOVLW  0D
34D0:  MOVWF  xF9
34D2:  MOVLW  0A
34D4:  MOVWF  xFA
34D6:  MOVWF  xFB
34D8:  MOVLW  2A
34DA:  MOVWF  xFC
34DC:  CLRF   xFD
34DE:  MOVLW  01
34E0:  MOVLB  2
34E2:  MOVWF  x55
34E4:  MOVLW  F9
34E6:  MOVWF  x54
34E8:  MOVLB  0
34EA:  CALL   20AE
34EE:  MOVLB  1
.................... 		} 
.................... 		break; 
34F0:  MOVLB  0
34F2:  GOTO   4F76
.................... 		 
.................... 		/*  case ':': 
.................... 			if(c2 == setup.unit_id+48) 
.................... 			if(toupper(get_char()) == ':') 
.................... 			comm_ptr = 2; 
.................... 			break; 
.................... 		*/ 
.................... 		case 'H': 
.................... //		if (!ttccp_login) break; 
.................... 		COM1_send_str("\r\t HELP LIST \r"); 
34F6:  MOVLW  01
34F8:  MOVWF  FEA
34FA:  MOVLW  FE
34FC:  MOVWF  FE9
34FE:  MOVFF  FF2,217
3502:  BCF    FF2.7
3504:  MOVLW  0F
3506:  MOVWF  01
3508:  CLRF   FF7
350A:  MOVLW  00
350C:  CALL   098E
3510:  TBLRD*-
3512:  TBLRD*+
3514:  MOVFF  FF5,FEE
3518:  DECFSZ 01,F
351A:  BRA    3512
351C:  MOVLB  2
351E:  BTFSC  x17.7
3520:  BSF    FF2.7
3522:  MOVLW  01
3524:  MOVWF  x55
3526:  MOVLW  FE
3528:  MOVWF  x54
352A:  MOVLB  0
352C:  CALL   20AE
.................... 		list_help(); 
3530:  GOTO   2374
.................... 		break; 
3534:  GOTO   4F76
.................... 		 
.................... 		case 'F': 
.................... //		if (!ttccp_login) break; 
.................... 		switch (c2) 
3538:  MOVLB  1
353A:  MOVF   xE3,W
353C:  XORLW  52
353E:  MOVLB  0
3540:  BZ    3544
3542:  BRA    362A
....................         { 
.................... 			case 'R': // set frequency 
.................... 			if(c2 == 'R') 
3544:  MOVLB  1
3546:  MOVF   xE3,W
3548:  SUBLW  52
354A:  BNZ   35EE
....................             { 
.................... 				if (query) 
354C:  MOVF   xE1,F
354E:  BZ    359C
.................... 				{ 
.................... 					sprintf(buf, "FR %lu\r", setup.frequency); 
3550:  MOVLW  01
3552:  MOVWF  x97
3554:  MOVLW  B9
3556:  MOVWF  x96
3558:  MOVLW  02
355A:  MOVWF  FF6
355C:  MOVLW  0C
355E:  MOVWF  FF7
3560:  MOVLW  03
3562:  MOVLB  2
3564:  MOVWF  x30
3566:  MOVLB  0
3568:  CALL   27BC
356C:  MOVLW  10
356E:  MOVWF  FE9
3570:  MOVFF  B2,21D
3574:  MOVFF  B1,21C
3578:  CALL   27E4
357C:  MOVLW  0D
357E:  MOVLB  2
3580:  MOVWF  x3D
3582:  MOVLB  0
3584:  CALL   279A
.................... 					COM1_send_str(buf); 
3588:  MOVLW  01
358A:  MOVLB  2
358C:  MOVWF  x55
358E:  MOVLW  B9
3590:  MOVWF  x54
3592:  MOVLB  0
3594:  CALL   20AE
.................... 				} 
3598:  BRA    35EA
359A:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					freq = get_frequency(); 
359C:  MOVLB  0
359E:  CALL   28A0
35A2:  MOVLB  1
35A4:  CLRF   xF4
35A6:  CLRF   xF3
35A8:  MOVFF  02,1F2
35AC:  MOVFF  01,1F1
.................... 					setup.frequency = freq; 
35B0:  MOVFF  1F2,B2
35B4:  MOVFF  1F1,B1
.................... 					PLL_compute_freq_parameters(freq); 
35B8:  MOVFF  1F2,218
35BC:  MOVFF  1F1,217
35C0:  MOVFF  1F2,222
35C4:  MOVFF  1F1,221
35C8:  MOVLB  0
35CA:  CALL   13C6
.................... 					PLL_update(); 
35CE:  CALL   169E
.................... 					delay_ms(50); 
35D2:  MOVLW  32
35D4:  MOVLB  2
35D6:  MOVWF  x2D
35D8:  MOVLB  0
35DA:  CALL   0DF4
.................... 					PLL_update(); 
35DE:  CALL   169E
.................... 					ret = 1; 
35E2:  MOVLW  01
35E4:  MOVLB  1
35E6:  MOVWF  xB7
35E8:  MOVLB  0
.................... 				} 
.................... 			} 
35EA:  BRA    362A
35EC:  MOVLB  1
....................             else 
.................... 			COM1_send_str("\r\nFAULT\r\n"); 
35EE:  MOVLW  01
35F0:  MOVWF  FEA
35F2:  MOVLW  FE
35F4:  MOVWF  FE9
35F6:  MOVFF  FF2,217
35FA:  BCF    FF2.7
35FC:  MOVLW  0A
35FE:  MOVWF  01
3600:  CLRF   FF7
3602:  MOVLW  00
3604:  MOVLB  0
3606:  CALL   09B8
360A:  TBLRD*-
360C:  TBLRD*+
360E:  MOVFF  FF5,FEE
3612:  DECFSZ 01,F
3614:  BRA    360C
3616:  MOVLB  2
3618:  BTFSC  x17.7
361A:  BSF    FF2.7
361C:  MOVLW  01
361E:  MOVWF  x55
3620:  MOVLW  FE
3622:  MOVWF  x54
3624:  MOVLB  0
3626:  CALL   20AE
.................... 			break; 
.................... 		} 
.................... 		break; 
362A:  GOTO   4F76
.................... 		 
.................... 		case 'M': 
.................... //		if (!ttccp_login) break; 
.................... 		if (c2 == 'O')  // mode - Addr0 bit 0-3 
362E:  MOVLB  1
3630:  MOVF   xE3,W
3632:  SUBLW  4F
3634:  BNZ   36FA
.................... 		{ 
....................             if(query) 
3636:  MOVF   xE1,F
3638:  BZ    3684
....................             { 
.................... 				sprintf(buf, "MO %u\r", setup.mode); 
363A:  MOVLW  01
363C:  MOVWF  x97
363E:  MOVLW  B9
3640:  MOVWF  x96
3642:  MOVLW  0A
3644:  MOVWF  FF6
3646:  MOVLW  0C
3648:  MOVWF  FF7
364A:  MOVLW  03
364C:  MOVLB  2
364E:  MOVWF  x30
3650:  MOVLB  0
3652:  CALL   27BC
3656:  MOVFF  A7,21C
365A:  MOVLW  1B
365C:  MOVLB  2
365E:  MOVWF  x1D
3660:  MOVLB  0
3662:  CALL   2934
3666:  MOVLW  0D
3668:  MOVLB  2
366A:  MOVWF  x3D
366C:  MOVLB  0
366E:  CALL   279A
.................... 				COM1_send_str(buf); 
3672:  MOVLW  01
3674:  MOVLB  2
3676:  MOVWF  x55
3678:  MOVLW  B9
367A:  MOVWF  x54
367C:  MOVLB  0
367E:  CALL   20AE
3682:  MOVLB  1
.................... 			} 
.................... 			val = get_int(); 
3684:  MOVLB  0
3686:  CALL   22AC
368A:  MOVFF  02,1F6
368E:  MOVFF  01,1F5
.................... 			if (val <= 3) 
3692:  MOVLB  1
3694:  MOVF   xF6,F
3696:  BNZ   36B0
3698:  MOVF   xF5,W
369A:  SUBLW  03
369C:  BNC   36B0
....................             { 
.................... 				setup.mode = val; 
369E:  MOVFF  1F5,A7
.................... 				FPGA_set_reg0(); 
36A2:  MOVLB  0
36A4:  CALL   175E
.................... 				ret = 1; 
36A8:  MOVLW  01
36AA:  MOVLB  1
36AC:  MOVWF  xB7
.................... 			} 
36AE:  BRA    36F8
.................... 			else 
....................             { 
.................... 				COM1_send_str("\r\nFAIL\r\n"); 
36B0:  MOVLW  01
36B2:  MOVWF  FEA
36B4:  MOVLW  FE
36B6:  MOVWF  FE9
36B8:  MOVFF  FF2,217
36BC:  BCF    FF2.7
36BE:  MOVLW  09
36C0:  MOVWF  01
36C2:  CLRF   FF7
36C4:  MOVLW  00
36C6:  MOVLB  0
36C8:  CALL   09DC
36CC:  TBLRD*-
36CE:  TBLRD*+
36D0:  MOVFF  FF5,FEE
36D4:  DECFSZ 01,F
36D6:  BRA    36CE
36D8:  MOVLB  2
36DA:  BTFSC  x17.7
36DC:  BSF    FF2.7
36DE:  MOVLW  01
36E0:  MOVWF  x55
36E2:  MOVLW  FE
36E4:  MOVWF  x54
36E6:  MOVLB  0
36E8:  CALL   20AE
.................... 				ret = 0; 
36EC:  MOVLB  1
36EE:  CLRF   xB7
.................... 				break; 
36F0:  MOVLB  0
36F2:  GOTO   4F76
36F6:  MOVLB  1
.................... 			} 
.................... 		} 
36F8:  BRA    3738
.................... 		else 
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
36FA:  MOVLW  01
36FC:  MOVWF  FEA
36FE:  MOVLW  FE
3700:  MOVWF  FE9
3702:  MOVFF  FF2,217
3706:  BCF    FF2.7
3708:  MOVLW  09
370A:  MOVWF  01
370C:  CLRF   FF7
370E:  MOVLW  00
3710:  MOVLB  0
3712:  CALL   09DC
3716:  TBLRD*-
3718:  TBLRD*+
371A:  MOVFF  FF5,FEE
371E:  DECFSZ 01,F
3720:  BRA    3718
3722:  MOVLB  2
3724:  BTFSC  x17.7
3726:  BSF    FF2.7
3728:  MOVLW  01
372A:  MOVWF  x55
372C:  MOVLW  FE
372E:  MOVWF  x54
3730:  MOVLB  0
3732:  CALL   20AE
3736:  MOVLB  1
.................... 		break; 
3738:  MOVLB  0
373A:  GOTO   4F76
.................... 		 
.................... 		case 'D': 
.................... //		if (!ttccp_login) break; 
.................... 		switch (c2) 
373E:  MOVLB  1
3740:  MOVF   xE3,W
3742:  XORLW  53
3744:  MOVLB  0
3746:  BZ    3756
3748:  XORLW  03
374A:  BTFSC  FD8.2
374C:  BRA    3858
374E:  XORLW  15
3750:  BTFSC  FD8.2
3752:  BRA    395E
3754:  BRA    3A5E
....................         { 
.................... 			// case 'B':  // debug mode 
.................... 			//   debug_mode = 1; 
.................... 			//   break; 
.................... 			case 'S':   // Addr 6 bit 1   setup.data_source 
.................... 			if (query) 
3756:  MOVLB  1
3758:  MOVF   xE1,F
375A:  BZ    37A8
....................             { 
.................... 				sprintf(buf, "DS %u\r", setup.data_source); 
375C:  MOVLW  01
375E:  MOVWF  x97
3760:  MOVLW  B9
3762:  MOVWF  x96
3764:  MOVLW  12
3766:  MOVWF  FF6
3768:  MOVLW  0C
376A:  MOVWF  FF7
376C:  MOVLW  03
376E:  MOVLB  2
3770:  MOVWF  x30
3772:  MOVLB  0
3774:  CALL   27BC
3778:  MOVFF  AB,21C
377C:  MOVLW  1B
377E:  MOVLB  2
3780:  MOVWF  x1D
3782:  MOVLB  0
3784:  CALL   2934
3788:  MOVLW  0D
378A:  MOVLB  2
378C:  MOVWF  x3D
378E:  MOVLB  0
3790:  CALL   279A
.................... 				COM1_send_str(buf); 
3794:  MOVLW  01
3796:  MOVLB  2
3798:  MOVWF  x55
379A:  MOVLW  B9
379C:  MOVWF  x54
379E:  MOVLB  0
37A0:  CALL   20AE
.................... 			} 
37A4:  BRA    384E
37A6:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
37A8:  MOVLB  0
37AA:  CALL   22AC
37AE:  MOVFF  02,1F6
37B2:  MOVFF  01,1F5
.................... 				if (val < 2) 
37B6:  MOVLB  1
37B8:  MOVF   xF6,F
37BA:  BNZ   37D0
37BC:  MOVF   xF5,W
37BE:  SUBLW  01
37C0:  BNC   37D0
.................... 				{ 
.................... 					setup.data_source = val; 
37C2:  MOVFF  1F5,AB
.................... 					FPGA_set_reg6(); 
37C6:  MOVLB  0
37C8:  CALL   17BA
.................... 				} 
37CC:  BRA    384E
37CE:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
37D0:  MOVLW  01
37D2:  MOVWF  FEA
37D4:  MOVLW  FE
37D6:  MOVWF  FE9
37D8:  MOVFF  FF2,217
37DC:  BCF    FF2.7
37DE:  MOVLW  09
37E0:  MOVWF  01
37E2:  CLRF   FF7
37E4:  MOVLW  00
37E6:  MOVLB  0
37E8:  CALL   09DC
37EC:  TBLRD*-
37EE:  TBLRD*+
37F0:  MOVFF  FF5,FEE
37F4:  DECFSZ 01,F
37F6:  BRA    37EE
37F8:  MOVLB  2
37FA:  BTFSC  x17.7
37FC:  BSF    FF2.7
37FE:  MOVLW  01
3800:  MOVWF  x55
3802:  MOVLW  FE
3804:  MOVWF  x54
3806:  MOVLB  0
3808:  CALL   20AE
.................... 					sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
380C:  MOVLW  01
380E:  MOVLB  1
3810:  MOVWF  x97
3812:  MOVLW  6C
3814:  MOVWF  x96
3816:  MOVLW  1A
3818:  MOVWF  FF6
381A:  MOVLW  0C
381C:  MOVWF  FF7
381E:  MOVLW  07
3820:  MOVLB  2
3822:  MOVWF  x30
3824:  MOVLB  0
3826:  CALL   27BC
382A:  MOVFF  AB,21C
382E:  MOVLW  1B
3830:  MOVLB  2
3832:  MOVWF  x1D
3834:  MOVLB  0
3836:  CALL   2934
383A:  MOVLW  0D
383C:  MOVLB  2
383E:  MOVWF  x3D
3840:  MOVLB  0
3842:  CALL   279A
.................... 					ret = 0; 
3846:  MOVLB  1
3848:  CLRF   xB7
.................... 					break; 
384A:  MOVLB  0
384C:  BRA    3A5E
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
384E:  MOVLW  01
3850:  MOVLB  1
3852:  MOVWF  xB7
.................... 			break; 
3854:  MOVLB  0
3856:  BRA    3A5E
.................... 			 
.................... 			case 'P':   // Addr 0 bit 5   setup.data_polarity 
.................... 			if (query) 
3858:  MOVLB  1
385A:  MOVF   xE1,F
385C:  BZ    38AA
....................             { 
.................... 				sprintf(buf, "DP %u\r", setup.data_polarity); 
385E:  MOVLW  01
3860:  MOVWF  x97
3862:  MOVLW  B9
3864:  MOVWF  x96
3866:  MOVLW  26
3868:  MOVWF  FF6
386A:  MOVLW  0C
386C:  MOVWF  FF7
386E:  MOVLW  03
3870:  MOVLB  2
3872:  MOVWF  x30
3874:  MOVLB  0
3876:  CALL   27BC
387A:  MOVFF  A9,21C
387E:  MOVLW  1B
3880:  MOVLB  2
3882:  MOVWF  x1D
3884:  MOVLB  0
3886:  CALL   2934
388A:  MOVLW  0D
388C:  MOVLB  2
388E:  MOVWF  x3D
3890:  MOVLB  0
3892:  CALL   279A
.................... 				COM1_send_str(buf); 
3896:  MOVLW  01
3898:  MOVLB  2
389A:  MOVWF  x55
389C:  MOVLW  B9
389E:  MOVWF  x54
38A0:  MOVLB  0
38A2:  CALL   20AE
.................... 			} 
38A6:  BRA    3954
38A8:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
38AA:  MOVLB  0
38AC:  CALL   22AC
38B0:  MOVFF  02,1F6
38B4:  MOVFF  01,1F5
.................... 				if (val < 2) 
38B8:  MOVLB  1
38BA:  MOVF   xF6,F
38BC:  BNZ   38D6
38BE:  MOVF   xF5,W
38C0:  SUBLW  01
38C2:  BNC   38D6
.................... 				{ 
.................... 					setup.data_polarity = 1 - val;	// VERSION 3.6: DP0: INVERT, DP1: NORMAL 
38C4:  MOVLW  01
38C6:  BSF    FD8.0
38C8:  SUBFWB xF5,W
38CA:  MOVLB  0
38CC:  MOVWF  xA9
.................... 													// Instead: 	DP0: NORMAL, DP1: INVERT 
.................... 					FPGA_set_reg0(); 
38CE:  CALL   175E
.................... 				} 
38D2:  BRA    3954
38D4:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
38D6:  MOVLW  01
38D8:  MOVWF  FEA
38DA:  MOVLW  FE
38DC:  MOVWF  FE9
38DE:  MOVFF  FF2,217
38E2:  BCF    FF2.7
38E4:  MOVLW  09
38E6:  MOVWF  01
38E8:  CLRF   FF7
38EA:  MOVLW  00
38EC:  MOVLB  0
38EE:  CALL   09DC
38F2:  TBLRD*-
38F4:  TBLRD*+
38F6:  MOVFF  FF5,FEE
38FA:  DECFSZ 01,F
38FC:  BRA    38F4
38FE:  MOVLB  2
3900:  BTFSC  x17.7
3902:  BSF    FF2.7
3904:  MOVLW  01
3906:  MOVWF  x55
3908:  MOVLW  FE
390A:  MOVWF  x54
390C:  MOVLB  0
390E:  CALL   20AE
.................... 					sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
3912:  MOVLW  01
3914:  MOVLB  1
3916:  MOVWF  x97
3918:  MOVLW  6C
391A:  MOVWF  x96
391C:  MOVLW  2E
391E:  MOVWF  FF6
3920:  MOVLW  0C
3922:  MOVWF  FF7
3924:  MOVLW  07
3926:  MOVLB  2
3928:  MOVWF  x30
392A:  MOVLB  0
392C:  CALL   27BC
3930:  MOVFF  A9,21C
3934:  MOVLW  1B
3936:  MOVLB  2
3938:  MOVWF  x1D
393A:  MOVLB  0
393C:  CALL   2934
3940:  MOVLW  0D
3942:  MOVLB  2
3944:  MOVWF  x3D
3946:  MOVLB  0
3948:  CALL   279A
.................... 					ret = 0; 
394C:  MOVLB  1
394E:  CLRF   xB7
.................... 					break; 
3950:  MOVLB  0
3952:  BRA    3A5E
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
3954:  MOVLW  01
3956:  MOVLB  1
3958:  MOVWF  xB7
.................... 			break; 
395A:  MOVLB  0
395C:  BRA    3A5E
.................... 			 
.................... 			case 'E':   // Addr 0 bit 7   setup.SOQPSK 
.................... 			if (query) 
395E:  MOVLB  1
3960:  MOVF   xE1,F
3962:  BZ    39B0
....................             { 
.................... 				sprintf(buf,"DE %u\r", setup.SOQPSK); 
3964:  MOVLW  01
3966:  MOVWF  x97
3968:  MOVLW  B9
396A:  MOVWF  x96
396C:  MOVLW  3A
396E:  MOVWF  FF6
3970:  MOVLW  0C
3972:  MOVWF  FF7
3974:  MOVLW  03
3976:  MOVLB  2
3978:  MOVWF  x30
397A:  MOVLB  0
397C:  CALL   27BC
3980:  MOVFF  AF,21C
3984:  MOVLW  1B
3986:  MOVLB  2
3988:  MOVWF  x1D
398A:  MOVLB  0
398C:  CALL   2934
3990:  MOVLW  0D
3992:  MOVLB  2
3994:  MOVWF  x3D
3996:  MOVLB  0
3998:  CALL   279A
.................... 				COM1_send_str(buf); 
399C:  MOVLW  01
399E:  MOVLB  2
39A0:  MOVWF  x55
39A2:  MOVLW  B9
39A4:  MOVWF  x54
39A6:  MOVLB  0
39A8:  CALL   20AE
.................... 			} 
39AC:  BRA    3A56
39AE:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
39B0:  MOVLB  0
39B2:  CALL   22AC
39B6:  MOVFF  02,1F6
39BA:  MOVFF  01,1F5
.................... 				if (val < 2) 
39BE:  MOVLB  1
39C0:  MOVF   xF6,F
39C2:  BNZ   39D8
39C4:  MOVF   xF5,W
39C6:  SUBLW  01
39C8:  BNC   39D8
.................... 				{ 
.................... 					setup.SOQPSK = val; 
39CA:  MOVFF  1F5,AF
.................... 					FPGA_set_reg0(); 
39CE:  MOVLB  0
39D0:  CALL   175E
.................... 				} 
39D4:  BRA    3A56
39D6:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
39D8:  MOVLW  01
39DA:  MOVWF  FEA
39DC:  MOVLW  FE
39DE:  MOVWF  FE9
39E0:  MOVFF  FF2,217
39E4:  BCF    FF2.7
39E6:  MOVLW  09
39E8:  MOVWF  01
39EA:  CLRF   FF7
39EC:  MOVLW  00
39EE:  MOVLB  0
39F0:  CALL   09DC
39F4:  TBLRD*-
39F6:  TBLRD*+
39F8:  MOVFF  FF5,FEE
39FC:  DECFSZ 01,F
39FE:  BRA    39F6
3A00:  MOVLB  2
3A02:  BTFSC  x17.7
3A04:  BSF    FF2.7
3A06:  MOVLW  01
3A08:  MOVWF  x55
3A0A:  MOVLW  FE
3A0C:  MOVWF  x54
3A0E:  MOVLB  0
3A10:  CALL   20AE
.................... 					sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
3A14:  MOVLW  01
3A16:  MOVLB  1
3A18:  MOVWF  x97
3A1A:  MOVLW  6C
3A1C:  MOVWF  x96
3A1E:  MOVLW  42
3A20:  MOVWF  FF6
3A22:  MOVLW  0C
3A24:  MOVWF  FF7
3A26:  MOVLW  07
3A28:  MOVLB  2
3A2A:  MOVWF  x30
3A2C:  MOVLB  0
3A2E:  CALL   27BC
3A32:  MOVFF  AF,21C
3A36:  MOVLW  1B
3A38:  MOVLB  2
3A3A:  MOVWF  x1D
3A3C:  MOVLB  0
3A3E:  CALL   2934
3A42:  MOVLW  0D
3A44:  MOVLB  2
3A46:  MOVWF  x3D
3A48:  MOVLB  0
3A4A:  CALL   279A
.................... 					ret = 0; 
3A4E:  MOVLB  1
3A50:  CLRF   xB7
.................... 					break; 
3A52:  MOVLB  0
3A54:  BRA    3A5E
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
3A56:  MOVLW  01
3A58:  MOVLB  1
3A5A:  MOVWF  xB7
.................... 			break; 
3A5C:  MOVLB  0
.................... 		} 
.................... 		break; 
3A5E:  GOTO   4F76
.................... 		 
.................... 		case 'R': 
.................... //		if (!ttccp_login) break; 
.................... 		switch (c2) 
3A62:  MOVLW  41
3A64:  MOVLB  1
3A66:  SUBWF  xE3,W
3A68:  ADDLW  F0
3A6A:  BTFSC  FD8.0
3A6C:  BRA    4104
3A6E:  ADDLW  10
3A70:  MOVLB  0
3A72:  GOTO   4F7E
....................         { 
.................... 			case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
.................... 			if (query) 
3A76:  MOVLB  1
3A78:  MOVF   xE1,F
3A7A:  BZ    3AC8
....................             { 
.................... 				sprintf(buf, "RP %u\r", setup.power_high); 
3A7C:  MOVLW  01
3A7E:  MOVWF  x97
3A80:  MOVLW  B9
3A82:  MOVWF  x96
3A84:  MOVLW  4E
3A86:  MOVWF  FF6
3A88:  MOVLW  0C
3A8A:  MOVWF  FF7
3A8C:  MOVLW  03
3A8E:  MOVLB  2
3A90:  MOVWF  x30
3A92:  MOVLB  0
3A94:  CALL   27BC
3A98:  MOVFF  AE,21C
3A9C:  MOVLW  1B
3A9E:  MOVLB  2
3AA0:  MOVWF  x1D
3AA2:  MOVLB  0
3AA4:  CALL   2934
3AA8:  MOVLW  0D
3AAA:  MOVLB  2
3AAC:  MOVWF  x3D
3AAE:  MOVLB  0
3AB0:  CALL   279A
.................... 				COM1_send_str(buf); 
3AB4:  MOVLW  01
3AB6:  MOVLB  2
3AB8:  MOVWF  x55
3ABA:  MOVLW  B9
3ABC:  MOVWF  x54
3ABE:  MOVLB  0
3AC0:  CALL   20AE
.................... 			} 
3AC4:  BRA    3BEE
3AC6:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3AC8:  MOVLB  0
3ACA:  CALL   22AC
3ACE:  MOVFF  02,1F6
3AD2:  MOVFF  01,1F5
.................... 				if (val < 2) 
3AD6:  MOVLB  1
3AD8:  MOVF   xF6,F
3ADA:  BNZ   3B70
3ADC:  MOVF   xF5,W
3ADE:  SUBLW  01
3AE0:  BNC   3B70
.................... 				{ 
.................... 					if(setup.rc == 1) 
3AE2:  MOVLB  0
3AE4:  DECFSZ xF5,W
3AE6:  BRA    3B08
3AE8:  MOVF   xF6,F
3AEA:  BNZ   3B08
.................... 					{ 
.................... 						if(val == 0) 
3AEC:  MOVLB  1
3AEE:  MOVF   xF5,F
3AF0:  BNZ   3B02
3AF2:  MOVF   xF6,F
3AF4:  BNZ   3B02
.................... 						{ 
.................... 							setup.rp =1; 
3AF6:  MOVLB  0
3AF8:  CLRF   xF8
3AFA:  MOVLW  01
3AFC:  MOVWF  xF7
.................... 						} 
3AFE:  BRA    3B08
3B00:  MOVLB  1
.................... 						else 
.................... 						 
.................... 						setup.rp = 0; 
3B02:  MOVLB  0
3B04:  CLRF   xF8
3B06:  CLRF   xF7
.................... 					} 
.................... 					if(val == 1) 
3B08:  MOVLB  1
3B0A:  DECFSZ xF5,W
3B0C:  BRA    3B40
3B0E:  MOVF   xF6,F
3B10:  BNZ   3B40
.................... 					{ 
.................... 						rp_command = setup.rp = 0; 
3B12:  MOVLB  0
3B14:  CLRF   xF8
3B16:  CLRF   xF7
3B18:  MOVFF  F7,194
.................... 						delay_ms(50); 
3B1C:  MOVLW  32
3B1E:  MOVLB  2
3B20:  MOVWF  x2D
3B22:  MOVLB  0
3B24:  CALL   0DF4
.................... 						update_all(); 
3B28:  CALL   1CAC
.................... 						delay_ms(1); 
3B2C:  MOVLW  01
3B2E:  MOVLB  2
3B30:  MOVWF  x2D
3B32:  MOVLB  0
3B34:  CALL   0DF4
.................... 						update_all(); 
3B38:  CALL   1CAC
.................... 					} 
3B3C:  BRA    3B6C
3B3E:  MOVLB  1
.................... 					else 
.................... 					{ 
.................... 						rp_command = setup.rp = 1; 
3B40:  MOVLB  0
3B42:  CLRF   xF8
3B44:  MOVLW  01
3B46:  MOVWF  xF7
3B48:  MOVFF  F7,194
.................... 						delay_ms(50); 
3B4C:  MOVLW  32
3B4E:  MOVLB  2
3B50:  MOVWF  x2D
3B52:  MOVLB  0
3B54:  CALL   0DF4
.................... 						update_all(); 
3B58:  CALL   1CAC
.................... 						delay_ms(1); 
3B5C:  MOVLW  01
3B5E:  MOVLB  2
3B60:  MOVWF  x2D
3B62:  MOVLB  0
3B64:  CALL   0DF4
.................... 						update_all(); 
3B68:  CALL   1CAC
.................... 					} 
.................... 				} 
3B6C:  BRA    3BEE
3B6E:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
3B70:  MOVLW  01
3B72:  MOVWF  FEA
3B74:  MOVLW  FE
3B76:  MOVWF  FE9
3B78:  MOVFF  FF2,217
3B7C:  BCF    FF2.7
3B7E:  MOVLW  09
3B80:  MOVWF  01
3B82:  CLRF   FF7
3B84:  MOVLW  00
3B86:  MOVLB  0
3B88:  CALL   09DC
3B8C:  TBLRD*-
3B8E:  TBLRD*+
3B90:  MOVFF  FF5,FEE
3B94:  DECFSZ 01,F
3B96:  BRA    3B8E
3B98:  MOVLB  2
3B9A:  BTFSC  x17.7
3B9C:  BSF    FF2.7
3B9E:  MOVLW  01
3BA0:  MOVWF  x55
3BA2:  MOVLW  FE
3BA4:  MOVWF  x54
3BA6:  MOVLB  0
3BA8:  CALL   20AE
.................... 					sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
3BAC:  MOVLW  01
3BAE:  MOVLB  1
3BB0:  MOVWF  x97
3BB2:  MOVLW  6C
3BB4:  MOVWF  x96
3BB6:  MOVLW  56
3BB8:  MOVWF  FF6
3BBA:  MOVLW  0C
3BBC:  MOVWF  FF7
3BBE:  MOVLW  07
3BC0:  MOVLB  2
3BC2:  MOVWF  x30
3BC4:  MOVLB  0
3BC6:  CALL   27BC
3BCA:  MOVFF  194,21C
3BCE:  MOVLW  1B
3BD0:  MOVLB  2
3BD2:  MOVWF  x1D
3BD4:  MOVLB  0
3BD6:  CALL   2934
3BDA:  MOVLW  0D
3BDC:  MOVLB  2
3BDE:  MOVWF  x3D
3BE0:  MOVLB  0
3BE2:  CALL   279A
.................... 					ret = 0; 
3BE6:  MOVLB  1
3BE8:  CLRF   xB7
.................... 					break; 
3BEA:  BRA    4104
3BEC:  MOVLB  0
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
3BEE:  MOVLW  01
3BF0:  MOVLB  1
3BF2:  MOVWF  xB7
.................... 			break; 
3BF4:  BRA    4104
.................... 			 
.................... 			case 'F': // discrete output - power amp on/off       setup.power_amp 
.................... 			if (query) 
3BF6:  MOVLB  1
3BF8:  MOVF   xE1,F
3BFA:  BZ    3C48
....................             { 
.................... 				sprintf(buf, "RF %u\r", pwr_command); 
3BFC:  MOVLW  01
3BFE:  MOVWF  x97
3C00:  MOVLW  B9
3C02:  MOVWF  x96
3C04:  MOVLW  62
3C06:  MOVWF  FF6
3C08:  MOVLW  0C
3C0A:  MOVWF  FF7
3C0C:  MOVLW  03
3C0E:  MOVLB  2
3C10:  MOVWF  x30
3C12:  MOVLB  0
3C14:  CALL   27BC
3C18:  MOVFF  195,21C
3C1C:  MOVLW  1B
3C1E:  MOVLB  2
3C20:  MOVWF  x1D
3C22:  MOVLB  0
3C24:  CALL   2934
3C28:  MOVLW  0D
3C2A:  MOVLB  2
3C2C:  MOVWF  x3D
3C2E:  MOVLB  0
3C30:  CALL   279A
.................... 				COM1_send_str(buf); 
3C34:  MOVLW  01
3C36:  MOVLB  2
3C38:  MOVWF  x55
3C3A:  MOVLW  B9
3C3C:  MOVWF  x54
3C3E:  MOVLB  0
3C40:  CALL   20AE
.................... 			} 
3C44:  BRA    3DF2
3C46:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3C48:  MOVLB  0
3C4A:  CALL   22AC
3C4E:  MOVFF  02,1F6
3C52:  MOVFF  01,1F5
.................... 				if (val == 0) 
3C56:  MOVLB  1
3C58:  MOVF   xF5,F
3C5A:  BNZ   3CE2
3C5C:  MOVF   xF6,F
3C5E:  BNZ   3CE2
.................... 				{ 
.................... 					if(setup.cot || setup.rc) 
3C60:  MOVLB  0
3C62:  MOVF   xF3,W
3C64:  IORWF  xF4,W
3C66:  BNZ   3C6E
3C68:  MOVF   xF5,W
3C6A:  IORWF  xF6,W
3C6C:  BZ    3CA4
.................... 					{ 
.................... 						pwr_command = 0; 
3C6E:  MOVLB  1
3C70:  CLRF   x95
.................... 						setup.pwr = pwr_command; 
3C72:  MOVLB  0
3C74:  CLRF   xA6
3C76:  MOVFF  195,A5
.................... 						delay_ms(50); 
3C7A:  MOVLW  32
3C7C:  MOVLB  2
3C7E:  MOVWF  x2D
3C80:  MOVLB  0
3C82:  CALL   0DF4
.................... 						update_all(); 
3C86:  CALL   1CAC
.................... 						delay_ms(1); 
3C8A:  MOVLW  01
3C8C:  MOVLB  2
3C8E:  MOVWF  x2D
3C90:  MOVLB  0
3C92:  CALL   0DF4
.................... 						update_all(); 
3C96:  CALL   1CAC
.................... 						ret = 1; 
3C9A:  MOVLW  01
3C9C:  MOVLB  1
3C9E:  MOVWF  xB7
.................... 					} 
3CA0:  BRA    3CE0
3CA2:  MOVLB  0
.................... 					else if(setup.cot == 0 || setup.rc) 
3CA4:  MOVF   xF3,F
3CA6:  BNZ   3CAC
3CA8:  MOVF   xF4,F
3CAA:  BZ    3CB2
3CAC:  MOVF   xF5,W
3CAE:  IORWF  xF6,W
3CB0:  BZ    3CDE
.................... 					{ 
.................... 						pwr_command = 0; 
3CB2:  MOVLB  1
3CB4:  CLRF   x95
.................... 						setup.pwr = pwr_command; 
3CB6:  MOVLB  0
3CB8:  CLRF   xA6
3CBA:  MOVFF  195,A5
.................... 						delay_ms(50); 
3CBE:  MOVLW  32
3CC0:  MOVLB  2
3CC2:  MOVWF  x2D
3CC4:  MOVLB  0
3CC6:  CALL   0DF4
.................... 						update_all(); 
3CCA:  CALL   1CAC
.................... 						delay_ms(1); 
3CCE:  MOVLW  01
3CD0:  MOVLB  2
3CD2:  MOVWF  x2D
3CD4:  MOVLB  0
3CD6:  CALL   0DF4
.................... 						update_all(); 
3CDA:  CALL   1CAC
3CDE:  MOVLB  1
.................... 					} 
.................... 				} 
3CE0:  BRA    3DF0
.................... 				else 
.................... 				{ 
.................... 					if (val == 1) 
3CE2:  DECFSZ xF5,W
3CE4:  BRA    3D74
3CE6:  MOVF   xF6,F
3CE8:  BNZ   3D74
.................... 					{ 
.................... 						if(setup.cot)   
3CEA:  MOVLB  0
3CEC:  MOVF   xF3,W
3CEE:  IORWF  xF4,W
3CF0:  BZ    3D2E
.................... 						{ 
.................... 							pwr_command = 1; 
3CF2:  MOVLW  01
3CF4:  MOVLB  1
3CF6:  MOVWF  x95
.................... 							setup.pwr = pwr_command; 
3CF8:  MOVLB  0
3CFA:  CLRF   xA6
3CFC:  MOVFF  195,A5
.................... 							power_output(); 
3D00:  CALL   1E42
.................... 							delay_ms(50); 
3D04:  MOVLW  32
3D06:  MOVLB  2
3D08:  MOVWF  x2D
3D0A:  MOVLB  0
3D0C:  CALL   0DF4
.................... 							update_all(); 
3D10:  CALL   1CAC
.................... 							delay_ms(1); 
3D14:  MOVLW  01
3D16:  MOVLB  2
3D18:  MOVWF  x2D
3D1A:  MOVLB  0
3D1C:  CALL   0DF4
.................... 							update_all();  
3D20:  CALL   1CAC
.................... 							ret = 1; 
3D24:  MOVLW  01
3D26:  MOVLB  1
3D28:  MOVWF  xB7
.................... 						} 
3D2A:  BRA    3D6E
3D2C:  MOVLB  0
.................... 						else if(setup.cot == 0)	 
3D2E:  MOVF   xF3,F
3D30:  BNZ   3D70
3D32:  MOVF   xF4,F
3D34:  BNZ   3D70
.................... 						{ 
.................... 							pwr_command = 1; 
3D36:  MOVLW  01
3D38:  MOVLB  1
3D3A:  MOVWF  x95
.................... 							setup.pwr = pwr_command; 
3D3C:  MOVLB  0
3D3E:  CLRF   xA6
3D40:  MOVFF  195,A5
.................... 							power_output(); 
3D44:  CALL   1E42
.................... 							delay_ms(50); 
3D48:  MOVLW  32
3D4A:  MOVLB  2
3D4C:  MOVWF  x2D
3D4E:  MOVLB  0
3D50:  CALL   0DF4
.................... 							update_all(); 
3D54:  CALL   1CAC
.................... 							delay_ms(1); 
3D58:  MOVLW  01
3D5A:  MOVLB  2
3D5C:  MOVWF  x2D
3D5E:  MOVLB  0
3D60:  CALL   0DF4
.................... 							update_all(); 
3D64:  CALL   1CAC
.................... 							ret = 1; 
3D68:  MOVLW  01
3D6A:  MOVLB  1
3D6C:  MOVWF  xB7
3D6E:  MOVLB  0
.................... 						} 
.................... 					} 
3D70:  BRA    3DF2
3D72:  MOVLB  1
.................... 					else 
.................... 					{ 
.................... 						COM1_send_str("\r\nFAIL\r\n"); 
3D74:  MOVLW  01
3D76:  MOVWF  FEA
3D78:  MOVLW  FE
3D7A:  MOVWF  FE9
3D7C:  MOVFF  FF2,217
3D80:  BCF    FF2.7
3D82:  MOVLW  09
3D84:  MOVWF  01
3D86:  CLRF   FF7
3D88:  MOVLW  00
3D8A:  MOVLB  0
3D8C:  CALL   09DC
3D90:  TBLRD*-
3D92:  TBLRD*+
3D94:  MOVFF  FF5,FEE
3D98:  DECFSZ 01,F
3D9A:  BRA    3D92
3D9C:  MOVLB  2
3D9E:  BTFSC  x17.7
3DA0:  BSF    FF2.7
3DA2:  MOVLW  01
3DA4:  MOVWF  x55
3DA6:  MOVLW  FE
3DA8:  MOVWF  x54
3DAA:  MOVLB  0
3DAC:  CALL   20AE
.................... 						sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
3DB0:  MOVLW  01
3DB2:  MOVLB  1
3DB4:  MOVWF  x97
3DB6:  MOVLW  6C
3DB8:  MOVWF  x96
3DBA:  MOVLW  6A
3DBC:  MOVWF  FF6
3DBE:  MOVLW  0C
3DC0:  MOVWF  FF7
3DC2:  MOVLW  07
3DC4:  MOVLB  2
3DC6:  MOVWF  x30
3DC8:  MOVLB  0
3DCA:  CALL   27BC
3DCE:  MOVFF  195,21C
3DD2:  MOVLW  1B
3DD4:  MOVLB  2
3DD6:  MOVWF  x1D
3DD8:  MOVLB  0
3DDA:  CALL   2934
3DDE:  MOVLW  0D
3DE0:  MOVLB  2
3DE2:  MOVWF  x3D
3DE4:  MOVLB  0
3DE6:  CALL   279A
.................... 						ret = 0; 
3DEA:  MOVLB  1
3DEC:  CLRF   xB7
.................... 						break; 
3DEE:  BRA    4104
3DF0:  MOVLB  0
.................... 					} 
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
3DF2:  MOVLW  01
3DF4:  MOVLB  1
3DF6:  MOVWF  xB7
.................... 			break; 
3DF8:  BRA    4104
....................  
....................  
....................  
....................  
....................  
.................... 			 
.................... 			case 'C': 
....................          	if (query) 
3DFA:  MOVLB  1
3DFC:  MOVF   xE1,F
3DFE:  BZ    3E4C
....................             { 
.................... 				sprintf(buf, "RC %lu\r", setup.rc); 
3E00:  MOVLW  01
3E02:  MOVWF  x97
3E04:  MOVLW  B9
3E06:  MOVWF  x96
3E08:  MOVLW  76
3E0A:  MOVWF  FF6
3E0C:  MOVLW  0C
3E0E:  MOVWF  FF7
3E10:  MOVLW  03
3E12:  MOVLB  2
3E14:  MOVWF  x30
3E16:  MOVLB  0
3E18:  CALL   27BC
3E1C:  MOVLW  10
3E1E:  MOVWF  FE9
3E20:  MOVFF  F6,21D
3E24:  MOVFF  F5,21C
3E28:  CALL   27E4
3E2C:  MOVLW  0D
3E2E:  MOVLB  2
3E30:  MOVWF  x3D
3E32:  MOVLB  0
3E34:  CALL   279A
.................... 				COM1_send_str(buf); 
3E38:  MOVLW  01
3E3A:  MOVLB  2
3E3C:  MOVWF  x55
3E3E:  MOVLW  B9
3E40:  MOVWF  x54
3E42:  MOVLB  0
3E44:  CALL   20AE
.................... 			} 
3E48:  BRA    3F06
3E4A:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3E4C:  MOVLB  0
3E4E:  CALL   22AC
3E52:  MOVFF  02,1F6
3E56:  MOVFF  01,1F5
.................... 				if(val < 2) 
3E5A:  MOVLB  1
3E5C:  MOVF   xF6,F
3E5E:  BNZ   3ECA
3E60:  MOVF   xF5,W
3E62:  SUBLW  01
3E64:  BNC   3ECA
.................... 				{ 
.................... 					if(val == 0) 
3E66:  MOVF   xF5,F
3E68:  BNZ   3E96
3E6A:  MOVF   xF6,F
3E6C:  BNZ   3E96
.................... 					{ 
.................... 						setup.rc = 0; 
3E6E:  MOVLB  0
3E70:  CLRF   xF6
3E72:  CLRF   xF5
.................... 						delay_ms(50); 
3E74:  MOVLW  32
3E76:  MOVLB  2
3E78:  MOVWF  x2D
3E7A:  MOVLB  0
3E7C:  CALL   0DF4
.................... 						update_all(); 
3E80:  CALL   1CAC
.................... 						delay_ms(1); 
3E84:  MOVLW  01
3E86:  MOVLB  2
3E88:  MOVWF  x2D
3E8A:  MOVLB  0
3E8C:  CALL   0DF4
.................... 						update_all(); 
3E90:  CALL   1CAC
3E94:  MOVLB  1
.................... 					} 
.................... 					if(val == 1) 
3E96:  DECFSZ xF5,W
3E98:  BRA    3EC8
3E9A:  MOVF   xF6,F
3E9C:  BNZ   3EC8
.................... 					{ 
.................... 						setup.rc = 1; 
3E9E:  MOVLB  0
3EA0:  CLRF   xF6
3EA2:  MOVLW  01
3EA4:  MOVWF  xF5
.................... 						delay_ms(50); 
3EA6:  MOVLW  32
3EA8:  MOVLB  2
3EAA:  MOVWF  x2D
3EAC:  MOVLB  0
3EAE:  CALL   0DF4
.................... 						update_all(); 
3EB2:  CALL   1CAC
.................... 						delay_ms(1); 
3EB6:  MOVLW  01
3EB8:  MOVLB  2
3EBA:  MOVWF  x2D
3EBC:  MOVLB  0
3EBE:  CALL   0DF4
.................... 						update_all(); 
3EC2:  CALL   1CAC
3EC6:  MOVLB  1
.................... 					} 
.................... 				} 
3EC8:  BRA    3F08
.................... 				else 
.................... 				COM1_send_str("\r\nFAULT\r\n"); 
3ECA:  MOVLW  01
3ECC:  MOVWF  FEA
3ECE:  MOVLW  FE
3ED0:  MOVWF  FE9
3ED2:  MOVFF  FF2,217
3ED6:  BCF    FF2.7
3ED8:  MOVLW  0A
3EDA:  MOVWF  01
3EDC:  CLRF   FF7
3EDE:  MOVLW  00
3EE0:  MOVLB  0
3EE2:  CALL   09B8
3EE6:  TBLRD*-
3EE8:  TBLRD*+
3EEA:  MOVFF  FF5,FEE
3EEE:  DECFSZ 01,F
3EF0:  BRA    3EE8
3EF2:  MOVLB  2
3EF4:  BTFSC  x17.7
3EF6:  BSF    FF2.7
3EF8:  MOVLW  01
3EFA:  MOVWF  x55
3EFC:  MOVLW  FE
3EFE:  MOVWF  x54
3F00:  MOVLB  0
3F02:  CALL   20AE
3F06:  MOVLB  1
.................... 			} 
.................... 			break; 
3F08:  BRA    4104
.................... 			 
.................... 			case 'B': 
....................             if (query) 
3F0A:  MOVLB  1
3F0C:  MOVF   xE1,F
3F0E:  BZ    3F5C
....................             { 
.................... 				sprintf(buf, "RB %lu\r", setup.cot); 
3F10:  MOVLW  01
3F12:  MOVWF  x97
3F14:  MOVLW  B9
3F16:  MOVWF  x96
3F18:  MOVLW  7E
3F1A:  MOVWF  FF6
3F1C:  MOVLW  0C
3F1E:  MOVWF  FF7
3F20:  MOVLW  03
3F22:  MOVLB  2
3F24:  MOVWF  x30
3F26:  MOVLB  0
3F28:  CALL   27BC
3F2C:  MOVLW  10
3F2E:  MOVWF  FE9
3F30:  MOVFF  F4,21D
3F34:  MOVFF  F3,21C
3F38:  CALL   27E4
3F3C:  MOVLW  0D
3F3E:  MOVLB  2
3F40:  MOVWF  x3D
3F42:  MOVLB  0
3F44:  CALL   279A
.................... 				COM1_send_str(buf); 
3F48:  MOVLW  01
3F4A:  MOVLB  2
3F4C:  MOVWF  x55
3F4E:  MOVLW  B9
3F50:  MOVWF  x54
3F52:  MOVLB  0
3F54:  CALL   20AE
.................... 			} 
3F58:  BRA    3FE4
3F5A:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3F5C:  MOVLB  0
3F5E:  CALL   22AC
3F62:  MOVFF  02,1F6
3F66:  MOVFF  01,1F5
.................... 				if(val < 2) 
3F6A:  MOVLB  1
3F6C:  MOVF   xF6,F
3F6E:  BNZ   3FA8
3F70:  MOVF   xF5,W
3F72:  SUBLW  01
3F74:  BNC   3FA8
.................... 				{ 
.................... 					setup.cot = val; 
3F76:  MOVFF  1F6,F4
3F7A:  MOVFF  1F5,F3
.................... 					pwr_command++; 
3F7E:  INCF   x95,F
.................... 					pwr_command &= 1; 
3F80:  MOVLW  01
3F82:  ANDWF  x95,F
.................... 					delay_ms(50); 
3F84:  MOVLW  32
3F86:  MOVLB  2
3F88:  MOVWF  x2D
3F8A:  MOVLB  0
3F8C:  CALL   0DF4
.................... 					update_all(); 
3F90:  CALL   1CAC
.................... 					delay_ms(1); 
3F94:  MOVLW  01
3F96:  MOVLB  2
3F98:  MOVWF  x2D
3F9A:  MOVLB  0
3F9C:  CALL   0DF4
.................... 					update_all(); 
3FA0:  CALL   1CAC
.................... 				} 
3FA4:  BRA    3FE4
3FA6:  MOVLB  1
.................... 				else 
.................... 				COM1_send_str("\r\nFAULT\r\n"); 
3FA8:  MOVLW  01
3FAA:  MOVWF  FEA
3FAC:  MOVLW  FE
3FAE:  MOVWF  FE9
3FB0:  MOVFF  FF2,217
3FB4:  BCF    FF2.7
3FB6:  MOVLW  0A
3FB8:  MOVWF  01
3FBA:  CLRF   FF7
3FBC:  MOVLW  00
3FBE:  MOVLB  0
3FC0:  CALL   09B8
3FC4:  TBLRD*-
3FC6:  TBLRD*+
3FC8:  MOVFF  FF5,FEE
3FCC:  DECFSZ 01,F
3FCE:  BRA    3FC6
3FD0:  MOVLB  2
3FD2:  BTFSC  x17.7
3FD4:  BSF    FF2.7
3FD6:  MOVLW  01
3FD8:  MOVWF  x55
3FDA:  MOVLW  FE
3FDC:  MOVWF  x54
3FDE:  MOVLB  0
3FE0:  CALL   20AE
.................... 			} 
.................... 			break; 
3FE4:  MOVLB  1
3FE6:  BRA    4104
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... 			 
.................... 			case 'A': // Addr 0 bit 6     setup.randomizer 
.................... 			if (query) 
3FE8:  MOVLB  1
3FEA:  MOVF   xE1,F
3FEC:  BZ    403A
....................             { 
.................... 				sprintf(buf, "RA %u\r", setup.randomizer); 
3FEE:  MOVLW  01
3FF0:  MOVWF  x97
3FF2:  MOVLW  B9
3FF4:  MOVWF  x96
3FF6:  MOVLW  86
3FF8:  MOVWF  FF6
3FFA:  MOVLW  0C
3FFC:  MOVWF  FF7
3FFE:  MOVLW  03
4000:  MOVLB  2
4002:  MOVWF  x30
4004:  MOVLB  0
4006:  CALL   27BC
400A:  MOVFF  AD,21C
400E:  MOVLW  1B
4010:  MOVLB  2
4012:  MOVWF  x1D
4014:  MOVLB  0
4016:  CALL   2934
401A:  MOVLW  0D
401C:  MOVLB  2
401E:  MOVWF  x3D
4020:  MOVLB  0
4022:  CALL   279A
.................... 				COM1_send_str(buf); 
4026:  MOVLW  01
4028:  MOVLB  2
402A:  MOVWF  x55
402C:  MOVLW  B9
402E:  MOVWF  x54
4030:  MOVLB  0
4032:  CALL   20AE
.................... 			} 
4036:  BRA    40E4
4038:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
403A:  MOVLB  0
403C:  CALL   22AC
4040:  MOVFF  02,1F6
4044:  MOVFF  01,1F5
.................... 				if (val < 2) 
4048:  MOVLB  1
404A:  MOVF   xF6,F
404C:  BNZ   4066
404E:  MOVF   xF5,W
4050:  SUBLW  01
4052:  BNC   4066
.................... 				{ 
.................... 					setup.randomizer = val; 
4054:  MOVFF  1F5,AD
.................... 					FPGA_set_reg0(); 
4058:  MOVLB  0
405A:  CALL   175E
.................... 					ret = 1; 
405E:  MOVLW  01
4060:  MOVLB  1
4062:  MOVWF  xB7
.................... 				} 
4064:  BRA    40E2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
4066:  MOVLW  01
4068:  MOVWF  FEA
406A:  MOVLW  FE
406C:  MOVWF  FE9
406E:  MOVFF  FF2,217
4072:  BCF    FF2.7
4074:  MOVLW  09
4076:  MOVWF  01
4078:  CLRF   FF7
407A:  MOVLW  00
407C:  MOVLB  0
407E:  CALL   09DC
4082:  TBLRD*-
4084:  TBLRD*+
4086:  MOVFF  FF5,FEE
408A:  DECFSZ 01,F
408C:  BRA    4084
408E:  MOVLB  2
4090:  BTFSC  x17.7
4092:  BSF    FF2.7
4094:  MOVLW  01
4096:  MOVWF  x55
4098:  MOVLW  FE
409A:  MOVWF  x54
409C:  MOVLB  0
409E:  CALL   20AE
.................... 					sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
40A2:  MOVLW  01
40A4:  MOVLB  1
40A6:  MOVWF  x97
40A8:  MOVLW  6C
40AA:  MOVWF  x96
40AC:  MOVLW  8E
40AE:  MOVWF  FF6
40B0:  MOVLW  0C
40B2:  MOVWF  FF7
40B4:  MOVLW  07
40B6:  MOVLB  2
40B8:  MOVWF  x30
40BA:  MOVLB  0
40BC:  CALL   27BC
40C0:  MOVFF  AD,21C
40C4:  MOVLW  1B
40C6:  MOVLB  2
40C8:  MOVWF  x1D
40CA:  MOVLB  0
40CC:  CALL   2934
40D0:  MOVLW  0D
40D2:  MOVLB  2
40D4:  MOVWF  x3D
40D6:  MOVLB  0
40D8:  CALL   279A
.................... 					ret = 0; 
40DC:  MOVLB  1
40DE:  CLRF   xB7
.................... 					break; 
40E0:  BRA    4104
40E2:  MOVLB  0
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
40E4:  MOVLW  01
40E6:  MOVLB  1
40E8:  MOVWF  xB7
.................... 			break; 
40EA:  BRA    4104
.................... 			 
.................... 			case 'L':    // recall 
.................... 			read_setup(); 
40EC:  CALL   0F30
.................... 			update_all(); 
40F0:  CALL   1CAC
.................... 			ret = 1; 
40F4:  MOVLW  01
40F6:  MOVLB  1
40F8:  MOVWF  xB7
.................... 			break; 
40FA:  BRA    4104
.................... 			case 'E':   // reset 
.................... 			reset_cpu(); 
40FC:  RESET
.................... 			break; 
40FE:  MOVLB  1
4100:  BRA    4104
4102:  MOVLB  1
.................... 		} 
.................... 		break; 
4104:  MOVLB  0
4106:  GOTO   4F76
.................... 		 
.................... 		case 'W':            // query 
.................... //		if (!ttccp_login) break; 
.................... 		if (c2 == 'A') 
410A:  MOVLB  1
410C:  MOVF   xE3,W
410E:  SUBLW  41
4110:  BNZ   4116
....................         { 
.................... 			//xxxx 
.................... 			ret = 1; 
4112:  MOVLW  01
4114:  MOVWF  xB7
.................... 		} 
.................... 		break; 
4116:  MOVLB  0
4118:  GOTO   4F76
.................... 		 
.................... 		case 'S': 
.................... //		if (!ttccp_login) break; 
.................... 		switch (c2) 
411C:  MOVLB  1
411E:  MOVF   xE3,W
4120:  XORLW  50
4122:  MOVLB  0
4124:  BZ    412C
4126:  XORLW  06
4128:  BZ    4136
412A:  BRA    414E
....................         { 
.................... 			case 'P': // power down - discrete outputs 
.................... 			ret = 1; 
412C:  MOVLW  01
412E:  MOVLB  1
4130:  MOVWF  xB7
.................... 			break; 
4132:  MOVLB  0
4134:  BRA    414E
.................... 			case 'V': 
.................... 			allow_write = 2975; 
4136:  MOVLW  0B
4138:  MOVLB  1
413A:  MOVWF  x01
413C:  MOVLW  9F
413E:  MOVWF  x00
.................... 			write_setup(); 
4140:  MOVLB  0
4142:  CALL   2A20
.................... 			ret = 1; 
4146:  MOVLW  01
4148:  MOVLB  1
414A:  MOVWF  xB7
.................... 			break; 
414C:  MOVLB  0
.................... 		} 
.................... 		break; 
414E:  GOTO   4F76
.................... 		 
.................... /*  //////////yehuda 1520Q cancel US,UT and BG  
.................... 		case 'U': // VERSION 3.3 UT US 
.................... 		if (!ttccp_login) break; 
.................... 		switch (c2) 
....................         { 
.................... 			case 'T':  
.................... 			if (query) 
....................             { 
.................... 				sprintf(buf, "UT %u\r", setup.UART_Time); 
.................... 				COM1_send_str(buf); 
.................... 			} 
.................... 			else 
.................... 			{ 
.................... 	            val = get_int(); 
.................... 	            if (val < 240 && val > 10) 
.................... 				{ 
.................... 					setup.UART_Time = val;	               
.................... 				} 
.................... 	            else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
.................... 					sprintf(ttccp_error_message, "ERR UT %u\r", setup.UART_Time); 
.................... 					ret = 0; 
.................... 					break; 
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
.................... 			break;  
.................... */	 
.................... /*	  //////////yehuda 1520Q cancel US,UT and BG 	 
.................... 			case 'S': 
.................... 			{ 
.................... 				if (query) 
.................... 				{ 
.................... 					sprintf(buf, "US %u\r",setup.UART_Status); 
.................... 					COM1_send_str(buf); 
.................... 				} 
.................... 				else 
.................... 				{ 
.................... 					val = get_int(); 
.................... 					if (val < 2) 
.................... 					{ 
.................... 						setup.UART_Status = val; 
.................... 					} 
.................... 					else 
.................... 					{ 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
.................... 						sprintf(ttccp_error_message, "ERR US %u\r", setup.UART_Status); 
.................... 						ret = 0; 
.................... 						break; 
.................... 					} 
.................... 				} 
.................... 				break; 
.................... 			} 
.................... 			break; 
.................... 		} 
.................... 		break; 
.................... */ 
....................  
.................... /*		///////////////////////////yehuda 1520Q remove BG command 
.................... 		case 'B': // VERSION 3.6 BG Block Ghange and Check Function 23.0.2016 
.................... 		if (!ttccp_login) break; 
.................... 		switch (c2) 
....................         { 
.................... 			case 'G':      
.................... 			if (query) 
....................             { 
.................... 				sprintf(buf, "BG %lu\r", setup.Block_per_second); 
.................... 				COM1_send_str(buf); 
.................... 			} 
.................... 			else 
....................             { 
.................... 				sub = get_int(); 
.................... 				if (sub >= 1 && sub <= 20) 
.................... 				{ 
....................  
.................... 					setup.Block_per_second = (1000 / sub); 
.................... 				} 
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
.................... 					sprintf(ttccp_error_message, "ERR BG %lu\r", 1000 / setup.Block_per_second); 
.................... 					ret = 0; 
.................... 					break; 
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
.................... 			break; 
.................... 		} 
.................... 		break; 
.................... */		 
....................       	 
.................... 		case 'I': 
.................... //		if (!ttccp_login) break; 
.................... 		switch (c2) 
4152:  MOVLB  1
4154:  MOVF   xE3,W
4156:  XORLW  44
4158:  MOVLB  0
415A:  BZ    4164
415C:  XORLW  07
415E:  BTFSC  FD8.2
4160:  BRA    4266
4162:  BRA    42C6
....................         { 
.................... 			case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
.................... 			if (query) 
4164:  MOVLB  1
4166:  MOVF   xE1,F
4168:  BZ    41B6
....................             { 
.................... 				sprintf(buf, "ID %u\r", setup.internal_pattern); 
416A:  MOVLW  01
416C:  MOVWF  x97
416E:  MOVLW  B9
4170:  MOVWF  x96
4172:  MOVLW  9A
4174:  MOVWF  FF6
4176:  MOVLW  0C
4178:  MOVWF  FF7
417A:  MOVLW  03
417C:  MOVLB  2
417E:  MOVWF  x30
4180:  MOVLB  0
4182:  CALL   27BC
4186:  MOVFF  AC,21C
418A:  MOVLW  1B
418C:  MOVLB  2
418E:  MOVWF  x1D
4190:  MOVLB  0
4192:  CALL   2934
4196:  MOVLW  0D
4198:  MOVLB  2
419A:  MOVWF  x3D
419C:  MOVLB  0
419E:  CALL   279A
.................... 				COM1_send_str(buf); 
41A2:  MOVLW  01
41A4:  MOVLB  2
41A6:  MOVWF  x55
41A8:  MOVLW  B9
41AA:  MOVWF  x54
41AC:  MOVLB  0
41AE:  CALL   20AE
.................... 			} 
41B2:  BRA    425C
41B4:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
41B6:  MOVLB  0
41B8:  CALL   22AC
41BC:  MOVFF  02,1F6
41C0:  MOVFF  01,1F5
.................... 				if (val < 4) 
41C4:  MOVLB  1
41C6:  MOVF   xF6,F
41C8:  BNZ   41DE
41CA:  MOVF   xF5,W
41CC:  SUBLW  03
41CE:  BNC   41DE
.................... 				{ 
.................... 					setup.internal_pattern = val; 
41D0:  MOVFF  1F5,AC
.................... 					FPGA_set_reg6(); 
41D4:  MOVLB  0
41D6:  CALL   17BA
.................... 				} 
41DA:  BRA    425C
41DC:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
41DE:  MOVLW  01
41E0:  MOVWF  FEA
41E2:  MOVLW  FE
41E4:  MOVWF  FE9
41E6:  MOVFF  FF2,217
41EA:  BCF    FF2.7
41EC:  MOVLW  09
41EE:  MOVWF  01
41F0:  CLRF   FF7
41F2:  MOVLW  00
41F4:  MOVLB  0
41F6:  CALL   09DC
41FA:  TBLRD*-
41FC:  TBLRD*+
41FE:  MOVFF  FF5,FEE
4202:  DECFSZ 01,F
4204:  BRA    41FC
4206:  MOVLB  2
4208:  BTFSC  x17.7
420A:  BSF    FF2.7
420C:  MOVLW  01
420E:  MOVWF  x55
4210:  MOVLW  FE
4212:  MOVWF  x54
4214:  MOVLB  0
4216:  CALL   20AE
.................... 					sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
421A:  MOVLW  01
421C:  MOVLB  1
421E:  MOVWF  x97
4220:  MOVLW  6C
4222:  MOVWF  x96
4224:  MOVLW  A2
4226:  MOVWF  FF6
4228:  MOVLW  0C
422A:  MOVWF  FF7
422C:  MOVLW  07
422E:  MOVLB  2
4230:  MOVWF  x30
4232:  MOVLB  0
4234:  CALL   27BC
4238:  MOVFF  AC,21C
423C:  MOVLW  1B
423E:  MOVLB  2
4240:  MOVWF  x1D
4242:  MOVLB  0
4244:  CALL   2934
4248:  MOVLW  0D
424A:  MOVLB  2
424C:  MOVWF  x3D
424E:  MOVLB  0
4250:  CALL   279A
.................... 					ret = 0; 
4254:  MOVLB  1
4256:  CLRF   xB7
.................... 					break; 
4258:  MOVLB  0
425A:  BRA    42C6
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
425C:  MOVLW  01
425E:  MOVLB  1
4260:  MOVWF  xB7
.................... 			break; 
4262:  MOVLB  0
4264:  BRA    42C6
.................... 			 
.................... 			case 'C':    // Addr 2 - 5 bit rate 
.................... 			if (query) 
4266:  MOVLB  1
4268:  MOVF   xE1,F
426A:  BZ    42B8
....................             { 
.................... 				sprintf(buf, "IC %lu\r", setup.bitrate); 
426C:  MOVLW  01
426E:  MOVWF  x97
4270:  MOVLW  B9
4272:  MOVWF  x96
4274:  MOVLW  AE
4276:  MOVWF  FF6
4278:  MOVLW  0C
427A:  MOVWF  FF7
427C:  MOVLW  03
427E:  MOVLB  2
4280:  MOVWF  x30
4282:  MOVLB  0
4284:  CALL   27BC
4288:  MOVLW  10
428A:  MOVWF  FE9
428C:  MOVFF  A4,21D
4290:  MOVFF  A3,21C
4294:  CALL   27E4
4298:  MOVLW  0D
429A:  MOVLB  2
429C:  MOVWF  x3D
429E:  MOVLB  0
42A0:  CALL   279A
.................... 				COM1_send_str(buf); 
42A4:  MOVLW  01
42A6:  MOVLB  2
42A8:  MOVWF  x55
42AA:  MOVLW  B9
42AC:  MOVWF  x54
42AE:  MOVLB  0
42B0:  CALL   20AE
.................... 			} 
42B4:  BRA    42BE
42B6:  MOVLB  1
.................... 			else 
....................             { 
.................... 				get_new_bitrate(); 
42B8:  MOVLB  0
42BA:  GOTO   2A4E
.................... 			} 
.................... 			ret = 1; 
42BE:  MOVLW  01
42C0:  MOVLB  1
42C2:  MOVWF  xB7
.................... 			break; 
42C4:  MOVLB  0
.................... 		} 
.................... 		break; 
42C6:  GOTO   4F76
.................... 		 
.................... 		case 'T': 
.................... //		if (!ttccp_login) break; 
.................... 		if (c2 == 'E') 
42CA:  MOVLB  1
42CC:  MOVF   xE3,W
42CE:  SUBLW  45
42D0:  BNZ   42DC
....................         { 
....................             update_temperature_string(); 
42D2:  MOVLB  0
42D4:  CALL   30F6
....................             ret = 0; 
42D8:  MOVLB  1
42DA:  CLRF   xB7
.................... 		} 
.................... 		break; 
42DC:  MOVLB  0
42DE:  GOTO   4F76
.................... 		 
.................... 		case 'V': 
.................... //		if (!ttccp_login) break; 
.................... 		switch (c2) 
42E2:  MOVLB  1
42E4:  MOVF   xE3,W
42E6:  XORLW  45
42E8:  MOVLB  0
42EA:  BZ    430C
42EC:  XORLW  16
42EE:  BTFSC  FD8.2
42F0:  BRA    444E
42F2:  XORLW  1F
42F4:  BTFSC  FD8.2
42F6:  BRA    455E
42F8:  XORLW  1C
42FA:  BTFSC  FD8.2
42FC:  BRA    45B6
42FE:  XORLW  1D
4300:  BTFSC  FD8.2
4302:  BRA    462E
4304:  XORLW  0E
4306:  BTFSC  FD8.2
4308:  BRA    46A4
430A:  BRA    4720
....................         { 
.................... 			case 'E':  // return version 
.................... 			if(c2 =='E') 
430C:  MOVLB  1
430E:  MOVF   xE3,W
4310:  SUBLW  45
4312:  BNZ   440C
.................... 			{ 
.................... 				sprintf(buf, "VE %s VS %lu.%lu ID=%02lu DT=%02lu%02u\r",  
....................                 VERSION, ((setup.setup_version >> 8) & 0xff), (setup.setup_version & 0xff), 
....................                 setup.unit_ID, setup.year, setup.week); 
4314:  MOVFF  FF,217
4318:  MOVLB  2
431A:  CLRF   x18
431C:  CLRF   x18
431E:  MOVFF  FE,219
4322:  MOVLB  2
4324:  CLRF   x1A
4326:  MOVLW  01
4328:  MOVLB  1
432A:  MOVWF  x97
432C:  MOVLW  B9
432E:  MOVWF  x96
4330:  MOVLW  B6
4332:  MOVWF  FF6
4334:  MOVLW  0C
4336:  MOVWF  FF7
4338:  MOVLW  03
433A:  MOVLB  2
433C:  MOVWF  x30
433E:  MOVLB  0
4340:  CALL   27BC
4344:  MOVLW  1A
4346:  MOVWF  FF6
4348:  MOVLW  0A
434A:  MOVWF  FF7
434C:  GOTO   319C
4350:  MOVLW  BB
4352:  MOVWF  FF6
4354:  MOVLW  0C
4356:  MOVWF  FF7
4358:  MOVLW  04
435A:  MOVLB  2
435C:  MOVWF  x30
435E:  MOVLB  0
4360:  CALL   27BC
4364:  MOVLW  10
4366:  MOVWF  FE9
4368:  MOVFF  218,21D
436C:  MOVFF  217,21C
4370:  CALL   27E4
4374:  MOVLW  2E
4376:  MOVLB  2
4378:  MOVWF  x3D
437A:  MOVLB  0
437C:  CALL   279A
4380:  MOVLW  10
4382:  MOVWF  FE9
4384:  MOVFF  21A,21D
4388:  MOVFF  219,21C
438C:  CALL   27E4
4390:  MOVLW  C6
4392:  MOVWF  FF6
4394:  MOVLW  0C
4396:  MOVWF  FF7
4398:  MOVLW  04
439A:  MOVLB  2
439C:  MOVWF  x30
439E:  MOVLB  0
43A0:  CALL   27BC
43A4:  MOVLW  0B
43A6:  MOVWF  FE9
43A8:  MOVFF  F0,21D
43AC:  MOVFF  EF,21C
43B0:  CALL   27E4
43B4:  MOVLW  CF
43B6:  MOVWF  FF6
43B8:  MOVLW  0C
43BA:  MOVWF  FF7
43BC:  MOVLW  04
43BE:  MOVLB  2
43C0:  MOVWF  x30
43C2:  MOVLB  0
43C4:  CALL   27BC
43C8:  MOVLW  0B
43CA:  MOVWF  FE9
43CC:  MOVFF  ED,21D
43D0:  MOVFF  EC,21C
43D4:  CALL   27E4
43D8:  MOVFF  EE,21C
43DC:  MOVLW  01
43DE:  MOVLB  2
43E0:  MOVWF  x1D
43E2:  MOVLB  0
43E4:  CALL   2934
43E8:  MOVLW  0D
43EA:  MOVLB  2
43EC:  MOVWF  x3D
43EE:  MOVLB  0
43F0:  CALL   279A
.................... 				COM1_send_str(buf); 
43F4:  MOVLW  01
43F6:  MOVLB  2
43F8:  MOVWF  x55
43FA:  MOVLW  B9
43FC:  MOVWF  x54
43FE:  MOVLB  0
4400:  CALL   20AE
.................... 				ret = 1; 
4404:  MOVLW  01
4406:  MOVLB  1
4408:  MOVWF  xB7
.................... 			} 
440A:  BRA    444A
.................... 			else 
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
440C:  MOVLW  01
440E:  MOVWF  FEA
4410:  MOVLW  FE
4412:  MOVWF  FE9
4414:  MOVFF  FF2,217
4418:  BCF    FF2.7
441A:  MOVLW  09
441C:  MOVWF  01
441E:  CLRF   FF7
4420:  MOVLW  00
4422:  MOVLB  0
4424:  CALL   09DC
4428:  TBLRD*-
442A:  TBLRD*+
442C:  MOVFF  FF5,FEE
4430:  DECFSZ 01,F
4432:  BRA    442A
4434:  MOVLB  2
4436:  BTFSC  x17.7
4438:  BSF    FF2.7
443A:  MOVLW  01
443C:  MOVWF  x55
443E:  MOVLW  FE
4440:  MOVWF  x54
4442:  MOVLB  0
4444:  CALL   20AE
4448:  MOVLB  1
.................... 			break; 
444A:  MOVLB  0
444C:  BRA    4720
.................... 			case 'S': // set setup version 
.................... 			{ 
.................... 				if (query) { 
444E:  MOVLB  1
4450:  MOVF   xE1,F
4452:  BZ    44C8
.................... 					sprintf(buf, "VS %lu%lu\r", (setup.setup_version >> 8) & 0xff, setup.setup_version & 0xff); 
4454:  MOVFF  FF,217
4458:  MOVLB  2
445A:  CLRF   x18
445C:  CLRF   x18
445E:  MOVFF  FE,219
4462:  MOVLB  2
4464:  CLRF   x1A
4466:  MOVLW  01
4468:  MOVLB  1
446A:  MOVWF  x97
446C:  MOVLW  B9
446E:  MOVWF  x96
4470:  MOVLW  DE
4472:  MOVWF  FF6
4474:  MOVLW  0C
4476:  MOVWF  FF7
4478:  MOVLW  03
447A:  MOVLB  2
447C:  MOVWF  x30
447E:  MOVLB  0
4480:  CALL   27BC
4484:  MOVLW  10
4486:  MOVWF  FE9
4488:  MOVFF  218,21D
448C:  MOVFF  217,21C
4490:  CALL   27E4
4494:  MOVLW  10
4496:  MOVWF  FE9
4498:  MOVFF  21A,21D
449C:  MOVFF  219,21C
44A0:  CALL   27E4
44A4:  MOVLW  0D
44A6:  MOVLB  2
44A8:  MOVWF  x3D
44AA:  MOVLB  0
44AC:  CALL   279A
.................... 					COM1_send_str(buf); 
44B0:  MOVLW  01
44B2:  MOVLB  2
44B4:  MOVWF  x55
44B6:  MOVLW  B9
44B8:  MOVWF  x54
44BA:  MOVLB  0
44BC:  CALL   20AE
.................... 					ret = 1; 
44C0:  MOVLW  01
44C2:  MOVLB  1
44C4:  MOVWF  xB7
.................... 					} else { 
44C6:  BRA    455A
.................... 					val = get_int(); 
44C8:  MOVLB  0
44CA:  CALL   22AC
44CE:  MOVFF  02,1F6
44D2:  MOVFF  01,1F5
.................... 					if (peek_char() == '.') 
44D6:  CALL   21D2
44DA:  MOVFF  02,218
44DE:  MOVFF  01,217
44E2:  MOVLB  2
44E4:  MOVF   01,W
44E6:  SUBLW  2E
44E8:  BNZ   451C
44EA:  MOVF   x18,F
44EC:  BNZ   451C
.................... 					{ 
.................... 						get_char(); // skip '.' 
44EE:  MOVLB  0
44F0:  CALL   21F0
.................... 						rp = get_int(); 
44F4:  CALL   22AC
44F8:  MOVFF  02,1F8
44FC:  MOVFF  01,1F7
.................... 						rp += val << 8; 
4500:  MOVLW  00
4502:  MOVLB  1
4504:  ADDWF  xF7,F
4506:  MOVF   xF5,W
4508:  ADDWFC xF8,F
.................... 						setup.setup_version = rp;    
450A:  MOVFF  1F8,FF
450E:  MOVFF  1F7,FE
.................... 						ret = 1;                  
4512:  MOVLW  01
4514:  MOVWF  xB7
.................... 						break; 
4516:  MOVLB  0
4518:  BRA    4720
451A:  MOVLB  2
.................... 					} 
.................... 					COM1_send_str("\r\nFAIL\r\n");                 
451C:  MOVLW  01
451E:  MOVWF  FEA
4520:  MOVLW  FE
4522:  MOVWF  FE9
4524:  MOVFF  FF2,217
4528:  BCF    FF2.7
452A:  MOVLW  09
452C:  MOVWF  01
452E:  CLRF   FF7
4530:  MOVLW  00
4532:  MOVLB  0
4534:  CALL   09DC
4538:  TBLRD*-
453A:  TBLRD*+
453C:  MOVFF  FF5,FEE
4540:  DECFSZ 01,F
4542:  BRA    453A
4544:  MOVLB  2
4546:  BTFSC  x17.7
4548:  BSF    FF2.7
454A:  MOVLW  01
454C:  MOVWF  x55
454E:  MOVLW  FE
4550:  MOVWF  x54
4552:  MOVLB  0
4554:  CALL   20AE
4558:  MOVLB  1
.................... 				} 
.................... 				break; 
455A:  MOVLB  0
455C:  BRA    4720
.................... 			}  
.................... 			case 'L':  // set low power level 
.................... 			if(c2 == 'L') 
455E:  MOVLB  1
4560:  MOVF   xE3,W
4562:  SUBLW  4C
4564:  BNZ   4574
.................... 			{ 
.................... 				set_low_power_level(); 
4566:  MOVLB  0
4568:  GOTO   31C0
.................... 				ret = 1; 
456C:  MOVLW  01
456E:  MOVLB  1
4570:  MOVWF  xB7
.................... 			} 
4572:  BRA    45B2
.................... 			else 
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
4574:  MOVLW  01
4576:  MOVWF  FEA
4578:  MOVLW  FE
457A:  MOVWF  FE9
457C:  MOVFF  FF2,217
4580:  BCF    FF2.7
4582:  MOVLW  09
4584:  MOVWF  01
4586:  CLRF   FF7
4588:  MOVLW  00
458A:  MOVLB  0
458C:  CALL   09DC
4590:  TBLRD*-
4592:  TBLRD*+
4594:  MOVFF  FF5,FEE
4598:  DECFSZ 01,F
459A:  BRA    4592
459C:  MOVLB  2
459E:  BTFSC  x17.7
45A0:  BSF    FF2.7
45A2:  MOVLW  01
45A4:  MOVWF  x55
45A6:  MOVLW  FE
45A8:  MOVWF  x54
45AA:  MOVLB  0
45AC:  CALL   20AE
45B0:  MOVLB  1
.................... 			break; 
45B2:  MOVLB  0
45B4:  BRA    4720
.................... 			 
.................... 			case 'P':  // VP command power level control like in Generic TX  $P 
.................... 			if (query) 
45B6:  MOVLB  1
45B8:  MOVF   xE1,F
45BA:  BZ    461E
....................             { 
.................... 				sprintf(buf, "VP %lu\r", setup.power_level + 20); 
45BC:  MOVLW  14
45BE:  MOVLB  0
45C0:  ADDWF  xB3,W
45C2:  MOVLB  2
45C4:  MOVWF  x17
45C6:  MOVLW  00
45C8:  MOVLB  0
45CA:  ADDWFC xB4,W
45CC:  MOVLB  2
45CE:  MOVWF  x18
45D0:  MOVLW  01
45D2:  MOVLB  1
45D4:  MOVWF  x97
45D6:  MOVLW  B9
45D8:  MOVWF  x96
45DA:  MOVLW  EA
45DC:  MOVWF  FF6
45DE:  MOVLW  0C
45E0:  MOVWF  FF7
45E2:  MOVLW  03
45E4:  MOVLB  2
45E6:  MOVWF  x30
45E8:  MOVLB  0
45EA:  CALL   27BC
45EE:  MOVLW  10
45F0:  MOVWF  FE9
45F2:  MOVFF  218,21D
45F6:  MOVFF  217,21C
45FA:  CALL   27E4
45FE:  MOVLW  0D
4600:  MOVLB  2
4602:  MOVWF  x3D
4604:  MOVLB  0
4606:  CALL   279A
.................... 				COM1_send_str(buf); 
460A:  MOVLW  01
460C:  MOVLB  2
460E:  MOVWF  x55
4610:  MOVLW  B9
4612:  MOVWF  x54
4614:  MOVLB  0
4616:  CALL   20AE
.................... 			} 
461A:  BRA    4624
461C:  MOVLB  1
.................... 			else 
.................... 			set_power_level(); 
461E:  MOVLB  0
4620:  GOTO   3230
.................... 			ret = 1; 
4624:  MOVLW  01
4626:  MOVLB  1
4628:  MOVWF  xB7
.................... 			break; 
462A:  MOVLB  0
462C:  BRA    4720
.................... 			 
.................... 			case 'M': // manual power level 
.................... 			if (query) 
462E:  MOVLB  1
4630:  MOVF   xE1,F
4632:  BZ    4680
....................             { 
.................... 				sprintf(buf, "VM %lu\r", manual_negative); 
4634:  MOVLW  01
4636:  MOVWF  x97
4638:  MOVLW  B9
463A:  MOVWF  x96
463C:  MOVLW  F2
463E:  MOVWF  FF6
4640:  MOVLW  0C
4642:  MOVWF  FF7
4644:  MOVLW  03
4646:  MOVLB  2
4648:  MOVWF  x30
464A:  MOVLB  0
464C:  CALL   27BC
4650:  MOVLW  10
4652:  MOVWF  FE9
4654:  MOVFF  20,21D
4658:  MOVFF  1F,21C
465C:  CALL   27E4
4660:  MOVLW  0D
4662:  MOVLB  2
4664:  MOVWF  x3D
4666:  MOVLB  0
4668:  CALL   279A
.................... 				COM1_send_str(buf); 
466C:  MOVLW  01
466E:  MOVLB  2
4670:  MOVWF  x55
4672:  MOVLW  B9
4674:  MOVWF  x54
4676:  MOVLB  0
4678:  CALL   20AE
.................... 			} 
467C:  BRA    46A2
467E:  MOVLB  1
.................... 			else 
....................             { 
.................... 				manual_negative = get_int(); 
4680:  MOVLB  0
4682:  CALL   22AC
4686:  MOVFF  02,20
468A:  MOVFF  01,1F
.................... 				set_AD5314(DAC_NEG_VOLT, val); 
468E:  MOVLW  06
4690:  MOVLB  2
4692:  MOVWF  x1D
4694:  MOVFF  1F6,21F
4698:  MOVFF  1F5,21E
469C:  MOVLB  0
469E:  CALL   0F62
.................... 			} 
.................... 			break; 
46A2:  BRA    4720
.................... 			case 'C': // manual power level 
.................... 			if (query) 
46A4:  MOVLB  1
46A6:  MOVF   xE1,F
46A8:  BZ    46F6
....................             { 
.................... 				sprintf(buf, "VC %lu\r", manual_pos); 
46AA:  MOVLW  01
46AC:  MOVWF  x97
46AE:  MOVLW  B9
46B0:  MOVWF  x96
46B2:  MOVLW  FA
46B4:  MOVWF  FF6
46B6:  MOVLW  0C
46B8:  MOVWF  FF7
46BA:  MOVLW  03
46BC:  MOVLB  2
46BE:  MOVWF  x30
46C0:  MOVLB  0
46C2:  CALL   27BC
46C6:  MOVLW  10
46C8:  MOVWF  FE9
46CA:  MOVFF  22,21D
46CE:  MOVFF  21,21C
46D2:  CALL   27E4
46D6:  MOVLW  0D
46D8:  MOVLB  2
46DA:  MOVWF  x3D
46DC:  MOVLB  0
46DE:  CALL   279A
.................... 				COM1_send_str(buf); 
46E2:  MOVLW  01
46E4:  MOVLB  2
46E6:  MOVWF  x55
46E8:  MOVLW  B9
46EA:  MOVWF  x54
46EC:  MOVLB  0
46EE:  CALL   20AE
.................... 			} 
46F2:  BRA    4720
46F4:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
46F6:  MOVLB  0
46F8:  CALL   22AC
46FC:  MOVFF  02,1F6
4700:  MOVFF  01,1F5
.................... 				manual_pos = val; 
4704:  MOVFF  1F6,22
4708:  MOVFF  1F5,21
.................... 				set_AD5314(DAC_POS_VOLT, val); 
470C:  MOVLW  02
470E:  MOVLB  2
4710:  MOVWF  x1D
4712:  MOVFF  1F6,21F
4716:  MOVFF  1F5,21E
471A:  MOVLB  0
471C:  CALL   0F62
.................... 			} 
.................... 			break; 
.................... 		} 
.................... 		break; 
4720:  GOTO   4F76
.................... 		 
.................... 		case 'C': 
.................... //		if (!ttccp_login) break; 
.................... 		if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
4724:  MOVLB  1
4726:  MOVF   xE3,W
4728:  SUBLW  53
472A:  BTFSS  FD8.2
472C:  BRA    482C
....................         { 
.................... 			if (query) 
472E:  MOVF   xE1,F
4730:  BZ    477E
....................             { 
.................... 				sprintf(buf, "CS %u\r", setup.clock_source); 
4732:  MOVLW  01
4734:  MOVWF  x97
4736:  MOVLW  B9
4738:  MOVWF  x96
473A:  MOVLW  02
473C:  MOVWF  FF6
473E:  MOVLW  0D
4740:  MOVWF  FF7
4742:  MOVLW  03
4744:  MOVLB  2
4746:  MOVWF  x30
4748:  MOVLB  0
474A:  CALL   27BC
474E:  MOVFF  AA,21C
4752:  MOVLW  1B
4754:  MOVLB  2
4756:  MOVWF  x1D
4758:  MOVLB  0
475A:  CALL   2934
475E:  MOVLW  0D
4760:  MOVLB  2
4762:  MOVWF  x3D
4764:  MOVLB  0
4766:  CALL   279A
.................... 				COM1_send_str(buf); 
476A:  MOVLW  01
476C:  MOVLB  2
476E:  MOVWF  x55
4770:  MOVLW  B9
4772:  MOVWF  x54
4774:  MOVLB  0
4776:  CALL   20AE
.................... 			} 
477A:  BRA    4824
477C:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
477E:  MOVLB  0
4780:  CALL   22AC
4784:  MOVFF  02,1F6
4788:  MOVFF  01,1F5
.................... 				if (val < 2) 
478C:  MOVLB  1
478E:  MOVF   xF6,F
4790:  BNZ   47A6
4792:  MOVF   xF5,W
4794:  SUBLW  01
4796:  BNC   47A6
.................... 				{ 
.................... 					setup.clock_source = val; 
4798:  MOVFF  1F5,AA
.................... 					FPGA_set_reg6(); 
479C:  MOVLB  0
479E:  CALL   17BA
.................... 				} 
47A2:  BRA    4824
47A4:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
47A6:  MOVLW  01
47A8:  MOVWF  FEA
47AA:  MOVLW  FE
47AC:  MOVWF  FE9
47AE:  MOVFF  FF2,217
47B2:  BCF    FF2.7
47B4:  MOVLW  09
47B6:  MOVWF  01
47B8:  CLRF   FF7
47BA:  MOVLW  00
47BC:  MOVLB  0
47BE:  CALL   09DC
47C2:  TBLRD*-
47C4:  TBLRD*+
47C6:  MOVFF  FF5,FEE
47CA:  DECFSZ 01,F
47CC:  BRA    47C4
47CE:  MOVLB  2
47D0:  BTFSC  x17.7
47D2:  BSF    FF2.7
47D4:  MOVLW  01
47D6:  MOVWF  x55
47D8:  MOVLW  FE
47DA:  MOVWF  x54
47DC:  MOVLB  0
47DE:  CALL   20AE
.................... 					sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
47E2:  MOVLW  01
47E4:  MOVLB  1
47E6:  MOVWF  x97
47E8:  MOVLW  6C
47EA:  MOVWF  x96
47EC:  MOVLW  0A
47EE:  MOVWF  FF6
47F0:  MOVLW  0D
47F2:  MOVWF  FF7
47F4:  MOVLW  07
47F6:  MOVLB  2
47F8:  MOVWF  x30
47FA:  MOVLB  0
47FC:  CALL   27BC
4800:  MOVFF  AA,21C
4804:  MOVLW  1B
4806:  MOVLB  2
4808:  MOVWF  x1D
480A:  MOVLB  0
480C:  CALL   2934
4810:  MOVLW  0D
4812:  MOVLB  2
4814:  MOVWF  x3D
4816:  MOVLB  0
4818:  CALL   279A
.................... 					ret = 0; 
481C:  MOVLB  1
481E:  CLRF   xB7
.................... 					break; 
4820:  MOVLB  0
4822:  BRA    4F76
.................... 				} 
.................... 			} 
.................... 			 
.................... 			ret = 1; 
4824:  MOVLW  01
4826:  MOVLB  1
4828:  MOVWF  xB7
.................... 		} 
482A:  BRA    4930
.................... 		else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
482C:  MOVF   xE3,W
482E:  SUBLW  50
4830:  BTFSS  FD8.2
4832:  BRA    4930
....................         { 
.................... 			if (query) 
4834:  MOVF   xE1,F
4836:  BZ    4884
....................             { 
.................... 				sprintf(buf, "CP %u\r", setup.clock_polarity); 
4838:  MOVLW  01
483A:  MOVWF  x97
483C:  MOVLW  B9
483E:  MOVWF  x96
4840:  MOVLW  16
4842:  MOVWF  FF6
4844:  MOVLW  0D
4846:  MOVWF  FF7
4848:  MOVLW  03
484A:  MOVLB  2
484C:  MOVWF  x30
484E:  MOVLB  0
4850:  CALL   27BC
4854:  MOVFF  A8,21C
4858:  MOVLW  1B
485A:  MOVLB  2
485C:  MOVWF  x1D
485E:  MOVLB  0
4860:  CALL   2934
4864:  MOVLW  0D
4866:  MOVLB  2
4868:  MOVWF  x3D
486A:  MOVLB  0
486C:  CALL   279A
.................... 				COM1_send_str(buf); 
4870:  MOVLW  01
4872:  MOVLB  2
4874:  MOVWF  x55
4876:  MOVLW  B9
4878:  MOVWF  x54
487A:  MOVLB  0
487C:  CALL   20AE
.................... 			} 
4880:  BRA    492A
4882:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4884:  MOVLB  0
4886:  CALL   22AC
488A:  MOVFF  02,1F6
488E:  MOVFF  01,1F5
.................... 				if (val < 2) 
4892:  MOVLB  1
4894:  MOVF   xF6,F
4896:  BNZ   48AC
4898:  MOVF   xF5,W
489A:  SUBLW  01
489C:  BNC   48AC
.................... 				{ 
.................... 					setup.clock_polarity = val; 
489E:  MOVFF  1F5,A8
.................... 					FPGA_set_reg0(); 
48A2:  MOVLB  0
48A4:  CALL   175E
.................... 				} 
48A8:  BRA    492A
48AA:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
48AC:  MOVLW  01
48AE:  MOVWF  FEA
48B0:  MOVLW  FE
48B2:  MOVWF  FE9
48B4:  MOVFF  FF2,217
48B8:  BCF    FF2.7
48BA:  MOVLW  09
48BC:  MOVWF  01
48BE:  CLRF   FF7
48C0:  MOVLW  00
48C2:  MOVLB  0
48C4:  CALL   09DC
48C8:  TBLRD*-
48CA:  TBLRD*+
48CC:  MOVFF  FF5,FEE
48D0:  DECFSZ 01,F
48D2:  BRA    48CA
48D4:  MOVLB  2
48D6:  BTFSC  x17.7
48D8:  BSF    FF2.7
48DA:  MOVLW  01
48DC:  MOVWF  x55
48DE:  MOVLW  FE
48E0:  MOVWF  x54
48E2:  MOVLB  0
48E4:  CALL   20AE
.................... 					sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
48E8:  MOVLW  01
48EA:  MOVLB  1
48EC:  MOVWF  x97
48EE:  MOVLW  6C
48F0:  MOVWF  x96
48F2:  MOVLW  1E
48F4:  MOVWF  FF6
48F6:  MOVLW  0D
48F8:  MOVWF  FF7
48FA:  MOVLW  07
48FC:  MOVLB  2
48FE:  MOVWF  x30
4900:  MOVLB  0
4902:  CALL   27BC
4906:  MOVFF  A8,21C
490A:  MOVLW  1B
490C:  MOVLB  2
490E:  MOVWF  x1D
4910:  MOVLB  0
4912:  CALL   2934
4916:  MOVLW  0D
4918:  MOVLB  2
491A:  MOVWF  x3D
491C:  MOVLB  0
491E:  CALL   279A
.................... 					ret = 0; 
4922:  MOVLB  1
4924:  CLRF   xB7
.................... 					break; 
4926:  MOVLB  0
4928:  BRA    4F76
.................... 				} 
.................... 			} 
.................... 			 
.................... 			ret = 1; 
492A:  MOVLW  01
492C:  MOVLB  1
492E:  MOVWF  xB7
.................... 		} 
.................... 		break; 
4930:  MOVLB  0
4932:  BRA    4F76
.................... 		 
.................... 		case 'G': 
.................... //		if (!ttccp_login) break; 
.................... 		switch (c2) 
4934:  MOVLB  1
4936:  MOVF   xE3,W
4938:  XORLW  50
493A:  MOVLB  0
493C:  BZ    4948
493E:  XORLW  04
4940:  BZ    49BA
4942:  XORLW  06
4944:  BZ    49C6
4946:  BRA    4A36
....................         { 
.................... 			case 'P': 
.................... 			set_adc_channel(A2D_POWER); // read temperature 
4948:  MOVLW  14
494A:  MOVWF  01
494C:  MOVF   FC2,W
494E:  ANDLW  83
4950:  IORWF  01,W
4952:  MOVWF  FC2
.................... 			delay_us(50); 
4954:  MOVLW  42
4956:  MOVWF  00
4958:  DECFSZ 00,F
495A:  BRA    4958
495C:  NOP   
.................... 			val = read_adc(); 
495E:  BSF    FC2.1
4960:  BTFSC  FC2.1
4962:  BRA    4960
4964:  MOVFF  FC4,1F6
4968:  MOVLB  1
496A:  MOVFF  FC3,1F5
.................... 			sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
496E:  MOVLW  01
4970:  MOVWF  x97
4972:  MOVLW  6C
4974:  MOVWF  x96
4976:  MOVLW  2A
4978:  MOVWF  FF6
497A:  MOVLW  0D
497C:  MOVWF  FF7
497E:  MOVLW  04
4980:  MOVLB  2
4982:  MOVWF  x30
4984:  MOVLB  0
4986:  CALL   27BC
498A:  MOVLW  10
498C:  MOVWF  FE9
498E:  MOVFF  1F6,21D
4992:  MOVFF  1F5,21C
4996:  CALL   27E4
499A:  MOVLW  0D
499C:  MOVLB  2
499E:  MOVWF  x3D
49A0:  MOVLB  0
49A2:  CALL   279A
49A6:  MOVLW  0A
49A8:  MOVLB  2
49AA:  MOVWF  x3D
49AC:  MOVLB  0
49AE:  CALL   279A
.................... 			ret = 0; 
49B2:  MOVLB  1
49B4:  CLRF   xB7
.................... 			break; 
49B6:  MOVLB  0
49B8:  BRA    4A36
.................... 			case 'T': 
....................             update_temperature_string(); 
49BA:  CALL   30F6
....................             ret = 0; 
49BE:  MOVLB  1
49C0:  CLRF   xB7
....................             break; 
49C2:  MOVLB  0
49C4:  BRA    4A36
.................... 			 
.................... 			case 'R': 
....................             set_adc_channel(A2D_PREV); // select forward power input 
49C6:  MOVLW  10
49C8:  MOVWF  01
49CA:  MOVF   FC2,W
49CC:  ANDLW  83
49CE:  IORWF  01,W
49D0:  MOVWF  FC2
....................             delay_us(20); 
49D2:  MOVLW  1A
49D4:  MOVWF  00
49D6:  DECFSZ 00,F
49D8:  BRA    49D6
49DA:  NOP   
....................             val = read_adc(); 
49DC:  BSF    FC2.1
49DE:  BTFSC  FC2.1
49E0:  BRA    49DE
49E2:  MOVFF  FC4,1F6
49E6:  MOVLB  1
49E8:  MOVFF  FC3,1F5
....................             sprintf(ttccp_error_message, "\nGR %lu\r\n", val); 
49EC:  MOVLW  01
49EE:  MOVWF  x97
49F0:  MOVLW  6C
49F2:  MOVWF  x96
49F4:  MOVLW  34
49F6:  MOVWF  FF6
49F8:  MOVLW  0D
49FA:  MOVWF  FF7
49FC:  MOVLW  04
49FE:  MOVLB  2
4A00:  MOVWF  x30
4A02:  MOVLB  0
4A04:  CALL   27BC
4A08:  MOVLW  10
4A0A:  MOVWF  FE9
4A0C:  MOVFF  1F6,21D
4A10:  MOVFF  1F5,21C
4A14:  CALL   27E4
4A18:  MOVLW  0D
4A1A:  MOVLB  2
4A1C:  MOVWF  x3D
4A1E:  MOVLB  0
4A20:  CALL   279A
4A24:  MOVLW  0A
4A26:  MOVLB  2
4A28:  MOVWF  x3D
4A2A:  MOVLB  0
4A2C:  CALL   279A
.................... 			ret = 0; 
4A30:  MOVLB  1
4A32:  CLRF   xB7
4A34:  MOVLB  0
.................... 		} 
.................... 		break; 
4A36:  BRA    4F76
.................... 		break; 
4A38:  BRA    4F76
.................... 		 
.................... 		case 'Q': //statusl      if (!ttccp_login) break; 
.................... 		 
....................         COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
4A3A:  MOVLW  01
4A3C:  MOVWF  FEA
4A3E:  MOVLW  FE
4A40:  MOVWF  FE9
4A42:  MOVFF  FF2,217
4A46:  BCF    FF2.7
4A48:  MOVLW  19
4A4A:  MOVWF  01
4A4C:  CLRF   FF7
4A4E:  MOVLW  00
4A50:  CALL   0A2A
4A54:  TBLRD*-
4A56:  TBLRD*+
4A58:  MOVFF  FF5,FEE
4A5C:  DECFSZ 01,F
4A5E:  BRA    4A56
4A60:  MOVLB  2
4A62:  BTFSC  x17.7
4A64:  BSF    FF2.7
4A66:  MOVLW  01
4A68:  MOVWF  x55
4A6A:  MOVLW  FE
4A6C:  MOVWF  x54
4A6E:  MOVLB  0
4A70:  CALL   20AE
....................         COM1_send_str(VERSION); 
4A74:  MOVLW  01
4A76:  MOVWF  FEA
4A78:  MOVLW  FE
4A7A:  MOVWF  FE9
4A7C:  MOVFF  FF2,217
4A80:  BCF    FF2.7
4A82:  MOVLW  0F
4A84:  MOVWF  01
4A86:  CLRF   FF7
4A88:  MOVLW  00
4A8A:  CALL   0A00
4A8E:  TBLRD*-
4A90:  TBLRD*+
4A92:  MOVFF  FF5,FEE
4A96:  DECFSZ 01,F
4A98:  BRA    4A90
4A9A:  MOVLB  2
4A9C:  BTFSC  x17.7
4A9E:  BSF    FF2.7
4AA0:  MOVLW  01
4AA2:  MOVWF  x55
4AA4:  MOVLW  FE
4AA6:  MOVWF  x54
4AA8:  MOVLB  0
4AAA:  CALL   20AE
....................         sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
.................... 		setup.unit_ID, setup.year, setup.week); 
4AAE:  MOVLW  01
4AB0:  MOVLB  1
4AB2:  MOVWF  x97
4AB4:  MOVLW  B9
4AB6:  MOVWF  x96
4AB8:  MOVLW  3E
4ABA:  MOVWF  FF6
4ABC:  MOVLW  0D
4ABE:  MOVWF  FF7
4AC0:  MOVLW  05
4AC2:  MOVLB  2
4AC4:  MOVWF  x30
4AC6:  MOVLB  0
4AC8:  CALL   27BC
4ACC:  MOVLW  10
4ACE:  MOVWF  FE9
4AD0:  MOVFF  F0,21D
4AD4:  MOVFF  EF,21C
4AD8:  CALL   27E4
4ADC:  MOVLW  46
4ADE:  MOVWF  FF6
4AE0:  MOVLW  0D
4AE2:  MOVWF  FF7
4AE4:  MOVLW  04
4AE6:  MOVLB  2
4AE8:  MOVWF  x30
4AEA:  MOVLB  0
4AEC:  CALL   27BC
4AF0:  MOVLW  0B
4AF2:  MOVWF  FE9
4AF4:  MOVFF  ED,21D
4AF8:  MOVFF  EC,21C
4AFC:  CALL   27E4
4B00:  MOVFF  EE,21C
4B04:  MOVLW  01
4B06:  MOVLB  2
4B08:  MOVWF  x1D
4B0A:  MOVLB  0
4B0C:  CALL   2934
4B10:  MOVLW  0D
4B12:  MOVLB  2
4B14:  MOVWF  x3D
4B16:  MOVLB  0
4B18:  CALL   279A
....................         COM1_send_str(buf); 
4B1C:  MOVLW  01
4B1E:  MOVLB  2
4B20:  MOVWF  x55
4B22:  MOVLW  B9
4B24:  MOVWF  x54
4B26:  MOVLB  0
4B28:  CALL   20AE
.................... 		 
....................         set_adc_channel(A2D_PREV); // select forward power input 
4B2C:  MOVLW  10
4B2E:  MOVWF  01
4B30:  MOVF   FC2,W
4B32:  ANDLW  83
4B34:  IORWF  01,W
4B36:  MOVWF  FC2
....................         delay_us(20); 
4B38:  MOVLW  1A
4B3A:  MOVWF  00
4B3C:  DECFSZ 00,F
4B3E:  BRA    4B3C
4B40:  NOP   
....................         revp = read_adc(); 
4B42:  BSF    FC2.1
4B44:  BTFSC  FC2.1
4B46:  BRA    4B44
4B48:  MOVFF  FC4,103
4B4C:  MOVLB  1
4B4E:  MOVFF  FC3,102
.................... 		 
....................         if (revp <= 580) 
4B52:  MOVF   x03,W
4B54:  SUBLW  02
4B56:  BNC   4B8C
4B58:  BNZ   4B60
4B5A:  MOVF   x02,W
4B5C:  SUBLW  44
4B5E:  BNC   4B8C
.................... 		strcpy(revstat, "GOOD"); 
4B60:  MOVLW  01
4B62:  MOVWF  FEA
4B64:  MOVLW  E4
4B66:  MOVWF  FE9
4B68:  MOVFF  FF2,217
4B6C:  BCF    FF2.7
4B6E:  MOVLW  00
4B70:  MOVLB  0
4B72:  CALL   0A5E
4B76:  TBLRD*-
4B78:  TBLRD*+
4B7A:  MOVF   FF5,W
4B7C:  MOVWF  FEE
4B7E:  IORLW  00
4B80:  BNZ   4B78
4B82:  MOVLB  2
4B84:  BTFSC  x17.7
4B86:  BSF    FF2.7
4B88:  BRA    4BB4
4B8A:  MOVLB  1
....................         else 
.................... 		strcpy(revstat, "BAD"); 
4B8C:  MOVLW  01
4B8E:  MOVWF  FEA
4B90:  MOVLW  E4
4B92:  MOVWF  FE9
4B94:  MOVFF  FF2,217
4B98:  BCF    FF2.7
4B9A:  MOVLW  00
4B9C:  MOVLB  0
4B9E:  CALL   0A7E
4BA2:  TBLRD*-
4BA4:  TBLRD*+
4BA6:  MOVF   FF5,W
4BA8:  MOVWF  FEE
4BAA:  IORLW  00
4BAC:  BNZ   4BA4
4BAE:  MOVLB  2
4BB0:  BTFSC  x17.7
4BB2:  BSF    FF2.7
.................... 		 
....................         if(setup.rp) 
4BB4:  MOVLB  0
4BB6:  MOVF   xF7,W
4BB8:  IORWF  xF8,W
4BBA:  BZ    4BC6
.................... 		rp=0; 
4BBC:  MOVLB  1
4BBE:  CLRF   xF8
4BC0:  CLRF   xF7
4BC2:  BRA    4BCE
4BC4:  MOVLB  0
....................         else 
.................... 		rp=1; 
4BC6:  MOVLB  1
4BC8:  CLRF   xF8
4BCA:  MOVLW  01
4BCC:  MOVWF  xF7
.................... 		 
.................... 		 
.................... 		sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
.................... 		setup.frequency, revstat, current_power, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
4BCE:  MOVFF  A4,21A
4BD2:  MOVFF  A3,219
4BD6:  MOVLB  2
4BD8:  CLRF   x1C
4BDA:  MOVLW  64
4BDC:  MOVWF  x1B
4BDE:  MOVLB  0
4BE0:  CALL   32A0
4BE4:  MOVFF  02,218
4BE8:  MOVFF  01,217
4BEC:  MOVFF  A4,21A
4BF0:  MOVFF  A3,219
4BF4:  MOVLB  2
4BF6:  CLRF   x1C
4BF8:  MOVLW  64
4BFA:  MOVWF  x1B
4BFC:  MOVLB  0
4BFE:  CALL   32A0
4C02:  MOVFF  00,219
4C06:  MOVFF  03,21A
4C0A:  MOVLW  01
4C0C:  MOVLB  1
4C0E:  MOVWF  x97
4C10:  MOVLW  B9
4C12:  MOVWF  x96
4C14:  MOVLW  56
4C16:  MOVWF  FF6
4C18:  MOVLW  0D
4C1A:  MOVWF  FF7
4C1C:  MOVLW  08
4C1E:  MOVLB  2
4C20:  MOVWF  x30
4C22:  MOVLB  0
4C24:  CALL   27BC
4C28:  MOVLW  10
4C2A:  MOVWF  FE9
4C2C:  MOVFF  B2,21D
4C30:  MOVFF  B1,21C
4C34:  CALL   27E4
4C38:  MOVLW  61
4C3A:  MOVWF  FF6
4C3C:  MOVLW  0D
4C3E:  MOVWF  FF7
4C40:  MOVLW  06
4C42:  MOVLB  2
4C44:  MOVWF  x30
4C46:  MOVLB  0
4C48:  CALL   27BC
4C4C:  MOVLW  01
4C4E:  MOVWF  FEA
4C50:  MOVLW  E4
4C52:  MOVWF  FE9
4C54:  GOTO   32E6
4C58:  MOVLW  69
4C5A:  MOVWF  FF6
4C5C:  MOVLW  0D
4C5E:  MOVWF  FF7
4C60:  MOVLW  07
4C62:  MOVLB  2
4C64:  MOVWF  x30
4C66:  MOVLB  0
4C68:  CALL   27BC
4C6C:  MOVLW  10
4C6E:  MOVWF  FE9
4C70:  MOVFF  105,21D
4C74:  MOVFF  104,21C
4C78:  CALL   27E4
4C7C:  MOVLW  73
4C7E:  MOVWF  FF6
4C80:  MOVLW  0D
4C82:  MOVWF  FF7
4C84:  MOVLW  05
4C86:  MOVLB  2
4C88:  MOVWF  x30
4C8A:  MOVLB  0
4C8C:  CALL   27BC
4C90:  MOVLW  10
4C92:  MOVWF  FE9
4C94:  MOVFF  218,21D
4C98:  MOVFF  217,21C
4C9C:  CALL   27E4
4CA0:  MOVLW  2E
4CA2:  MOVLB  2
4CA4:  MOVWF  x3D
4CA6:  MOVLB  0
4CA8:  CALL   279A
4CAC:  MOVLW  10
4CAE:  MOVWF  FE9
4CB0:  MOVFF  21A,21D
4CB4:  MOVFF  219,21C
4CB8:  CALL   27E4
4CBC:  MOVLW  7F
4CBE:  MOVWF  FF6
4CC0:  MOVLW  0D
4CC2:  MOVWF  FF7
4CC4:  MOVLW  09
4CC6:  MOVLB  2
4CC8:  MOVWF  x30
4CCA:  MOVLB  0
4CCC:  CALL   27BC
4CD0:  MOVFF  A7,21C
4CD4:  MOVLW  1B
4CD6:  MOVLB  2
4CD8:  MOVWF  x1D
4CDA:  MOVLB  0
4CDC:  CALL   2934
4CE0:  MOVLW  8A
4CE2:  MOVWF  FF6
4CE4:  MOVLW  0D
4CE6:  MOVWF  FF7
4CE8:  MOVLW  05
4CEA:  MOVLB  2
4CEC:  MOVWF  x30
4CEE:  MOVLB  0
4CF0:  CALL   27BC
4CF4:  MOVFF  AA,21C
4CF8:  MOVLW  1B
4CFA:  MOVLB  2
4CFC:  MOVWF  x1D
4CFE:  MOVLB  0
4D00:  CALL   2934
4D04:  MOVLW  91
4D06:  MOVWF  FF6
4D08:  MOVLW  0D
4D0A:  MOVWF  FF7
4D0C:  MOVLW  05
4D0E:  MOVLB  2
4D10:  MOVWF  x30
4D12:  MOVLB  0
4D14:  CALL   27BC
4D18:  MOVLW  10
4D1A:  MOVWF  FE9
4D1C:  MOVFF  A6,21D
4D20:  MOVFF  A5,21C
4D24:  CALL   27E4
4D28:  MOVLW  0D
4D2A:  MOVLB  2
4D2C:  MOVWF  x3D
4D2E:  MOVLB  0
4D30:  CALL   279A
.................... 		COM1_send_str(buf); 
4D34:  MOVLW  01
4D36:  MOVLB  2
4D38:  MOVWF  x55
4D3A:  MOVLW  B9
4D3C:  MOVWF  x54
4D3E:  MOVLB  0
4D40:  CALL   20AE
.................... 		 
.................... 		sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, VP=%lu, RB=%lu, RC=%lu, CP=%u  \r" 
.................... 		setup.SOQPSK, setup.randomizer, 1 - setup.data_polarity, rp, setup.data_source, 
.................... 		setup.internal_pattern, setup.power_low_level+20, setup.power_level+20, setup.cot, setup.rc, 
.................... 		setup.clock_polarity); 
4D44:  MOVLW  01
4D46:  BSF    FD8.0
4D48:  SUBFWB xA9,W
4D4A:  MOVLB  2
4D4C:  MOVWF  x17
4D4E:  MOVLW  14
4D50:  MOVLB  0
4D52:  ADDWF  xF1,W
4D54:  MOVLB  2
4D56:  MOVWF  x18
4D58:  MOVLW  00
4D5A:  MOVLB  0
4D5C:  ADDWFC xF2,W
4D5E:  MOVLB  2
4D60:  MOVWF  x19
4D62:  MOVLW  14
4D64:  MOVLB  0
4D66:  ADDWF  xB3,W
4D68:  MOVLB  2
4D6A:  MOVWF  x1A
4D6C:  MOVLW  00
4D6E:  MOVLB  0
4D70:  ADDWFC xB4,W
4D72:  MOVLB  2
4D74:  MOVWF  x1B
4D76:  MOVLW  01
4D78:  MOVLB  1
4D7A:  MOVWF  x97
4D7C:  MOVLW  B9
4D7E:  MOVWF  x96
4D80:  MOVLW  9C
4D82:  MOVWF  FF6
4D84:  MOVLW  0D
4D86:  MOVWF  FF7
4D88:  MOVLW  06
4D8A:  MOVLB  2
4D8C:  MOVWF  x30
4D8E:  MOVLB  0
4D90:  CALL   27BC
4D94:  MOVFF  AF,21C
4D98:  MOVLW  1B
4D9A:  MOVLB  2
4D9C:  MOVWF  x1D
4D9E:  MOVLB  0
4DA0:  CALL   2934
4DA4:  MOVLW  A4
4DA6:  MOVWF  FF6
4DA8:  MOVLW  0D
4DAA:  MOVWF  FF7
4DAC:  MOVLW  05
4DAE:  MOVLB  2
4DB0:  MOVWF  x30
4DB2:  MOVLB  0
4DB4:  CALL   27BC
4DB8:  MOVFF  AD,21C
4DBC:  MOVLW  1B
4DBE:  MOVLB  2
4DC0:  MOVWF  x1D
4DC2:  MOVLB  0
4DC4:  CALL   2934
4DC8:  MOVLW  AB
4DCA:  MOVWF  FF6
4DCC:  MOVLW  0D
4DCE:  MOVWF  FF7
4DD0:  MOVLW  05
4DD2:  MOVLB  2
4DD4:  MOVWF  x30
4DD6:  MOVLB  0
4DD8:  CALL   27BC
4DDC:  MOVFF  217,21C
4DE0:  MOVLW  1B
4DE2:  MOVLB  2
4DE4:  MOVWF  x1D
4DE6:  MOVLB  0
4DE8:  CALL   2934
4DEC:  MOVLW  B2
4DEE:  MOVWF  FF6
4DF0:  MOVLW  0D
4DF2:  MOVWF  FF7
4DF4:  MOVLW  05
4DF6:  MOVLB  2
4DF8:  MOVWF  x30
4DFA:  MOVLB  0
4DFC:  CALL   27BC
4E00:  MOVLW  10
4E02:  MOVWF  FE9
4E04:  MOVFF  1F8,21D
4E08:  MOVFF  1F7,21C
4E0C:  CALL   27E4
4E10:  MOVLW  BA
4E12:  MOVWF  FF6
4E14:  MOVLW  0D
4E16:  MOVWF  FF7
4E18:  MOVLW  05
4E1A:  MOVLB  2
4E1C:  MOVWF  x30
4E1E:  MOVLB  0
4E20:  CALL   27BC
4E24:  MOVFF  AB,21C
4E28:  MOVLW  1B
4E2A:  MOVLB  2
4E2C:  MOVWF  x1D
4E2E:  MOVLB  0
4E30:  CALL   2934
4E34:  MOVLW  C1
4E36:  MOVWF  FF6
4E38:  MOVLW  0D
4E3A:  MOVWF  FF7
4E3C:  MOVLW  05
4E3E:  MOVLB  2
4E40:  MOVWF  x30
4E42:  MOVLB  0
4E44:  CALL   27BC
4E48:  MOVFF  AC,21C
4E4C:  MOVLW  1B
4E4E:  MOVLB  2
4E50:  MOVWF  x1D
4E52:  MOVLB  0
4E54:  CALL   2934
4E58:  MOVLW  C8
4E5A:  MOVWF  FF6
4E5C:  MOVLW  0D
4E5E:  MOVWF  FF7
4E60:  MOVLW  05
4E62:  MOVLB  2
4E64:  MOVWF  x30
4E66:  MOVLB  0
4E68:  CALL   27BC
4E6C:  MOVLW  10
4E6E:  MOVWF  FE9
4E70:  MOVFF  219,21D
4E74:  MOVFF  218,21C
4E78:  CALL   27E4
4E7C:  MOVLW  D0
4E7E:  MOVWF  FF6
4E80:  MOVLW  0D
4E82:  MOVWF  FF7
4E84:  MOVLW  05
4E86:  MOVLB  2
4E88:  MOVWF  x30
4E8A:  MOVLB  0
4E8C:  CALL   27BC
4E90:  MOVLW  10
4E92:  MOVWF  FE9
4E94:  MOVFF  21B,21D
4E98:  MOVFF  21A,21C
4E9C:  CALL   27E4
4EA0:  MOVLW  D8
4EA2:  MOVWF  FF6
4EA4:  MOVLW  0D
4EA6:  MOVWF  FF7
4EA8:  MOVLW  05
4EAA:  MOVLB  2
4EAC:  MOVWF  x30
4EAE:  MOVLB  0
4EB0:  CALL   27BC
4EB4:  MOVLW  10
4EB6:  MOVWF  FE9
4EB8:  MOVFF  F4,21D
4EBC:  MOVFF  F3,21C
4EC0:  CALL   27E4
4EC4:  MOVLW  E0
4EC6:  MOVWF  FF6
4EC8:  MOVLW  0D
4ECA:  MOVWF  FF7
4ECC:  MOVLW  05
4ECE:  MOVLB  2
4ED0:  MOVWF  x30
4ED2:  MOVLB  0
4ED4:  CALL   27BC
4ED8:  MOVLW  10
4EDA:  MOVWF  FE9
4EDC:  MOVFF  F6,21D
4EE0:  MOVFF  F5,21C
4EE4:  CALL   27E4
4EE8:  MOVLW  E8
4EEA:  MOVWF  FF6
4EEC:  MOVLW  0D
4EEE:  MOVWF  FF7
4EF0:  MOVLW  05
4EF2:  MOVLB  2
4EF4:  MOVWF  x30
4EF6:  MOVLB  0
4EF8:  CALL   27BC
4EFC:  MOVFF  A8,21C
4F00:  MOVLW  1B
4F02:  MOVLB  2
4F04:  MOVWF  x1D
4F06:  MOVLB  0
4F08:  CALL   2934
4F0C:  MOVLW  EF
4F0E:  MOVWF  FF6
4F10:  MOVLW  0D
4F12:  MOVWF  FF7
4F14:  MOVLW  03
4F16:  MOVLB  2
4F18:  MOVWF  x30
4F1A:  MOVLB  0
4F1C:  CALL   27BC
.................... 		COM1_send_str(buf); 
4F20:  MOVLW  01
4F22:  MOVLB  2
4F24:  MOVWF  x55
4F26:  MOVLW  B9
4F28:  MOVWF  x54
4F2A:  MOVLB  0
4F2C:  CALL   20AE
.................... 		 
.................... 		///sprintf(buf, "\r\n\nUT=%u, US=%u BG= %lu [Hz] %lu [mSec]\r" setup.UART_Time, setup.UART_Status, 1000 / setup.Block_per_second , setup.Block_per_second); // VERSION 3.3 17.1.2016 
.................... 		///COM1_send_str(buf); 
.................... 		 
....................         update_temperature_string(); 
4F30:  CALL   30F6
....................         ret = 0; 
4F34:  MOVLB  1
4F36:  CLRF   xB7
.................... 		break; 
4F38:  MOVLB  0
4F3A:  BRA    4F76
.................... 		default: 
....................       	{ 
.................... //			if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
4F3C:  MOVLW  01
4F3E:  MOVWF  FEA
4F40:  MOVLW  FE
4F42:  MOVWF  FE9
4F44:  MOVFF  FF2,217
4F48:  BCF    FF2.7
4F4A:  MOVLW  09
4F4C:  MOVWF  01
4F4E:  CLRF   FF7
4F50:  MOVLW  00
4F52:  CALL   09DC
4F56:  TBLRD*-
4F58:  TBLRD*+
4F5A:  MOVFF  FF5,FEE
4F5E:  DECFSZ 01,F
4F60:  BRA    4F58
4F62:  MOVLB  2
4F64:  BTFSC  x17.7
4F66:  BSF    FF2.7
4F68:  MOVLW  01
4F6A:  MOVWF  x55
4F6C:  MOVLW  FE
4F6E:  MOVWF  x54
4F70:  MOVLB  0
4F72:  CALL   20AE
4F76:  MOVLB  1
.................... 			 
.................... 		} 
.................... 	} 
.................... 	aaa: 
.................... 	return; 
4F78:  MOVLB  0
4F7A:  GOTO   5080 (RETURN)
.................... } 
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
.................... { 
.................... 	UINT chr, ret; 
.................... 	 
.................... 	switch (comm_state) 
*
4FC2:  MOVF   4F,W
4FC4:  XORLW  00
4FC6:  BZ    4FD4
4FC8:  XORLW  02
4FCA:  BZ    5004
4FCC:  XORLW  01
4FCE:  BTFSC  FD8.2
4FD0:  BRA    5126
4FD2:  BRA    5126
....................     { 
.................... 		case COMM_INIT: 
.................... 		comm_ridx = 0; 
4FD4:  CLRF   50
.................... 		comm_state = COMM_WAIT_CR; 
4FD6:  MOVLW  02
4FD8:  MOVWF  4F
.................... 		comm_timeout = 0; 
4FDA:  CLRF   xA2
4FDC:  CLRF   xA1
.................... 		if (ttccp_login) 
4FDE:  MOVLB  1
4FE0:  MOVF   x28,F
4FE2:  BZ    5000
.................... 		COM1_send_str("\r>"); 
4FE4:  MOVLW  0D
4FE6:  MOVWF  xB1
4FE8:  MOVLW  3E
4FEA:  MOVWF  xB2
4FEC:  CLRF   xB3
4FEE:  MOVLW  01
4FF0:  MOVLB  2
4FF2:  MOVWF  x55
4FF4:  MOVLW  B1
4FF6:  MOVWF  x54
4FF8:  MOVLB  0
4FFA:  CALL   20AE
4FFE:  MOVLB  1
.................... 		break; 
5000:  MOVLB  0
5002:  BRA    5126
.................... 		case COMM_WAIT_CR: 
.................... 		if (COM1_rcnt) 
5004:  MOVF   2C,F
5006:  BTFSC  FD8.2
5008:  BRA    50F8
....................         { 
.................... 			comm_timeout = 0; 
500A:  CLRF   xA2
500C:  CLRF   xA1
.................... 			chr = COM1_get_chr(); 
500E:  CALL   21A6
5012:  MOVLB  1
5014:  CLRF   xAE
5016:  MOVFF  01,1AD
.................... 			comm_buf[comm_ridx++] = chr; 
501A:  MOVF   50,W
501C:  INCF   50,F
501E:  CLRF   03
5020:  ADDLW  51
5022:  MOVWF  FE9
5024:  MOVLW  00
5026:  ADDWFC 03,W
5028:  MOVWF  FEA
502A:  MOVFF  1AD,FEF
.................... 			if (comm_ridx > 70) 
502E:  MOVF   50,W
5030:  SUBLW  46
5032:  BC    503C
.................... 			{ 
.................... 				comm_state = 0; 
5034:  CLRF   4F
.................... 				break; 
5036:  MOVLB  0
5038:  BRA    5126
503A:  MOVLB  1
.................... 			} 
.................... 			if (chr == 13 || chr == ';') 
503C:  MOVF   xAD,W
503E:  SUBLW  0D
5040:  BNZ   5046
5042:  MOVF   xAE,F
5044:  BZ    5050
5046:  MOVF   xAD,W
5048:  SUBLW  3B
504A:  BNZ   50FA
504C:  MOVF   xAE,F
504E:  BNZ   50FA
.................... 			{ 
.................... 				if (chr == ';') 
5050:  MOVF   xAD,W
5052:  SUBLW  3B
5054:  BNZ   5072
5056:  MOVF   xAE,F
5058:  BNZ   5072
.................... 				{ 
.................... 					comm_buf[comm_ridx-1] = 13; 
505A:  MOVLW  01
505C:  SUBWF  50,W
505E:  CLRF   03
5060:  ADDLW  51
5062:  MOVWF  FE9
5064:  MOVLW  00
5066:  ADDWFC 03,W
5068:  MOVWF  FEA
506A:  MOVLW  0D
506C:  MOVWF  FEF
.................... 					comm_ridx = 0; 
506E:  CLRF   50
.................... 				} 
5070:  BRA    507A
.................... 				else 
.................... 				COM1_init(); 
5072:  MOVLB  0
5074:  CALL   0E42
5078:  MOVLB  1
.................... 				process_ttccp_commands(); 
507A:  MOVLB  0
507C:  GOTO   330E
.................... 				if (debug_mode) 
5080:  MOVLB  1
5082:  MOVF   x37,F
5084:  BZ    5090
.................... 				if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5086:  MOVF   x28,F
5088:  BNZ   5090
508A:  MOVLB  0
508C:  BRA    5126
508E:  MOVLB  1
.................... 				COM1_send_str("\r\nOK\n"); 
5090:  MOVLW  0D
5092:  MOVWF  xB1
5094:  MOVLW  0A
5096:  MOVWF  xB2
5098:  MOVLW  4F
509A:  MOVWF  xB3
509C:  MOVLW  4B
509E:  MOVWF  xB4
50A0:  MOVLW  0A
50A2:  MOVWF  xB5
50A4:  CLRF   xB6
50A6:  MOVLW  01
50A8:  MOVLB  2
50AA:  MOVWF  x55
50AC:  MOVLW  B1
50AE:  MOVWF  x54
50B0:  MOVLB  0
50B2:  CALL   20AE
.................... 				if (ret == 1) 
50B6:  MOVLB  1
50B8:  DECFSZ xAF,W
50BA:  BRA    50E8
50BC:  MOVF   xB0,F
50BE:  BNZ   50E8
.................... 				{ 
.................... 					if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
50C0:  MOVF   x28,F
50C2:  BNZ   50CA
50C4:  MOVLB  0
50C6:  BRA    5126
50C8:  MOVLB  1
.................... 					COM1_send_str("\n\r"); 
50CA:  MOVLW  0A
50CC:  MOVWF  xB1
50CE:  MOVLW  0D
50D0:  MOVWF  xB2
50D2:  CLRF   xB3
50D4:  MOVLW  01
50D6:  MOVLB  2
50D8:  MOVWF  x55
50DA:  MOVLW  B1
50DC:  MOVWF  x54
50DE:  MOVLB  0
50E0:  CALL   20AE
.................... 				} 
50E4:  BRA    50F8
50E6:  MOVLB  1
.................... 				else 
.................... 				COM1_send_str(ttccp_error_message); 
50E8:  MOVLW  01
50EA:  MOVLB  2
50EC:  MOVWF  x55
50EE:  MOVLW  6C
50F0:  MOVWF  x54
50F2:  MOVLB  0
50F4:  CALL   20AE
50F8:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		 
.................... 		if (comm_state > COMM_WAIT_DLR) 
50FA:  MOVF   4F,W
50FC:  SUBLW  01
50FE:  BC    5122
....................         if (TMR_100MS_COMM_TO) 
5100:  BTFSS  28.1
5102:  BRA    5122
.................... 		{ 
.................... 			TMR_100MS_COMM_TO = 0; 
5104:  BCF    28.1
.................... 			if (++comm_timeout > 10000) // time out after 10 seconds from last char 
5106:  MOVLB  0
5108:  INCF   xA1,F
510A:  BTFSC  FD8.2
510C:  INCF   xA2,F
510E:  MOVF   xA2,W
5110:  SUBLW  26
5112:  BC    5120
5114:  XORLW  FF
5116:  BNZ   511E
5118:  MOVF   xA1,W
511A:  SUBLW  10
511C:  BC    5120
....................             comm_state = 0; 
511E:  CLRF   4F
5120:  MOVLB  1
.................... 		} 
.................... 		break; 
5122:  MOVLB  0
5124:  BRA    5126
.................... 		case COMM_DELAY: 
.................... 		break; 
.................... 	} 
5126:  GOTO   6358 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
.................... { 
.................... 	UINT chr, ret; 
.................... 	 
.................... 	switch (comm_state) 
*
6188:  MOVF   4F,W
618A:  ADDLW  FC
618C:  BTFSC  FD8.0
618E:  BRA    62EE
6190:  ADDLW  04
6192:  GOTO   62F2
....................     { 
.................... 		case COMM_INIT: 
.................... 		comm_ridx = 0; 
6196:  CLRF   50
.................... 		comm_state++; 
6198:  INCF   4F,F
.................... 		break; 
619A:  BRA    62EE
.................... 		case COMM_WAIT_DLR: 
.................... 		#ignore_warnings 201 
.................... 		if (COM1_rcnt) 
619C:  MOVF   2C,F
619E:  BZ    61CC
....................         if ((chr = COM1_get_chr()) == '$') 
61A0:  CALL   21A6
61A4:  MOVLB  1
61A6:  CLRF   xAE
61A8:  MOVFF  01,1AD
61AC:  MOVF   xAD,W
61AE:  SUBLW  24
61B0:  BNZ   61C2
61B2:  MOVF   xAE,F
61B4:  BNZ   61C2
.................... 		{ 
.................... 			comm_state++; 
61B6:  INCF   4F,F
.................... 			comm_timeout = 0; 
61B8:  MOVLB  0
61BA:  CLRF   xA2
61BC:  CLRF   xA1
.................... 		} 
61BE:  BRA    61CC
61C0:  MOVLB  1
....................         else 
.................... 		inc_dec(chr); 
61C2:  MOVFF  1AD,1C4
61C6:  MOVLB  0
61C8:  GOTO   51B2
.................... 		break; 
61CC:  BRA    62EE
.................... 		case COMM_WAIT_CR: 
.................... 		if (COM1_rcnt) 
61CE:  MOVF   2C,F
61D0:  BTFSC  FD8.2
61D2:  BRA    62C0
....................         { 
.................... 			comm_timeout = 0; 
61D4:  CLRF   xA2
61D6:  CLRF   xA1
.................... 			chr = COM1_get_chr(); 
61D8:  CALL   21A6
61DC:  MOVLB  1
61DE:  CLRF   xAE
61E0:  MOVFF  01,1AD
.................... 			comm_buf[comm_ridx++] = chr; 
61E4:  MOVF   50,W
61E6:  INCF   50,F
61E8:  CLRF   03
61EA:  ADDLW  51
61EC:  MOVWF  FE9
61EE:  MOVLW  00
61F0:  ADDWFC 03,W
61F2:  MOVWF  FEA
61F4:  MOVFF  1AD,FEF
.................... 			if (comm_ridx > 70) 
61F8:  MOVF   50,W
61FA:  SUBLW  46
61FC:  BC    6206
.................... 			{ 
.................... 				comm_state = 0; 
61FE:  CLRF   4F
.................... 				break; 
6200:  MOVLB  0
6202:  BRA    62EE
6204:  MOVLB  1
.................... 			} 
.................... 			if (chr == 13) 
6206:  MOVF   xAD,W
6208:  SUBLW  0D
620A:  BNZ   6276
620C:  MOVF   xAE,F
620E:  BNZ   6276
.................... 			{ 
.................... 				ret = process_dollar_commands(); 
6210:  MOVLB  0
6212:  BRA    5A5E
6214:  MOVLB  1
6216:  CLRF   xB0
6218:  MOVFF  01,1AF
.................... 				if (ret == 1) 
621C:  DECFSZ xAF,W
621E:  BRA    6224
6220:  MOVF   xB0,F
6222:  BNZ   6224
.................... 				{ 
.................... 					//            store_setup(); 
.................... 					//            update_all(); 
.................... 				} 
.................... 				if (ret != 255) 
6224:  INCFSZ xAF,W
6226:  BRA    622C
6228:  MOVF   xB0,F
622A:  BZ    626C
.................... 				COM1_send_str("\r\nOK\r\n*"); 
622C:  MOVLW  01
622E:  MOVWF  FEA
6230:  MOVLW  B1
6232:  MOVWF  FE9
6234:  MOVFF  FF2,1C4
6238:  BCF    FF2.7
623A:  MOVLW  08
623C:  MOVWF  01
623E:  CLRF   FF7
6240:  MOVLW  00
6242:  MOVLB  0
6244:  CALL   0A9C
6248:  TBLRD*-
624A:  TBLRD*+
624C:  MOVFF  FF5,FEE
6250:  DECFSZ 01,F
6252:  BRA    624A
6254:  MOVLB  1
6256:  BTFSC  xC4.7
6258:  BSF    FF2.7
625A:  MOVLW  01
625C:  MOVLB  2
625E:  MOVWF  x55
6260:  MOVLW  B1
6262:  MOVWF  x54
6264:  MOVLB  0
6266:  CALL   20AE
626A:  MOVLB  1
.................... 				COM1_init(); 
626C:  MOVLB  0
626E:  CALL   0E42
.................... 			} 
6272:  BRA    62C0
6274:  MOVLB  1
.................... 			else if (chr == 27) 
6276:  MOVF   xAD,W
6278:  SUBLW  1B
627A:  BNZ   62C2
627C:  MOVF   xAE,F
627E:  BNZ   62C2
.................... 			{ 
.................... 				COM1_send_str("\r\n\nBREAK\r\n"); 
6280:  MOVLW  01
6282:  MOVWF  FEA
6284:  MOVLW  B9
6286:  MOVWF  FE9
6288:  MOVFF  FF2,1C4
628C:  BCF    FF2.7
628E:  MOVLW  0B
6290:  MOVWF  01
6292:  CLRF   FF7
6294:  MOVLW  00
6296:  MOVLB  0
6298:  CALL   0ABE
629C:  TBLRD*-
629E:  TBLRD*+
62A0:  MOVFF  FF5,FEE
62A4:  DECFSZ 01,F
62A6:  BRA    629E
62A8:  MOVLB  1
62AA:  BTFSC  xC4.7
62AC:  BSF    FF2.7
62AE:  MOVLW  01
62B0:  MOVLB  2
62B2:  MOVWF  x55
62B4:  MOVLW  B9
62B6:  MOVWF  x54
62B8:  MOVLB  0
62BA:  CALL   20AE
.................... 				comm_state = 0; 
62BE:  CLRF   4F
62C0:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		 
.................... 		if (comm_state > COMM_WAIT_DLR) 
62C2:  MOVF   4F,W
62C4:  SUBLW  01
62C6:  BC    62EA
....................         if (TMR_100MS_COMM_TO) 
62C8:  BTFSS  28.1
62CA:  BRA    62EA
.................... 		{ 
.................... 			TMR_100MS_COMM_TO = 0; 
62CC:  BCF    28.1
.................... 			if (++comm_timeout > 10000) // time out after 10 seconds from last char 
62CE:  MOVLB  0
62D0:  INCF   xA1,F
62D2:  BTFSC  FD8.2
62D4:  INCF   xA2,F
62D6:  MOVF   xA2,W
62D8:  SUBLW  26
62DA:  BC    62E8
62DC:  XORLW  FF
62DE:  BNZ   62E6
62E0:  MOVF   xA1,W
62E2:  SUBLW  10
62E4:  BC    62E8
....................             comm_state = 0; 
62E6:  CLRF   4F
62E8:  MOVLB  1
.................... 		} 
.................... 		break; 
62EA:  MOVLB  0
62EC:  BRA    62EE
.................... 		case COMM_DELAY: 
.................... 		break; 
.................... 	} 
62EE:  GOTO   6358 (RETURN)
.................... } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
.................... { 
.................... 	UINT chr; 
.................... 	 
.................... 	if (OERR) 
*
631E:  BTFSS  FAB.1
6320:  BRA    6332
....................     { 
.................... 		OERR = 0; 
6322:  BCF    FAB.1
.................... 		CREN = 0; 
6324:  BCF    FAB.4
.................... 		delay_us(5); 
6326:  MOVLW  06
6328:  MOVWF  00
632A:  DECFSZ 00,F
632C:  BRA    632A
632E:  NOP   
.................... 		CREN = 1; 
6330:  BSF    FAB.4
.................... 	} 
.................... 	if (FERR) 
6332:  BTFSS  FAB.2
6334:  BRA    6342
....................     { 
.................... 		FERR = 0; 
6336:  BCF    FAB.2
.................... 		chr = RCREG1; 
6338:  MOVLB  1
633A:  CLRF   xAC
633C:  MOVFF  FAE,1AB
6340:  MOVLB  0
.................... 	} 
.................... 	if (ttccp) 
6342:  MOVLB  1
6344:  MOVF   x36,F
6346:  BZ    6354
....................     ttccp_handler(); 
6348:  MOVLB  0
634A:  GOTO   4FC2
634E:  MOVLB  0
6350:  BRA    6358
6352:  MOVLB  1
.................... 	else 
....................     dollar_handler(); 
6354:  MOVLB  0
6356:  BRA    6188
6358:  GOTO   653E (RETURN)
.................... } 
....................  
....................  
....................  
.................... /* 
.................... #include <stdio.h> 
.................... #include <stdbool.h> 
.................... #include <stdint.h> 
.................... #include <string.h>  
.................... */ 
.................... //========== functions ========================================= 
.................... // // VERSION 3.3 US 30.03.2016 
.................... //========== functions ========================================= 
.................... typedef struct { 
....................   UINT analog; 
....................   UINT Pout; 
.................... } POWER_TRANS; 
....................  
.................... const POWER_TRANS Ptrans[] = { 
....................  
.................... //  dec    vmeas    Pout 
.................... {  1  ,  998  },//  ,1 
.................... {  2  ,  500  },//  ,2 
.................... {  3  ,  353  },//  ,3 
.................... {  4  ,  260  },//  ,4 
.................... {  5  ,  210  },//  ,5 
.................... {  6  ,  170  },//  ,6 
.................... {  7  ,  144  },//  ,7 
.................... {  8  ,  124  },//  ,8 
.................... {  9  ,  110  },//  ,9 
.................... {  10  , 99  },// ,10 
.................... {  11  ,  88  },//  ,11 
.................... {  12  ,  79  },//  ,12 
.................... {  13  ,  72  },//  ,13 
.................... {  14  ,  67  },//  ,14 
.................... {  15  ,  62  },//  ,15 
.................... {  16  ,  57  },//  ,16 
.................... {  17  ,  52  },//  ,17 
.................... {  18  ,  50  },//  ,18 
.................... {  19  ,  46  },//  ,19 
.................... {  20  ,  44  },//  ,20 
.................... }; 
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 FFWR 
.................... //============================================================================= 
.................... /*					//use the table setup.power_in yehuda 1520Q 
.................... typedef struct { 
....................   UINT analog1; 
....................   UINT Pout1; 
.................... } POWER_TRANS1; 
....................  
.................... const POWER_TRANS1 Ptrans1[] = { 
....................  
.................... //  dec    vmeas    Pout1 
.................... {  80  ,  20  },//  0.29V  ,0 
.................... {  102  ,  21  },//  0.33V  ,1 
.................... {  118  ,  22  },//  0.38V  ,2 
.................... {  127  ,  23  },//  0.41V  ,3 
.................... {  143  ,  24  },//  0.46V  ,4 
.................... {  167  ,  25  },//  0.54V  ,5 
.................... {  183  ,  26  },//  0.59V  ,6 
.................... {  208  ,  27  },//  0.67V  ,7 
.................... {  226  ,  28  },//  0.73V  ,8 
.................... {  257  ,  29  },//  0.83V  ,9 
.................... {  288  ,  30  },//  0.93V  ,10 
.................... {  322  ,  31  },//  1.04V  ,11 
.................... {  360  ,  32  },//  1.16V  ,12 
.................... {  400  ,  33  },//  1.29V  ,13 
.................... {  446  ,  34  },//  1.44V  ,14 
.................... {  505  ,  35  },//  1.63V  ,15 
.................... {  564  ,  36  },//  1.82V  ,16 
.................... {  645  ,  37  },//  2.08V  ,17 
.................... {  722  ,  38  },//  2.33V  ,18 
.................... {  818  ,  39  },//  2.64V  ,19 
.................... {  992  ,  40  },//  3.2V  ,20 
.................... {  1005,   41  }, //  3.2V    ,21 
.................... {   1023,   55  } 
.................... }; 
.................... */ 
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
16F0:  BCF    F8A.2
....................   delay_us(10); 
16F2:  MOVLW  0C
16F4:  MOVWF  00
16F6:  DECFSZ 00,F
16F8:  BRA    16F6
16FA:  BRA    16FC
16FC:  NOP   
....................   while (length--) 
16FE:  MOVLB  2
1700:  MOVF   x2D,W
1702:  DECF   x2D,F
1704:  XORLW  00
1706:  BZ    174C
....................     { 
....................     xbyte = *data++; 
1708:  MOVFF  22F,03
170C:  MOVF   x2E,W
170E:  INCF   x2E,F
1710:  BTFSC  FD8.2
1712:  INCF   x2F,F
1714:  MOVWF  FE9
1716:  MOVFF  03,FEA
171A:  MOVFF  FEF,230
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
171E:  CLRF   x31
1720:  MOVF   x31,W
1722:  SUBLW  07
1724:  BNC   174A
....................       { 
....................       if (xbyte & 0x80) 
1726:  BTFSS  x30.7
1728:  BRA    172E
....................         output_high(D2A_MOSI); 
172A:  BSF    F8C.4
172C:  BRA    1730
....................       else 
....................         output_low(D2A_MOSI); 
172E:  BCF    F8C.4
....................       delay_us(1); 
1730:  BRA    1732
1732:  BRA    1734
....................       output_high(D2A_SCLK); 
1734:  BSF    F8C.0
....................       delay_us(1); 
1736:  BRA    1738
1738:  BRA    173A
....................       output_low(D2A_SCLK); 
173A:  BCF    F8C.0
....................       delay_us(1); 
173C:  BRA    173E
173E:  BRA    1740
1740:  MOVF   x31,W
1742:  INCF   x31,F
1744:  BCF    FD8.0
1746:  RLCF   x30,F
1748:  BRA    1720
....................       } 
174A:  BRA    1700
....................     } 
....................   delay_us(10); 
174C:  MOVLW  0C
174E:  MOVWF  00
1750:  DECFSZ 00,F
1752:  BRA    1750
1754:  BRA    1756
1756:  NOP   
....................   output_high(CSN); 
1758:  BSF    F8A.2
175A:  MOVLB  0
175C:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
5952:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
5954:  MOVLB  1
5956:  CLRF   xFF
5958:  MOVF   xFF,W
595A:  SUBLW  07
595C:  BNC   5994
....................     { 
....................     if (addr & 0x80) 
595E:  BTFSS  xFB.7
5960:  BRA    5966
....................       output_high(D2A_MOSI); 
5962:  BSF    F8C.4
5964:  BRA    5968
....................     else 
....................       output_low(D2A_MOSI); 
5966:  BCF    F8C.4
....................     delay_us(5); 
5968:  MOVLW  06
596A:  MOVWF  00
596C:  DECFSZ 00,F
596E:  BRA    596C
5970:  NOP   
....................     output_high(D2A_SCLK); 
5972:  BSF    F8C.0
....................     delay_us(5); 
5974:  MOVLW  06
5976:  MOVWF  00
5978:  DECFSZ 00,F
597A:  BRA    5978
597C:  NOP   
....................     output_low(D2A_SCLK); 
597E:  BCF    F8C.0
....................     delay_us(5); 
5980:  MOVLW  06
5982:  MOVWF  00
5984:  DECFSZ 00,F
5986:  BRA    5984
5988:  NOP   
598A:  MOVF   xFF,W
598C:  INCF   xFF,F
598E:  BCF    FD8.0
5990:  RLCF   xFB,F
5992:  BRA    5958
....................     } 
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
5994:  CLRF   xFE
5996:  CLRF   xFF
5998:  MOVF   xFF,W
599A:  SUBLW  07
599C:  BNC   59E2
....................     { 
....................     xbyte <<= 1; 
599E:  BCF    FD8.0
59A0:  RLCF   xFE,F
....................     delay_us(5); 
59A2:  MOVLW  06
59A4:  MOVWF  00
59A6:  DECFSZ 00,F
59A8:  BRA    59A6
59AA:  NOP   
....................     output_high(D2A_SCLK); 
59AC:  BSF    F8C.0
....................     delay_us(3); 
59AE:  MOVLW  03
59B0:  MOVWF  00
59B2:  DECFSZ 00,F
59B4:  BRA    59B2
59B6:  BRA    59B8
....................     if (input(D2A_MISO)) 
59B8:  BTFSS  F83.1
59BA:  BRA    59C8
....................       { 
....................       xbyte |= 1; 
59BC:  BSF    xFE.0
....................       delay_us(2); 
59BE:  MOVLW  02
59C0:  MOVWF  00
59C2:  DECFSZ 00,F
59C4:  BRA    59C2
59C6:  NOP   
....................       } 
....................     delay_us(2); 
59C8:  MOVLW  02
59CA:  MOVWF  00
59CC:  DECFSZ 00,F
59CE:  BRA    59CC
59D0:  NOP   
....................     output_low(D2A_SCLK); 
59D2:  BCF    F8C.0
....................     delay_us(3); 
59D4:  MOVLW  03
59D6:  MOVWF  00
59D8:  DECFSZ 00,F
59DA:  BRA    59D8
59DC:  BRA    59DE
59DE:  INCF   xFF,F
59E0:  BRA    5998
....................     } 
....................   *data = xbyte; 
59E2:  MOVFF  1FC,FE9
59E6:  MOVFF  1FD,FEA
59EA:  MOVFF  1FE,FEF
....................   output_high(CSN); 
59EE:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
59F0:  BCF    F8C.0
....................   return xbyte; 
59F2:  MOVFF  1FE,01
59F6:  MOVLB  0
59F8:  GOTO   5E40 (RETURN)
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
1AC0:  MOVFF  234,240
1AC4:  MOVFF  233,23F
1AC8:  MOVFF  232,23E
1ACC:  MOVFF  231,23D
1AD0:  BRA    17F0
1AD2:  MOVFF  03,238
1AD6:  MOVFF  02,237
1ADA:  MOVFF  01,236
1ADE:  MOVFF  00,235
....................   temp = bitspersec / 240000000.0; 
1AE2:  MOVFF  238,240
1AE6:  MOVFF  237,23F
1AEA:  MOVFF  236,23E
1AEE:  MOVFF  235,23D
1AF2:  MOVLW  C0
1AF4:  MOVLB  2
1AF6:  MOVWF  x44
1AF8:  MOVLW  E1
1AFA:  MOVWF  x43
1AFC:  MOVLW  64
1AFE:  MOVWF  x42
1B00:  MOVLW  9A
1B02:  MOVWF  x41
1B04:  MOVLB  0
1B06:  RCALL  182A
1B08:  MOVFF  03,23C
1B0C:  MOVFF  02,23B
1B10:  MOVFF  01,23A
1B14:  MOVFF  00,239
....................   temp *= 65536.0; 
1B18:  MOVFF  23C,240
1B1C:  MOVFF  23B,23F
1B20:  MOVFF  23A,23E
1B24:  MOVFF  239,23D
1B28:  MOVLB  2
1B2A:  CLRF   x44
1B2C:  CLRF   x43
1B2E:  CLRF   x42
1B30:  MOVLW  8F
1B32:  MOVWF  x41
1B34:  MOVLB  0
1B36:  RCALL  1988
1B38:  MOVFF  03,23C
1B3C:  MOVFF  02,23B
1B40:  MOVFF  01,23A
1B44:  MOVFF  00,239
....................   temp *= 65536.0; 
1B48:  MOVFF  23C,240
1B4C:  MOVFF  23B,23F
1B50:  MOVFF  23A,23E
1B54:  MOVFF  239,23D
1B58:  MOVLB  2
1B5A:  CLRF   x44
1B5C:  CLRF   x43
1B5E:  CLRF   x42
1B60:  MOVLW  8F
1B62:  MOVWF  x41
1B64:  MOVLB  0
1B66:  RCALL  1988
1B68:  MOVFF  03,23C
1B6C:  MOVFF  02,23B
1B70:  MOVFF  01,23A
1B74:  MOVFF  00,239
....................   return (ULONG)temp - 1; 
1B78:  MOVFF  23C,240
1B7C:  MOVFF  23B,23F
1B80:  MOVFF  23A,23E
1B84:  MOVFF  239,23D
1B88:  RCALL  1A7E
1B8A:  MOVFF  03,240
1B8E:  MOVFF  02,23F
1B92:  MOVFF  01,23E
1B96:  MOVFF  00,23D
1B9A:  MOVLW  01
1B9C:  MOVLB  2
1B9E:  SUBWF  00,W
1BA0:  MOVWF  00
1BA2:  MOVLW  00
1BA4:  SUBWFB 01,W
1BA6:  MOVWF  01
1BA8:  MOVLW  00
1BAA:  SUBWFB 02,W
1BAC:  MOVWF  02
1BAE:  MOVLW  00
1BB0:  SUBWFB 03,W
1BB2:  MOVWF  03
1BB4:  MOVLB  0
1BB6:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
5194:  MOVFF  1C7,1C9
....................   buf[1] = value; 
5198:  MOVFF  1C8,1CA
....................   send_FPGA_command(2, buf); 
519C:  MOVLW  02
519E:  MOVLB  2
51A0:  MOVWF  x2D
51A2:  MOVLW  01
51A4:  MOVWF  x2F
51A6:  MOVLW  C9
51A8:  MOVWF  x2E
51AA:  MOVLB  0
51AC:  CALL   16F0
51B0:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
58C2:  MOVLB  2
58C4:  CLRF   x0D
58C6:  CLRF   x0C
58C8:  MOVFF  1FE,20B
58CC:  MOVFF  1FD,20A
58D0:  MOVFF  20D,236
58D4:  MOVFF  20C,235
58D8:  MOVFF  1FE,234
58DC:  MOVFF  1FD,233
58E0:  CLRF   x3A
58E2:  CLRF   x39
58E4:  MOVLW  27
58E6:  MOVWF  x38
58E8:  MOVLW  10
58EA:  MOVWF  x37
58EC:  MOVLB  0
58EE:  CALL   12D6
58F2:  MOVFF  03,20D
58F6:  MOVFF  02,20C
58FA:  MOVFF  01,20B
58FE:  MOVFF  00,20A
5902:  MOVFF  03,234
5906:  MOVFF  02,233
590A:  MOVFF  01,232
590E:  MOVFF  00,231
5912:  CALL   1AC0
5916:  MOVFF  03,209
591A:  MOVFF  02,208
591E:  MOVFF  01,207
5922:  MOVFF  00,206
....................   buf[0] = 2; 
5926:  MOVLW  02
5928:  MOVLB  1
592A:  MOVWF  xFF
....................   buf[1] = make8(bitf, 0); 
592C:  MOVLB  2
592E:  MOVFF  206,200
....................   buf[2] = make8(bitf, 1); 
5932:  MOVFF  207,201
....................   buf[3] = make8(bitf, 2); 
5936:  MOVFF  208,202
....................   buf[4] = make8(bitf, 3); 
593A:  MOVFF  209,203
....................   send_FPGA_command(5, buf); 
593E:  MOVLW  05
5940:  MOVWF  x2D
5942:  MOVLW  01
5944:  MOVWF  x2F
5946:  SETF   x2E
5948:  MOVLB  0
594A:  CALL   16F0
594E:  GOTO   5DF8 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   buf[0] = 0; 
*
175E:  MOVLB  2
1760:  CLRF   x21
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
1762:  MOVLB  0
1764:  SWAPF  xA8,W
1766:  MOVWF  00
1768:  MOVLW  F0
176A:  ANDWF  00,F
176C:  MOVF   00,W
176E:  IORWF  xA7,W
1770:  MOVLB  2
1772:  MOVWF  x29
1774:  MOVLB  0
1776:  SWAPF  xA9,W
1778:  MOVWF  00
177A:  RLCF   00,F
177C:  MOVLW  E0
177E:  ANDWF  00,F
1780:  MOVF   00,W
1782:  MOVLB  2
1784:  IORWF  x29,F
1786:  MOVLB  0
1788:  SWAPF  xAD,W
178A:  MOVWF  00
178C:  RLCF   00,F
178E:  RLCF   00,F
1790:  MOVLW  C0
1792:  ANDWF  00,F
1794:  MOVF   00,W
1796:  MOVLB  2
1798:  IORWF  x29,F
179A:  CLRF   00
179C:  MOVLB  0
179E:  BTFSC  xAF.0
17A0:  BSF    00.7
17A2:  MOVF   00,W
17A4:  MOVLB  2
17A6:  IORWF  x29,W
17A8:  MOVWF  x22
....................   send_FPGA_command(2, buf); 
17AA:  MOVLW  02
17AC:  MOVWF  x2D
17AE:  MOVWF  x2F
17B0:  MOVLW  21
17B2:  MOVWF  x2E
17B4:  MOVLB  0
17B6:  RCALL  16F0
17B8:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   buf[0] = 6; 
17BA:  MOVLW  06
17BC:  MOVLB  2
17BE:  MOVWF  x21
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
17C0:  BCF    FD8.0
17C2:  MOVLB  0
17C4:  RLCF   xAB,W
17C6:  IORWF  xAA,W
17C8:  MOVLB  2
17CA:  MOVWF  x29
17CC:  MOVLB  0
17CE:  RLCF   xAC,W
17D0:  MOVWF  00
17D2:  RLCF   00,F
17D4:  MOVLW  FC
17D6:  ANDWF  00,F
17D8:  MOVF   00,W
17DA:  MOVLB  2
17DC:  IORWF  x29,W
17DE:  MOVWF  x22
....................   send_FPGA_command(2, buf); 
17E0:  MOVLW  02
17E2:  MOVWF  x2D
17E4:  MOVWF  x2F
17E6:  MOVLW  21
17E8:  MOVWF  x2E
17EA:  MOVLB  0
17EC:  RCALL  16F0
17EE:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1BB8:  MOVLB  2
1BBA:  CLRF   x30
1BBC:  CLRF   x2F
1BBE:  MOVFF  A4,22E
1BC2:  MOVFF  A3,22D
1BC6:  MOVFF  230,236
1BCA:  MOVFF  22F,235
1BCE:  MOVFF  A4,234
1BD2:  MOVFF  A3,233
1BD6:  CLRF   x3A
1BD8:  CLRF   x39
1BDA:  MOVLW  27
1BDC:  MOVWF  x38
1BDE:  MOVLW  10
1BE0:  MOVWF  x37
1BE2:  MOVLB  0
1BE4:  CALL   12D6
1BE8:  MOVFF  03,230
1BEC:  MOVFF  02,22F
1BF0:  MOVFF  01,22E
1BF4:  MOVFF  00,22D
1BF8:  MOVFF  03,234
1BFC:  MOVFF  02,233
1C00:  MOVFF  01,232
1C04:  MOVFF  00,231
1C08:  RCALL  1AC0
1C0A:  MOVFF  03,22C
1C0E:  MOVFF  02,22B
1C12:  MOVFF  01,22A
1C16:  MOVFF  00,229
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
1C1A:  MOVLW  02
1C1C:  MOVLB  2
1C1E:  MOVWF  x21
1C20:  MOVFF  229,222
....................   send_FPGA_command(2, buf); delay_ms(10); 
1C24:  MOVLW  02
1C26:  MOVWF  x2D
1C28:  MOVWF  x2F
1C2A:  MOVLW  21
1C2C:  MOVWF  x2E
1C2E:  MOVLB  0
1C30:  RCALL  16F0
1C32:  MOVLW  0A
1C34:  MOVLB  2
1C36:  MOVWF  x2D
1C38:  MOVLB  0
1C3A:  CALL   0DF4
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
1C3E:  MOVLW  03
1C40:  MOVLB  2
1C42:  MOVWF  x21
1C44:  MOVFF  22A,222
....................   send_FPGA_command(2, buf); delay_ms(10); 
1C48:  MOVLW  02
1C4A:  MOVWF  x2D
1C4C:  MOVWF  x2F
1C4E:  MOVLW  21
1C50:  MOVWF  x2E
1C52:  MOVLB  0
1C54:  RCALL  16F0
1C56:  MOVLW  0A
1C58:  MOVLB  2
1C5A:  MOVWF  x2D
1C5C:  MOVLB  0
1C5E:  CALL   0DF4
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
1C62:  MOVLW  04
1C64:  MOVLB  2
1C66:  MOVWF  x21
1C68:  MOVFF  22B,222
....................   send_FPGA_command(2, buf); delay_ms(10); 
1C6C:  MOVLW  02
1C6E:  MOVWF  x2D
1C70:  MOVWF  x2F
1C72:  MOVLW  21
1C74:  MOVWF  x2E
1C76:  MOVLB  0
1C78:  RCALL  16F0
1C7A:  MOVLW  0A
1C7C:  MOVLB  2
1C7E:  MOVWF  x2D
1C80:  MOVLB  0
1C82:  CALL   0DF4
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1C86:  MOVLW  05
1C88:  MOVLB  2
1C8A:  MOVWF  x21
1C8C:  MOVFF  22C,222
....................   send_FPGA_command(2, buf); delay_ms(10); 
1C90:  MOVLW  02
1C92:  MOVWF  x2D
1C94:  MOVWF  x2F
1C96:  MOVLW  21
1C98:  MOVWF  x2E
1C9A:  MOVLB  0
1C9C:  RCALL  16F0
1C9E:  MOVLW  0A
1CA0:  MOVLB  2
1CA2:  MOVWF  x2D
1CA4:  MOVLB  0
1CA6:  CALL   0DF4
1CAA:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
29B0:  MOVLB  2
29B2:  MOVFF  21C,03
29B6:  MOVF   x1B,W
29B8:  BTFSC  FD8.2
29BA:  DECF   x1C,F
29BC:  DECF   x1B,F
29BE:  IORWF  03,W
29C0:  BZ    2A1A
....................     write_eeprom(addr++, *data++); 
29C2:  MOVF   x18,W
29C4:  MOVWF  03
29C6:  MOVF   x17,W
29C8:  INCF   x17,F
29CA:  BTFSC  FD8.2
29CC:  INCF   x18,F
29CE:  MOVWF  x1D
29D0:  MOVFF  03,21E
29D4:  MOVF   x1A,W
29D6:  MOVWF  03
29D8:  MOVF   x19,W
29DA:  INCF   x19,F
29DC:  BTFSC  FD8.2
29DE:  INCF   x1A,F
29E0:  MOVWF  FE9
29E2:  MOVFF  03,FEA
29E6:  MOVFF  FEF,21F
29EA:  MOVF   FF2,W
29EC:  MOVWF  00
29EE:  BCF    FF2.7
29F0:  MOVFF  21D,FA9
29F4:  MOVFF  21F,FA8
29F8:  BCF    FA6.6
29FA:  BCF    FA6.7
29FC:  BSF    FA6.2
29FE:  MOVLB  F
2A00:  MOVLW  55
2A02:  MOVWF  FA7
2A04:  MOVLW  AA
2A06:  MOVWF  FA7
2A08:  BSF    FA6.1
2A0A:  BTFSC  FA6.1
2A0C:  BRA    2A0A
2A0E:  BCF    FA6.2
2A10:  MOVF   00,W
2A12:  IORWF  FF2,F
2A14:  MOVLB  0
2A16:  BRA    29B0
2A18:  MOVLB  2
2A1A:  MOVLB  0
2A1C:  GOTO   2A44 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
0EBE:  MOVLB  2
0EC0:  MOVFF  21C,03
0EC4:  MOVF   x1B,W
0EC6:  BTFSC  FD8.2
0EC8:  DECF   x1C,F
0ECA:  DECF   x1B,F
0ECC:  IORWF  03,W
0ECE:  BZ    0F0E
....................     *data++ = read_eeprom(addr++); 
0ED0:  MOVF   x1A,W
0ED2:  MOVWF  03
0ED4:  MOVF   x19,W
0ED6:  INCF   x19,F
0ED8:  BTFSC  FD8.2
0EDA:  INCF   x1A,F
0EDC:  MOVWF  FE9
0EDE:  MOVFF  03,FEA
0EE2:  MOVF   x18,W
0EE4:  MOVWF  03
0EE6:  MOVF   x17,W
0EE8:  INCF   x17,F
0EEA:  BTFSC  FD8.2
0EEC:  INCF   x18,F
0EEE:  MOVWF  x1F
0EF0:  MOVFF  03,220
0EF4:  MOVFF  FF2,221
0EF8:  BCF    FF2.7
0EFA:  MOVFF  21F,FA9
0EFE:  BCF    FA6.6
0F00:  BCF    FA6.7
0F02:  BSF    FA6.0
0F04:  MOVF   FA8,W
0F06:  BTFSC  x21.7
0F08:  BSF    FF2.7
0F0A:  MOVWF  FEF
0F0C:  BRA    0EC0
0F0E:  MOVLB  0
0F10:  GOTO   0F46 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
2A20:  MOVLB  1
2A22:  MOVF   x00,W
2A24:  SUBLW  9F
2A26:  BNZ   2A46
2A28:  MOVF   x01,W
2A2A:  SUBLW  0B
2A2C:  BNZ   2A46
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
2A2E:  MOVLB  2
2A30:  CLRF   x18
2A32:  CLRF   x17
2A34:  CLRF   x1A
2A36:  MOVLW  A3
2A38:  MOVWF  x19
2A3A:  CLRF   x1C
2A3C:  MOVLW  5D
2A3E:  MOVWF  x1B
2A40:  MOVLB  0
2A42:  BRA    29B0
2A44:  MOVLB  1
....................   allow_write = 0; 
2A46:  CLRF   x01
2A48:  CLRF   x00
2A4A:  MOVLB  0
2A4C:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
0F30:  MOVLB  2
0F32:  CLRF   x18
0F34:  CLRF   x17
0F36:  CLRF   x1A
0F38:  MOVLW  A3
0F3A:  MOVWF  x19
0F3C:  CLRF   x1C
0F3E:  MOVLW  5D
0F40:  MOVWF  x1B
0F42:  MOVLB  0
0F44:  BRA    0EBE
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
0F46:  INCFSZ xAA,W
0F48:  BRA    0F4C
0F4A:  BRA    0F50
0F4C:  INCFSZ xAB,W
0F4E:  BRA    0F60
....................     memset(&setup, 0, sizeof(setup)); 
0F50:  CLRF   FEA
0F52:  MOVLW  A3
0F54:  MOVWF  FE9
0F56:  CLRF   00
0F58:  CLRF   02
0F5A:  MOVLW  5D
0F5C:  MOVWF  01
0F5E:  BRA    0F14
0F60:  RETURN 0
....................   } 
....................  
.................... //-------------------------------------------------------------- 
.................... //============================================================================= 
.................... // VERSION 3.3 US 30.03.2016 
.................... //============================================================================= 
.................... UINT convert_power(UINT analog) 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
....................     { 
....................   if (analog >= Ptrans[idx].analog && analog < Ptrans[idx+1].analog) 
....................     return Ptrans[idx].Pout; 
....................   } 
....................   return 0; 
....................   } 
....................  
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 
.................... //============================================================================= 
.................... UINT convert_power1(UINT analog)// FFWR POWER 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
*
11B2:  MOVLB  2
11B4:  CLRF   x1E
11B6:  CLRF   x1D
11B8:  MOVF   x1E,F
11BA:  BTFSS  FD8.2
11BC:  BRA    12CC
11BE:  MOVF   x1D,W
11C0:  SUBLW  13
11C2:  BTFSS  FD8.0
11C4:  BRA    12CC
....................     { 
....................   //if (analog >= Ptrans1[idx].analog1 && analog < Ptrans1[idx+1].analog1) 
....................   if (analog >= setup.power_in[idx] && analog < setup.power_in[idx+1]) 
11C6:  BCF    FD8.0
11C8:  RLCF   x1D,W
11CA:  MOVWF  02
11CC:  RLCF   x1E,W
11CE:  MOVWF  03
11D0:  MOVF   02,W
11D2:  ADDLW  C2
11D4:  MOVWF  FE9
11D6:  MOVLW  00
11D8:  ADDWFC 03,W
11DA:  MOVWF  FEA
11DC:  MOVFF  FEC,03
11E0:  MOVF   FED,F
11E2:  MOVFF  FEF,01
11E6:  MOVF   03,W
11E8:  SUBWF  x1C,W
11EA:  BTFSS  FD8.0
11EC:  BRA    12C4
11EE:  BNZ   11F6
11F0:  MOVF   01,W
11F2:  SUBWF  x1B,W
11F4:  BNC   12C4
11F6:  MOVLW  01
11F8:  ADDWF  x1D,W
11FA:  MOVWF  x1F
11FC:  MOVLW  00
11FE:  ADDWFC x1E,W
1200:  MOVWF  x20
1202:  BCF    FD8.0
1204:  RLCF   x1F,W
1206:  MOVWF  02
1208:  RLCF   x20,W
120A:  MOVWF  03
120C:  MOVF   02,W
120E:  ADDLW  C2
1210:  MOVWF  FE9
1212:  MOVLW  00
1214:  ADDWFC 03,W
1216:  MOVWF  FEA
1218:  MOVFF  FEC,03
121C:  MOVF   FED,F
121E:  MOVFF  FEF,01
1222:  MOVF   x1C,W
1224:  SUBWF  03,W
1226:  BNC   12C4
1228:  BNZ   1230
122A:  MOVF   01,W
122C:  SUBWF  x1B,W
122E:  BC    12C4
....................   { 
.................... 	if((analog - setup.power_in[idx]) >= (setup.power_in[idx+1] - analog)) 
1230:  BCF    FD8.0
1232:  RLCF   x1D,W
1234:  MOVWF  02
1236:  RLCF   x1E,W
1238:  MOVWF  03
123A:  MOVF   02,W
123C:  ADDLW  C2
123E:  MOVWF  FE9
1240:  MOVLW  00
1242:  ADDWFC 03,W
1244:  MOVWF  FEA
1246:  MOVFF  FEC,03
124A:  MOVF   FED,F
124C:  MOVF   FEF,W
124E:  SUBWF  x1B,W
1250:  MOVWF  x1F
1252:  MOVF   03,W
1254:  SUBWFB x1C,W
1256:  MOVWF  x20
1258:  MOVLW  01
125A:  ADDWF  x1D,W
125C:  MOVWF  x21
125E:  MOVLW  00
1260:  ADDWFC x1E,W
1262:  MOVWF  x22
1264:  BCF    FD8.0
1266:  RLCF   x21,W
1268:  MOVWF  02
126A:  RLCF   x22,W
126C:  MOVWF  03
126E:  MOVF   02,W
1270:  ADDLW  C2
1272:  MOVWF  FE9
1274:  MOVLW  00
1276:  ADDWFC 03,W
1278:  MOVWF  FEA
127A:  MOVFF  FEC,222
127E:  MOVF   FED,F
1280:  MOVFF  FEF,221
1284:  MOVF   x1B,W
1286:  SUBWF  x21,W
1288:  MOVWF  00
128A:  MOVF   x1C,W
128C:  SUBWFB x22,W
128E:  MOVWF  03
1290:  MOVFF  00,01
1294:  MOVF   03,W
1296:  SUBWF  x20,W
1298:  BNC   12B4
129A:  BNZ   12A2
129C:  MOVF   01,W
129E:  SUBWF  x1F,W
12A0:  BNC   12B4
.................... 		return idx + 21; 
12A2:  MOVLW  15
12A4:  ADDWF  x1D,W
12A6:  MOVWF  01
12A8:  MOVLW  00
12AA:  ADDWFC x1E,W
12AC:  MOVWF  03
12AE:  MOVWF  02
12B0:  BRA    12D2
12B2:  BRA    12C4
.................... 	else 
.................... 		return idx + 20; 
12B4:  MOVLW  14
12B6:  ADDWF  x1D,W
12B8:  MOVWF  01
12BA:  MOVLW  00
12BC:  ADDWFC x1E,W
12BE:  MOVWF  03
12C0:  MOVWF  02
12C2:  BRA    12D2
....................   } 
12C4:  INCF   x1D,F
12C6:  BTFSC  FD8.2
12C8:  INCF   x1E,F
12CA:  BRA    11B8
....................     //return Ptrans1[idx].Pout1; 
....................   } 
....................   return 0; 
12CC:  MOVLW  00
12CE:  MOVWF  01
12D0:  MOVWF  02
12D2:  MOVLB  0
12D4:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... // this functions sets the POWER_EN discrete high / low 
.................... // depanding on the state of 1 discrete (STANDBY) and 2 variables 
.................... // (setup.cot & setup.pwr). 
.................... // the function also calls 'update_all' when a transition from  
.................... // low to high occurs. 
.................... // the truth table for setting the discrete is: 
.................... //updated for 1520Q 
.................... // SB cot pwr Output 
.................... // 0   0   0    L 
.................... // 0   0   1    H 
.................... // 0   1   0    H 
.................... // 0   1   1    L 
.................... // 1   0   0    L 
.................... // 1   0   1    H 
.................... // 1   1   0    L 
.................... // 1   1   1    H 
....................  
.................... // the reduction of this function is:  
.................... // not(sb^cot^pwr) or 
.................... // sb ^ (cot == pwr) (used below) 
.................... //============================================================================= 
.................... void set_power_en()  
*
1D12:  MOVF   xF3,F
1D14:  BNZ   1D22
1D16:  MOVF   xF4,F
1D18:  BNZ   1D22
1D1A:  DECFSZ xA5,W
1D1C:  BRA    1D22
1D1E:  MOVF   xA6,F
1D20:  BZ    1D4E
1D22:  BTFSC  F83.7
1D24:  BRA    1D36
1D26:  DECFSZ xF3,W
1D28:  BRA    1D36
1D2A:  MOVF   xF4,F
1D2C:  BNZ   1D36
1D2E:  MOVF   xA5,F
1D30:  BNZ   1D36
1D32:  MOVF   xA6,F
1D34:  BZ    1D4E
1D36:  BTFSS  F83.7
1D38:  BRA    1D4A
1D3A:  DECFSZ xF3,W
1D3C:  BRA    1D4A
1D3E:  MOVF   xF4,F
1D40:  BNZ   1D4A
1D42:  DECFSZ xA5,W
1D44:  BRA    1D4A
1D46:  MOVF   xA6,F
1D48:  BZ    1D4E
1D4A:  MOVLW  00
1D4C:  BRA    1D50
1D4E:  MOVLW  01
1D50:  MOVLB  2
1D52:  CLRF   x1C
1D54:  MOVWF  x1B
.................... { 
....................     static UINT last_val = 0; // saving the last state of the discrete 
....................     //UINT dval = input(STANDBY) ^ (setup.cot != setup.pwr);			//yehuda change for rb0 rf1 output 
.................... 	UINT dval = (((setup.cot == 0) && (setup.pwr == 1)) || ((!input(STANDBY)) && (setup.cot == 1) && (setup.pwr == 0)) || ((input(STANDBY)) && (setup.cot == 1) && (setup.pwr == 1)));//                  input(STANDBY) ^ (setup.cot != setup.pwr);			//yehuda change for rb0 rf1 output 
....................  
....................     // set the discrete 
....................     if(dval)  
1D56:  MOVF   x1B,W
1D58:  IORWF  x1C,W
1D5A:  BZ    1D60
....................     { 
....................         output_high(POWER_EN); 
1D5C:  BSF    F8C.6
....................     } 
1D5E:  BRA    1D7E
....................     else 
....................     { 
....................         output_low(POWER_EN);       //yehuda shut down the fpga 
1D60:  BCF    F8C.6
....................         if(setup.cot == 1)  
1D62:  MOVLB  0
1D64:  DECFSZ xF3,W
1D66:  BRA    1D7C
1D68:  MOVF   xF4,F
1D6A:  BNZ   1D7C
....................         { 
....................             // this was a special case in before the refactoring 
....................             // it is not known why the call is only when cot == 1 
....................             set_AD5314(DAC_POS_VOLT, 0);     
1D6C:  MOVLW  02
1D6E:  MOVLB  2
1D70:  MOVWF  x1D
1D72:  CLRF   x1F
1D74:  CLRF   x1E
1D76:  MOVLB  0
1D78:  CALL   0F62
1D7C:  MOVLB  2
....................         } 
....................     } 
....................  
....................     // call update all on low to high transition 
....................     if(last_val == 0 && dval == 1)  
1D7E:  MOVLB  1
1D80:  MOVF   x98,F
1D82:  BNZ   1DBA
1D84:  MOVF   x99,F
1D86:  BNZ   1DBA
1D88:  MOVLB  2
1D8A:  DECFSZ x1B,W
1D8C:  BRA    1D90
1D8E:  BRA    1D94
1D90:  MOVLB  1
1D92:  BRA    1DBA
1D94:  MOVF   x1C,F
1D96:  BTFSC  FD8.2
1D98:  BRA    1D9E
1D9A:  MOVLB  1
1D9C:  BRA    1DBA
....................     { 
....................         delay_ms(50);		 
1D9E:  MOVLW  32
1DA0:  MOVWF  x2D
1DA2:  MOVLB  0
1DA4:  CALL   0DF4
....................         update_all();    ////tamir 3/7/18  
1DA8:  RCALL  1CAC
.................... 		delay_ms(1); 
1DAA:  MOVLW  01
1DAC:  MOVLB  2
1DAE:  MOVWF  x2D
1DB0:  MOVLB  0
1DB2:  CALL   0DF4
.................... 		update_all(); 
1DB6:  RCALL  1CAC
1DB8:  MOVLB  1
....................     } 
....................     last_val = dval; 
1DBA:  MOVFF  21C,199
1DBE:  MOVFF  21B,198
....................     gl_current_power_en_value = dval; 
1DC2:  MOVFF  21C,109
1DC6:  MOVFF  21B,108
1DCA:  MOVLB  0
1DCC:  GOTO   1F98 (RETURN)
.................... } 
....................  
.................... //============================================================================= 
.................... // this function returns the requested power level (SV / VL) based on  
.................... // 3 parameters, rc, rp and the discrete HILOW 
.................... // in high power mode (rc=1), if the discrete & rp are equal the function should 
.................... // return SV (power_level) if not, it should return VL (low_power_level). 
.................... // in low power mode (rc=0), if the discrete & rp are equal the function should 
.................... // return VL (low_power_level) if not, it should return SV (power_level). 
.................... //============================================================================= 
.................... UINT get_requested_power_level() { 
....................     UINT levels[2]; 
....................     int l; 
....................     levels[0] = power_level; 
1DD0:  MOVFF  1A,21C
1DD4:  MOVFF  19,21B
....................     levels[1] = low_power_level; 
1DD8:  MOVFF  18,21E
1DDC:  MOVFF  17,21D
....................  
....................     l = (setup.rc & 0x1) ^ (input(HILO) == setup.rp); 
1DE0:  MOVF   xF5,W
1DE2:  ANDLW  01
1DE4:  MOVLB  2
1DE6:  MOVWF  x20
1DE8:  CLRF   x21
1DEA:  MOVLW  00
1DEC:  BTFSC  F83.2
1DEE:  MOVLW  01
1DF0:  MOVLB  0
1DF2:  SUBWF  xF7,W
1DF4:  BNZ   1DFA
1DF6:  MOVF   xF8,F
1DF8:  BZ    1DFE
1DFA:  MOVLW  00
1DFC:  BRA    1E00
1DFE:  MOVLW  01
1E00:  MOVLB  2
1E02:  XORWF  x20,W
1E04:  MOVWF  x1F
....................      
....................     gl_current_power_level = levels[l]; 
1E06:  BCF    FD8.0
1E08:  RLCF   x1F,W
1E0A:  CLRF   03
1E0C:  ADDLW  1B
1E0E:  MOVWF  FE9
1E10:  MOVLW  02
1E12:  ADDWFC 03,W
1E14:  MOVWF  FEA
1E16:  MOVFF  FEC,107
1E1A:  MOVF   FED,F
1E1C:  MOVFF  FEF,106
....................     return levels[l]; 
1E20:  BCF    FD8.0
1E22:  RLCF   x1F,W
1E24:  CLRF   03
1E26:  ADDLW  1B
1E28:  MOVWF  FE9
1E2A:  MOVLW  02
1E2C:  ADDWFC 03,W
1E2E:  MOVWF  FEA
1E30:  MOVFF  FEF,01
1E34:  INCF   FE9,F
1E36:  MOVF   FEF,W
1E38:  DECF   FE9,F
1E3A:  MOVWF  02
1E3C:  MOVLB  0
1E3E:  GOTO   1F9A (RETURN)
.................... } 
....................  
.................... //============================================================================= 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
1E42:  INCFSZ 21,W
1E44:  BRA    1E4C
1E46:  INCFSZ 22,W
1E48:  BRA    1E4C
1E4A:  BRA    1EA4
....................     { 
....................     if (TMR_100MS_POWER) 
1E4C:  BTFSS  28.3
1E4E:  BRA    1EA2
....................       { 
....................       TMR_100MS_POWER = 0; 
1E50:  BCF    28.3
....................       set_AD5314(DAC_POS_VOLT, manual_pos); 
1E52:  MOVLW  02
1E54:  MOVLB  2
1E56:  MOVWF  x1D
1E58:  MOVFF  22,21F
1E5C:  MOVFF  21,21E
1E60:  MOVLB  0
1E62:  CALL   0F62
....................       set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
1E66:  MOVLW  14
1E68:  MOVWF  01
1E6A:  MOVF   FC2,W
1E6C:  ANDLW  83
1E6E:  IORWF  01,W
1E70:  MOVWF  FC2
....................       delay_us(20); 
1E72:  MOVLW  1A
1E74:  MOVWF  00
1E76:  DECFSZ 00,F
1E78:  BRA    1E76
1E7A:  NOP   
....................       power = read_adc(); 
1E7C:  BSF    FC2.1
1E7E:  BTFSC  FC2.1
1E80:  BRA    1E7E
1E82:  MOVFF  FC4,218
1E86:  MOVLB  2
1E88:  MOVFF  FC3,217
....................       current_power = convert_power1(power); 
1E8C:  MOVFF  218,21C
1E90:  MOVFF  217,21B
1E94:  MOVLB  0
1E96:  CALL   11B2
1E9A:  MOVFF  02,105
1E9E:  MOVFF  01,104
....................       } 
....................  
....................  
....................     return; 
1EA2:  BRA    1FFA
....................     } 
....................      
....................   if (setup.frequency < FREQ_LOW_THRESH){ 
1EA4:  MOVF   xB2,W
1EA6:  SUBLW  58
1EA8:  BNC   1EE6
1EAA:  BNZ   1EB2
1EAC:  MOVF   xB1,W
1EAE:  SUBLW  29
1EB0:  BNC   1EE6
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1EB2:  MOVLW  06
1EB4:  MOVLB  2
1EB6:  MOVWF  x1D
1EB8:  MOVFF  B7,21F
1EBC:  MOVFF  B6,21E
1EC0:  MOVLB  0
1EC2:  CALL   0F62
.................... 	delay_us(20); 
1EC6:  MOVLW  1A
1EC8:  MOVWF  00
1ECA:  DECFSZ 00,F
1ECC:  BRA    1ECA
1ECE:  NOP   
.................... 	set_AD5314(DAC_CONT_VOLT, setup.cont_voltage[0]); 
1ED0:  MOVLW  0A
1ED2:  MOVLB  2
1ED4:  MOVWF  x1D
1ED6:  MOVFF  BD,21F
1EDA:  MOVFF  BC,21E
1EDE:  MOVLB  0
1EE0:  CALL   0F62
.................... 	} 
1EE4:  BRA    1F5A
....................   else if (setup.frequency < FREQ_HIGH_THRESH){ 
1EE6:  MOVF   xB2,W
1EE8:  SUBLW  5A
1EEA:  BNC   1F28
1EEC:  BNZ   1EF4
1EEE:  MOVF   xB1,W
1EF0:  SUBLW  F9
1EF2:  BNC   1F28
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1EF4:  MOVLW  06
1EF6:  MOVLB  2
1EF8:  MOVWF  x1D
1EFA:  MOVFF  B9,21F
1EFE:  MOVFF  B8,21E
1F02:  MOVLB  0
1F04:  CALL   0F62
.................... 	delay_us(20); 
1F08:  MOVLW  1A
1F0A:  MOVWF  00
1F0C:  DECFSZ 00,F
1F0E:  BRA    1F0C
1F10:  NOP   
.................... 	set_AD5314(DAC_CONT_VOLT, setup.cont_voltage[1]); 
1F12:  MOVLW  0A
1F14:  MOVLB  2
1F16:  MOVWF  x1D
1F18:  MOVFF  BF,21F
1F1C:  MOVFF  BE,21E
1F20:  MOVLB  0
1F22:  CALL   0F62
.................... 	} 
1F26:  BRA    1F5A
....................   else{ 
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[2]); 
1F28:  MOVLW  06
1F2A:  MOVLB  2
1F2C:  MOVWF  x1D
1F2E:  MOVFF  BB,21F
1F32:  MOVFF  BA,21E
1F36:  MOVLB  0
1F38:  CALL   0F62
.................... 	delay_us(20); 
1F3C:  MOVLW  1A
1F3E:  MOVWF  00
1F40:  DECFSZ 00,F
1F42:  BRA    1F40
1F44:  NOP   
.................... 	set_AD5314(DAC_CONT_VOLT, setup.cont_voltage[2]); 
1F46:  MOVLW  0A
1F48:  MOVLB  2
1F4A:  MOVWF  x1D
1F4C:  MOVFF  C1,21F
1F50:  MOVFF  C0,21E
1F54:  MOVLB  0
1F56:  CALL   0F62
.................... 	} 
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
1F5A:  MOVLW  14
1F5C:  MOVWF  01
1F5E:  MOVF   FC2,W
1F60:  ANDLW  83
1F62:  IORWF  01,W
1F64:  MOVWF  FC2
....................   delay_us(20); 
1F66:  MOVLW  1A
1F68:  MOVWF  00
1F6A:  DECFSZ 00,F
1F6C:  BRA    1F6A
1F6E:  NOP   
....................   power = read_adc(); 
1F70:  BSF    FC2.1
1F72:  BTFSC  FC2.1
1F74:  BRA    1F72
1F76:  MOVFF  FC4,218
1F7A:  MOVLB  2
1F7C:  MOVFF  FC3,217
....................   
....................  
....................   current_power = convert_power1(power); 
1F80:  MOVFF  218,21C
1F84:  MOVFF  217,21B
1F88:  MOVLB  0
1F8A:  CALL   11B2
1F8E:  MOVFF  02,105
1F92:  MOVFF  01,104
....................   set_power_en();      
1F96:  BRA    1D12
....................    
....................   level = get_requested_power_level(); 
1F98:  BRA    1DD0
1F9A:  MOVFF  02,21A
1F9E:  MOVFF  01,219
....................  
....................   //if (power > level + DEADBAND || power <= level - DEADBAND) 
....................   if (power != level)			//yehuda 1520Q change for $FB commands  
1FA2:  MOVLB  2
1FA4:  MOVF   x19,W
1FA6:  SUBWF  x17,W
1FA8:  BNZ   1FB0
1FAA:  MOVF   x1A,W
1FAC:  SUBWF  x18,W
1FAE:  BZ    1FFC
....................     { 
....................     if (power <= level) 
1FB0:  MOVF   x18,W
1FB2:  SUBWF  x1A,W
1FB4:  BNC   1FD6
1FB6:  BNZ   1FBE
1FB8:  MOVF   x17,W
1FBA:  SUBWF  x19,W
1FBC:  BNC   1FD6
....................       { 
....................       if (power_control <= 1010) 
1FBE:  MOVF   1C,W
1FC0:  SUBLW  03
1FC2:  BNC   1FD4
1FC4:  BNZ   1FCC
1FC6:  MOVF   1B,W
1FC8:  SUBLW  F2
1FCA:  BNC   1FD4
....................         power_control += DEADBAND / 2;		 
1FCC:  MOVLW  03
1FCE:  ADDWF  1B,F
1FD0:  MOVLW  00
1FD2:  ADDWFC 1C,F
....................       } 
1FD4:  BRA    1FE8
....................     else if (power_control >= 150)			 
1FD6:  MOVF   1C,F
1FD8:  BNZ   1FE0
1FDA:  MOVF   1B,W
1FDC:  SUBLW  95
1FDE:  BC    1FE8
....................       { 
....................       power_control -= DEADBAND / 2; 
1FE0:  MOVLW  03
1FE2:  SUBWF  1B,F
1FE4:  MOVLW  00
1FE6:  SUBWFB 1C,F
....................       } 
....................     set_AD5314(DAC_POS_VOLT, power_control); 
1FE8:  MOVLW  02
1FEA:  MOVWF  x1D
1FEC:  MOVFF  1C,21F
1FF0:  MOVFF  1B,21E
1FF4:  MOVLB  0
1FF6:  CALL   0F62
1FFA:  MOVLB  2
....................     }	 
1FFC:  MOVLB  0
1FFE:  RETURN 0
.................... } 
....................  
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0E1E:  CLRF   F89
....................   output_b(0); 
0E20:  CLRF   F8A
....................   output_c(0); 
0E22:  CLRF   F8B
....................   output_d(0); 
0E24:  CLRF   F8C
....................   output_e(0); 
0E26:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0E28:  MOVLW  E1
0E2A:  MOVWF  F92
....................   set_tris_b(0b11010001);     
0E2C:  MOVLW  D1
0E2E:  MOVWF  F93
....................   set_tris_c(0b11010001); 
0E30:  MOVWF  F94
....................   set_tris_d(0b10001110); 
0E32:  MOVLW  8E
0E34:  MOVWF  F95
....................   set_tris_e(0b11111011); 
0E36:  BSF    F96.0
0E38:  BSF    F96.1
0E3A:  BCF    F96.2
0E3C:  BSF    F96.3
0E3E:  GOTO   0E82 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0E58:  MOVLW  48
0E5A:  IORLW  05
0E5C:  MOVWF  FBA
0E5E:  MOVLW  63
0E60:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0E62:  CLRF   FB4
0E64:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0E66:  MOVLW  00
0E68:  IORLW  05
0E6A:  MOVLB  F
0E6C:  MOVWF  x51
0E6E:  MOVLW  63
0E70:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0E72:  CLRF   x4D
0E74:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
0E76:  MOVLW  00
0E78:  MOVWF  x4A
0E7A:  MOVLW  00
0E7C:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0E7E:  MOVLB  0
0E80:  BRA    0E1E
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6|sAN11); 
0E82:  MOVF   FC1,W
0E84:  ANDLW  F0
0E86:  MOVWF  FC1
0E88:  MOVLW  21
0E8A:  MOVLB  F
0E8C:  MOVWF  x38
0E8E:  MOVLW  03
0E90:  MOVWF  x3C
0E92:  MOVLW  10
0E94:  MOVWF  x39
0E96:  MOVLW  00
0E98:  MOVWF  x3A
0E9A:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
0E9C:  MOVF   FC0,W
0E9E:  ANDLW  C0
0EA0:  IORLW  25
0EA2:  MOVWF  FC0
0EA4:  BSF    FC0.7
0EA6:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
0EA8:  CLRF   F77
0EAA:  MOVLW  04
0EAC:  MOVWF  F78
0EAE:  MOVWF  F79
....................  
....................   COM1_init(); 
0EB0:  MOVLB  0
0EB2:  RCALL  0E42
....................   enable_interrupts(INT_TIMER2); 
0EB4:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
0EB6:  MOVLW  C0
0EB8:  IORWF  FF2,F
0EBA:  GOTO   63E4 (RETURN)
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1CAC:  MOVFF  B2,21E
1CB0:  MOVFF  B1,21D
....................   delay_ms(5); 
1CB4:  MOVLW  05
1CB6:  MOVLB  2
1CB8:  MOVWF  x2D
1CBA:  MOVLB  0
1CBC:  CALL   0DF4
....................   PLL_compute_freq_parameters(freq); 
1CC0:  MOVFF  21E,222
1CC4:  MOVFF  21D,221
1CC8:  CALL   13C6
....................   delay_ms(5); 
1CCC:  MOVLW  05
1CCE:  MOVLB  2
1CD0:  MOVWF  x2D
1CD2:  MOVLB  0
1CD4:  CALL   0DF4
....................   PLL_update(); 
1CD8:  RCALL  169E
....................   delay_ms(5); 
1CDA:  MOVLW  05
1CDC:  MOVLB  2
1CDE:  MOVWF  x2D
1CE0:  MOVLB  0
1CE2:  CALL   0DF4
....................   FPGA_set_reg0(); 
1CE6:  RCALL  175E
....................   delay_ms(50); 
1CE8:  MOVLW  32
1CEA:  MOVLB  2
1CEC:  MOVWF  x2D
1CEE:  MOVLB  0
1CF0:  CALL   0DF4
....................   FPGA_set_reg6(); 
1CF4:  RCALL  17BA
....................   delay_ms(50); 
1CF6:  MOVLW  32
1CF8:  MOVLB  2
1CFA:  MOVWF  x2D
1CFC:  MOVLB  0
1CFE:  CALL   0DF4
....................   FPGA_set_bitrate(); 
1D02:  RCALL  1BB8
....................   bitr = setup.bitrate; 
1D04:  MOVFF  A4,220
1D08:  MOVFF  A3,21F
....................   power_control = 0; 
1D0C:  CLRF   1C
1D0E:  CLRF   1B
1D10:  RETURN 0
....................   } 
....................  
....................  
....................  
.................... void timer_tick()  
.................... { 
....................     if(timerTick_1ms == 1) { 
*
2176:  DECFSZ 2B,W
2178:  BRA    21A2
....................         timerTick_1ms = 0; 
217A:  CLRF   2B
.................... /*		//////////yehuda 1520Q cancel US,UT and BG 
....................         if (++TMR_SendStatus >= (setup.Block_per_second / 2) && StartStatusFlag == 1 && setup.UART_Status == 1&& (stay_on == 1 || stay_on == 0)) // VERSION 3.3 17.1.2016 
....................         { 
....................             TMR_SendStatus = 0; 
....................             SendStatusFlag = 1; 
....................             TX_Counter++; //VERSION 3.3 21.3.2016 count the number of times the status block is sent 
....................             if (!ttccp_login) 
....................             { 
....................               	COM1_send_block(BINARY_STATUS_LENTGH); 
....................             } 
....................         } 
.................... */ 
....................         if (++TMR_1mS_Cnt >= 10) 
217C:  INCF   24,F
217E:  MOVF   24,W
2180:  SUBLW  09
2182:  BC    21A2
....................         { 
....................             TMR_1mS_Cnt = 0; 
2184:  CLRF   24
.................... //            ++TMR_SendStatus; //1mSec count for rhe status VERSION 3.3 20.2.2016,  //////////yehuda 1520Q cancel US,UT and BG 
....................             TMR_10mS_Count++; 
2186:  INCF   25,F
....................             TMR_10mS_Flags = 0xFF; 
2188:  SETF   26
....................             if (++TMR_10mS_Cnt >= 10) 
218A:  INCF   27,F
218C:  MOVF   27,W
218E:  SUBLW  09
2190:  BC    21A2
....................             { 
....................                 TMR_10mS_Cnt = 0; 
2192:  CLRF   27
....................                 TMR_100mS_Flags = 0xFF; 
2194:  SETF   28
....................                 if (++TMR_100mS_Cnt >= 10) 
2196:  INCF   29,F
2198:  MOVF   29,W
219A:  SUBLW  09
219C:  BC    21A2
....................                 { 
....................                     TMR_100mS_Cnt = 0; 
219E:  CLRF   29
....................                     TMR_1sec_Flags = 0xFF; 
21A0:  SETF   2A
.................... /*												//////////yehuda 1520Q cancel US,UT and BG 
....................                     if (++TMR_StartStatus >= setup.UART_Time) // VERSION 3.3 17.1.2016 
....................            			{ 
....................            			    TMR_StartStatus = 0; 
....................             			StartStatusFlag = 1; 
....................             		} 
.................... */ 
....................                 } 
....................             } 
....................         } 
....................     } 
21A2:  GOTO   6530 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... /* 
....................  
.................... //allows the main program to run without a bootloader 
.................... static void fix_boot() { 
....................   bool should_write = false; 
....................  
....................   uint8_t start_bytes[getenv("FLASH_ERASE_SIZE")]; 
....................   read_program_memory(0, start_bytes, getenv("FLASH_ERASE_SIZE")); 
....................  
....................   uint8_t clear_flash[] = { 0xFF, 0xFF, 0xFF, 0xFF }; 
....................   uint8_t jump_to_0x2700[] = { 0x80, 0xEF, 0x13, 0xF0 };  //first line 
....................  
....................   if (memcmp(start_bytes, clear_flash, sizeof(clear_flash)) == 0) { 
....................     should_write = true; 
....................     //there's nothing at the reset vector let's put a jump to main() there. 
....................     //this happens when running directly without a bootloader. 
....................     //the debugger somehow knows to jump to the real main(), but after a reset it no longer works. 
....................     memcpy(start_bytes, jump_to_0x2700, sizeof(jump_to_0x2700)); 
....................  
....................   } 
....................  
....................   uint8_t jump_to_0x2008[] = { 0x04, 0xEF, 0x10, 0xF0 }; 
....................  
....................   //check if the interrupt handler contains the correct jump, if not, overwrite it 
....................   if (memcmp(start_bytes + 0x0008, jump_to_0x2008, sizeof(jump_to_0x2008)) != 0) { 
....................     should_write = true; 
....................     memcpy(start_bytes + 0x0008, jump_to_0x2008, sizeof(jump_to_0x2008)); 
....................  
....................   } 
....................  
....................   if (should_write) 
....................     write_program_memory(0, start_bytes, getenv("FLASH_ERASE_SIZE")); 
....................  
.................... } 
....................  
.................... */ 
....................  
....................  
....................  
.................... //============================================================================= 
.................... //#ORG CALIBRATION_AREA_START, CALIBRATION_AREA_END 
.................... //#org MAIN_ADDRESS, MAIN_ADDRESS+0x800 
.................... void main(void) 
*
635C:  CLRF   FF8
635E:  BCF    FD0.7
6360:  BSF    07.7
6362:  MOVLW  70
6364:  MOVWF  FD3
6366:  BCF    F9B.6
6368:  BCF    F9B.7
636A:  BCF    FB8.3
636C:  MOVLW  19
636E:  MOVWF  FAF
6370:  MOVLW  A6
6372:  MOVWF  FAC
6374:  MOVLW  90
6376:  MOVWF  FAB
6378:  SETF   20
637A:  SETF   1F
637C:  SETF   22
637E:  SETF   21
6380:  CLRF   2B
6382:  MOVLB  1
6384:  CLRF   x01
6386:  CLRF   x00
6388:  CLRF   x07
638A:  CLRF   x06
638C:  CLRF   x09
638E:  CLRF   x08
6390:  MOVLW  01
6392:  MOVWF  x28
6394:  MOVWF  x36
6396:  MOVWF  x37
6398:  CLRF   x97
639A:  CLRF   x96
639C:  CLRF   x99
639E:  CLRF   x98
63A0:  MOVF   FC1,W
63A2:  ANDLW  F0
63A4:  MOVWF  FC1
63A6:  MOVLW  00
63A8:  MOVLB  F
63AA:  MOVWF  x38
63AC:  MOVWF  x3C
63AE:  MOVWF  x39
63B0:  MOVWF  x3A
63B2:  MOVWF  x3B
63B4:  MOVLB  1
63B6:  CLRF   x88
63B8:  CLRF   F77
63BA:  CLRF   F78
63BC:  CLRF   F79
63BE:  MOVLW  03
63C0:  MOVWF  x9B
63C2:  MOVLW  E8
63C4:  MOVWF  x9A
....................   { 
....................   int16 vouta = 1000; 
.................... output_high(POWER_EN); 
63C6:  BSF    F8C.6
.................... delay_ms(1000); 
63C8:  MOVLW  04
63CA:  MOVWF  xAB
63CC:  MOVLW  FA
63CE:  MOVLB  2
63D0:  MOVWF  x2D
63D2:  MOVLB  0
63D4:  CALL   0DF4
63D8:  MOVLB  1
63DA:  DECFSZ xAB,F
63DC:  BRA    63CC
....................   init_system();  
63DE:  MOVLB  0
63E0:  GOTO   0E58
....................   output_high(D2A_CSB); 
63E4:  BSF    F8A.1
....................   delay_ms(100); 
63E6:  MOVLW  64
63E8:  MOVLB  2
63EA:  MOVWF  x2D
63EC:  MOVLB  0
63EE:  CALL   0DF4
....................   read_setup(); 
63F2:  CALL   0F30
....................  
....................   rp_command = setup.rp; 
63F6:  MOVFF  F7,194
....................   pwr_command = setup.pwr; 
63FA:  MOVFF  A5,195
....................  
....................   if (!setup.UART_Time)// VERSION 3.3: 10.2.2016  
63FE:  MOVF   xF9,F
6400:  BNZ   6406
.................... 		setup.UART_Time = 10; 
6402:  MOVLW  0A
6404:  MOVWF  xF9
.................... 	if (setup.Block_per_second == 0) 
6406:  MOVF   xFC,F
6408:  BNZ   6414
640A:  MOVF   xFD,F
640C:  BNZ   6414
....................     setup.Block_per_second = 100; 
640E:  CLRF   xFD
6410:  MOVLW  64
6412:  MOVWF  xFC
.................... 	//setup.UART_Status = 1;// VERSION 3.3: 10.2.2016  
....................   power_level = setup.power_in[setup.power_level]; 
6414:  BCF    FD8.0
6416:  RLCF   xB3,W
6418:  MOVWF  02
641A:  RLCF   xB4,W
641C:  MOVWF  03
641E:  MOVF   02,W
6420:  ADDLW  C2
6422:  MOVWF  FE9
6424:  MOVLW  00
6426:  ADDWFC 03,W
6428:  MOVWF  FEA
642A:  MOVFF  FEC,1A
642E:  MOVF   FED,F
6430:  MOVFF  FEF,19
....................   low_power_level = setup.power_in[setup.power_low_level]; 
6434:  BCF    FD8.0
6436:  RLCF   xF1,W
6438:  MOVWF  02
643A:  RLCF   xF2,W
643C:  MOVWF  03
643E:  MOVF   02,W
6440:  ADDLW  C2
6442:  MOVWF  FE9
6444:  MOVLW  00
6446:  ADDWFC 03,W
6448:  MOVWF  FEA
644A:  MOVFF  FEC,18
644E:  MOVF   FED,F
6450:  MOVFF  FEF,17
....................   power_control = 0; 
6454:  CLRF   1C
6456:  CLRF   1B
....................   power_output(); 
6458:  CALL   1E42
....................    
....................  
....................   PLL_initialize(); 
645C:  GOTO   2000
....................   delay_ms(50); 
6460:  MOVLW  32
6462:  MOVLB  2
6464:  MOVWF  x2D
6466:  MOVLB  0
6468:  CALL   0DF4
....................   update_all(); 
646C:  CALL   1CAC
....................  
....................   output_high(D2A_RESET); 
6470:  BSF    F8A.3
....................   delay_ms(50); 
6472:  MOVLW  32
6474:  MOVLB  2
6476:  MOVWF  x2D
6478:  MOVLB  0
647A:  CALL   0DF4
....................   output_low(D2A_RESET); 
647E:  BCF    F8A.3
....................    
....................  
....................   COM1_send_str("\r\n"); 
6480:  MOVLW  0D
6482:  MOVLB  1
6484:  MOVWF  x9C
6486:  MOVLW  0A
6488:  MOVWF  x9D
648A:  CLRF   x9E
648C:  MOVLW  01
648E:  MOVLB  2
6490:  MOVWF  x55
6492:  MOVLW  9C
6494:  MOVWF  x54
6496:  MOVLB  0
6498:  CALL   20AE
....................   COM1_send_str(VERSION); 
649C:  MOVLW  01
649E:  MOVWF  FEA
64A0:  MOVLW  9C
64A2:  MOVWF  FE9
64A4:  MOVFF  FF2,1AB
64A8:  BCF    FF2.7
64AA:  MOVLW  0F
64AC:  MOVWF  01
64AE:  CLRF   FF7
64B0:  MOVLW  00
64B2:  CALL   0A00
64B6:  TBLRD*-
64B8:  TBLRD*+
64BA:  MOVFF  FF5,FEE
64BE:  DECFSZ 01,F
64C0:  BRA    64B8
64C2:  MOVLB  1
64C4:  BTFSC  xAB.7
64C6:  BSF    FF2.7
64C8:  MOVLW  01
64CA:  MOVLB  2
64CC:  MOVWF  x55
64CE:  MOVLW  9C
64D0:  MOVWF  x54
64D2:  MOVLB  0
64D4:  CALL   20AE
....................   COM1_send_str("\r\n"); 
64D8:  MOVLW  0D
64DA:  MOVLB  1
64DC:  MOVWF  x9C
64DE:  MOVLW  0A
64E0:  MOVWF  x9D
64E2:  CLRF   x9E
64E4:  MOVLW  01
64E6:  MOVLB  2
64E8:  MOVWF  x55
64EA:  MOVLW  9C
64EC:  MOVWF  x54
64EE:  MOVLB  0
64F0:  CALL   20AE
....................  
....................   set_AD5314(DAC_POS_VOLT, vouta); 
64F4:  MOVLW  02
64F6:  MOVLB  2
64F8:  MOVWF  x1D
64FA:  MOVFF  19B,21F
64FE:  MOVFF  19A,21E
6502:  MOVLB  0
6504:  CALL   0F62
....................  
....................  
....................   delay_ms(500); 
6508:  MOVLW  02
650A:  MOVLB  1
650C:  MOVWF  xAB
650E:  MOVLW  FA
6510:  MOVLB  2
6512:  MOVWF  x2D
6514:  MOVLB  0
6516:  CALL   0DF4
651A:  MOVLB  1
651C:  DECFSZ xAB,F
651E:  BRA    650E
....................   output_high(POWER_EN); 
6520:  BSF    F8C.6
....................  
.................... update_all(); 
6522:  MOVLB  0
6524:  CALL   1CAC
.................... output_high(FPGA_RSTN); 
6528:  BSF    F8B.5
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
652A:  CLRWDT
....................     timer_tick(); 
652C:  GOTO   2176
....................  
....................     if (TMR_100mS_BLINK) 
6530:  BTFSS  28.0
6532:  BRA    653C
....................       { 
....................       TMR_100mS_BLINK = 0; 
6534:  BCF    28.0
....................       output_toggle(LED1); 
6536:  BTG    F8A.5
....................       delay_us(1); 
6538:  BRA    653A
653A:  BRA    653C
....................       } 
.................... /* //////////yehuda 1520Q cancel US,UT and BG    
....................     if (StartStatusFlag == 1 && (COM1_rxo == 0) && (stay_on == 1 || stay_on == 0)) 
....................     	{         
.................... 				if (setup.UART_Status == 1) 
.................... 		      { 
.................... 			      stay_on = 1; 
.................... 		      //StartStatusFlag = 0; 
.................... 		      //if (!ttccp_login) 
.................... 		        prepare_binary_status();		        
.................... 		      }  
.................... 		      
....................        } 
.................... */ 
.................... /* //////////yehuda 1520Q cancel US,UT and BG 
....................  		if (stay_on == 2 || stay_on == 0) //US1 or US0 StartStatusFlag == 0  (StartStatusFlag == 1 && setup.UART_Status == 0)&&  
....................  			{   
.................... 		    
.................... 		   			comm_handler(); 
.................... 		   			if (COM1_rxo != 0 ) 
.................... 		   				stay_on = 2; 
.................... 		  }     
.................... */ 
.................... 		comm_handler(); 
653C:  BRA    631E
.................... 		power_output(); 
653E:  CALL   1E42
6542:  BRA    652A
.................... 		 
....................    } 
....................   } 
....................  
6544:  BRA    6544

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
