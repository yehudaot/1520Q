CCS PCH C Compiler, Version 5.008, 5967               31-Jul-18 16:17

               Filename:   C:\BA\Software_projects\PIC\1520Q\BA1520QTX\BA1520QTX.lst

               ROM used:   28108 bytes (86%)
                           Largest free fragment is 4656
               RAM used:   429 (28%) at main() level
                           625 (41%) worst case
               Stack used: 11 locations (9 in main + 2 for interrupts)
               Stack size: 30

*
0000:  GOTO   6B66
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.1
004A:  GOTO   0054
004E:  BTFSC  F9E.1
0050:  GOTO   0C00
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   0C0A
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   0C10
006C:  BTFSS  F9D.5
006E:  GOTO   0078
0072:  BTFSC  F9E.5
0074:  GOTO   0C16
0078:  BTFSS  F9D.4
007A:  GOTO   0084
007E:  BTFSC  F9E.4
0080:  GOTO   0C64
0084:  BTFSS  F7D.0
0086:  GOTO   0090
008A:  BTFSC  F7E.0
008C:  GOTO   0BFA
0090:  MOVFF  0E,00
0094:  MOVFF  0F,01
0098:  MOVFF  10,02
009C:  MOVFF  11,03
00A0:  MOVFF  0C,FE9
00A4:  MOVFF  07,FEA
00A8:  BSF    07.7
00AA:  MOVFF  08,FE1
00AE:  MOVFF  09,FE2
00B2:  MOVFF  0A,FD9
00B6:  MOVFF  0B,FDA
00BA:  MOVFF  12,FF3
00BE:  MOVFF  13,FF4
00C2:  MOVFF  14,FFA
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #include <BA1520QTX.h> 
.................... #include <18LF45K22.h> 
.................... //////// Standard Header file for the PIC18LF45K22 device //////////////// 
.................... #device PIC18LF45K22 
00D2:  MOVFF  FF2,0D
00D6:  BCF    FF2.7
00D8:  CLRF   FF7
00DA:  ADDLW  EC
00DC:  MOVWF  FF6
00DE:  MOVLW  00
00E0:  ADDWFC FF7,F
00E2:  TBLRD*+
00E4:  MOVF   FF5,W
00E6:  BTFSC  0D.7
00E8:  BSF    FF2.7
00EA:  RETURN 0
00EC:  DATA C8,01
00EE:  DATA 00,00
00F0:  DATA 81,0C
00F2:  DATA 00,00
00F4:  DATA 42,06
00F6:  DATA 00,00
00F8:  DATA 0B,00
00FA:  DATA 70,00
00FC:  DATA A4,A7
00FE:  DATA 02,00
0100:  DATA E5,00
0102:  DATA 00,00
0104:  DATA 06,DD
0106:  DATA 1E,00
0108:  DATA 07,00
010A:  DATA 00,00
010C:  MOVFF  FF2,0D
0110:  BCF    FF2.7
0112:  CLRF   FF7
0114:  ADDLW  26
0116:  MOVWF  FF6
0118:  MOVLW  01
011A:  ADDWFC FF7,F
011C:  TBLRD*+
011E:  MOVF   FF5,W
0120:  BTFSC  0D.7
0122:  BSF    FF2.7
0124:  RETURN 0
0126:  DATA 24,41
0128:  DATA 49,20
012A:  DATA 3C,63
012C:  DATA 68,61
012E:  DATA 6E,6E
0130:  DATA 65,6C
0132:  DATA 3E,3C
0134:  DATA 63,72
0136:  DATA 3E,20
0138:  DATA 20,09
013A:  DATA 52,65
013C:  DATA 71,75
013E:  DATA 65,73
0140:  DATA 74,20
0142:  DATA 61,6E
0144:  DATA 61,6C
0146:  DATA 6F,67
0148:  DATA 20,63
014A:  DATA 68,61
014C:  DATA 6E,6E
014E:  DATA 65,6C
0150:  DATA 20,76
0152:  DATA 61,6C
0154:  DATA 75,65
0156:  DATA 20,28
0158:  DATA 31,30
015A:  DATA 20,62
015C:  DATA 69,74
015E:  DATA 73,29
0160:  DATA 0D,0A
0162:  DATA 00,00
0164:  MOVFF  FF2,0D
0168:  BCF    FF2.7
016A:  CLRF   FF7
016C:  ADDLW  7E
016E:  MOVWF  FF6
0170:  MOVLW  01
0172:  ADDWFC FF7,F
0174:  TBLRD*+
0176:  MOVF   FF5,W
0178:  BTFSC  0D.7
017A:  BSF    FF2.7
017C:  RETURN 0
017E:  DATA 24,41
0180:  DATA 54,20
0182:  DATA 3C,6C
0184:  DATA 65,76
0186:  DATA 65,6C
0188:  DATA 3E,3C
018A:  DATA 63,72
018C:  DATA 3E,20
018E:  DATA 20,09
0190:  DATA 53,65
0192:  DATA 74,20
0194:  DATA 61,74
0196:  DATA 74,65
0198:  DATA 6E,75
019A:  DATA 61,74
019C:  DATA 6F,72
019E:  DATA 20,74
01A0:  DATA 6F,20
01A2:  DATA 3C,6C
01A4:  DATA 65,76
01A6:  DATA 65,6C
01A8:  DATA 3E,0D
01AA:  DATA 0A,00
01AC:  MOVFF  FF2,0D
01B0:  BCF    FF2.7
01B2:  CLRF   FF7
01B4:  ADDLW  C6
01B6:  MOVWF  FF6
01B8:  MOVLW  01
01BA:  ADDWFC FF7,F
01BC:  TBLRD*+
01BE:  MOVF   FF5,W
01C0:  BTFSC  0D.7
01C2:  BSF    FF2.7
01C4:  RETURN 0
01C6:  DATA 24,43
01C8:  DATA 46,20
01CA:  DATA 3C,66
01CC:  DATA 72,65
01CE:  DATA 71,3E
01D0:  DATA 3C,63
01D2:  DATA 72,3E
01D4:  DATA 20,20
01D6:  DATA 09,43
01D8:  DATA 68,61
01DA:  DATA 6E,67
01DC:  DATA 65,20
01DE:  DATA 66,72
01E0:  DATA 65,71
01E2:  DATA 75,65
01E4:  DATA 6E,63
01E6:  DATA 79,20
01E8:  DATA 28,32
01EA:  DATA 31,38
01EC:  DATA 35,2E
01EE:  DATA 30,20
01F0:  DATA 2D,20
01F2:  DATA 32,33
01F4:  DATA 30,30
01F6:  DATA 2E,30
01F8:  DATA 20,69
01FA:  DATA 6E,20
01FC:  DATA 30,2E
01FE:  DATA 31,20
0200:  DATA 69,6E
0202:  DATA 63,73
0204:  DATA 29,0D
0206:  DATA 0A,00
0208:  MOVFF  FF2,0D
020C:  BCF    FF2.7
020E:  CLRF   FF7
0210:  ADDLW  22
0212:  MOVWF  FF6
0214:  MOVLW  02
0216:  ADDWFC FF7,F
0218:  TBLRD*+
021A:  MOVF   FF5,W
021C:  BTFSC  0D.7
021E:  BSF    FF2.7
0220:  RETURN 0
0222:  DATA 24,44
0224:  DATA 49,3C
0226:  DATA 63,72
0228:  DATA 3E,20
022A:  DATA 20,09
022C:  DATA 52,65
022E:  DATA 71,75
0230:  DATA 65,73
0232:  DATA 74,20
0234:  DATA 64,69
0236:  DATA 67,69
0238:  DATA 74,61
023A:  DATA 6C,20
023C:  DATA 69,6E
023E:  DATA 70,75
0240:  DATA 74,73
0242:  DATA 0D,0A
0244:  DATA 00,00
0246:  MOVFF  FF2,0D
024A:  BCF    FF2.7
024C:  CLRF   FF7
024E:  ADDLW  60
0250:  MOVWF  FF6
0252:  MOVLW  02
0254:  ADDWFC FF7,F
0256:  TBLRD*+
0258:  MOVF   FF5,W
025A:  BTFSC  0D.7
025C:  BSF    FF2.7
025E:  RETURN 0
0260:  DATA 24,47
0262:  DATA 44,20
0264:  DATA 3C,61
0266:  DATA 64,64
0268:  DATA 72,3E
026A:  DATA 3C,63
026C:  DATA 72,3E
026E:  DATA 20,20
0270:  DATA 09,47
0272:  DATA 65,74
0274:  DATA 20,44
0276:  DATA 32,41
0278:  DATA 20,72
027A:  DATA 65,67
027C:  DATA 69,73
027E:  DATA 74,65
0280:  DATA 72,20
0282:  DATA 63,6F
0284:  DATA 6E,74
0286:  DATA 65,6E
0288:  DATA 74,73
028A:  DATA 0D,0A
028C:  DATA 00,00
028E:  MOVFF  FF2,0D
0292:  BCF    FF2.7
0294:  CLRF   FF7
0296:  ADDLW  A8
0298:  MOVWF  FF6
029A:  MOVLW  02
029C:  ADDWFC FF7,F
029E:  TBLRD*+
02A0:  MOVF   FF5,W
02A2:  BTFSC  0D.7
02A4:  BSF    FF2.7
02A6:  RETURN 0
02A8:  DATA 24,47
02AA:  DATA 46,20
02AC:  DATA 3C,61
02AE:  DATA 64,64
02B0:  DATA 72,3E
02B2:  DATA 3C,63
02B4:  DATA 72,3E
02B6:  DATA 20,20
02B8:  DATA 09,47
02BA:  DATA 65,74
02BC:  DATA 20,46
02BE:  DATA 50,47
02C0:  DATA 41,20
02C2:  DATA 72,65
02C4:  DATA 67,69
02C6:  DATA 73,74
02C8:  DATA 65,72
02CA:  DATA 20,63
02CC:  DATA 6F,6E
02CE:  DATA 74,65
02D0:  DATA 6E,74
02D2:  DATA 73,0D
02D4:  DATA 0A,00
02D6:  MOVFF  FF2,0D
02DA:  BCF    FF2.7
02DC:  CLRF   FF7
02DE:  ADDLW  F0
02E0:  MOVWF  FF6
02E2:  MOVLW  02
02E4:  ADDWFC FF7,F
02E6:  TBLRD*+
02E8:  MOVF   FF5,W
02EA:  BTFSC  0D.7
02EC:  BSF    FF2.7
02EE:  RETURN 0
02F0:  DATA 24,4F
02F2:  DATA 54,20
02F4:  DATA 3C,6F
02F6:  DATA 75,74
02F8:  DATA 70,75
02FA:  DATA 74,3E
02FC:  DATA 3C,63
02FE:  DATA 72,3E
0300:  DATA 20,20
0302:  DATA 09,53
0304:  DATA 65,74
0306:  DATA 20,64
0308:  DATA 69,67
030A:  DATA 69,74
030C:  DATA 61,6C
030E:  DATA 20,6F
0310:  DATA 75,74
0312:  DATA 70,75
0314:  DATA 74,73
0316:  DATA 20,74
0318:  DATA 6F,20
031A:  DATA 48,45
031C:  DATA 58,20
031E:  DATA 76,61
0320:  DATA 6C,75
0322:  DATA 65,0D
0324:  DATA 0A,00
0326:  MOVFF  FF2,0D
032A:  BCF    FF2.7
032C:  CLRF   FF7
032E:  ADDLW  40
0330:  MOVWF  FF6
0332:  MOVLW  03
0334:  ADDWFC FF7,F
0336:  TBLRD*+
0338:  MOVF   FF5,W
033A:  BTFSC  0D.7
033C:  BSF    FF2.7
033E:  RETURN 0
0340:  DATA 24,52
0342:  DATA 44,3C
0344:  DATA 63,72
0346:  DATA 3E,20
0348:  DATA 20,09
034A:  DATA 52,65
034C:  DATA 73,65
034E:  DATA 74,20
0350:  DATA 44,32
0352:  DATA 41,0D
0354:  DATA 0A,00
0356:  MOVFF  FF2,0D
035A:  BCF    FF2.7
035C:  CLRF   FF7
035E:  ADDLW  70
0360:  MOVWF  FF6
0362:  MOVLW  03
0364:  ADDWFC FF7,F
0366:  TBLRD*+
0368:  MOVF   FF5,W
036A:  BTFSC  0D.7
036C:  BSF    FF2.7
036E:  RETURN 0
0370:  DATA 24,53
0372:  DATA 44,20
0374:  DATA 3C,61
0376:  DATA 64,64
0378:  DATA 72,3E
037A:  DATA 20,3C
037C:  DATA 64,61
037E:  DATA 74,61
0380:  DATA 3E,3C
0382:  DATA 63,72
0384:  DATA 3E,20
0386:  DATA 20,09
0388:  DATA 53,65
038A:  DATA 74,20
038C:  DATA 44,32
038E:  DATA 41,20
0390:  DATA 72,65
0392:  DATA 67,69
0394:  DATA 73,74
0396:  DATA 65,72
0398:  DATA 20,3C
039A:  DATA 61,64
039C:  DATA 64,72
039E:  DATA 3E,20
03A0:  DATA 74,6F
03A2:  DATA 20,3C
03A4:  DATA 64,61
03A6:  DATA 74,61
03A8:  DATA 3E,0D
03AA:  DATA 0A,00
03AC:  MOVFF  FF2,0D
03B0:  BCF    FF2.7
03B2:  CLRF   FF7
03B4:  ADDLW  C6
03B6:  MOVWF  FF6
03B8:  MOVLW  03
03BA:  ADDWFC FF7,F
03BC:  TBLRD*+
03BE:  MOVF   FF5,W
03C0:  BTFSC  0D.7
03C2:  BSF    FF2.7
03C4:  RETURN 0
03C6:  DATA 24,53
03C8:  DATA 46,20
03CA:  DATA 3C,61
03CC:  DATA 64,64
03CE:  DATA 72,3E
03D0:  DATA 20,3C
03D2:  DATA 64,61
03D4:  DATA 74,61
03D6:  DATA 3E,3C
03D8:  DATA 63,72
03DA:  DATA 3E,20
03DC:  DATA 20,09
03DE:  DATA 53,65
03E0:  DATA 74,20
03E2:  DATA 46,50
03E4:  DATA 47,41
03E6:  DATA 20,72
03E8:  DATA 65,67
03EA:  DATA 69,73
03EC:  DATA 74,65
03EE:  DATA 72,20
03F0:  DATA 3C,61
03F2:  DATA 64,64
03F4:  DATA 72,3E
03F6:  DATA 20,74
03F8:  DATA 6F,20
03FA:  DATA 3C,64
03FC:  DATA 61,74
03FE:  DATA 61,3E
0400:  DATA 0D,0A
0402:  DATA 00,00
0404:  MOVFF  FF2,0D
0408:  BCF    FF2.7
040A:  CLRF   FF7
040C:  ADDLW  1E
040E:  MOVWF  FF6
0410:  MOVLW  04
0412:  ADDWFC FF7,F
0414:  TBLRD*+
0416:  MOVF   FF5,W
0418:  BTFSC  0D.7
041A:  BSF    FF2.7
041C:  RETURN 0
041E:  DATA 0D,0A
0420:  DATA 0A,4E
0422:  DATA 4F,20
0424:  DATA 54,45
0426:  DATA 4D,50
0428:  DATA 2D,52
042A:  DATA 46,20
042C:  DATA 4F,46
042E:  DATA 46,20
0430:  DATA 0D,0A
0432:  DATA 00,00
0434:  MOVFF  FF2,0D
0438:  BCF    FF2.7
043A:  CLRF   FF7
043C:  ADDLW  4E
043E:  MOVWF  FF6
0440:  MOVLW  04
0442:  ADDWFC FF7,F
0444:  TBLRD*+
0446:  MOVF   FF5,W
0448:  BTFSC  0D.7
044A:  BSF    FF2.7
044C:  RETURN 0
044E:  DATA 44,53
0450:  DATA 20,3C
0452:  DATA 64,61
0454:  DATA 74,61
0456:  DATA 20,73
0458:  DATA 6F,75
045A:  DATA 72,65
045C:  DATA 3E,3C
045E:  DATA 63,72
0460:  DATA 3E,20
0462:  DATA 20,09
0464:  DATA 53,65
0466:  DATA 74,20
0468:  DATA 64,61
046A:  DATA 74,61
046C:  DATA 20,73
046E:  DATA 6F,75
0470:  DATA 72,63
0472:  DATA 65,20
0474:  DATA 28,30
0476:  DATA 2D,31
0478:  DATA 29,0D
047A:  DATA 0A,00
047C:  MOVFF  FF2,0D
0480:  BCF    FF2.7
0482:  CLRF   FF7
0484:  ADDLW  96
0486:  MOVWF  FF6
0488:  MOVLW  04
048A:  ADDWFC FF7,F
048C:  TBLRD*+
048E:  MOVF   FF5,W
0490:  BTFSC  0D.7
0492:  BSF    FF2.7
0494:  RETURN 0
0496:  DATA 44,50
0498:  DATA 20,3C
049A:  DATA 64,61
049C:  DATA 74,61
049E:  DATA 20,70
04A0:  DATA 6F,6C
04A2:  DATA 61,72
04A4:  DATA 69,74
04A6:  DATA 79,3E
04A8:  DATA 3C,63
04AA:  DATA 72,3E
04AC:  DATA 20,20
04AE:  DATA 09,53
04B0:  DATA 65,74
04B2:  DATA 20,64
04B4:  DATA 61,74
04B6:  DATA 61,20
04B8:  DATA 70,6F
04BA:  DATA 6C,61
04BC:  DATA 72,69
04BE:  DATA 74,79
04C0:  DATA 20,28
04C2:  DATA 30,2D
04C4:  DATA 31,29
04C6:  DATA 0D,0A
04C8:  DATA 00,00
04CA:  MOVFF  FF2,0D
04CE:  BCF    FF2.7
04D0:  CLRF   FF7
04D2:  ADDLW  E4
04D4:  MOVWF  FF6
04D6:  MOVLW  04
04D8:  ADDWFC FF7,F
04DA:  TBLRD*+
04DC:  MOVF   FF5,W
04DE:  BTFSC  0D.7
04E0:  BSF    FF2.7
04E2:  RETURN 0
04E4:  DATA 44,45
04E6:  DATA 20,3C
04E8:  DATA 73,65
04EA:  DATA 74,75
04EC:  DATA 70,20
04EE:  DATA 53,4F
04F0:  DATA 51,50
04F2:  DATA 53,4B
04F4:  DATA 3E,3C
04F6:  DATA 63,72
04F8:  DATA 3E,20
04FA:  DATA 20,09
04FC:  DATA 53,65
04FE:  DATA 74,20
0500:  DATA 73,65
0502:  DATA 74,75
0504:  DATA 70,20
0506:  DATA 53,4F
0508:  DATA 51,50
050A:  DATA 53,4B
050C:  DATA 20,28
050E:  DATA 30,2D
0510:  DATA 31,29
0512:  DATA 0D,0A
0514:  DATA 00,00
0516:  MOVFF  FF2,0D
051A:  BCF    FF2.7
051C:  CLRF   FF7
051E:  ADDLW  30
0520:  MOVWF  FF6
0522:  MOVLW  05
0524:  ADDWFC FF7,F
0526:  TBLRD*+
0528:  MOVF   FF5,W
052A:  BTFSC  0D.7
052C:  BSF    FF2.7
052E:  RETURN 0
0530:  DATA 52,50
0532:  DATA 20,3C
0534:  DATA 70,6F
0536:  DATA 77,65
0538:  DATA 72,20
053A:  DATA 68,65
053C:  DATA 69,67
053E:  DATA 68,74
0540:  DATA 3E,3C
0542:  DATA 63,72
0544:  DATA 3E,20
0546:  DATA 20,09
0548:  DATA 53,65
054A:  DATA 74,20
054C:  DATA 70,6F
054E:  DATA 77,65
0550:  DATA 72,20
0552:  DATA 68,65
0554:  DATA 69,67
0556:  DATA 68,74
0558:  DATA 20,28
055A:  DATA 30,2D
055C:  DATA 31,29
055E:  DATA 0D,0A
0560:  DATA 00,00
0562:  MOVFF  FF2,0D
0566:  BCF    FF2.7
0568:  CLRF   FF7
056A:  ADDLW  7C
056C:  MOVWF  FF6
056E:  MOVLW  05
0570:  ADDWFC FF7,F
0572:  TBLRD*+
0574:  MOVF   FF5,W
0576:  BTFSC  0D.7
0578:  BSF    FF2.7
057A:  RETURN 0
057C:  DATA 52,46
057E:  DATA 20,3C
0580:  DATA 70,6F
0582:  DATA 77,65
0584:  DATA 72,20
0586:  DATA 63,6F
0588:  DATA 6D,61
058A:  DATA 6E,64
058C:  DATA 3E,3C
058E:  DATA 63,72
0590:  DATA 3E,20
0592:  DATA 20,09
0594:  DATA 53,65
0596:  DATA 74,20
0598:  DATA 70,6F
059A:  DATA 77,65
059C:  DATA 72,20
059E:  DATA 63,6F
05A0:  DATA 6D,61
05A2:  DATA 6E,64
05A4:  DATA 20,28
05A6:  DATA 30,2D
05A8:  DATA 31,29
05AA:  DATA 0D,0A
05AC:  DATA 00,00
05AE:  MOVFF  FF2,0D
05B2:  BCF    FF2.7
05B4:  CLRF   FF7
05B6:  ADDLW  C8
05B8:  MOVWF  FF6
05BA:  MOVLW  05
05BC:  ADDWFC FF7,F
05BE:  TBLRD*+
05C0:  MOVF   FF5,W
05C2:  BTFSC  0D.7
05C4:  BSF    FF2.7
05C6:  RETURN 0
05C8:  DATA 52,41
05CA:  DATA 20,3C
05CC:  DATA 72,61
05CE:  DATA 6E,64
05D0:  DATA 6F,6D
05D2:  DATA 69,7A
05D4:  DATA 65,72
05D6:  DATA 3E,3C
05D8:  DATA 63,72
05DA:  DATA 3E,20
05DC:  DATA 20,09
05DE:  DATA 53,65
05E0:  DATA 74,20
05E2:  DATA 77,69
05E4:  DATA 74,68
05E6:  DATA 2F,77
05E8:  DATA 69,74
05EA:  DATA 68,6F
05EC:  DATA 75,74
05EE:  DATA 20,72
05F0:  DATA 61,6E
05F2:  DATA 64,6F
05F4:  DATA 6D,69
05F6:  DATA 7A,65
05F8:  DATA 72,20
05FA:  DATA 28,30
05FC:  DATA 2D,31
05FE:  DATA 29,0D
0600:  DATA 0A,00
0602:  MOVFF  FF2,0D
0606:  BCF    FF2.7
0608:  CLRF   FF7
060A:  ADDLW  1C
060C:  MOVWF  FF6
060E:  MOVLW  06
0610:  ADDWFC FF7,F
0612:  TBLRD*+
0614:  MOVF   FF5,W
0616:  BTFSC  0D.7
0618:  BSF    FF2.7
061A:  RETURN 0
061C:  DATA 46,52
061E:  DATA 20,3C
0620:  DATA 66,72
0622:  DATA 65,71
0624:  DATA 75,65
0626:  DATA 6E,63
0628:  DATA 79,3E
062A:  DATA 3C,63
062C:  DATA 72,3E
062E:  DATA 20,20
0630:  DATA 09,53
0632:  DATA 65,74
0634:  DATA 20,66
0636:  DATA 72,65
0638:  DATA 71,75
063A:  DATA 65,6E
063C:  DATA 63,79
063E:  DATA 20,28
0640:  DATA 32,32
0642:  DATA 30,30
0644:  DATA 2E,30
0646:  DATA 2D,32
0648:  DATA 34,30
064A:  DATA 30,2E
064C:  DATA 30,29
064E:  DATA 0D,0A
0650:  DATA 00,00
0652:  MOVFF  FF2,0D
0656:  BCF    FF2.7
0658:  CLRF   FF7
065A:  ADDLW  6C
065C:  MOVWF  FF6
065E:  MOVLW  06
0660:  ADDWFC FF7,F
0662:  TBLRD*+
0664:  MOVF   FF5,W
0666:  BTFSC  0D.7
0668:  BSF    FF2.7
066A:  RETURN 0
066C:  DATA 4D,4F
066E:  DATA 20,3C
0670:  DATA 6D,6F
0672:  DATA 64,65
0674:  DATA 3E,3C
0676:  DATA 63,72
0678:  DATA 3E,20
067A:  DATA 20,09
067C:  DATA 53,65
067E:  DATA 74,20
0680:  DATA 6D,6F
0682:  DATA 64,65
0684:  DATA 20,28
0686:  DATA 30,2D
0688:  DATA 33,29
068A:  DATA 0D,0A
068C:  DATA 00,00
068E:  MOVFF  FF2,0D
0692:  BCF    FF2.7
0694:  CLRF   FF7
0696:  ADDLW  A8
0698:  MOVWF  FF6
069A:  MOVLW  06
069C:  ADDWFC FF7,F
069E:  TBLRD*+
06A0:  MOVF   FF5,W
06A2:  BTFSC  0D.7
06A4:  BSF    FF2.7
06A6:  RETURN 0
06A8:  DATA 49,43
06AA:  DATA 20,3C
06AC:  DATA 62,69
06AE:  DATA 74,72
06B0:  DATA 61,74
06B2:  DATA 65,3E
06B4:  DATA 3C,63
06B6:  DATA 72,3E
06B8:  DATA 20,20
06BA:  DATA 09,53
06BC:  DATA 65,74
06BE:  DATA 20,62
06C0:  DATA 69,72
06C2:  DATA 74,61
06C4:  DATA 74,65
06C6:  DATA 20,28
06C8:  DATA 31,2E
06CA:  DATA 30,30
06CC:  DATA 2D,33
06CE:  DATA 30,2E
06D0:  DATA 30,30
06D2:  DATA 44,42
06D4:  DATA 70,73
06D6:  DATA 29,0D
06D8:  DATA 0A,00
06DA:  MOVFF  FF2,0D
06DE:  BCF    FF2.7
06E0:  CLRF   FF7
06E2:  ADDLW  F4
06E4:  MOVWF  FF6
06E6:  MOVLW  06
06E8:  ADDWFC FF7,F
06EA:  TBLRD*+
06EC:  MOVF   FF5,W
06EE:  BTFSC  0D.7
06F0:  BSF    FF2.7
06F2:  RETURN 0
06F4:  DATA 49,44
06F6:  DATA 20,3C
06F8:  DATA 69,6E
06FA:  DATA 74,65
06FC:  DATA 72,6E
06FE:  DATA 61,6C
0700:  DATA 20,70
0702:  DATA 61,74
0704:  DATA 74,65
0706:  DATA 72,6E
0708:  DATA 3E,3C
070A:  DATA 63,72
070C:  DATA 3E,20
070E:  DATA 20,09
0710:  DATA 53,65
0712:  DATA 74,20
0714:  DATA 69,6E
0716:  DATA 74,65
0718:  DATA 72,6E
071A:  DATA 61,6C
071C:  DATA 20,70
071E:  DATA 61,74
0720:  DATA 74,65
0722:  DATA 72,6E
0724:  DATA 20,28
0726:  DATA 30,2D
0728:  DATA 33,29
072A:  DATA 0D,0A
072C:  DATA 00,00
072E:  MOVFF  FF2,0D
0732:  BCF    FF2.7
0734:  CLRF   FF7
0736:  ADDLW  48
0738:  MOVWF  FF6
073A:  MOVLW  07
073C:  ADDWFC FF7,F
073E:  TBLRD*+
0740:  MOVF   FF5,W
0742:  BTFSC  0D.7
0744:  BSF    FF2.7
0746:  RETURN 0
0748:  DATA 56,45
074A:  DATA 20,3C
074C:  DATA 63,72
074E:  DATA 3E,20
0750:  DATA 20,09
0752:  DATA 64,69
0754:  DATA 73,70
0756:  DATA 6C,61
0758:  DATA 79,20
075A:  DATA 76,65
075C:  DATA 72,73
075E:  DATA 69,6F
0760:  DATA 6E,20
0762:  DATA 69,6E
0764:  DATA 66,6F
0766:  DATA 0D,0A
0768:  DATA 00,00
076A:  MOVFF  FF2,0D
076E:  BCF    FF2.7
0770:  CLRF   FF7
0772:  ADDLW  84
0774:  MOVWF  FF6
0776:  MOVLW  07
0778:  ADDWFC FF7,F
077A:  TBLRD*+
077C:  MOVF   FF5,W
077E:  BTFSC  0D.7
0780:  BSF    FF2.7
0782:  RETURN 0
0784:  DATA 56,53
0786:  DATA 20,3C
0788:  DATA 6D,61
078A:  DATA 6A,6F
078C:  DATA 72,3E
078E:  DATA 2E,3C
0790:  DATA 6D,69
0792:  DATA 6E,6F
0794:  DATA 72,3E
0796:  DATA 20,3C
0798:  DATA 63,72
079A:  DATA 3E,20
079C:  DATA 20,09
079E:  DATA 73,65
07A0:  DATA 74,20
07A2:  DATA 74,68
07A4:  DATA 65,20
07A6:  DATA 73,65
07A8:  DATA 74,75
07AA:  DATA 70,20
07AC:  DATA 66,69
07AE:  DATA 6C,65
07B0:  DATA 20,76
07B2:  DATA 65,72
07B4:  DATA 73,69
07B6:  DATA 6F,6E
07B8:  DATA 0D,0A
07BA:  DATA 00,00
07BC:  MOVFF  FF2,0D
07C0:  BCF    FF2.7
07C2:  CLRF   FF7
07C4:  ADDLW  D6
07C6:  MOVWF  FF6
07C8:  MOVLW  07
07CA:  ADDWFC FF7,F
07CC:  TBLRD*+
07CE:  MOVF   FF5,W
07D0:  BTFSC  0D.7
07D2:  BSF    FF2.7
07D4:  RETURN 0
07D6:  DATA 56,50
07D8:  DATA 20,3C
07DA:  DATA 70,6F
07DC:  DATA 77,65
07DE:  DATA 72,20
07E0:  DATA 6C,65
07E2:  DATA 76,65
07E4:  DATA 6C,3E
07E6:  DATA 3C,63
07E8:  DATA 72,3E
07EA:  DATA 20,20
07EC:  DATA 09,53
07EE:  DATA 65,74
07F0:  DATA 20,70
07F2:  DATA 6F,77
07F4:  DATA 65,72
07F6:  DATA 20,6C
07F8:  DATA 65,76
07FA:  DATA 65,6C
07FC:  DATA 20,28
07FE:  DATA 32,30
0800:  DATA 2D,34
0802:  DATA 30,29
0804:  DATA 0D,0A
0806:  DATA 00,00
0808:  MOVFF  FF2,0D
080C:  BCF    FF2.7
080E:  CLRF   FF7
0810:  ADDLW  22
0812:  MOVWF  FF6
0814:  MOVLW  08
0816:  ADDWFC FF7,F
0818:  TBLRD*+
081A:  MOVF   FF5,W
081C:  BTFSC  0D.7
081E:  BSF    FF2.7
0820:  RETURN 0
0822:  DATA 56,4C
0824:  DATA 20,3C
0826:  DATA 70,6F
0828:  DATA 77,65
082A:  DATA 72,20
082C:  DATA 68,69
082E:  DATA 67,68
0830:  DATA 3E,3C
0832:  DATA 63,72
0834:  DATA 3E,20
0836:  DATA 20,09
0838:  DATA 53,65
083A:  DATA 74,20
083C:  DATA 68,69
083E:  DATA 67,68
0840:  DATA 20,70
0842:  DATA 6F,77
0844:  DATA 65,72
0846:  DATA 20,6C
0848:  DATA 65,76
084A:  DATA 65,6C
084C:  DATA 20,28
084E:  DATA 32,30
0850:  DATA 2D,34
0852:  DATA 30,29
0854:  DATA 0D,0A
0856:  DATA 00,00
0858:  MOVFF  FF2,0D
085C:  BCF    FF2.7
085E:  CLRF   FF7
0860:  ADDLW  72
0862:  MOVWF  FF6
0864:  MOVLW  08
0866:  ADDWFC FF7,F
0868:  TBLRD*+
086A:  MOVF   FF5,W
086C:  BTFSC  0D.7
086E:  BSF    FF2.7
0870:  RETURN 0
0872:  DATA 56,4D
0874:  DATA 20,3C
0876:  DATA 6E,65
0878:  DATA 67,61
087A:  DATA 74,69
087C:  DATA 76,65
087E:  DATA 20,70
0880:  DATA 6F,77
0882:  DATA 65,72
0884:  DATA 20,6C
0886:  DATA 65,76
0888:  DATA 65,6C
088A:  DATA 3E,3C
088C:  DATA 63,72
088E:  DATA 3E,20
0890:  DATA 20,09
0892:  DATA 53,65
0894:  DATA 74,20
0896:  DATA 6E,65
0898:  DATA 67,61
089A:  DATA 74,69
089C:  DATA 76,65
089E:  DATA 20,70
08A0:  DATA 6F,77
08A2:  DATA 65,72
08A4:  DATA 20,6C
08A6:  DATA 65,76
08A8:  DATA 65,6C
08AA:  DATA 0D,0A
08AC:  DATA 00,00
08AE:  MOVFF  FF2,0D
08B2:  BCF    FF2.7
08B4:  CLRF   FF7
08B6:  ADDLW  C8
08B8:  MOVWF  FF6
08BA:  MOVLW  08
08BC:  ADDWFC FF7,F
08BE:  TBLRD*+
08C0:  MOVF   FF5,W
08C2:  BTFSC  0D.7
08C4:  BSF    FF2.7
08C6:  RETURN 0
08C8:  DATA 56,43
08CA:  DATA 20,3C
08CC:  DATA 70,6F
08CE:  DATA 73,65
08D0:  DATA 74,69
08D2:  DATA 76,65
08D4:  DATA 20,70
08D6:  DATA 6F,77
08D8:  DATA 65,72
08DA:  DATA 20,6C
08DC:  DATA 65,76
08DE:  DATA 65,6C
08E0:  DATA 3E,3C
08E2:  DATA 63,72
08E4:  DATA 3E,20
08E6:  DATA 20,09
08E8:  DATA 53,65
08EA:  DATA 74,20
08EC:  DATA 70,6F
08EE:  DATA 73,65
08F0:  DATA 74,69
08F2:  DATA 76,65
08F4:  DATA 20,70
08F6:  DATA 6F,77
08F8:  DATA 65,72
08FA:  DATA 20,6C
08FC:  DATA 65,76
08FE:  DATA 65,6C
0900:  DATA 0D,0A
0902:  DATA 00,00
0904:  MOVFF  FF2,0D
0908:  BCF    FF2.7
090A:  CLRF   FF7
090C:  ADDLW  1E
090E:  MOVWF  FF6
0910:  MOVLW  09
0912:  ADDWFC FF7,F
0914:  TBLRD*+
0916:  MOVF   FF5,W
0918:  BTFSC  0D.7
091A:  BSF    FF2.7
091C:  RETURN 0
091E:  DATA 43,53
0920:  DATA 20,3C
0922:  DATA 63,6C
0924:  DATA 6F,63
0926:  DATA 6B,20
0928:  DATA 70,68
092A:  DATA 61,73
092C:  DATA 65,3E
092E:  DATA 3C,63
0930:  DATA 72,3E
0932:  DATA 20,20
0934:  DATA 09,53
0936:  DATA 65,74
0938:  DATA 20,63
093A:  DATA 6C,6F
093C:  DATA 63,6B
093E:  DATA 20,70
0940:  DATA 68,61
0942:  DATA 73,65
0944:  DATA 20,28
0946:  DATA 30,2D
0948:  DATA 31,29
094A:  DATA 0D,0A
094C:  DATA 00,00
094E:  MOVFF  FF2,0D
0952:  BCF    FF2.7
0954:  CLRF   FF7
0956:  ADDLW  68
0958:  MOVWF  FF6
095A:  MOVLW  09
095C:  ADDWFC FF7,F
095E:  TBLRD*+
0960:  MOVF   FF5,W
0962:  BTFSC  0D.7
0964:  BSF    FF2.7
0966:  RETURN 0
0968:  DATA 55,54
096A:  DATA 20,3C
096C:  DATA 55,41
096E:  DATA 52,54
0970:  DATA 20,54
0972:  DATA 69,6D
0974:  DATA 65,3E
0976:  DATA 3C,63
0978:  DATA 72,3E
097A:  DATA 20,20
097C:  DATA 09,53
097E:  DATA 65,74
0980:  DATA 20,74
0982:  DATA 68,65
0984:  DATA 20,73
0986:  DATA 74,6F
0988:  DATA 70,20
098A:  DATA 74,69
098C:  DATA 6D,65
098E:  DATA 2C,20
0990:  DATA 64,65
0992:  DATA 66,61
0994:  DATA 75,6C
0996:  DATA 74,20
0998:  DATA 31,35
099A:  DATA 20,28
099C:  DATA 30,2D
099E:  DATA 32,34
09A0:  DATA 30,29
09A2:  DATA 0D,0A
09A4:  DATA 00,00
09A6:  MOVFF  FF2,0D
09AA:  BCF    FF2.7
09AC:  CLRF   FF7
09AE:  ADDLW  C0
09B0:  MOVWF  FF6
09B2:  MOVLW  09
09B4:  ADDWFC FF7,F
09B6:  TBLRD*+
09B8:  MOVF   FF5,W
09BA:  BTFSC  0D.7
09BC:  BSF    FF2.7
09BE:  RETURN 0
09C0:  DATA 55,53
09C2:  DATA 20,3C
09C4:  DATA 55,41
09C6:  DATA 52,54
09C8:  DATA 20,53
09CA:  DATA 74,61
09CC:  DATA 74,75
09CE:  DATA 73,3E
09D0:  DATA 3C,63
09D2:  DATA 72,3E
09D4:  DATA 20,20
09D6:  DATA 09,53
09D8:  DATA 65,74
09DA:  DATA 20,74
09DC:  DATA 68,65
09DE:  DATA 20,42
09E0:  DATA 6C,6F
09E2:  DATA 63,6B
09E4:  DATA 20,28
09E6:  DATA 30,2D
09E8:  DATA 31,29
09EA:  DATA 0D,0A
09EC:  DATA 00,00
09EE:  MOVFF  FF2,0D
09F2:  BCF    FF2.7
09F4:  CLRF   FF7
09F6:  ADDLW  08
09F8:  MOVWF  FF6
09FA:  MOVLW  0A
09FC:  ADDWFC FF7,F
09FE:  TBLRD*+
0A00:  MOVF   FF5,W
0A02:  BTFSC  0D.7
0A04:  BSF    FF2.7
0A06:  RETURN 0
0A08:  DATA 53,56
0A0A:  DATA 20,3C
0A0C:  DATA 73,61
0A0E:  DATA 76,65
0A10:  DATA 20,61
0A12:  DATA 6C,6C
0A14:  DATA 3E,3C
0A16:  DATA 63,72
0A18:  DATA 3E,20
0A1A:  DATA 20,09
0A1C:  DATA 53,61
0A1E:  DATA 76,65
0A20:  DATA 20,70
0A22:  DATA 61,72
0A24:  DATA 61,6D
0A26:  DATA 65,74
0A28:  DATA 65,72
0A2A:  DATA 73,0D
0A2C:  DATA 00,00
0A2E:  MOVFF  FF2,0D
0A32:  BCF    FF2.7
0A34:  CLRF   FF7
0A36:  ADDLW  48
0A38:  MOVWF  FF6
0A3A:  MOVLW  0A
0A3C:  ADDWFC FF7,F
0A3E:  TBLRD*+
0A40:  MOVF   FF5,W
0A42:  BTFSC  0D.7
0A44:  BSF    FF2.7
0A46:  RETURN 0
0A48:  DATA 0D,09
0A4A:  DATA 20,48
0A4C:  DATA 45,4C
0A4E:  DATA 50,20
0A50:  DATA 4C,49
0A52:  DATA 53,54
0A54:  DATA 20,0D
0A56:  DATA 00,00
0A58:  MOVFF  FF2,0D
0A5C:  BCF    FF2.7
0A5E:  CLRF   FF7
0A60:  ADDLW  72
0A62:  MOVWF  FF6
0A64:  MOVLW  0A
0A66:  ADDWFC FF7,F
0A68:  TBLRD*+
0A6A:  MOVF   FF5,W
0A6C:  BTFSC  0D.7
0A6E:  BSF    FF2.7
0A70:  RETURN 0
0A72:  DATA 0D,0A
0A74:  DATA 46,41
0A76:  DATA 55,4C
0A78:  DATA 54,0D
0A7A:  DATA 0A,00
0A7C:  MOVFF  FF2,0D
0A80:  BCF    FF2.7
0A82:  CLRF   FF7
0A84:  ADDLW  96
0A86:  MOVWF  FF6
0A88:  MOVLW  0A
0A8A:  ADDWFC FF7,F
0A8C:  TBLRD*+
0A8E:  MOVF   FF5,W
0A90:  BTFSC  0D.7
0A92:  BSF    FF2.7
0A94:  RETURN 0
0A96:  DATA 0D,0A
0A98:  DATA 46,41
0A9A:  DATA 49,4C
0A9C:  DATA 0D,0A
0A9E:  DATA 00,00
0AA0:  MOVFF  FF2,0D
0AA4:  BCF    FF2.7
0AA6:  CLRF   FF7
0AA8:  ADDLW  BA
0AAA:  MOVWF  FF6
0AAC:  MOVLW  0A
0AAE:  ADDWFC FF7,F
0AB0:  TBLRD*+
0AB2:  MOVF   FF5,W
0AB4:  BTFSC  0D.7
0AB6:  BSF    FF2.7
0AB8:  RETURN 0
0ABA:  DATA 42,41
0ABC:  DATA 31,35
0ABE:  DATA 32,30
0AC0:  DATA 51,54
0AC2:  DATA 58,20
0AC4:  DATA 56,31
0AC6:  DATA 2E,30
0AC8:  DATA 00,00
0ACA:  MOVFF  FF2,0D
0ACE:  BCF    FF2.7
0AD0:  CLRF   FF7
0AD2:  ADDLW  E4
0AD4:  MOVWF  FF6
0AD6:  MOVLW  0A
0AD8:  ADDWFC FF7,F
0ADA:  TBLRD*+
0ADC:  MOVF   FF5,W
0ADE:  BTFSC  0D.7
0AE0:  BSF    FF2.7
0AE2:  RETURN 0
0AE4:  DATA 0D,0A
0AE6:  DATA 0A,4F
0AE8:  DATA 4B,20
0AEA:  DATA 52,65
0AEC:  DATA 71,75
0AEE:  DATA 65,73
0AF0:  DATA 74,20
0AF2:  DATA 53,74
0AF4:  DATA 61,74
0AF6:  DATA 75,73
0AF8:  DATA 20,0D
0AFA:  DATA 0A,0A
0AFC:  DATA 00,00
0AFE:  MOVFF  FF2,0D
0B02:  BCF    FF2.7
0B04:  CLRF   FF7
0B06:  ADDLW  18
0B08:  MOVWF  FF6
0B0A:  MOVLW  0B
0B0C:  ADDWFC FF7,F
0B0E:  TBLRD*+
0B10:  MOVF   FF5,W
0B12:  BTFSC  0D.7
0B14:  BSF    FF2.7
0B16:  RETURN 0
0B18:  DATA 47,4F
0B1A:  DATA 4F,44
0B1C:  DATA 00,00
0B1E:  MOVFF  FF2,0D
0B22:  BCF    FF2.7
0B24:  CLRF   FF7
0B26:  ADDLW  38
0B28:  MOVWF  FF6
0B2A:  MOVLW  0B
0B2C:  ADDWFC FF7,F
0B2E:  TBLRD*+
0B30:  MOVF   FF5,W
0B32:  BTFSC  0D.7
0B34:  BSF    FF2.7
0B36:  RETURN 0
0B38:  DATA 42,41
0B3A:  DATA 44,00
0B3C:  MOVFF  FF2,0D
0B40:  BCF    FF2.7
0B42:  CLRF   FF7
0B44:  ADDLW  56
0B46:  MOVWF  FF6
0B48:  MOVLW  0B
0B4A:  ADDWFC FF7,F
0B4C:  TBLRD*+
0B4E:  MOVF   FF5,W
0B50:  BTFSC  0D.7
0B52:  BSF    FF2.7
0B54:  RETURN 0
0B56:  DATA 0D,0A
0B58:  DATA 4F,4B
0B5A:  DATA 0D,0A
0B5C:  DATA 2A,00
0B5E:  MOVFF  FF2,0D
0B62:  BCF    FF2.7
0B64:  CLRF   FF7
0B66:  ADDLW  78
0B68:  MOVWF  FF6
0B6A:  MOVLW  0B
0B6C:  ADDWFC FF7,F
0B6E:  TBLRD*+
0B70:  MOVF   FF5,W
0B72:  BTFSC  0D.7
0B74:  BSF    FF2.7
0B76:  RETURN 0
0B78:  DATA 0D,0A
0B7A:  DATA 0A,42
0B7C:  DATA 52,45
0B7E:  DATA 41,4B
0B80:  DATA 0D,0A
0B82:  DATA 00,00
0B84:  MOVFF  FF2,0D
0B88:  BCF    FF2.7
0B8A:  CLRF   FF7
0B8C:  ADDLW  9E
0B8E:  MOVWF  FF6
0B90:  MOVLW  0B
0B92:  ADDWFC FF7,F
0B94:  TBLRD*+
0B96:  MOVF   FF5,W
0B98:  BTFSC  0D.7
0B9A:  BSF    FF2.7
0B9C:  RETURN 0
0B9E:  DATA 50,00
0BA0:  DATA 14,00
0BA2:  DATA 66,00
0BA4:  DATA 15,00
0BA6:  DATA 76,00
0BA8:  DATA 16,00
0BAA:  DATA 7F,00
0BAC:  DATA 17,00
0BAE:  DATA 8F,00
0BB0:  DATA 18,00
0BB2:  DATA A7,00
0BB4:  DATA 19,00
0BB6:  DATA B7,00
0BB8:  DATA 1A,00
0BBA:  DATA D0,00
0BBC:  DATA 1B,00
0BBE:  DATA E2,00
0BC0:  DATA 1C,00
0BC2:  DATA 01,01
0BC4:  DATA 1D,00
0BC6:  DATA 20,01
0BC8:  DATA 1E,00
0BCA:  DATA 42,01
0BCC:  DATA 1F,00
0BCE:  DATA 68,01
0BD0:  DATA 20,00
0BD2:  DATA 90,01
0BD4:  DATA 21,00
0BD6:  DATA BE,01
0BD8:  DATA 22,00
0BDA:  DATA F9,01
0BDC:  DATA 23,00
0BDE:  DATA 34,02
0BE0:  DATA 24,00
0BE2:  DATA 85,02
0BE4:  DATA 25,00
0BE6:  DATA D2,02
0BE8:  DATA 26,00
0BEA:  DATA 32,03
0BEC:  DATA 27,00
0BEE:  DATA E0,03
0BF0:  DATA 28,00
0BF2:  DATA ED,03
0BF4:  DATA 29,00
0BF6:  DATA FF,03
0BF8:  DATA 37,00
*
0CC4:  DATA 0D,54
0CC6:  DATA 45,4D
0CC8:  DATA 50,3D
0CCA:  DATA 25,36
0CCC:  DATA 2E,32
0CCE:  DATA 66,64
0CD0:  DATA 65,67
0CD2:  DATA 0D,0A
0CD4:  DATA 4F,4B
0CD6:  DATA 0A,00
0CD8:  DATA 24,41
0CDA:  DATA 52,20
0CDC:  DATA 25,6C
0CDE:  DATA 75,0D
0CE0:  DATA 00,00
0CE2:  DATA 24,43
0CE4:  DATA 50,20
0CE6:  DATA 25,75
0CE8:  DATA 0D,00
0CEA:  DATA 24,44
0CEC:  DATA 52,20
0CEE:  DATA 25,30
0CF0:  DATA 32,58
0CF2:  DATA 0D,00
0CF4:  DATA 20,0D
0CF6:  DATA 0A,24
0CF8:  DATA 53,46
0CFA:  DATA 20,25
0CFC:  DATA 30,32
0CFE:  DATA 58,20
0D00:  DATA 25,30
0D02:  DATA 32,58
0D04:  DATA 0D,00
0D06:  DATA 20,0D
0D08:  DATA 0A,24
0D0A:  DATA 53,44
0D0C:  DATA 20,25
0D0E:  DATA 30,32
0D10:  DATA 58,20
0D12:  DATA 25,30
0D14:  DATA 32,58
0D16:  DATA 0D,00
0D18:  DATA 46,52
0D1A:  DATA 20,25
0D1C:  DATA 6C,75
0D1E:  DATA 0D,00
0D20:  DATA 4D,4F
0D22:  DATA 20,25
0D24:  DATA 75,0D
0D26:  DATA 00,00
0D28:  DATA 44,53
0D2A:  DATA 20,25
0D2C:  DATA 75,0D
0D2E:  DATA 00,00
0D30:  DATA 45,52
0D32:  DATA 52,20
0D34:  DATA 44,53
0D36:  DATA 20,25
0D38:  DATA 75,0D
0D3A:  DATA 00,00
0D3C:  DATA 44,50
0D3E:  DATA 20,25
0D40:  DATA 75,0D
0D42:  DATA 00,00
0D44:  DATA 45,52
0D46:  DATA 52,20
0D48:  DATA 44,50
0D4A:  DATA 20,25
0D4C:  DATA 75,0D
0D4E:  DATA 00,00
0D50:  DATA 44,45
0D52:  DATA 20,25
0D54:  DATA 75,0D
0D56:  DATA 00,00
0D58:  DATA 45,52
0D5A:  DATA 52,20
0D5C:  DATA 44,45
0D5E:  DATA 20,25
0D60:  DATA 75,0D
0D62:  DATA 00,00
0D64:  DATA 52,50
0D66:  DATA 20,25
0D68:  DATA 75,0D
0D6A:  DATA 00,00
0D6C:  DATA 45,52
0D6E:  DATA 52,20
0D70:  DATA 52,50
0D72:  DATA 20,25
0D74:  DATA 75,0D
0D76:  DATA 00,00
0D78:  DATA 52,46
0D7A:  DATA 20,25
0D7C:  DATA 75,0D
0D7E:  DATA 00,00
0D80:  DATA 45,52
0D82:  DATA 52,20
0D84:  DATA 52,46
0D86:  DATA 20,25
0D88:  DATA 75,0D
0D8A:  DATA 00,00
0D8C:  DATA 52,43
0D8E:  DATA 20,25
0D90:  DATA 6C,75
0D92:  DATA 0D,00
0D94:  DATA 52,42
0D96:  DATA 20,25
0D98:  DATA 6C,75
0D9A:  DATA 0D,00
0D9C:  DATA 52,41
0D9E:  DATA 20,25
0DA0:  DATA 75,0D
0DA2:  DATA 00,00
0DA4:  DATA 45,52
0DA6:  DATA 52,20
0DA8:  DATA 52,41
0DAA:  DATA 20,25
0DAC:  DATA 75,0D
0DAE:  DATA 00,00
0DB0:  DATA 55,54
0DB2:  DATA 20,25
0DB4:  DATA 75,0D
0DB6:  DATA 00,00
0DB8:  DATA 45,52
0DBA:  DATA 52,20
0DBC:  DATA 55,54
0DBE:  DATA 20,25
0DC0:  DATA 75,0D
0DC2:  DATA 00,00
0DC4:  DATA 55,53
0DC6:  DATA 20,25
0DC8:  DATA 75,0D
0DCA:  DATA 00,00
0DCC:  DATA 45,52
0DCE:  DATA 52,20
0DD0:  DATA 55,53
0DD2:  DATA 20,25
0DD4:  DATA 75,0D
0DD6:  DATA 00,00
0DD8:  DATA 49,44
0DDA:  DATA 20,25
0DDC:  DATA 75,0D
0DDE:  DATA 00,00
0DE0:  DATA 45,52
0DE2:  DATA 52,20
0DE4:  DATA 49,44
0DE6:  DATA 20,25
0DE8:  DATA 75,0D
0DEA:  DATA 00,00
0DEC:  DATA 49,43
0DEE:  DATA 20,25
0DF0:  DATA 6C,75
0DF2:  DATA 0D,00
0DF4:  DATA 56,45
0DF6:  DATA 20,25
0DF8:  DATA 73,20
0DFA:  DATA 56,53
0DFC:  DATA 20,25
0DFE:  DATA 6C,75
0E00:  DATA 2E,25
0E02:  DATA 6C,75
0E04:  DATA 20,49
0E06:  DATA 44,3D
0E08:  DATA 25,30
0E0A:  DATA 32,6C
0E0C:  DATA 75,20
0E0E:  DATA 44,54
0E10:  DATA 3D,25
0E12:  DATA 30,32
0E14:  DATA 6C,75
0E16:  DATA 25,30
0E18:  DATA 32,75
0E1A:  DATA 0D,00
0E1C:  DATA 56,53
0E1E:  DATA 20,25
0E20:  DATA 6C,75
0E22:  DATA 25,6C
0E24:  DATA 75,0D
0E26:  DATA 00,00
0E28:  DATA 56,50
0E2A:  DATA 20,25
0E2C:  DATA 6C,75
0E2E:  DATA 0D,00
0E30:  DATA 56,4D
0E32:  DATA 20,25
0E34:  DATA 6C,75
0E36:  DATA 0D,00
0E38:  DATA 56,43
0E3A:  DATA 20,25
0E3C:  DATA 6C,75
0E3E:  DATA 0D,00
0E40:  DATA 43,53
0E42:  DATA 20,25
0E44:  DATA 75,0D
0E46:  DATA 00,00
0E48:  DATA 45,52
0E4A:  DATA 52,20
0E4C:  DATA 43,53
0E4E:  DATA 20,25
0E50:  DATA 75,0D
0E52:  DATA 00,00
0E54:  DATA 43,50
0E56:  DATA 20,25
0E58:  DATA 75,0D
0E5A:  DATA 00,00
0E5C:  DATA 45,52
0E5E:  DATA 52,20
0E60:  DATA 43,50
0E62:  DATA 20,25
0E64:  DATA 75,0D
0E66:  DATA 00,00
0E68:  DATA 0A,47
0E6A:  DATA 50,20
0E6C:  DATA 25,6C
0E6E:  DATA 75,0D
0E70:  DATA 0A,00
0E72:  DATA 0A,47
0E74:  DATA 52,20
0E76:  DATA 25,6C
0E78:  DATA 75,0D
0E7A:  DATA 0A,00
0E7C:  DATA 0D,0A
0E7E:  DATA 49,44
0E80:  DATA 3D,25
0E82:  DATA 6C,75
0E84:  DATA 20,44
0E86:  DATA 54,3D
0E88:  DATA 25,30
0E8A:  DATA 32,6C
0E8C:  DATA 75,25
0E8E:  DATA 30,32
0E90:  DATA 75,0D
0E92:  DATA 00,00
0E94:  DATA 0D,0A
0E96:  DATA 0A,46
0E98:  DATA 52,45
0E9A:  DATA 51,3D
0E9C:  DATA 25,6C
0E9E:  DATA 75,2C
0EA0:  DATA 20,52
0EA2:  DATA 45,56
0EA4:  DATA 3D,25
0EA6:  DATA 73,2C
0EA8:  DATA 20,46
0EAA:  DATA 46,57
0EAC:  DATA 52,3D
0EAE:  DATA 25,6C
0EB0:  DATA 75,2C
0EB2:  DATA 20,49
0EB4:  DATA 43,3D
0EB6:  DATA 25,6C
0EB8:  DATA 75,2E
0EBA:  DATA 25,6C
0EBC:  DATA 75,4D
0EBE:  DATA 62,70
0EC0:  DATA 73,2C
0EC2:  DATA 20,4D
0EC4:  DATA 4F,3D
0EC6:  DATA 25,75
0EC8:  DATA 2C,20
0ECA:  DATA 43,53
0ECC:  DATA 3D,25
0ECE:  DATA 75,2C
0ED0:  DATA 20,52
0ED2:  DATA 46,3D
0ED4:  DATA 25,6C
0ED6:  DATA 75,0D
0ED8:  DATA 00,00
0EDA:  DATA 0D,0A
0EDC:  DATA 0A,44
0EDE:  DATA 45,3D
0EE0:  DATA 25,75
0EE2:  DATA 2C,20
0EE4:  DATA 52,41
0EE6:  DATA 3D,25
0EE8:  DATA 75,2C
0EEA:  DATA 20,44
0EEC:  DATA 50,3D
0EEE:  DATA 25,75
0EF0:  DATA 2C,20
0EF2:  DATA 52,50
0EF4:  DATA 3D,25
0EF6:  DATA 6C,75
0EF8:  DATA 2C,20
0EFA:  DATA 44,53
0EFC:  DATA 3D,25
0EFE:  DATA 75,2C
0F00:  DATA 20,49
0F02:  DATA 44,3D
0F04:  DATA 25,75
0F06:  DATA 2C,20
0F08:  DATA 56,4C
0F0A:  DATA 3D,25
0F0C:  DATA 6C,75
0F0E:  DATA 2C,20
0F10:  DATA 52,42
0F12:  DATA 3D,25
0F14:  DATA 6C,75
0F16:  DATA 2C,20
0F18:  DATA 52,43
0F1A:  DATA 3D,25
0F1C:  DATA 6C,75
0F1E:  DATA 2C,20
0F20:  DATA 43,50
0F22:  DATA 3D,25
0F24:  DATA 75,20
0F26:  DATA 20,0D
0F28:  DATA 00,00
0F2A:  DATA 0D,0A
0F2C:  DATA 0A,55
0F2E:  DATA 54,3D
0F30:  DATA 25,75
0F32:  DATA 2C,20
0F34:  DATA 55,53
0F36:  DATA 3D,25
0F38:  DATA 75,20
0F3A:  DATA 42,47
0F3C:  DATA 3D,20
0F3E:  DATA 25,6C
0F40:  DATA 75,20
0F42:  DATA 5B,48
0F44:  DATA 7A,5D
0F46:  DATA 20,25
0F48:  DATA 6C,75
0F4A:  DATA 20,5B
0F4C:  DATA 6D,53
0F4E:  DATA 65,63
0F50:  DATA 5D,0D
0F52:  DATA 00,00
*
1074:  TSTFSZ 01
1076:  BRA    107E
1078:  TSTFSZ 02
107A:  BRA    1080
107C:  BRA    108C
107E:  INCF   02,F
1080:  MOVFF  00,FEE
1084:  DECFSZ 01,F
1086:  BRA    1080
1088:  DECFSZ 02,F
108A:  BRA    1080
108C:  GOTO   10C0 (RETURN)
*
13F4:  MOVLB  2
13F6:  CLRF   x4C
13F8:  CLRF   x4D
13FA:  MOVLW  01
13FC:  MOVWF  x4E
13FE:  CLRF   FDA
1400:  CLRF   FD9
1402:  MOVLW  02
1404:  MOVWF  x51
1406:  MOVLW  44
1408:  MOVWF  x50
140A:  MOVLW  02
140C:  MOVWF  FEA
140E:  MOVLW  48
1410:  MOVWF  FE9
1412:  MOVFF  251,FE2
1416:  MOVFF  250,FE1
141A:  MOVFF  24E,24F
141E:  BCF    FD8.0
1420:  MOVF   FE5,W
1422:  MULWF  FEE
1424:  MOVF   FF3,W
1426:  ADDWFC x4C,F
1428:  MOVF   FF4,W
142A:  ADDWFC x4D,F
142C:  DECFSZ x4F,F
142E:  BRA    141E
1430:  MOVFF  24C,FDE
1434:  MOVFF  24D,24C
1438:  CLRF   x4D
143A:  BTFSC  FD8.0
143C:  INCF   x4D,F
143E:  INCF   x50,F
1440:  BTFSC  FD8.2
1442:  INCF   x51,F
1444:  INCF   x4E,F
1446:  MOVF   x4E,W
1448:  SUBLW  05
144A:  BNZ   140A
144C:  MOVLB  0
144E:  RETURN 0
1450:  BTFSC  FD8.1
1452:  BRA    145C
1454:  MOVLW  02
1456:  MOVWF  FEA
1458:  MOVLW  56
145A:  MOVWF  FE9
145C:  CLRF   00
145E:  CLRF   01
1460:  CLRF   02
1462:  CLRF   03
1464:  MOVLB  2
1466:  CLRF   x56
1468:  CLRF   x57
146A:  CLRF   x58
146C:  CLRF   x59
146E:  MOVF   x55,W
1470:  IORWF  x54,W
1472:  IORWF  x53,W
1474:  IORWF  x52,W
1476:  BZ    14D0
1478:  MOVLW  20
147A:  MOVWF  x5A
147C:  BCF    FD8.0
147E:  RLCF   x4E,F
1480:  RLCF   x4F,F
1482:  RLCF   x50,F
1484:  RLCF   x51,F
1486:  RLCF   x56,F
1488:  RLCF   x57,F
148A:  RLCF   x58,F
148C:  RLCF   x59,F
148E:  MOVF   x55,W
1490:  SUBWF  x59,W
1492:  BNZ   14A4
1494:  MOVF   x54,W
1496:  SUBWF  x58,W
1498:  BNZ   14A4
149A:  MOVF   x53,W
149C:  SUBWF  x57,W
149E:  BNZ   14A4
14A0:  MOVF   x52,W
14A2:  SUBWF  x56,W
14A4:  BNC   14C4
14A6:  MOVF   x52,W
14A8:  SUBWF  x56,F
14AA:  MOVF   x53,W
14AC:  BTFSS  FD8.0
14AE:  INCFSZ x53,W
14B0:  SUBWF  x57,F
14B2:  MOVF   x54,W
14B4:  BTFSS  FD8.0
14B6:  INCFSZ x54,W
14B8:  SUBWF  x58,F
14BA:  MOVF   x55,W
14BC:  BTFSS  FD8.0
14BE:  INCFSZ x55,W
14C0:  SUBWF  x59,F
14C2:  BSF    FD8.0
14C4:  RLCF   00,F
14C6:  RLCF   01,F
14C8:  RLCF   02,F
14CA:  RLCF   03,F
14CC:  DECFSZ x5A,F
14CE:  BRA    147C
14D0:  MOVFF  256,FEF
14D4:  MOVFF  257,FEC
14D8:  MOVFF  258,FEC
14DC:  MOVFF  259,FEC
14E0:  MOVLB  0
14E2:  RETURN 0
*
190E:  MOVLW  B6
1910:  MOVWF  00
1912:  CLRF   03
1914:  CLRF   02
1916:  CLRF   01
1918:  MOVLB  2
191A:  MOVF   x4E,W
191C:  IORWF  x4F,W
191E:  IORWF  x50,W
1920:  IORWF  x51,W
1922:  BNZ   1928
1924:  CLRF   00
1926:  BRA    1942
1928:  BCF    FD8.0
192A:  BTFSC  01.7
192C:  BRA    1940
192E:  RLCF   x4E,F
1930:  RLCF   x4F,F
1932:  RLCF   x50,F
1934:  RLCF   x51,F
1936:  RLCF   03,F
1938:  RLCF   02,F
193A:  RLCF   01,F
193C:  DECFSZ 00,F
193E:  BRA    1928
1940:  BCF    01.7
1942:  MOVLB  0
1944:  GOTO   1BF0 (RETURN)
1948:  MOVLB  2
194A:  MOVF   x4E,W
194C:  BTFSC  FD8.2
194E:  BRA    1A9A
1950:  MOVWF  x5A
1952:  MOVF   x52,W
1954:  BTFSC  FD8.2
1956:  BRA    1A9A
1958:  SUBWF  x5A,F
195A:  BNC   1966
195C:  MOVLW  7F
195E:  ADDWF  x5A,F
1960:  BTFSC  FD8.0
1962:  BRA    1A9A
1964:  BRA    1972
1966:  MOVLW  81
1968:  SUBWF  x5A,F
196A:  BTFSS  FD8.0
196C:  BRA    1A9A
196E:  BTFSC  FD8.2
1970:  BRA    1A9A
1972:  MOVFF  25A,00
1976:  CLRF   01
1978:  CLRF   02
197A:  CLRF   03
197C:  CLRF   x59
197E:  MOVFF  24F,258
1982:  BSF    x58.7
1984:  MOVFF  250,257
1988:  MOVFF  251,256
198C:  MOVLW  19
198E:  MOVWF  x5A
1990:  MOVF   x55,W
1992:  SUBWF  x56,F
1994:  BC    19B0
1996:  MOVLW  01
1998:  SUBWF  x57,F
199A:  BC    19B0
199C:  SUBWF  x58,F
199E:  BC    19B0
19A0:  SUBWF  x59,F
19A2:  BC    19B0
19A4:  INCF   x59,F
19A6:  INCF   x58,F
19A8:  INCF   x57,F
19AA:  MOVF   x55,W
19AC:  ADDWF  x56,F
19AE:  BRA    1A00
19B0:  MOVF   x54,W
19B2:  SUBWF  x57,F
19B4:  BC    19DA
19B6:  MOVLW  01
19B8:  SUBWF  x58,F
19BA:  BC    19DA
19BC:  SUBWF  x59,F
19BE:  BC    19DA
19C0:  INCF   x59,F
19C2:  INCF   x58,F
19C4:  MOVF   x54,W
19C6:  ADDWF  x57,F
19C8:  MOVF   x55,W
19CA:  ADDWF  x56,F
19CC:  BNC   1A00
19CE:  INCF   x57,F
19D0:  BNZ   1A00
19D2:  INCF   x58,F
19D4:  BNZ   1A00
19D6:  INCF   x59,F
19D8:  BRA    1A00
19DA:  MOVF   x53,W
19DC:  IORLW  80
19DE:  SUBWF  x58,F
19E0:  BC    19FE
19E2:  MOVLW  01
19E4:  SUBWF  x59,F
19E6:  BC    19FE
19E8:  INCF   x59,F
19EA:  MOVF   x53,W
19EC:  IORLW  80
19EE:  ADDWF  x58,F
19F0:  MOVF   x54,W
19F2:  ADDWF  x57,F
19F4:  BNC   19C8
19F6:  INCF   x58,F
19F8:  BNZ   19C8
19FA:  INCF   x59,F
19FC:  BRA    19C8
19FE:  BSF    03.0
1A00:  DECFSZ x5A,F
1A02:  BRA    1A06
1A04:  BRA    1A1C
1A06:  BCF    FD8.0
1A08:  RLCF   x56,F
1A0A:  RLCF   x57,F
1A0C:  RLCF   x58,F
1A0E:  RLCF   x59,F
1A10:  BCF    FD8.0
1A12:  RLCF   03,F
1A14:  RLCF   02,F
1A16:  RLCF   01,F
1A18:  RLCF   x5B,F
1A1A:  BRA    1990
1A1C:  BTFSS  x5B.0
1A1E:  BRA    1A2C
1A20:  BCF    FD8.0
1A22:  RRCF   01,F
1A24:  RRCF   02,F
1A26:  RRCF   03,F
1A28:  RRCF   x5B,F
1A2A:  BRA    1A30
1A2C:  DECF   00,F
1A2E:  BZ    1A9A
1A30:  BTFSC  x5B.7
1A32:  BRA    1A70
1A34:  BCF    FD8.0
1A36:  RLCF   x56,F
1A38:  RLCF   x57,F
1A3A:  RLCF   x58,F
1A3C:  RLCF   x59,F
1A3E:  MOVF   x55,W
1A40:  SUBWF  x56,F
1A42:  BC    1A52
1A44:  MOVLW  01
1A46:  SUBWF  x57,F
1A48:  BC    1A52
1A4A:  SUBWF  x58,F
1A4C:  BC    1A52
1A4E:  SUBWF  x59,F
1A50:  BNC   1A86
1A52:  MOVF   x54,W
1A54:  SUBWF  x57,F
1A56:  BC    1A62
1A58:  MOVLW  01
1A5A:  SUBWF  x58,F
1A5C:  BC    1A62
1A5E:  SUBWF  x59,F
1A60:  BNC   1A86
1A62:  MOVF   x53,W
1A64:  IORLW  80
1A66:  SUBWF  x58,F
1A68:  BC    1A70
1A6A:  MOVLW  01
1A6C:  SUBWF  x59,F
1A6E:  BNC   1A86
1A70:  INCF   03,F
1A72:  BNZ   1A86
1A74:  INCF   02,F
1A76:  BNZ   1A86
1A78:  INCF   01,F
1A7A:  BNZ   1A86
1A7C:  INCF   00,F
1A7E:  BZ    1A9A
1A80:  RRCF   01,F
1A82:  RRCF   02,F
1A84:  RRCF   03,F
1A86:  MOVFF  24F,25A
1A8A:  MOVF   x53,W
1A8C:  XORWF  x5A,F
1A8E:  BTFSS  x5A.7
1A90:  BRA    1A96
1A92:  BSF    01.7
1A94:  BRA    1AA2
1A96:  BCF    01.7
1A98:  BRA    1AA2
1A9A:  CLRF   00
1A9C:  CLRF   01
1A9E:  CLRF   02
1AA0:  CLRF   03
1AA2:  MOVLB  0
1AA4:  RETURN 0
1AA6:  MOVLB  2
1AA8:  MOVF   x4E,W
1AAA:  BTFSC  FD8.2
1AAC:  BRA    1B90
1AAE:  MOVWF  00
1AB0:  MOVF   x52,W
1AB2:  BTFSC  FD8.2
1AB4:  BRA    1B90
1AB6:  ADDWF  00,F
1AB8:  BNC   1AC2
1ABA:  MOVLW  81
1ABC:  ADDWF  00,F
1ABE:  BC    1B90
1AC0:  BRA    1ACA
1AC2:  MOVLW  7F
1AC4:  SUBWF  00,F
1AC6:  BNC   1B90
1AC8:  BZ    1B90
1ACA:  MOVFF  24F,256
1ACE:  MOVF   x53,W
1AD0:  XORWF  x56,F
1AD2:  BSF    x4F.7
1AD4:  BSF    x53.7
1AD6:  MOVF   x51,W
1AD8:  MULWF  x55
1ADA:  MOVFF  FF4,258
1ADE:  MOVF   x50,W
1AE0:  MULWF  x54
1AE2:  MOVFF  FF4,03
1AE6:  MOVFF  FF3,257
1AEA:  MULWF  x55
1AEC:  MOVF   FF3,W
1AEE:  ADDWF  x58,F
1AF0:  MOVF   FF4,W
1AF2:  ADDWFC x57,F
1AF4:  MOVLW  00
1AF6:  ADDWFC 03,F
1AF8:  MOVF   x51,W
1AFA:  MULWF  x54
1AFC:  MOVF   FF3,W
1AFE:  ADDWF  x58,F
1B00:  MOVF   FF4,W
1B02:  ADDWFC x57,F
1B04:  MOVLW  00
1B06:  CLRF   02
1B08:  ADDWFC 03,F
1B0A:  ADDWFC 02,F
1B0C:  MOVF   x4F,W
1B0E:  MULWF  x55
1B10:  MOVF   FF3,W
1B12:  ADDWF  x57,F
1B14:  MOVF   FF4,W
1B16:  ADDWFC 03,F
1B18:  MOVLW  00
1B1A:  ADDWFC 02,F
1B1C:  MOVF   x4F,W
1B1E:  MULWF  x54
1B20:  MOVF   FF3,W
1B22:  ADDWF  03,F
1B24:  MOVF   FF4,W
1B26:  ADDWFC 02,F
1B28:  MOVLW  00
1B2A:  CLRF   01
1B2C:  ADDWFC 01,F
1B2E:  MOVF   x51,W
1B30:  MULWF  x53
1B32:  MOVF   FF3,W
1B34:  ADDWF  x57,F
1B36:  MOVF   FF4,W
1B38:  ADDWFC 03,F
1B3A:  MOVLW  00
1B3C:  ADDWFC 02,F
1B3E:  ADDWFC 01,F
1B40:  MOVF   x50,W
1B42:  MULWF  x53
1B44:  MOVF   FF3,W
1B46:  ADDWF  03,F
1B48:  MOVF   FF4,W
1B4A:  ADDWFC 02,F
1B4C:  MOVLW  00
1B4E:  ADDWFC 01,F
1B50:  MOVF   x4F,W
1B52:  MULWF  x53
1B54:  MOVF   FF3,W
1B56:  ADDWF  02,F
1B58:  MOVF   FF4,W
1B5A:  ADDWFC 01,F
1B5C:  INCF   00,F
1B5E:  BTFSC  01.7
1B60:  BRA    1B6C
1B62:  RLCF   x57,F
1B64:  RLCF   03,F
1B66:  RLCF   02,F
1B68:  RLCF   01,F
1B6A:  DECF   00,F
1B6C:  MOVLW  00
1B6E:  BTFSS  x57.7
1B70:  BRA    1B86
1B72:  INCF   03,F
1B74:  ADDWFC 02,F
1B76:  ADDWFC 01,F
1B78:  MOVF   01,W
1B7A:  BNZ   1B86
1B7C:  MOVF   02,W
1B7E:  BNZ   1B86
1B80:  MOVF   03,W
1B82:  BNZ   1B86
1B84:  INCF   00,F
1B86:  BTFSC  x56.7
1B88:  BSF    01.7
1B8A:  BTFSS  x56.7
1B8C:  BCF    01.7
1B8E:  BRA    1B98
1B90:  CLRF   00
1B92:  CLRF   01
1B94:  CLRF   02
1B96:  CLRF   03
1B98:  MOVLB  0
1B9A:  RETURN 0
1B9C:  MOVLB  2
1B9E:  MOVF   x4E,W
1BA0:  SUBLW  B6
1BA2:  MOVWF  x4E
1BA4:  CLRF   03
1BA6:  MOVFF  24F,252
1BAA:  BSF    x4F.7
1BAC:  BCF    FD8.0
1BAE:  RRCF   x4F,F
1BB0:  RRCF   x50,F
1BB2:  RRCF   x51,F
1BB4:  RRCF   03,F
1BB6:  RRCF   02,F
1BB8:  RRCF   01,F
1BBA:  RRCF   00,F
1BBC:  DECFSZ x4E,F
1BBE:  BRA    1BAC
1BC0:  BTFSS  x52.7
1BC2:  BRA    1BDA
1BC4:  COMF   00,F
1BC6:  COMF   01,F
1BC8:  COMF   02,F
1BCA:  COMF   03,F
1BCC:  INCF   00,F
1BCE:  BTFSC  FD8.2
1BD0:  INCF   01,F
1BD2:  BTFSC  FD8.2
1BD4:  INCF   02,F
1BD6:  BTFSC  FD8.2
1BD8:  INCF   03,F
1BDA:  MOVLB  0
1BDC:  RETURN 0
*
24C4:  MOVLW  8E
24C6:  MOVWF  00
24C8:  MOVFF  244,01
24CC:  MOVFF  243,02
24D0:  CLRF   03
24D2:  BTFSS  01.7
24D4:  BRA    24E0
24D6:  COMF   01,F
24D8:  COMF   02,F
24DA:  INCF   02,F
24DC:  BNZ   24E0
24DE:  INCF   01,F
24E0:  MOVF   01,F
24E2:  BNZ   24F6
24E4:  MOVFF  02,01
24E8:  CLRF   02
24EA:  MOVLW  08
24EC:  SUBWF  00,F
24EE:  MOVF   01,F
24F0:  BNZ   24F6
24F2:  CLRF   00
24F4:  BRA    2510
24F6:  BCF    FD8.0
24F8:  BTFSC  01.7
24FA:  BRA    2504
24FC:  RLCF   02,F
24FE:  RLCF   01,F
2500:  DECF   00,F
2502:  BRA    24F6
2504:  MOVLB  2
2506:  BTFSS  x44.7
2508:  BRA    250E
250A:  MOVLB  0
250C:  BRA    2510
250E:  BCF    01.7
2510:  MOVLB  0
2512:  GOTO   27C0 (RETURN)
2516:  MOVLW  80
2518:  BTFSS  FD8.1
251A:  BRA    2520
251C:  MOVLB  2
251E:  XORWF  x48,F
2520:  MOVLB  2
2522:  CLRF   x4D
2524:  CLRF   x4E
2526:  MOVFF  244,24C
252A:  MOVF   x48,W
252C:  XORWF  x4C,F
252E:  MOVF   x43,W
2530:  BTFSC  FD8.2
2532:  BRA    26F2
2534:  MOVWF  x4B
2536:  MOVWF  00
2538:  MOVF   x47,W
253A:  BTFSC  FD8.2
253C:  BRA    2704
253E:  SUBWF  x4B,F
2540:  BTFSC  FD8.2
2542:  BRA    264A
2544:  BNC   25C2
2546:  MOVFF  248,251
254A:  BSF    x51.7
254C:  MOVFF  249,250
2550:  MOVFF  24A,24F
2554:  CLRF   x4E
2556:  BCF    FD8.0
2558:  RRCF   x51,F
255A:  RRCF   x50,F
255C:  RRCF   x4F,F
255E:  RRCF   x4E,F
2560:  DECFSZ x4B,F
2562:  BRA    2554
2564:  BTFSS  x4C.7
2566:  BRA    256E
2568:  BSF    x4D.0
256A:  BRA    272C
256C:  BCF    x4D.0
256E:  BCF    x4B.0
2570:  BSF    x4D.4
2572:  MOVLW  02
2574:  MOVWF  FEA
2576:  MOVLW  46
2578:  MOVWF  FE9
257A:  BRA    2752
257C:  BCF    x4D.4
257E:  BTFSC  x4C.7
2580:  BRA    2596
2582:  BTFSS  x4B.0
2584:  BRA    25AC
2586:  RRCF   x51,F
2588:  RRCF   x50,F
258A:  RRCF   x4F,F
258C:  RRCF   x4E,F
258E:  INCF   00,F
2590:  BTFSC  FD8.2
2592:  BRA    2722
2594:  BRA    25AC
2596:  BTFSC  x51.7
2598:  BRA    25B2
259A:  BCF    FD8.0
259C:  RLCF   x4E,F
259E:  RLCF   x4F,F
25A0:  RLCF   x50,F
25A2:  RLCF   x51,F
25A4:  DECF   00,F
25A6:  BTFSC  FD8.2
25A8:  BRA    2722
25AA:  BRA    2596
25AC:  BSF    x4D.6
25AE:  BRA    268A
25B0:  BCF    x4D.6
25B2:  MOVFF  244,24C
25B6:  BTFSS  x44.7
25B8:  BRA    25BE
25BA:  BSF    x51.7
25BC:  BRA    2714
25BE:  BCF    x51.7
25C0:  BRA    2714
25C2:  MOVFF  247,24B
25C6:  MOVFF  247,00
25CA:  MOVF   x43,W
25CC:  SUBWF  x4B,F
25CE:  MOVFF  244,251
25D2:  BSF    x51.7
25D4:  MOVFF  245,250
25D8:  MOVFF  246,24F
25DC:  CLRF   x4E
25DE:  BCF    FD8.0
25E0:  RRCF   x51,F
25E2:  RRCF   x50,F
25E4:  RRCF   x4F,F
25E6:  RRCF   x4E,F
25E8:  DECFSZ x4B,F
25EA:  BRA    25DC
25EC:  BTFSS  x4C.7
25EE:  BRA    25F6
25F0:  BSF    x4D.1
25F2:  BRA    272C
25F4:  BCF    x4D.1
25F6:  BCF    x4B.0
25F8:  BSF    x4D.5
25FA:  MOVLW  02
25FC:  MOVWF  FEA
25FE:  MOVLW  4A
2600:  MOVWF  FE9
2602:  BRA    2752
2604:  BCF    x4D.5
2606:  BTFSC  x4C.7
2608:  BRA    261E
260A:  BTFSS  x4B.0
260C:  BRA    2634
260E:  RRCF   x51,F
2610:  RRCF   x50,F
2612:  RRCF   x4F,F
2614:  RRCF   x4E,F
2616:  INCF   00,F
2618:  BTFSC  FD8.2
261A:  BRA    2722
261C:  BRA    2634
261E:  BTFSC  x51.7
2620:  BRA    263A
2622:  BCF    FD8.0
2624:  RLCF   x4E,F
2626:  RLCF   x4F,F
2628:  RLCF   x50,F
262A:  RLCF   x51,F
262C:  DECF   00,F
262E:  BTFSC  FD8.2
2630:  BRA    2722
2632:  BRA    261E
2634:  BSF    x4D.7
2636:  BRA    268A
2638:  BCF    x4D.7
263A:  MOVFF  248,24C
263E:  BTFSS  x48.7
2640:  BRA    2646
2642:  BSF    x51.7
2644:  BRA    2714
2646:  BCF    x51.7
2648:  BRA    2714
264A:  MOVFF  248,251
264E:  BSF    x51.7
2650:  MOVFF  249,250
2654:  MOVFF  24A,24F
2658:  BTFSS  x4C.7
265A:  BRA    2664
265C:  BCF    x51.7
265E:  BSF    x4D.2
2660:  BRA    272C
2662:  BCF    x4D.2
2664:  CLRF   x4E
2666:  BCF    x4B.0
2668:  MOVLW  02
266A:  MOVWF  FEA
266C:  MOVLW  46
266E:  MOVWF  FE9
2670:  BRA    2752
2672:  BTFSC  x4C.7
2674:  BRA    26AE
2676:  MOVFF  244,24C
267A:  BTFSS  x4B.0
267C:  BRA    268A
267E:  RRCF   x51,F
2680:  RRCF   x50,F
2682:  RRCF   x4F,F
2684:  RRCF   x4E,F
2686:  INCF   00,F
2688:  BZ    2722
268A:  BTFSS  x4E.7
268C:  BRA    26A4
268E:  INCF   x4F,F
2690:  BNZ   26A4
2692:  INCF   x50,F
2694:  BNZ   26A4
2696:  INCF   x51,F
2698:  BNZ   26A4
269A:  RRCF   x51,F
269C:  RRCF   x50,F
269E:  RRCF   x4F,F
26A0:  INCF   00,F
26A2:  BZ    2722
26A4:  BTFSC  x4D.6
26A6:  BRA    25B0
26A8:  BTFSC  x4D.7
26AA:  BRA    2638
26AC:  BRA    26E6
26AE:  MOVLW  80
26B0:  XORWF  x51,F
26B2:  BTFSS  x51.7
26B4:  BRA    26BE
26B6:  BRA    272C
26B8:  MOVFF  248,24C
26BC:  BRA    26D2
26BE:  MOVFF  244,24C
26C2:  MOVF   x51,F
26C4:  BNZ   26D2
26C6:  MOVF   x50,F
26C8:  BNZ   26D2
26CA:  MOVF   x4F,F
26CC:  BNZ   26D2
26CE:  CLRF   00
26D0:  BRA    2714
26D2:  BTFSC  x51.7
26D4:  BRA    26E6
26D6:  BCF    FD8.0
26D8:  RLCF   x4E,F
26DA:  RLCF   x4F,F
26DC:  RLCF   x50,F
26DE:  RLCF   x51,F
26E0:  DECFSZ 00,F
26E2:  BRA    26D2
26E4:  BRA    2722
26E6:  BTFSS  x4C.7
26E8:  BRA    26EE
26EA:  BSF    x51.7
26EC:  BRA    2714
26EE:  BCF    x51.7
26F0:  BRA    2714
26F2:  MOVFF  247,00
26F6:  MOVFF  248,251
26FA:  MOVFF  249,250
26FE:  MOVFF  24A,24F
2702:  BRA    2714
2704:  MOVFF  243,00
2708:  MOVFF  244,251
270C:  MOVFF  245,250
2710:  MOVFF  246,24F
2714:  MOVFF  251,01
2718:  MOVFF  250,02
271C:  MOVFF  24F,03
2720:  BRA    278A
2722:  CLRF   00
2724:  CLRF   01
2726:  CLRF   02
2728:  CLRF   03
272A:  BRA    278A
272C:  CLRF   x4E
272E:  COMF   x4F,F
2730:  COMF   x50,F
2732:  COMF   x51,F
2734:  COMF   x4E,F
2736:  INCF   x4E,F
2738:  BNZ   2744
273A:  INCF   x4F,F
273C:  BNZ   2744
273E:  INCF   x50,F
2740:  BNZ   2744
2742:  INCF   x51,F
2744:  BTFSC  x4D.0
2746:  BRA    256C
2748:  BTFSC  x4D.1
274A:  BRA    25F4
274C:  BTFSC  x4D.2
274E:  BRA    2662
2750:  BRA    26B8
2752:  MOVF   FEF,W
2754:  ADDWF  x4F,F
2756:  BNC   2762
2758:  INCF   x50,F
275A:  BNZ   2762
275C:  INCF   x51,F
275E:  BTFSC  FD8.2
2760:  BSF    x4B.0
2762:  MOVF   FED,F
2764:  MOVF   FEF,W
2766:  ADDWF  x50,F
2768:  BNC   2770
276A:  INCF   x51,F
276C:  BTFSC  FD8.2
276E:  BSF    x4B.0
2770:  MOVF   FED,F
2772:  MOVF   FEF,W
2774:  BTFSC  FEF.7
2776:  BRA    277A
2778:  XORLW  80
277A:  ADDWF  x51,F
277C:  BTFSC  FD8.0
277E:  BSF    x4B.0
2780:  BTFSC  x4D.4
2782:  BRA    257C
2784:  BTFSC  x4D.5
2786:  BRA    2604
2788:  BRA    2672
278A:  MOVLB  0
278C:  RETURN 0
*
28E6:  MOVLW  8E
28E8:  MOVWF  00
28EA:  MOVLB  1
28EC:  MOVF   xC0,W
28EE:  SUBWF  00,F
28F0:  MOVFF  1C1,02
28F4:  MOVFF  1C2,01
28F8:  BSF    02.7
28FA:  MOVF   00,F
28FC:  BZ    2910
28FE:  BCF    FD8.0
2900:  MOVF   02,F
2902:  BNZ   2908
2904:  MOVF   01,F
2906:  BZ    2910
2908:  RRCF   02,F
290A:  RRCF   01,F
290C:  DECFSZ 00,F
290E:  BRA    28FE
2910:  BTFSS  xC1.7
2912:  BRA    291E
2914:  COMF   01,F
2916:  COMF   02,F
2918:  INCF   01,F
291A:  BTFSC  FD8.2
291C:  INCF   02,F
291E:  MOVLB  0
2920:  GOTO   2984 (RETURN)
*
2B02:  MOVLB  2
2B04:  MOVF   x35,W
2B06:  XORWF  x37,W
2B08:  ANDLW  80
2B0A:  MOVWF  x39
2B0C:  BTFSS  x35.7
2B0E:  BRA    2B1A
2B10:  COMF   x34,F
2B12:  COMF   x35,F
2B14:  INCF   x34,F
2B16:  BTFSC  FD8.2
2B18:  INCF   x35,F
2B1A:  BTFSS  x37.7
2B1C:  BRA    2B28
2B1E:  COMF   x36,F
2B20:  COMF   x37,F
2B22:  INCF   x36,F
2B24:  BTFSC  FD8.2
2B26:  INCF   x37,F
2B28:  MOVF   x34,W
2B2A:  MULWF  x36
2B2C:  MOVFF  FF3,01
2B30:  MOVFF  FF4,00
2B34:  MULWF  x37
2B36:  MOVF   FF3,W
2B38:  ADDWF  00,F
2B3A:  MOVF   x35,W
2B3C:  MULWF  x36
2B3E:  MOVF   FF3,W
2B40:  ADDWFC 00,W
2B42:  MOVWF  02
2B44:  BTFSS  x39.7
2B46:  BRA    2B52
2B48:  COMF   01,F
2B4A:  COMF   02,F
2B4C:  INCF   01,F
2B4E:  BTFSC  FD8.2
2B50:  INCF   02,F
2B52:  MOVLB  0
2B54:  RETURN 0
*
30E0:  MOVFF  1A4,FEA
30E4:  MOVFF  1A3,FE9
30E8:  MOVLB  2
30EA:  MOVFF  24E,FEF
30EE:  INCF   FE9,F
30F0:  BTFSC  FD8.2
30F2:  INCF   FEA,F
30F4:  CLRF   FEF
30F6:  MOVLB  1
30F8:  INCF   xA3,F
30FA:  BTFSC  FD8.2
30FC:  INCF   xA4,F
30FE:  MOVLB  0
3100:  RETURN 0
3102:  TBLRD*+
3104:  MOVFF  FF6,242
3108:  MOVFF  FF7,243
310C:  MOVFF  FF5,24E
3110:  RCALL  30E0
3112:  MOVFF  242,FF6
3116:  MOVFF  243,FF7
311A:  MOVLB  2
311C:  DECFSZ x41,F
311E:  BRA    3122
3120:  BRA    3126
3122:  MOVLB  0
3124:  BRA    3102
3126:  MOVLB  0
3128:  RETURN 0
312A:  MOVFF  FEA,234
312E:  MOVFF  FE9,233
3132:  MOVLB  2
3134:  SWAPF  x2D,W
3136:  IORLW  F0
3138:  MOVWF  x2F
313A:  ADDWF  x2F,F
313C:  ADDLW  E2
313E:  MOVWF  x30
3140:  ADDLW  32
3142:  MOVWF  x32
3144:  MOVF   x2D,W
3146:  ANDLW  0F
3148:  ADDWF  x30,F
314A:  ADDWF  x30,F
314C:  ADDWF  x32,F
314E:  ADDLW  E9
3150:  MOVWF  x31
3152:  ADDWF  x31,F
3154:  ADDWF  x31,F
3156:  SWAPF  x2C,W
3158:  ANDLW  0F
315A:  ADDWF  x31,F
315C:  ADDWF  x32,F
315E:  RLCF   x31,F
3160:  RLCF   x32,F
3162:  COMF   x32,F
3164:  RLCF   x32,F
3166:  MOVF   x2C,W
3168:  ANDLW  0F
316A:  ADDWF  x32,F
316C:  RLCF   x2F,F
316E:  MOVLW  07
3170:  MOVWF  x2E
3172:  MOVLW  0A
3174:  DECF   x31,F
3176:  ADDWF  x32,F
3178:  BNC   3174
317A:  DECF   x30,F
317C:  ADDWF  x31,F
317E:  BNC   317A
3180:  DECF   x2F,F
3182:  ADDWF  x30,F
3184:  BNC   3180
3186:  DECF   x2E,F
3188:  ADDWF  x2F,F
318A:  BNC   3186
318C:  MOVLW  02
318E:  MOVWF  FEA
3190:  MOVLW  2E
3192:  MOVWF  FE9
3194:  MOVLW  07
3196:  ANDWF  x33,W
3198:  BCF    x33.6
319A:  ADDWF  FE9,F
319C:  MOVLW  32
319E:  SUBWF  FE9,W
31A0:  BTFSC  FD8.2
31A2:  BSF    x33.6
31A4:  MOVF   FEF,W
31A6:  MOVWF  00
31A8:  BNZ   31BA
31AA:  BTFSC  x33.6
31AC:  BRA    31BA
31AE:  BTFSC  x33.4
31B0:  BRA    31DC
31B2:  BTFSC  x33.3
31B4:  BRA    31BA
31B6:  MOVLW  20
31B8:  BRA    31C0
31BA:  BSF    x33.3
31BC:  BCF    x33.4
31BE:  MOVLW  30
31C0:  ADDWF  00,F
31C2:  MOVFF  FEA,22D
31C6:  MOVFF  FE9,22C
31CA:  MOVFF  00,24E
31CE:  MOVLB  0
31D0:  RCALL  30E0
31D2:  MOVFF  22D,FEA
31D6:  MOVFF  22C,FE9
31DA:  MOVLB  2
31DC:  MOVF   FEE,W
31DE:  BTFSS  x33.6
31E0:  BRA    319C
31E2:  MOVLB  0
31E4:  RETURN 0
*
324E:  MOVLB  2
3250:  MOVF   x2F,W
3252:  CLRF   01
3254:  SUBWF  x2E,W
3256:  BC    325E
3258:  MOVFF  22E,00
325C:  BRA    3276
325E:  CLRF   00
3260:  MOVLW  08
3262:  MOVWF  x30
3264:  RLCF   x2E,F
3266:  RLCF   00,F
3268:  MOVF   x2F,W
326A:  SUBWF  00,W
326C:  BTFSC  FD8.0
326E:  MOVWF  00
3270:  RLCF   01,F
3272:  DECFSZ x30,F
3274:  BRA    3264
3276:  MOVLB  0
3278:  RETURN 0
327A:  MOVF   01,W
327C:  MOVFF  22C,22E
3280:  MOVLW  64
3282:  MOVLB  2
3284:  MOVWF  x2F
3286:  MOVLB  0
3288:  RCALL  324E
328A:  MOVFF  00,22C
328E:  MOVF   01,W
3290:  MOVLW  30
3292:  BNZ   32A4
3294:  MOVLB  2
3296:  BTFSS  x2D.1
3298:  BRA    32B8
329A:  BTFSC  x2D.3
329C:  BRA    32B8
329E:  BTFSC  x2D.4
32A0:  MOVLW  20
32A2:  BRA    32AC
32A4:  MOVLB  2
32A6:  BCF    x2D.3
32A8:  BCF    x2D.4
32AA:  BSF    x2D.0
32AC:  ADDWF  01,F
32AE:  MOVFF  01,24E
32B2:  MOVLB  0
32B4:  RCALL  30E0
32B6:  MOVLB  2
32B8:  MOVFF  22C,22E
32BC:  MOVLW  0A
32BE:  MOVWF  x2F
32C0:  MOVLB  0
32C2:  RCALL  324E
32C4:  MOVFF  00,22C
32C8:  MOVF   01,W
32CA:  MOVLW  30
32CC:  BNZ   32DE
32CE:  MOVLB  2
32D0:  BTFSC  x2D.3
32D2:  BRA    32E8
32D4:  BTFSS  x2D.0
32D6:  BRA    32E8
32D8:  BTFSC  x2D.4
32DA:  MOVLW  20
32DC:  MOVLB  0
32DE:  ADDWF  01,F
32E0:  MOVFF  01,24E
32E4:  RCALL  30E0
32E6:  MOVLB  2
32E8:  MOVLW  30
32EA:  ADDWF  x2C,F
32EC:  MOVFF  22C,24E
32F0:  MOVLB  0
32F2:  RCALL  30E0
32F4:  RETURN 0
*
3464:  MOVF   FE9,W
3466:  MOVLB  2
3468:  MOVWF  x46
346A:  MOVF   x45,W
346C:  MOVWF  x48
346E:  BZ    34A8
3470:  MOVFF  244,251
3474:  MOVFF  243,250
3478:  MOVFF  242,24F
347C:  MOVFF  241,24E
3480:  CLRF   x55
3482:  CLRF   x54
3484:  MOVLW  20
3486:  MOVWF  x53
3488:  MOVLW  82
348A:  MOVWF  x52
348C:  MOVLB  0
348E:  CALL   1AA6
3492:  MOVFF  03,244
3496:  MOVFF  02,243
349A:  MOVFF  01,242
349E:  MOVFF  00,241
34A2:  MOVLB  2
34A4:  DECFSZ x48,F
34A6:  BRA    3470
34A8:  MOVFF  244,251
34AC:  MOVFF  243,250
34B0:  MOVFF  242,24F
34B4:  MOVFF  241,24E
34B8:  MOVLB  0
34BA:  CALL   1B9C
34BE:  MOVFF  03,244
34C2:  MOVFF  02,243
34C6:  MOVFF  01,242
34CA:  MOVFF  00,241
34CE:  MOVLB  2
34D0:  BTFSS  x44.7
34D2:  BRA    34EE
34D4:  DECF   x46,F
34D6:  BSF    x46.5
34D8:  COMF   x41,F
34DA:  COMF   x42,F
34DC:  COMF   x43,F
34DE:  COMF   x44,F
34E0:  INCF   x41,F
34E2:  BTFSC  FD8.2
34E4:  INCF   x42,F
34E6:  BTFSC  FD8.2
34E8:  INCF   x43,F
34EA:  BTFSC  FD8.2
34EC:  INCF   x44,F
34EE:  MOVLW  3B
34F0:  MOVWF  x4D
34F2:  MOVLW  9A
34F4:  MOVWF  x4C
34F6:  MOVLW  CA
34F8:  MOVWF  x4B
34FA:  CLRF   x4A
34FC:  MOVLW  0A
34FE:  MOVWF  x48
3500:  MOVF   x45,W
3502:  BTFSC  FD8.2
3504:  INCF   x46,F
3506:  BSF    FD8.1
3508:  MOVLW  02
350A:  MOVWF  FEA
350C:  MOVLW  41
350E:  MOVWF  FE9
3510:  MOVFF  244,251
3514:  MOVFF  243,250
3518:  MOVFF  242,24F
351C:  MOVFF  241,24E
3520:  MOVFF  24D,255
3524:  MOVFF  24C,254
3528:  MOVFF  24B,253
352C:  MOVFF  24A,252
3530:  MOVLB  0
3532:  CALL   1450
3536:  MOVF   01,W
3538:  MOVF   00,F
353A:  BNZ   3562
353C:  MOVLB  2
353E:  INCF   x45,W
3540:  SUBWF  x48,W
3542:  BTFSS  FD8.2
3544:  BRA    354A
3546:  MOVLB  0
3548:  BRA    3562
354A:  MOVF   x46,W
354C:  BZ    3568
354E:  ANDLW  0F
3550:  SUBWF  x48,W
3552:  BZ    3556
3554:  BC    35D6
3556:  BTFSC  x46.7
3558:  BRA    35D6
355A:  BTFSC  x46.6
355C:  BRA    3568
355E:  MOVLW  20
3560:  BRA    35CA
3562:  MOVLW  20
3564:  MOVLB  2
3566:  ANDWF  x46,F
3568:  BTFSS  x46.5
356A:  BRA    3588
356C:  BCF    x46.5
356E:  MOVF   x45,W
3570:  BTFSS  FD8.2
3572:  DECF   x46,F
3574:  MOVF   00,W
3576:  MOVWF  x46
3578:  MOVLW  2D
357A:  MOVWF  x4E
357C:  MOVLB  0
357E:  RCALL  30E0
3580:  MOVLB  2
3582:  MOVF   x46,W
3584:  MOVWF  00
3586:  CLRF   x46
3588:  MOVF   x45,W
358A:  SUBWF  x48,W
358C:  BNZ   35A6
358E:  MOVF   00,W
3590:  MOVWF  x46
3592:  MOVLW  2E
3594:  MOVWF  x4E
3596:  MOVLB  0
3598:  RCALL  30E0
359A:  MOVLB  2
359C:  MOVF   x46,W
359E:  MOVWF  00
35A0:  MOVLW  20
35A2:  ANDWF  x46,F
35A4:  MOVLW  00
35A6:  MOVLW  30
35A8:  BTFSS  x46.5
35AA:  BRA    35CA
35AC:  BCF    x46.5
35AE:  MOVF   x45,W
35B0:  BTFSS  FD8.2
35B2:  DECF   x46,F
35B4:  MOVF   00,W
35B6:  MOVWF  x46
35B8:  MOVLW  2D
35BA:  MOVWF  x4E
35BC:  MOVLB  0
35BE:  RCALL  30E0
35C0:  MOVLB  2
35C2:  MOVF   x46,W
35C4:  MOVWF  00
35C6:  CLRF   x46
35C8:  MOVLW  30
35CA:  ADDWF  00,F
35CC:  MOVFF  00,24E
35D0:  MOVLB  0
35D2:  RCALL  30E0
35D4:  MOVLB  2
35D6:  BCF    FD8.1
35D8:  MOVFF  24D,251
35DC:  MOVFF  24C,250
35E0:  MOVFF  24B,24F
35E4:  MOVFF  24A,24E
35E8:  CLRF   x55
35EA:  CLRF   x54
35EC:  CLRF   x53
35EE:  MOVLW  0A
35F0:  MOVWF  x52
35F2:  MOVLB  0
35F4:  CALL   1450
35F8:  MOVFF  03,24D
35FC:  MOVFF  02,24C
3600:  MOVFF  01,24B
3604:  MOVFF  00,24A
3608:  MOVLB  2
360A:  DECFSZ x48,F
360C:  BRA    3506
360E:  MOVLB  0
3610:  GOTO   3668 (RETURN)
*
36B8:  TBLRD*+
36BA:  MOVF   FF5,F
36BC:  BZ    36D6
36BE:  MOVFF  FF6,22C
36C2:  MOVFF  FF7,22D
36C6:  MOVFF  FF5,24E
36CA:  RCALL  30E0
36CC:  MOVFF  22C,FF6
36D0:  MOVFF  22D,FF7
36D4:  BRA    36B8
36D6:  GOTO   4A96 (RETURN)
*
37BA:  CLRF   01
37BC:  CLRF   02
37BE:  CLRF   00
37C0:  CLRF   03
37C2:  MOVLB  2
37C4:  MOVF   x2D,W
37C6:  BNZ   37CC
37C8:  MOVF   x2C,W
37CA:  BZ    37FC
37CC:  MOVLW  10
37CE:  MOVWF  x2E
37D0:  BCF    FD8.0
37D2:  RLCF   x2A,F
37D4:  RLCF   x2B,F
37D6:  RLCF   00,F
37D8:  RLCF   03,F
37DA:  MOVF   x2D,W
37DC:  SUBWF  03,W
37DE:  BNZ   37E4
37E0:  MOVF   x2C,W
37E2:  SUBWF  00,W
37E4:  BNC   37F4
37E6:  MOVF   x2C,W
37E8:  SUBWF  00,F
37EA:  BTFSS  FD8.0
37EC:  DECF   03,F
37EE:  MOVF   x2D,W
37F0:  SUBWF  03,F
37F2:  BSF    FD8.0
37F4:  RLCF   01,F
37F6:  RLCF   02,F
37F8:  DECFSZ x2E,F
37FA:  BRA    37D0
37FC:  MOVLB  0
37FE:  RETURN 0
3800:  MOVF   FEF,F
3802:  BZ    3822
3804:  MOVFF  FEA,22D
3808:  MOVFF  FE9,22C
380C:  MOVFF  FEF,24E
3810:  RCALL  30E0
3812:  MOVFF  22D,FEA
3816:  MOVFF  22C,FE9
381A:  INCF   FE9,F
381C:  BTFSC  FD8.2
381E:  INCF   FEA,F
3820:  BRA    3800
3822:  GOTO   53B8 (RETURN)
*
5792:  MOVFF  FF2,0D
5796:  BCF    FF2.7
5798:  ADDWF  FE8,W
579A:  CLRF   FF7
579C:  RLCF   FF7,F
579E:  ADDLW  B7
57A0:  MOVWF  FF6
57A2:  MOVLW  57
57A4:  ADDWFC FF7,F
57A6:  TBLRD*-
57A8:  MOVF   FF5,W
57AA:  MOVWF  FFA
57AC:  TBLRD*
57AE:  MOVF   FF5,W
57B0:  BTFSC  0D.7
57B2:  BSF    FF2.7
57B4:  MOVWF  FF9
57B6:  DATA D2,44
57B8:  DATA 02,44
57BA:  DATA 10,43
57BC:  DATA EE,45
57BE:  DATA E8,45
57C0:  DATA 4A,41
57C2:  DATA EE,45
57C4:  DATA EE,45
57C6:  DATA EE,45
57C8:  DATA EE,45
57CA:  DATA EE,45
57CC:  DATA D8,45
57CE:  DATA EE,45
57D0:  DATA EE,45
57D2:  DATA EE,45
57D4:  DATA EA,3F
*
5EBE:  MOVLB  2
5EC0:  BTFSC  x09.7
5EC2:  BRA    5EE8
5EC4:  MOVLW  0F
5EC6:  MOVWF  00
5EC8:  SWAPF  x08,W
5ECA:  ANDWF  00,F
5ECC:  MOVLW  0A
5ECE:  SUBWF  00,W
5ED0:  BC    5ED8
5ED2:  MOVLW  30
5ED4:  ADDWF  00,F
5ED6:  BRA    5EDC
5ED8:  MOVF   x09,W
5EDA:  ADDWF  00,F
5EDC:  MOVFF  00,24E
5EE0:  MOVLB  0
5EE2:  CALL   30E0
5EE6:  MOVLB  2
5EE8:  MOVLW  0F
5EEA:  ANDWF  x08,F
5EEC:  MOVLW  0A
5EEE:  SUBWF  x08,W
5EF0:  BC    5EF6
5EF2:  MOVLW  30
5EF4:  BRA    5EFA
5EF6:  BCF    x09.7
5EF8:  MOVF   x09,W
5EFA:  ADDWF  x08,F
5EFC:  MOVFF  208,24E
5F00:  MOVLB  0
5F02:  CALL   30E0
5F06:  RETURN 0
*
6AFC:  MOVFF  FF2,0D
6B00:  BCF    FF2.7
6B02:  ADDWF  FE8,W
6B04:  CLRF   FF7
6B06:  RLCF   FF7,F
6B08:  ADDLW  21
6B0A:  MOVWF  FF6
6B0C:  MOVLW  6B
6B0E:  ADDWFC FF7,F
6B10:  TBLRD*-
6B12:  MOVF   FF5,W
6B14:  MOVWF  FFA
6B16:  TBLRD*
6B18:  MOVF   FF5,W
6B1A:  BTFSC  0D.7
6B1C:  BSF    FF2.7
6B1E:  MOVWF  FF9
6B20:  DATA A0,69
6B22:  DATA A6,69
6B24:  DATA D8,69
6B26:  DATA F8,6A
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(int=16000000) 
*
0C44:  MOVLW  04
0C46:  MOVLB  2
0C48:  SUBWF  x6F,F
0C4A:  BNC   0C60
0C4C:  MOVLW  02
0C4E:  MOVWF  FEA
0C50:  MOVLW  6F
0C52:  MOVWF  FE9
0C54:  MOVF   FEF,W
0C56:  BZ    0C60
0C58:  BRA    0C5C
0C5A:  NOP   
0C5C:  DECFSZ FEF,F
0C5E:  BRA    0C5A
0C60:  MOVLB  0
0C62:  RETURN 0
*
0F54:  MOVLW  02
0F56:  MOVWF  FEA
0F58:  MOVLW  3E
0F5A:  MOVWF  FE9
0F5C:  MOVF   FEF,W
0F5E:  BZ    0F7C
0F60:  MOVLW  05
0F62:  MOVWF  01
0F64:  CLRF   00
0F66:  DECFSZ 00,F
0F68:  BRA    0F66
0F6A:  DECFSZ 01,F
0F6C:  BRA    0F64
0F6E:  MOVLW  2E
0F70:  MOVWF  00
0F72:  DECFSZ 00,F
0F74:  BRA    0F72
0F76:  BRA    0F78
0F78:  DECFSZ FEF,F
0F7A:  BRA    0F60
0F7C:  RETURN 0
.................... //#use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use rs232(baud=38400,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #define UINT  int16 
.................... #define SINT  signed int16 
.................... #define UCHAR int8 
.................... #define ICHAR signed int8 
.................... #define bit   int1 
.................... #define ULONG int32 
.................... #define ILONG signed int32 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
....................  
....................  
.................... //#include <stdlib.h> 
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
.................... #include "PIC18F45K22_registers.h" 
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... #define VERSION "BA1520QTX V1.0" 
.................... #define VER 1 
....................  
.................... //--------- frequency constants -------------------------------- 
.................... #define FREQ_P_MULT           32L 
.................... #define FREQ_BASE        2185000L       // in KHz 
.................... #define FREQ_TOP         2400000L       // in KHz 
.................... #define FREQ_STEP            100L       // in KHz 
.................... #define FREQ_OSC           32000L       // in KHz   //was 10000 changed to 20000 1520Q 
.................... #define FREQ_MOD              ((FREQ_OSC / FREQ_STEP) / RFdiv) 
.................... //#define REFinMUL 		 2L 
....................  
.................... //========== power ============================================= 
.................... UINT low_power_level, power_level, power_control; 
.................... byte bitlow_power_level,bitpower_level;// VERSION 3.3 VP VL Change 29.02.2016 
.................... UINT manual_negative = 0xFFFF; 
....................  
.................... #define A2D_POWER 5 
.................... #define A2D_PREV  4 
.................... #define A2D_TEMP  6 
.................... #define A2D_Vdd   0 
....................  
.................... #define DAC_POS_VOLT 0x2  //0010 - VOUT A 
.................... #define DAC_NEG_VOLT 0x6  //0110 - VOUT B 
.................... #define DAC_CONT_VOLT 0xA //1010 - VOUT C 
....................  
.................... #define FREQ_LOW_THRESH   22570 
.................... #define FREQ_HIGH_THRESH  23290 
....................  
.................... #define DEADBAND 6  //was 6 yehuda 
....................  
.................... #define BINARY_STATUS_LENTGH 26 // requested be the client to be 26 bytes (16.11.16) 
....................  
.................... UINT  manual_pos = 0xFFFF; 
....................  
.................... //========== timer ============================================= 
.................... UCHAR  TMR_1mS_Flags; 
.................... //UCHAR  TMR_1mS_Count; 
.................... UCHAR  TMR_1mS_Cnt; 
.................... UCHAR  TMR_10mS_Count; 
.................... UCHAR  TMR_10mS_Flags; 
.................... UCHAR  TMR_10mS_Cnt; 
.................... UCHAR  TMR_100mS_Flags; 
.................... UCHAR  TMR_100mS_Cnt; 
.................... UCHAR  TMR_1sec_Flags; 
.................... UINT  TMR_SendStatus = 0; 
.................... UCHAR  SendStatusFlag = 0; 
.................... UCHAR  TMR_StartStatus = 0; 
.................... UCHAR  StartStatusFlag = 0; 
....................  
.................... UCHAR timerTick_1ms = 0; 
....................  
....................  
....................  
.................... //#bit TMR_1MS_KEYPAD     = TMR_1mS_Flags.0 
.................... #bit TMR_1MS_DELAY      = TMR_1mS_Flags.1 
....................  
.................... #bit TMR_100mS_BLINK    = TMR_100mS_Flags.0 
.................... #bit TMR_100MS_COMM_TO  = TMR_100mS_Flags.1 
.................... //#bit TMR_100MS_LEDS     = TMR_100mS_Flags.2 
.................... #bit TMR_100MS_POWER    = TMR_100mS_Flags.3 
....................  
.................... //#bit TMR_1sec_DISP_STAT =  TMR_1sec_Flags.0 
.................... //#bit TMR_1sec_RSSI      =  TMR_1sec_Flags.1 
.................... //#bit TMR_1Sec_TEMP      =  TMR_1sec_Flags.2 
....................  
.................... //============= I/O PIN assignments ============================ 
....................  
.................... #define PLL_LAT  PIN_C1 
.................... #define PLL_CLK  PIN_C2 
.................... #define PLL_DAT  PIN_C3 
.................... #define PLL_LD   PIN_C0 
....................  
.................... #define CSN       PIN_B2  // FPGA 
....................  
.................... //#define RS485_EN  PIN_D5 
.................... #define RS485_EN  PIN_D5 
....................  
.................... //#define POWER_CTL PIN_D4 
....................  
.................... #define I_SENSE   PIN_B4     //was LED1 
.................... #define LED1      PIN_B5     //was LED2 
....................  
....................  
.................... #define D2A_RESET PIN_B3 
.................... #define D2A_CSB   PIN_B1 
.................... #define D2A_MOSI  PIN_D4 
.................... #define D2A_MISO  PIN_D1 
.................... #define D2A_SCLK  PIN_D0 
....................  
.................... #define POWER_EN PIN_D6 
.................... #define HILO     PIN_D2 
.................... #define STANDBY  PIN_D7 
.................... #define FPGA_RSTN PIN_C5 
....................  
.................... //========== COM1 variables ==================================== 
.................... #define COM1_RX_LEN 32 
....................  
.................... UCHAR COM1_rcnt; 
.................... UCHAR COM1_rxi; 
.................... UCHAR COM1_rxo; 
.................... UCHAR COM1_rbuf[COM1_RX_LEN]; 
....................  
.................... #define COMM_INIT       0 
.................... #define COMM_WAIT_DLR   1 
.................... #define COMM_WAIT_CR    2 
.................... #define COMM_DELAY      3 
....................  
....................  
.................... #define WAIT_ACK_TO 20 // 200mS wait for ack 
....................  
.................... UCHAR comm_state; 
.................... UCHAR comm_ridx; 
.................... UCHAR comm_buf[80]; 
.................... UINT  comm_timeout; 
....................  
.................... //======= misc ================================================= 
....................  
.................... //----------- setup ---------------------------------------- 
.................... struct { 
....................        UINT  bitrate; 
.................... 	   UINT  pwr; 
....................        UCHAR mode; 
....................        UCHAR clock_polarity; 
....................        UCHAR data_polarity; 
....................        UCHAR clock_source; 
....................        UCHAR data_source; 
....................        UCHAR internal_pattern; 
....................        UCHAR randomizer; 
....................        UCHAR power_high; 
....................        UCHAR SOQPSK; 
....................        UCHAR power_amp; 
....................        UINT  frequency; 
....................        UINT  power_level; 
....................        UCHAR phase_offset; 
....................        UINT  negative_voltage[3]; 
.................... 	   UINT  cont_voltage[3]; 
....................        UINT  power_in[21]; 
....................        UINT  year; 
....................        UCHAR week; 
....................        UINT  unit_ID; 
....................        UINT  power_low_level; 
....................        UINT  cot; 
....................        UINT  rc; 
....................        UINT  rp; 
....................        UCHAR UART_Time; // VERSION 3.3 UT 
....................        UCHAR UART_Status; // VERSION 3.3 US 17.03.2016 
....................        byte bitlow_power_level;// VERSION 3.3  VL Change 21.03.2016 
....................        byte bitpower_level;// VERSION 3.3 VP Change 21.03.2016 
....................        UINT	Block_per_second; // VERSION 3.3  Change 23.03.2016 Data block send speed  
....................        UINT setup_version; // the version of this specific setup 
.................... } setup; 
....................  
.................... UINT allow_write = 0; 
.................... UINT revp;// VERSION 3.3 Revers Power 0-good 1-bad 
.................... SINT current_temperature; 
.................... UINT current_power;// VERSION 3.3  FFWR 02.05.16 
.................... UINT gl_current_power_level = 0; 
.................... UINT gl_current_power_en_value = 0; 
.................... SINT stay_on =0; 
.................... UINT  tx_block_len , TX_Counter = 0; 
.................... UINT  status_tx_index; 
.................... UCHAR status_buffer[BINARY_STATUS_LENTGH];  
....................  
.................... UCHAR ttccp_login = 1;		//yehuda cancel LI17592 
....................  
....................  
.................... //========== function prototypes =============================== 
.................... void set_bitrate(UINT bitrate); 
.................... void send_FPGA_command(UCHAR length, UCHAR *data); 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data); 
.................... UCHAR read_D2A(UCHAR addr); 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din); 
.................... void read_setup(void); 
.................... void write_setup(void); 
.................... void update_all(void); 
.................... void update_FPGA(UCHAR addr, UCHAR value); 
.................... void FPGA_set_reg0(void); 
.................... void FPGA_set_reg6(void); 
.................... void FPGA_set_bitrate(void); 
.................... void init_system(void); 
.................... void power_output(void); 
.................... void COM1_send_block(UINT len);// VERSION 3.3 VP Change 21.03.2016 
.................... UINT convert_power(UINT analog);// VERSION 3.3 VP Change 30.03.2016 
....................  
.................... //========== include source files ============================== 
.................... #include "AD5314.c" 
....................  
.................... #define SW_SPI 
....................  
.................... #define DA2_CLK   PIN_A3 // AD5314 
.................... #define DA2_DAT   PIN_A4 
.................... #define DA2_SYN   PIN_A2 
.................... #define DA2_LAT   PIN_A1 
....................  
.................... void set_AD5314(int8 channel, int16 level) 
.................... { 
.................... 	output_low(DA2_SYN); 
*
10C2:  BCF    F89.2
.................... 	 
.................... //	if (channel) 
.................... //    output_high(DA2_DAT);    // send to VOUTB 
.................... //	else 
.................... //    output_low(DA2_DAT);    // send to VOUTA 
.................... //channel is 4 bit wide  
.................... //bit 3 - address A1 
.................... //bit 2 - address A0 
.................... //bit 1 - if 1 normal operation, if 0 power down (PD) 
.................... //bit 0 - if 1 only address input regs updated no change in the content, if 0 all updated on complition of write 
.................... 	 
.................... 	#ifdef SW_SPI 
.................... 		if(channel & 0x08)			//send bit 15 - A1 
10C4:  MOVLB  2
10C6:  BTFSS  x2E.3
10C8:  BRA    10CE
.................... 		output_high(DA2_DAT); 
10CA:  BSF    F89.4
10CC:  BRA    10D0
.................... 		else  
.................... 		output_low(DA2_DAT); 
10CE:  BCF    F89.4
.................... 		output_high(DA2_CLK);   
10D0:  BSF    F89.3
.................... 		delay_cycles(15); 
10D2:  MOVLW  04
10D4:  MOVWF  00
10D6:  DECFSZ 00,F
10D8:  BRA    10D6
10DA:  BRA    10DC
.................... 		output_low(DA2_CLK); 
10DC:  BCF    F89.3
.................... 		delay_cycles(15); 
10DE:  MOVLW  04
10E0:  MOVWF  00
10E2:  DECFSZ 00,F
10E4:  BRA    10E2
10E6:  BRA    10E8
.................... 		 
.................... 		if(channel & 0x04)			//send bit 14 - A0 
10E8:  BTFSS  x2E.2
10EA:  BRA    10F0
.................... 		output_high(DA2_DAT); 
10EC:  BSF    F89.4
10EE:  BRA    10F2
.................... 		else  
.................... 		output_low(DA2_DAT); 
10F0:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
10F2:  BSF    F89.3
.................... 		delay_cycles(15); 
10F4:  MOVLW  04
10F6:  MOVWF  00
10F8:  DECFSZ 00,F
10FA:  BRA    10F8
10FC:  BRA    10FE
.................... 		output_low(DA2_CLK); 
10FE:  BCF    F89.3
.................... 		delay_cycles(15); 
1100:  MOVLW  04
1102:  MOVWF  00
1104:  DECFSZ 00,F
1106:  BRA    1104
1108:  BRA    110A
.................... 		 
.................... 		if(channel & 0x02)			//send bit 13 - PD - if 1 normal operation, if 0 power down (PD) 
110A:  BTFSS  x2E.1
110C:  BRA    1112
.................... 		output_high(DA2_DAT); 
110E:  BSF    F89.4
1110:  BRA    1114
.................... 		else  
.................... 		output_low(DA2_DAT); 
1112:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
1114:  BSF    F89.3
.................... 		delay_cycles(15); 
1116:  MOVLW  04
1118:  MOVWF  00
111A:  DECFSZ 00,F
111C:  BRA    111A
111E:  BRA    1120
.................... 		output_low(DA2_CLK); 
1120:  BCF    F89.3
.................... 		delay_cycles(15); 
1122:  MOVLW  04
1124:  MOVWF  00
1126:  DECFSZ 00,F
1128:  BRA    1126
112A:  BRA    112C
.................... 		 
.................... 		if(channel & 0x01)			//send bit 12 - LDAC - if 1 only address input regs updated no change in the content, if 0 all updated on complition of write 
112C:  BTFSS  x2E.0
112E:  BRA    1134
.................... 		output_high(DA2_DAT); 
1130:  BSF    F89.4
1132:  BRA    1136
.................... 		else  
.................... 		output_low(DA2_DAT); 
1134:  BCF    F89.4
.................... 		output_high(DA2_CLK); 
1136:  BSF    F89.3
.................... 		delay_cycles(15); 
1138:  MOVLW  04
113A:  MOVWF  00
113C:  DECFSZ 00,F
113E:  BRA    113C
1140:  BRA    1142
.................... 		output_low(DA2_CLK); 
1142:  BCF    F89.3
.................... 		delay_cycles(15); 
1144:  MOVLW  04
1146:  MOVWF  00
1148:  DECFSZ 00,F
114A:  BRA    1148
114C:  BRA    114E
.................... 		 
.................... 		 
.................... 		output_high(DA2_CLK);    	//send bit 11 DATA 
114E:  BSF    F89.3
.................... 		if (level & 0x0200) 
1150:  ANDLW  00
1152:  MOVWF  00
1154:  MOVF   x30,W
1156:  ANDLW  02
1158:  MOVWF  03
115A:  MOVF   00,W
115C:  IORWF  03,W
115E:  BZ    1164
.................... 		output_high(DA2_DAT); 
1160:  BSF    F89.4
1162:  BRA    1166
.................... 		else 
.................... 		output_low(DA2_DAT); 
1164:  BCF    F89.4
.................... 		delay_cycles(15); 
1166:  MOVLW  04
1168:  MOVWF  00
116A:  DECFSZ 00,F
116C:  BRA    116A
116E:  BRA    1170
.................... 		output_low(DA2_CLK); 
1170:  BCF    F89.3
.................... 		delay_cycles(15); 
1172:  MOVLW  04
1174:  MOVWF  00
1176:  DECFSZ 00,F
1178:  BRA    1176
117A:  BRA    117C
.................... 		 
.................... 		output_high(DA2_CLK);  		//send bit 10 DATA 
117C:  BSF    F89.3
.................... 		if (level & 0x0100) 
117E:  ANDLW  00
1180:  MOVWF  00
1182:  MOVF   x30,W
1184:  ANDLW  01
1186:  MOVWF  03
1188:  MOVF   00,W
118A:  IORWF  03,W
118C:  BZ    1192
.................... 		output_high(DA2_DAT); 
118E:  BSF    F89.4
1190:  BRA    1194
.................... 		else 
.................... 		output_low(DA2_DAT); 
1192:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
1194:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 9 DATA 
1196:  BSF    F89.3
.................... 		if (level & 0x0080) 
1198:  MOVF   x2F,W
119A:  ANDLW  80
119C:  MOVWF  00
119E:  CLRF   03
11A0:  MOVF   00,W
11A2:  IORWF  03,W
11A4:  BZ    11AA
.................... 		output_high(DA2_DAT); 
11A6:  BSF    F89.4
11A8:  BRA    11AC
.................... 		else 
.................... 		output_low(DA2_DAT); 
11AA:  BCF    F89.4
.................... 		delay_cycles(15); 
11AC:  MOVLW  04
11AE:  MOVWF  00
11B0:  DECFSZ 00,F
11B2:  BRA    11B0
11B4:  BRA    11B6
.................... 		output_low(DA2_CLK); 
11B6:  BCF    F89.3
.................... 		delay_cycles(15); 
11B8:  MOVLW  04
11BA:  MOVWF  00
11BC:  DECFSZ 00,F
11BE:  BRA    11BC
11C0:  BRA    11C2
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 8 DATA 
11C2:  BSF    F89.3
.................... 		if (level & 0x0040) 
11C4:  MOVF   x2F,W
11C6:  ANDLW  40
11C8:  MOVWF  00
11CA:  CLRF   03
11CC:  MOVF   00,W
11CE:  IORWF  03,W
11D0:  BZ    11D6
.................... 		output_high(DA2_DAT); 
11D2:  BSF    F89.4
11D4:  BRA    11D8
.................... 		else 
.................... 		output_low(DA2_DAT); 
11D6:  BCF    F89.4
.................... 		delay_cycles(15); 
11D8:  MOVLW  04
11DA:  MOVWF  00
11DC:  DECFSZ 00,F
11DE:  BRA    11DC
11E0:  BRA    11E2
.................... 		output_low(DA2_CLK); 
11E2:  BCF    F89.3
.................... 		delay_cycles(15); 
11E4:  MOVLW  04
11E6:  MOVWF  00
11E8:  DECFSZ 00,F
11EA:  BRA    11E8
11EC:  BRA    11EE
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 7 DATA 
11EE:  BSF    F89.3
.................... 		if (level & 0x0020) 
11F0:  MOVF   x2F,W
11F2:  ANDLW  20
11F4:  MOVWF  00
11F6:  CLRF   03
11F8:  MOVF   00,W
11FA:  IORWF  03,W
11FC:  BZ    1202
.................... 		output_high(DA2_DAT); 
11FE:  BSF    F89.4
1200:  BRA    1204
.................... 		else 
.................... 		output_low(DA2_DAT); 
1202:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
1204:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 6 DATA 
1206:  BSF    F89.3
.................... 		if (level & 0x0010) 
1208:  MOVF   x2F,W
120A:  ANDLW  10
120C:  MOVWF  00
120E:  CLRF   03
1210:  MOVF   00,W
1212:  IORWF  03,W
1214:  BZ    121A
.................... 		output_high(DA2_DAT); 
1216:  BSF    F89.4
1218:  BRA    121C
.................... 		else 
.................... 		output_low(DA2_DAT); 
121A:  BCF    F89.4
.................... 		delay_cycles(15); 
121C:  MOVLW  04
121E:  MOVWF  00
1220:  DECFSZ 00,F
1222:  BRA    1220
1224:  BRA    1226
.................... 		output_low(DA2_CLK); 
1226:  BCF    F89.3
.................... 		delay_cycles(15); 
1228:  MOVLW  04
122A:  MOVWF  00
122C:  DECFSZ 00,F
122E:  BRA    122C
1230:  BRA    1232
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 5 DATA 
1232:  BSF    F89.3
.................... 		if (level & 0x0008) 
1234:  MOVF   x2F,W
1236:  ANDLW  08
1238:  MOVWF  00
123A:  CLRF   03
123C:  MOVF   00,W
123E:  IORWF  03,W
1240:  BZ    1246
.................... 		output_high(DA2_DAT); 
1242:  BSF    F89.4
1244:  BRA    1248
.................... 		else 
.................... 		output_low(DA2_DAT); 
1246:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
1248:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 4 DATA 
124A:  BSF    F89.3
.................... 		if (level & 0x0004) 
124C:  MOVF   x2F,W
124E:  ANDLW  04
1250:  MOVWF  00
1252:  CLRF   03
1254:  MOVF   00,W
1256:  IORWF  03,W
1258:  BZ    125E
.................... 		output_high(DA2_DAT); 
125A:  BSF    F89.4
125C:  BRA    1260
.................... 		else 
.................... 		output_low(DA2_DAT); 
125E:  BCF    F89.4
.................... 		delay_cycles(15); 
1260:  MOVLW  04
1262:  MOVWF  00
1264:  DECFSZ 00,F
1266:  BRA    1264
1268:  BRA    126A
.................... 		output_low(DA2_CLK); 
126A:  BCF    F89.3
.................... 		delay_cycles(15); 
126C:  MOVLW  04
126E:  MOVWF  00
1270:  DECFSZ 00,F
1272:  BRA    1270
1274:  BRA    1276
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 3 DATA 
1276:  BSF    F89.3
.................... 		if (level & 0x0002) 
1278:  MOVF   x2F,W
127A:  ANDLW  02
127C:  MOVWF  00
127E:  CLRF   03
1280:  MOVF   00,W
1282:  IORWF  03,W
1284:  BZ    128A
.................... 		output_high(DA2_DAT); 
1286:  BSF    F89.4
1288:  BRA    128C
.................... 		else 
.................... 		output_low(DA2_DAT); 
128A:  BCF    F89.4
.................... 		output_low(DA2_CLK); 
128C:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 2 DATA 
128E:  BSF    F89.3
.................... 		if (level & 0x0001) 
1290:  MOVF   x2F,W
1292:  ANDLW  01
1294:  MOVWF  00
1296:  CLRF   03
1298:  MOVF   00,W
129A:  IORWF  03,W
129C:  BZ    12A2
.................... 		output_high(DA2_DAT); 
129E:  BSF    F89.4
12A0:  BRA    12A4
.................... 		else 
.................... 		output_low(DA2_DAT); 
12A2:  BCF    F89.4
.................... 		delay_cycles(15); 
12A4:  MOVLW  04
12A6:  MOVWF  00
12A8:  DECFSZ 00,F
12AA:  BRA    12A8
12AC:  BRA    12AE
.................... 		output_low(DA2_CLK); 
12AE:  BCF    F89.3
.................... 		delay_cycles(15); 
12B0:  MOVLW  04
12B2:  MOVWF  00
12B4:  DECFSZ 00,F
12B6:  BRA    12B4
12B8:  BRA    12BA
.................... 		 
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 1 X dont care 
12BA:  BSF    F89.3
.................... 		delay_cycles(15); 
12BC:  MOVLW  04
12BE:  MOVWF  00
12C0:  DECFSZ 00,F
12C2:  BRA    12C0
12C4:  BRA    12C6
.................... 		output_low(DA2_CLK); 
12C6:  BCF    F89.3
.................... 		 
.................... 		output_high(DA2_CLK);		//send bit 0 X dont care 
12C8:  BSF    F89.3
.................... 		delay_cycles(15); 
12CA:  MOVLW  04
12CC:  MOVWF  00
12CE:  DECFSZ 00,F
12D0:  BRA    12CE
12D2:  BRA    12D4
.................... 		delay_cycles(15); 
12D4:  MOVLW  04
12D6:  MOVWF  00
12D8:  DECFSZ 00,F
12DA:  BRA    12D8
12DC:  BRA    12DE
.................... 		output_low(DA2_CLK); 
12DE:  BCF    F89.3
.................... 		delay_cycles(15); 
12E0:  MOVLW  04
12E2:  MOVWF  00
12E4:  DECFSZ 00,F
12E6:  BRA    12E4
12E8:  BRA    12EA
.................... 		#else						//this else is for #ifdef SW_SPI above   
.................... 		level = (level << 2) | 0x8000; 
.................... 		SPI2BUF = (AD5314,make8(level,1)); 
.................... 		delay_cycles(15); 
.................... 		SPI2BUF = (AD5314,make8(level,0)); 
.................... 		delay_cycles(15); 
.................... 	#endif 
.................... 	 
.................... 	output_high(DA2_SYN); 
12EA:  BSF    F89.2
.................... 	delay_cycles(15); 
12EC:  MOVLW  04
12EE:  MOVWF  00
12F0:  DECFSZ 00,F
12F2:  BRA    12F0
12F4:  BRA    12F6
.................... 	output_low(DA2_LAT); 
12F6:  BCF    F89.1
.................... 	delay_cycles(15); 
12F8:  MOVLW  04
12FA:  MOVWF  00
12FC:  DECFSZ 00,F
12FE:  BRA    12FC
1300:  BRA    1302
.................... 	output_high(DA2_LAT); 
1302:  BSF    F89.1
.................... 	delay_cycles(15); 
1304:  MOVLW  04
1306:  MOVWF  00
1308:  DECFSZ 00,F
130A:  BRA    1308
130C:  BRA    130E
130E:  MOVLB  0
1310:  RETURN 0
.................... } 
....................  
.................... #include "AD9746.c" 
.................... //============================================================================= 
.................... UCHAR read_D2A(UCHAR addr) 
.................... { 
.................... 	UCHAR dout, ix; 
.................... 	output_low(D2A_CSB); 
*
61FA:  BCF    F8A.1
.................... 	addr |= 0x80; 
61FC:  MOVLB  2
61FE:  BSF    x08.7
.................... 	for (ix = 0; ix < 8; ix++, addr <<= 1) 
6200:  CLRF   x0A
6202:  MOVF   x0A,W
6204:  SUBLW  07
6206:  BNC   622E
....................     { 
.................... 		output_bit(D2A_MOSI, (addr & 0x80) != 0); 
6208:  MOVF   x08,W
620A:  ANDLW  80
620C:  BNZ   6212
620E:  BCF    F8C.4
6210:  BRA    6214
6212:  BSF    F8C.4
.................... 		delay_us(1); 
6214:  BRA    6216
6216:  BRA    6218
.................... 		output_high(D2A_SCLK); 
6218:  BSF    F8C.0
.................... 		delay_us(1); 
621A:  BRA    621C
621C:  BRA    621E
.................... 		output_low(D2A_SCLK); 
621E:  BCF    F8C.0
.................... 		delay_us(1); 
6220:  BRA    6222
6222:  BRA    6224
6224:  MOVF   x0A,W
6226:  INCF   x0A,F
6228:  BCF    FD8.0
622A:  RLCF   x08,F
622C:  BRA    6202
.................... 	} 
.................... 	for (ix = 0; ix < 8; ix++) 
622E:  CLRF   x0A
6230:  MOVF   x0A,W
6232:  SUBLW  07
6234:  BNC   6250
....................     { 
.................... 		output_high(D2A_SCLK); 
6236:  BSF    F8C.0
.................... 		delay_us(1); 
6238:  BRA    623A
623A:  BRA    623C
.................... 		output_low(D2A_SCLK); 
623C:  BCF    F8C.0
.................... 		delay_us(1); 
623E:  BRA    6240
6240:  BRA    6242
.................... 		dout <<= 1; 
6242:  BCF    FD8.0
6244:  RLCF   x09,F
.................... 		if (input(D2A_MISO)) 
6246:  BTFSS  F83.1
6248:  BRA    624C
.................... 		dout |= 1; 
624A:  BSF    x09.0
624C:  INCF   x0A,F
624E:  BRA    6230
.................... 	} 
.................... 	output_high(D2A_CSB); 
6250:  BSF    F8A.1
.................... 	return dout; 
6252:  MOVFF  209,01
6256:  MOVLB  0
6258:  GOTO   66B4 (RETURN)
.................... } 
....................  
.................... //============================================================================= 
.................... UCHAR write_D2A(UCHAR addr, UCHAR din) 
.................... { 
.................... 	UCHAR dout, ix; 
.................... 	output_low(D2A_CSB); 
*
593E:  BCF    F8A.1
.................... 	//  addr |= 0x80; 
.................... 	for (ix = 0; ix < 8; ix++, addr <<= 1) 
5940:  MOVLB  2
5942:  CLRF   x0B
5944:  MOVF   x0B,W
5946:  SUBLW  07
5948:  BNC   5970
....................     { 
.................... 		output_bit(D2A_MOSI, (addr & 0x80) != 0); 
594A:  MOVF   x08,W
594C:  ANDLW  80
594E:  BNZ   5954
5950:  BCF    F8C.4
5952:  BRA    5956
5954:  BSF    F8C.4
.................... 		delay_us(1); 
5956:  BRA    5958
5958:  BRA    595A
.................... 		output_high(D2A_SCLK); 
595A:  BSF    F8C.0
.................... 		delay_us(1); 
595C:  BRA    595E
595E:  BRA    5960
.................... 		output_low(D2A_SCLK); 
5960:  BCF    F8C.0
.................... 		delay_us(1); 
5962:  BRA    5964
5964:  BRA    5966
5966:  MOVF   x0B,W
5968:  INCF   x0B,F
596A:  BCF    FD8.0
596C:  RLCF   x08,F
596E:  BRA    5944
.................... 	} 
.................... 	for (ix = 0; ix < 8; ix++, din <<= 1) 
5970:  CLRF   x0B
5972:  MOVF   x0B,W
5974:  SUBLW  07
5976:  BNC   599E
....................     { 
.................... 		output_bit(D2A_MOSI, (din & 0x80) != 0); 
5978:  MOVF   x09,W
597A:  ANDLW  80
597C:  BNZ   5982
597E:  BCF    F8C.4
5980:  BRA    5984
5982:  BSF    F8C.4
.................... 		delay_us(1); 
5984:  BRA    5986
5986:  BRA    5988
.................... 		output_high(D2A_SCLK); 
5988:  BSF    F8C.0
.................... 		delay_us(1); 
598A:  BRA    598C
598C:  BRA    598E
.................... 		output_low(D2A_SCLK); 
598E:  BCF    F8C.0
.................... 		delay_us(1); 
5990:  BRA    5992
5992:  BRA    5994
5994:  MOVF   x0B,W
5996:  INCF   x0B,F
5998:  BCF    FD8.0
599A:  RLCF   x09,F
599C:  BRA    5972
.................... 	} 
.................... 	output_high(D2A_CSB); 
599E:  BSF    F8A.1
.................... 	return dout; 
59A0:  MOVFF  20A,01
59A4:  MOVLB  0
59A6:  RETURN 0
.................... } 
....................  
....................  
.................... #include "ADRF6703.c" 
.................... /* 
.................... 	REGISTERS FRO PLL ADF4350: 
.................... 	Flow= 2185MHz 
.................... 	Fhigh=2400MHz 
.................... 	Steps: 100KHz 
.................... 	Ref : 10MHz 
.................... 	Phase Detector: 10MHz 
.................... 	 
.................... 	REG0 = Calculated 
.................... 	REG1= Calculated 
.................... 	REG2=0x000002 
.................... 	REG3=0x70000b 
.................... 	REG4=0x02a7a4 
.................... 	REG5=0x0000e5 
.................... 	REG6=0x0000e5 
.................... 	REG7=0x1edd06 
.................... 	REg8=0x000007 
.................... 	 
.................... 	Examples for REG0, REG1: 
.................... 	2185MHz 
.................... 	REG0:DA8000 
.................... 	REG1: 8008191 
.................... 	 
.................... 	2300MHz 
.................... 	REG0:E60000 
.................... 	REG1: 8008191 
.................... 	 
.................... */ 
....................  
....................  
.................... //--------- ADF4350 handling functions ------------------------- 
....................  
.................... //ULONG  PLL_int, PLL_frac, PLL_mod, PLL_frequency, PLL_RFdiv; 
.................... ULONG  PLL_int, PLL_frac, PLL_mod; 
.................... /* 
.................... 	#define PLL_CLK       PIN_C2 
.................... 	#define PLL_DAT       PIN_C3 
.................... 	#define PLL_LAT       PIN_C1 
.................... */ 
....................  
.................... void PLL_send_bits(UCHAR data) 
.................... { 
.................... 	UCHAR count; 
.................... 	for (count = 8; count ; count--, data <<= 1) 
*
1722:  MOVLW  08
1724:  MOVLB  2
1726:  MOVWF  x38
1728:  MOVF   x38,F
172A:  BZ    1768
....................     { 
.................... 		if (data & 0X80)                 
172C:  BTFSS  x37.7
172E:  BRA    1734
.................... 		output_high(PLL_DAT); 
1730:  BSF    F8B.3
1732:  BRA    1736
.................... 		else 
.................... 		output_low(PLL_DAT); 
1734:  BCF    F8B.3
.................... 		delay_us(10); 
1736:  MOVLW  0C
1738:  MOVWF  00
173A:  DECFSZ 00,F
173C:  BRA    173A
173E:  BRA    1740
1740:  NOP   
.................... 		output_high(PLL_CLK); 
1742:  BSF    F8B.2
.................... 		delay_us(10); 
1744:  MOVLW  0C
1746:  MOVWF  00
1748:  DECFSZ 00,F
174A:  BRA    1748
174C:  BRA    174E
174E:  NOP   
.................... 		output_low(PLL_CLK); 
1750:  BCF    F8B.2
.................... 		 
.................... 		delay_us(25); 
1752:  MOVLW  20
1754:  MOVWF  00
1756:  DECFSZ 00,F
1758:  BRA    1756
175A:  BRA    175C
175C:  NOP   
175E:  MOVF   x38,W
1760:  DECF   x38,F
1762:  BCF    FD8.0
1764:  RLCF   x37,F
1766:  BRA    1728
.................... 	} 
.................... 	output_low(PLL_DAT); 
1768:  BCF    F8B.3
.................... 	output_low(PLL_CLK); 
176A:  BCF    F8B.2
176C:  MOVLB  0
176E:  RETURN 0
.................... } 
....................  
.................... void PLL_send_word(ULONG prog) 
.................... { 
.................... 	restart_wdt(); 
1770:  CLRWDT
.................... 	disable_interrupts(GLOBAL); 
1772:  BCF    FF2.6
1774:  BCF    FF2.7
1776:  BTFSC  FF2.7
1778:  BRA    1774
.................... 	//PLL_send_bits(make8(prog, 3));               // send LSB 
.................... 	PLL_send_bits(make8(prog, 2));               // send LSB 
177A:  MOVFF  234,236
177E:  MOVFF  234,237
1782:  RCALL  1722
.................... 	PLL_send_bits(make8(prog, 1));               // send middle byte 
1784:  MOVFF  233,236
1788:  MOVFF  233,237
178C:  RCALL  1722
.................... 	PLL_send_bits(make8(prog, 0));               // send MSB 
178E:  MOVFF  232,236
1792:  MOVFF  232,237
1796:  RCALL  1722
.................... 	delay_us(40); 
1798:  MOVLW  34
179A:  MOVWF  00
179C:  DECFSZ 00,F
179E:  BRA    179C
17A0:  BRA    17A2
17A2:  NOP   
.................... 	output_high(PLL_LAT);                 // latch 24 bits into register 
17A4:  BSF    F8B.1
.................... 	delay_us(5); 
17A6:  MOVLW  06
17A8:  MOVWF  00
17AA:  DECFSZ 00,F
17AC:  BRA    17AA
17AE:  NOP   
.................... 	output_low(PLL_LAT);                 // latch 24 bits into register 
17B0:  BCF    F8B.1
.................... 	output_low(PLL_DAT);                 // latch 24 bits into register 
17B2:  BCF    F8B.3
.................... 	enable_interrupts(GLOBAL); 
17B4:  MOVLW  C0
17B6:  IORWF  FF2,F
.................... 	restart_wdt(); 
17B8:  CLRWDT
17BA:  RETURN 0
.................... } 
....................  
.................... //                                    R0          R1            R2          R3           R4           R5 
.................... //const ULONG PLL_REGISTERS[6] = { 0x00DC0000L, 0x08008191L, 0x18005EC2L, 0x000004B3L, 0x0095003CL, 0x00400000L }; 
.................... //const ULONG PLL_REGISTERS[8] = { 0x0001e0L, 0x003201L, 0x000002L, 0x70000bL, 0x02a7a4L, 0x0000e5L, 0x1edd06L, 0x000007L }; 
.................... const ULONG PLL_REGISTERS[8] = { 0x0001c8L, 0x000c81L, 0x000642L, 0x70000bL, 0x02a7a4L, 0x0000e5L, 0x1edd06L, 0x000007L }; 
....................  
.................... void PLL_initialize(void) 
.................... { 
.................... 	ULONG prog; 
.................... 	UCHAR idx, count; 
.................... 	for (count = 0, idx = 7; count < 8; count++, idx--) 
*
2124:  MOVLB  1
2126:  CLRF   xBD
2128:  MOVLW  07
212A:  MOVWF  xBC
212C:  MOVF   xBD,W
212E:  SUBLW  07
2130:  BNC   21A2
....................     { 
.................... 		prog = PLL_REGISTERS[idx]; 
2132:  MOVF   xBC,W
2134:  MULLW  04
2136:  MOVF   FF3,W
2138:  CLRF   03
213A:  MOVFF  FF2,1BE
213E:  BCF    FF2.7
2140:  MOVLB  0
2142:  CALL   00D2
2146:  TBLRD*+
2148:  MOVFF  FF5,01
214C:  TBLRD*+
214E:  MOVFF  FF5,02
2152:  TBLRD*+
2154:  MOVFF  FF5,03
2158:  MOVLB  1
215A:  BTFSC  xBE.7
215C:  BSF    FF2.7
215E:  MOVFF  03,1BB
2162:  MOVFF  02,1BA
2166:  MOVFF  01,1B9
216A:  MOVWF  xB8
.................... 		prog |= (ULONG)idx; 
216C:  CLRF   01
216E:  CLRF   02
2170:  CLRF   03
2172:  MOVF   xBC,W
2174:  IORWF  xB8,F
2176:  MOVF   01,W
2178:  IORWF  xB9,F
217A:  MOVF   02,W
217C:  IORWF  xBA,F
217E:  MOVF   03,W
2180:  IORWF  xBB,F
.................... 		PLL_send_word(prog); 
2182:  MOVFF  1BB,235
2186:  MOVFF  1BA,234
218A:  MOVFF  1B9,233
218E:  MOVFF  1B8,232
2192:  MOVLB  0
2194:  CALL   1770
2198:  MOVLB  1
219A:  MOVF   xBD,W
219C:  INCF   xBD,F
219E:  DECF   xBC,F
21A0:  BRA    212C
.................... 	} 
.................... 	delay_ms(250); 
21A2:  MOVLW  FA
21A4:  MOVLB  2
21A6:  MOVWF  x3E
21A8:  MOVLB  0
21AA:  CALL   0F54
.................... 	PLL_send_word(prog); 
21AE:  MOVFF  1BB,235
21B2:  MOVFF  1BA,234
21B6:  MOVFF  1B9,233
21BA:  MOVFF  1B8,232
21BE:  CALL   1770
.................... 	delay_ms(250); 
21C2:  MOVLW  FA
21C4:  MOVLB  2
21C6:  MOVWF  x3E
21C8:  MOVLB  0
21CA:  CALL   0F54
21CE:  GOTO   6C80 (RETURN)
.................... } 
....................  
.................... //--------- frequency computation functions -------------------- 
.................... //the ADRF software use clock 38.4 clock, here i use 20.0 clock 
.................... void PLL_compute_freq_parameters(UINT Frequest) 
*
14E4:  MOVLB  2
14E6:  CLRF   x3F
14E8:  CLRF   x3E
14EA:  CLRF   x3D
14EC:  MOVLW  02
14EE:  MOVWF  x3C
.................... { 
.................... 	ULONG Fvco, D, RFdiv = 2; 
.................... 	restart_wdt(); 
14F0:  CLRWDT
.................... 	D = Frequest; 
14F2:  CLRF   x3B
14F4:  CLRF   x3A
14F6:  MOVFF  233,239
14FA:  MOVFF  232,238
.................... 	if (Frequest >= 22000) 
14FE:  MOVF   x33,W
1500:  SUBLW  54
1502:  BC    1518
1504:  XORLW  FF
1506:  BNZ   150E
1508:  MOVF   x32,W
150A:  SUBLW  EF
150C:  BC    1518
....................     { 
.................... 		RFdiv = 1; 
150E:  CLRF   x3F
1510:  CLRF   x3E
1512:  CLRF   x3D
1514:  MOVLW  01
1516:  MOVWF  x3C
.................... 	} 
.................... 	restart_wdt(); 
1518:  CLRWDT
.................... 	D = D * RFdiv * FREQ_STEP; 
151A:  MOVFF  23B,247
151E:  MOVFF  23A,246
1522:  MOVFF  239,245
1526:  MOVFF  238,244
152A:  MOVFF  23F,24B
152E:  MOVFF  23E,24A
1532:  MOVFF  23D,249
1536:  MOVFF  23C,248
153A:  MOVLB  0
153C:  RCALL  13F4
153E:  MOVFF  03,243
1542:  MOVFF  02,242
1546:  MOVFF  01,241
154A:  MOVFF  00,240
154E:  MOVFF  03,247
1552:  MOVFF  02,246
1556:  MOVFF  01,245
155A:  MOVFF  00,244
155E:  MOVLB  2
1560:  CLRF   x4B
1562:  CLRF   x4A
1564:  CLRF   x49
1566:  MOVLW  64
1568:  MOVWF  x48
156A:  MOVLB  0
156C:  RCALL  13F4
156E:  MOVFF  03,23B
1572:  MOVFF  02,23A
1576:  MOVFF  01,239
157A:  MOVFF  00,238
.................... 	restart_wdt(); 
157E:  CLRWDT
.................... 	PLL_int = D / FREQ_OSC; 
1580:  BCF    FD8.1
1582:  MOVFF  23B,251
1586:  MOVFF  23A,250
158A:  MOVFF  239,24F
158E:  MOVFF  238,24E
1592:  MOVLB  2
1594:  CLRF   x55
1596:  CLRF   x54
1598:  MOVLW  7D
159A:  MOVWF  x53
159C:  CLRF   x52
159E:  MOVLB  0
15A0:  RCALL  1450
15A2:  MOVFF  03,138
15A6:  MOVFF  02,137
15AA:  MOVFF  01,136
15AE:  MOVFF  00,135
.................... 	restart_wdt(); 
15B2:  CLRWDT
.................... 	PLL_frac = (D - (PLL_int * FREQ_OSC)) / (FREQ_STEP * RFdiv); 
15B4:  MOVFF  138,247
15B8:  MOVFF  137,246
15BC:  MOVFF  136,245
15C0:  MOVFF  135,244
15C4:  MOVLB  2
15C6:  CLRF   x4B
15C8:  CLRF   x4A
15CA:  MOVLW  7D
15CC:  MOVWF  x49
15CE:  CLRF   x48
15D0:  MOVLB  0
15D2:  RCALL  13F4
15D4:  MOVF   00,W
15D6:  MOVLB  2
15D8:  SUBWF  x38,W
15DA:  MOVWF  x40
15DC:  MOVF   01,W
15DE:  SUBWFB x39,W
15E0:  MOVWF  x41
15E2:  MOVF   02,W
15E4:  SUBWFB x3A,W
15E6:  MOVWF  x42
15E8:  MOVF   03,W
15EA:  SUBWFB x3B,W
15EC:  MOVWF  x43
15EE:  CLRF   x47
15F0:  CLRF   x46
15F2:  CLRF   x45
15F4:  MOVLW  64
15F6:  MOVWF  x44
15F8:  MOVFF  23F,24B
15FC:  MOVFF  23E,24A
1600:  MOVFF  23D,249
1604:  MOVFF  23C,248
1608:  MOVLB  0
160A:  RCALL  13F4
160C:  MOVFF  03,247
1610:  MOVFF  02,246
1614:  MOVFF  01,245
1618:  MOVFF  00,244
161C:  BCF    FD8.1
161E:  MOVFF  243,251
1622:  MOVFF  242,250
1626:  MOVFF  241,24F
162A:  MOVFF  240,24E
162E:  MOVFF  03,255
1632:  MOVFF  02,254
1636:  MOVFF  01,253
163A:  MOVFF  00,252
163E:  RCALL  1450
1640:  MOVFF  03,13C
1644:  MOVFF  02,13B
1648:  MOVFF  01,13A
164C:  MOVFF  00,139
.................... 	PLL_mod = (FREQ_MOD << 3) + 1L; 
1650:  BCF    FD8.1
1652:  MOVLB  2
1654:  CLRF   x51
1656:  CLRF   x50
1658:  MOVLW  01
165A:  MOVWF  x4F
165C:  MOVLW  40
165E:  MOVWF  x4E
1660:  MOVFF  23F,255
1664:  MOVFF  23E,254
1668:  MOVFF  23D,253
166C:  MOVFF  23C,252
1670:  MOVLB  0
1672:  RCALL  1450
1674:  MOVFF  03,243
1678:  MOVFF  02,242
167C:  MOVFF  01,241
1680:  MOVFF  00,240
1684:  MOVLB  2
1686:  RLCF   x40,F
1688:  RLCF   x41,F
168A:  RLCF   x42,F
168C:  RLCF   x43,F
168E:  RLCF   x40,F
1690:  RLCF   x41,F
1692:  RLCF   x42,F
1694:  RLCF   x43,F
1696:  RLCF   x40,F
1698:  RLCF   x41,F
169A:  RLCF   x42,F
169C:  RLCF   x43,F
169E:  MOVLW  F8
16A0:  ANDWF  x40,F
16A2:  MOVLW  01
16A4:  ADDWF  x40,W
16A6:  MOVLB  1
16A8:  MOVWF  x3D
16AA:  MOVLW  00
16AC:  MOVLB  2
16AE:  ADDWFC x41,W
16B0:  MOVLB  1
16B2:  MOVWF  x3E
16B4:  MOVLW  00
16B6:  MOVLB  2
16B8:  ADDWFC x42,W
16BA:  MOVLB  1
16BC:  MOVWF  x3F
16BE:  MOVLW  00
16C0:  MOVLB  2
16C2:  ADDWFC x43,W
16C4:  MOVLB  1
16C6:  MOVWF  x40
.................... 	restart_wdt(); 
16C8:  CLRWDT
.................... 	PLL_int *= 8L; 
16CA:  RLCF   x35,F
16CC:  RLCF   x36,F
16CE:  RLCF   x37,F
16D0:  RLCF   x38,F
16D2:  RLCF   x35,F
16D4:  RLCF   x36,F
16D6:  RLCF   x37,F
16D8:  RLCF   x38,F
16DA:  RLCF   x35,F
16DC:  RLCF   x36,F
16DE:  RLCF   x37,F
16E0:  RLCF   x38,F
16E2:  MOVLW  F8
16E4:  ANDWF  x35,F
.................... 	PLL_frac *= 8L; 
16E6:  RLCF   x39,F
16E8:  RLCF   x3A,F
16EA:  RLCF   x3B,F
16EC:  RLCF   x3C,F
16EE:  RLCF   x39,F
16F0:  RLCF   x3A,F
16F2:  RLCF   x3B,F
16F4:  RLCF   x3C,F
16F6:  RLCF   x39,F
16F8:  RLCF   x3A,F
16FA:  RLCF   x3B,F
16FC:  RLCF   x3C,F
16FE:  ANDWF  x39,F
.................... 	PLL_frac += 2L; 
1700:  MOVLW  02
1702:  ADDWF  x39,F
1704:  MOVLW  00
1706:  ADDWFC x3A,F
1708:  ADDWFC x3B,F
170A:  ADDWFC x3C,F
.................... 	Fvco++; 
170C:  MOVLW  01
170E:  MOVLB  2
1710:  ADDWF  x34,F
1712:  BTFSC  FD8.0
1714:  INCF   x35,F
1716:  BTFSC  FD8.2
1718:  INCF   x36,F
171A:  BTFSC  FD8.2
171C:  INCF   x37,F
171E:  MOVLB  0
1720:  RETURN 0
.................... } 
....................  
....................  
.................... void PLL_update(void) 
.................... { 
.................... 	//ULONG prog; 
.................... 	restart_wdt(); 
*
17BC:  CLRWDT
.................... 	PLL_send_word(PLL_int); 
17BE:  MOVFF  138,235
17C2:  MOVFF  137,234
17C6:  MOVFF  136,233
17CA:  MOVFF  135,232
17CE:  RCALL  1770
.................... 	delay_us(20); 
17D0:  MOVLW  1A
17D2:  MOVWF  00
17D4:  DECFSZ 00,F
17D6:  BRA    17D4
17D8:  NOP   
.................... 	restart_wdt(); 
17DA:  CLRWDT
.................... 	PLL_send_word(PLL_mod); 
17DC:  MOVFF  140,235
17E0:  MOVFF  13F,234
17E4:  MOVFF  13E,233
17E8:  MOVFF  13D,232
17EC:  RCALL  1770
.................... 	delay_us(20); 
17EE:  MOVLW  1A
17F0:  MOVWF  00
17F2:  DECFSZ 00,F
17F4:  BRA    17F2
17F6:  NOP   
.................... 	restart_wdt(); 
17F8:  CLRWDT
.................... 	PLL_send_word(PLL_frac); 
17FA:  MOVFF  13C,235
17FE:  MOVFF  13B,234
1802:  MOVFF  13A,233
1806:  MOVFF  139,232
180A:  RCALL  1770
180C:  RETURN 0
.................... 	 
.................... } 
....................  
.................... #separate 
.................... void PLL_reset(void) 
.................... { 
.................... 	output_low(PLL_DAT); 
.................... 	output_low(PLL_CLK); 
.................... 	delay_us(1000); 
.................... 	PLL_initialize(); 
.................... } 
....................  
....................  
....................  
.................... #include "BA1520QTX_intr.c" 
....................  
.................... //-------------------------------------------------------------------------- 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void) 
.................... { 
.................... 	 
.................... } 
....................  
.................... //-------------------------------------------------------------------------- 
*
0BFA:  BCF    F7E.0
0BFC:  GOTO   0090
.................... #int_TIMER2 
.................... void TIMER2_isr(void) // 1mS tick 
.................... { 
....................     timerTick_1ms = 1; 
0C00:  MOVLW  01
0C02:  MOVWF  30
.................... 	//    TMR_1mS_Flags = 0xFF; 
.................... 	//    TMR_1mS_Count++; 
.................... 	//    if (++TMR_1mS_Cnt >= 10) { 
.................... 	//        TMR_1mS_Cnt = 0; 
.................... 	//        TMR_10mS_Flags = 0xFF; 
.................... 	//        if (++TMR_10mS_Cnt >= 10) { 
.................... 	//            TMR_10mS_Cnt = 0; 
.................... 	//            TMR_100mS_Flags = 0xFF; 
.................... 	//            if (++TMR_100mS_Cnt >= 10) 
.................... 	//            { 
.................... 	//                TMR_100mS_Cnt = 0; 
.................... 	//                TMR_1sec_Flags = 0xFF; 
.................... 	//            } 
.................... 	//        } 
.................... 	//    } 
.................... } 
....................  
....................  
.................... //-------------------------------------------------------------------------- 
0C04:  BCF    F9E.1
0C06:  GOTO   0090
.................... #int_EXT 
.................... void  EXT_isr(void) 
.................... { 
.................... 	 
.................... } 
....................  
.................... //-------------------------------------------------------------------------- 
0C0A:  BCF    FF2.1
0C0C:  GOTO   0090
.................... #int_EXT1 
.................... void  EXT1_isr(void) 
.................... { 
.................... 	 
.................... } 
....................  
.................... //-------------------------------------------------------------- 
0C10:  BCF    FF0.0
0C12:  GOTO   0090
.................... #int_RDA 
.................... void  RDA_isr(void) 
.................... { 
.................... 	int8 x; 
.................... 	x = RCREG1; 
0C16:  MOVFF  FAE,26E
.................... 	COM1_rbuf[COM1_rxi] = x; 
0C1A:  CLRF   03
0C1C:  MOVF   32,W
0C1E:  ADDLW  34
0C20:  MOVWF  FE9
0C22:  MOVLW  00
0C24:  ADDWFC 03,W
0C26:  MOVWF  FEA
0C28:  MOVFF  26E,FEF
.................... 	if (++COM1_rxi >= COM1_RX_LEN) 
0C2C:  INCF   32,F
0C2E:  MOVF   32,W
0C30:  SUBLW  1F
0C32:  BC    0C36
....................     COM1_rxi = 0; 
0C34:  CLRF   32
.................... 	if (COM1_rcnt < COM1_RX_LEN) 
0C36:  MOVF   31,W
0C38:  SUBLW  1F
0C3A:  BNC   0C3E
....................     COM1_rcnt++; 
0C3C:  INCF   31,F
.................... } 
....................  
0C3E:  BCF    F9E.5
0C40:  GOTO   0090
.................... #int_TBE // VERSION 3.3 17.1.2016 
.................... void TBE_isr(void) 
.................... { 
....................     disable_interrupts(int_TIMER2); 
*
0C64:  BCF    F9D.1
....................     output_high(RS485_EN); 
0C66:  BSF    F8C.5
....................     status_tx_index = 0; 
0C68:  MOVLB  1
0C6A:  CLRF   x19
0C6C:  CLRF   x18
....................     while (tx_block_len--) 
0C6E:  MOVFF  115,03
0C72:  MOVF   x14,W
0C74:  BTFSC  FD8.2
0C76:  DECF   x15,F
0C78:  DECF   x14,F
0C7A:  IORWF  03,W
0C7C:  BZ    0CB8
....................     { 
....................         output_high(RS485_EN); 
0C7E:  BSF    F8C.5
....................         TXREG1 = status_buffer[status_tx_index++]; 
0C80:  MOVFF  119,03
0C84:  MOVF   x18,W
0C86:  INCF   x18,F
0C88:  BTFSC  FD8.2
0C8A:  INCF   x19,F
0C8C:  MOVLB  2
0C8E:  MOVWF  x6E
0C90:  MOVLW  1A
0C92:  ADDWF  x6E,W
0C94:  MOVWF  FE9
0C96:  MOVLW  01
0C98:  ADDWFC 03,W
0C9A:  MOVWF  FEA
0C9C:  MOVFF  FEF,FAD
....................         delay_us(500);  
0CA0:  MOVLW  02
0CA2:  MOVWF  x6E
0CA4:  MOVLW  F9
0CA6:  MOVWF  x6F
0CA8:  MOVLB  0
0CAA:  RCALL  0C44
0CAC:  MOVLB  2
0CAE:  DECFSZ x6E,F
0CB0:  BRA    0CA4
....................         output_low(RS485_EN); 
0CB2:  BCF    F8C.5
0CB4:  MOVLB  1
0CB6:  BRA    0C6E
.................... 	} 
....................     disable_interrupts(int_TBE);     
0CB8:  BCF    F9D.4
....................     enable_interrupts(int_TIMER2); 
0CBA:  BSF    F9D.1
.................... } 
....................  
....................  
....................  
0CBC:  BCF    F9E.4
0CBE:  MOVLB  0
0CC0:  GOTO   0090
.................... #include "BA1520QTX_serial.c" 
....................  
....................  
.................... UCHAR comm_ptr, ttccp = 1, debug_mode = 1;    //yehuda 1520Q cancel LI17592 
.................... UCHAR FPGA_image[32],D2A_image[20]; 
.................... UCHAR ttccp_error_message[40]; 
....................  
.................... UCHAR rp_command = setup.rp ,  pwr_command = setup.pwr; 
.................... bit revp_status; // VERSION 3.3: 2.2.2016  
....................  
.................... //----------------------------------------------------------------------------- 
.................... UCHAR COM1_get_chr(void) 
.................... { 
.................... 	UCHAR x; 
.................... 	x = COM1_rbuf[COM1_rxo]; 
*
2A50:  CLRF   03
2A52:  MOVF   33,W
2A54:  ADDLW  34
2A56:  MOVWF  FE9
2A58:  MOVLW  00
2A5A:  ADDWFC 03,W
2A5C:  MOVWF  FEA
2A5E:  MOVFF  FEF,1D1
.................... 	if (++COM1_rxo >= COM1_RX_LEN) 
2A62:  INCF   33,F
2A64:  MOVF   33,W
2A66:  SUBLW  1F
2A68:  BC    2A6C
....................     COM1_rxo = 0; 
2A6A:  CLRF   33
.................... 	if (COM1_rcnt) 
2A6C:  MOVF   31,F
2A6E:  BZ    2A72
....................     COM1_rcnt--; 
2A70:  DECF   31,F
.................... 	return x; 
2A72:  MOVLB  1
2A74:  MOVFF  1D1,01
2A78:  MOVLB  0
2A7A:  RETURN 0
.................... } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_str(UCHAR *str) 
.................... { 
.................... 	UCHAR x, pos, tab_stop; 
.................... 	disable_interrupts(int_RDA); 
*
21D2:  BCF    F9D.5
.................... 	output_high(RS485_EN); 
21D4:  BSF    F8C.5
.................... 	delay_us(100); 
21D6:  MOVLW  84
21D8:  MOVWF  00
21DA:  DECFSZ 00,F
21DC:  BRA    21DA
21DE:  BRA    21E0
21E0:  NOP   
.................... 	pos = 0; 
21E2:  MOVLB  2
21E4:  CLRF   x6A
.................... 	while (*str) 
21E6:  MOVFF  268,03
21EA:  MOVFF  267,FE9
21EE:  MOVFF  268,FEA
21F2:  MOVF   FEF,F
21F4:  BZ    2282
....................     { 
.................... 		x = *str++; 
21F6:  MOVFF  268,03
21FA:  MOVF   x67,W
21FC:  INCF   x67,F
21FE:  BTFSC  FD8.2
2200:  INCF   x68,F
2202:  MOVWF  FE9
2204:  MOVFF  03,FEA
2208:  MOVFF  FEF,269
.................... 		if (x != '\t') 
220C:  MOVF   x69,W
220E:  SUBLW  09
2210:  BZ    223E
.................... 		{ 
.................... 			TXREG1 = x; 
2212:  MOVFF  269,FAD
.................... 			pos++; 
2216:  INCF   x6A,F
.................... 			delay_us(300);  
2218:  MOVLW  02
221A:  MOVWF  x6C
221C:  CLRF   16
221E:  BTFSC  FF2.7
2220:  BSF    16.7
2222:  BCF    FF2.7
2224:  MOVLW  95
2226:  MOVWF  x6F
2228:  MOVLB  0
222A:  CALL   0C44
222E:  BTFSC  16.7
2230:  BSF    FF2.7
2232:  MOVLB  2
2234:  DECFSZ x6C,F
2236:  BRA    221C
.................... 			x = RCREG1; 
2238:  MOVFF  FAE,269
.................... 		} 
223C:  BRA    2280
.................... 		else 
.................... 		{ 
.................... 			tab_stop = 32; 
223E:  MOVLW  20
2240:  MOVWF  x6B
.................... 			if (pos >= tab_stop) 
2242:  MOVF   x6B,W
2244:  SUBWF  x6A,W
2246:  BNC   224E
.................... 			tab_stop = pos + 2; 
2248:  MOVLW  02
224A:  ADDWF  x6A,W
224C:  MOVWF  x6B
.................... 			while (pos < tab_stop) 
224E:  MOVF   x6B,W
2250:  SUBWF  x6A,W
2252:  BC    2280
.................... 			{ 
.................... 				TXREG1 = ' '; 
2254:  MOVLW  20
2256:  MOVWF  FAD
.................... 				pos++; 
2258:  INCF   x6A,F
.................... 				delay_us(300); 
225A:  MOVLW  02
225C:  MOVWF  x6C
225E:  CLRF   16
2260:  BTFSC  FF2.7
2262:  BSF    16.7
2264:  BCF    FF2.7
2266:  MOVLW  95
2268:  MOVWF  x6F
226A:  MOVLB  0
226C:  CALL   0C44
2270:  BTFSC  16.7
2272:  BSF    FF2.7
2274:  MOVLB  2
2276:  DECFSZ x6C,F
2278:  BRA    225E
.................... 				x = RCREG1; 
227A:  MOVFF  FAE,269
227E:  BRA    224E
.................... 			} 
.................... 		} 
2280:  BRA    21E6
.................... 	} 
.................... 	delay_us(100); 
2282:  MOVLW  84
2284:  MOVWF  00
2286:  DECFSZ 00,F
2288:  BRA    2286
228A:  BRA    228C
228C:  NOP   
.................... 	output_low(RS485_EN); 
228E:  BCF    F8C.5
.................... 	x = RCREG1; 
2290:  MOVFF  FAE,269
.................... 	enable_interrupts(int_RDA); 
2294:  BSF    F9D.5
2296:  MOVLB  0
2298:  RETURN 0
.................... } 
....................  
.................... //----------------------------------------------------------------------------- 
.................... void COM1_send_block(UINT len) // VERSION 3.3: 17.1.2016  
.................... { 
.................... 	UCHAR pos;//, tab_stop; 
.................... 	pos = 0; 
229A:  MOVLB  1
229C:  CLRF   xBA
.................... 	tx_block_len = len ; 
229E:  MOVFF  1B9,115
22A2:  MOVFF  1B8,114
.................... 	//status_tx_index = 0; 
.................... 	 
.................... 	//TXREG1 = status_buffer[0]; 
.................... 	clear_interrupt(int_TBE); 
22A6:  BCF    F9E.4
.................... 	enable_interrupts(int_TBE); 
22A8:  BSF    F9D.4
22AA:  MOVLB  0
22AC:  GOTO   2316 (RETURN)
.................... 	//TXREG1 = status_buffer[0]; 
.................... 	//output_high(RS485_EN);  
.................... } 
.................... //----------------------------------------------------------------------------- 
.................... void COM1_init(void) 
.................... { 
.................... 	ttccp_error_message[0] = 0; 
*
0FA2:  MOVLB  1
0FA4:  CLRF   x78
.................... 	COM1_rxi = COM1_rxo = COM1_rcnt = 0; 
0FA6:  CLRF   31
0FA8:  MOVFF  31,33
0FAC:  MOVFF  33,32
.................... 	comm_state = COMM_INIT; 
0FB0:  CLRF   54
.................... 	enable_interrupts(int_RDA); 
0FB2:  BSF    F9D.5
0FB4:  MOVLB  0
0FB6:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT get_char(void) 
.................... { 
.................... 	return comm_buf[comm_ptr++]; 
*
2A9A:  MOVLB  1
2A9C:  MOVF   x41,W
2A9E:  INCF   x41,F
2AA0:  CLRF   03
2AA2:  ADDLW  56
2AA4:  MOVWF  FE9
2AA6:  MOVLW  00
2AA8:  ADDWFC 03,W
2AAA:  MOVWF  FEA
2AAC:  CLRF   03
2AAE:  MOVFF  FEF,01
2AB2:  MOVFF  03,02
2AB6:  MOVLB  0
2AB8:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... UINT peek_char(void) 
.................... { 
.................... 	//  skip_spc(); 
.................... 	return comm_buf[comm_ptr]; 
*
2A7C:  CLRF   03
2A7E:  MOVLB  1
2A80:  MOVF   x41,W
2A82:  ADDLW  56
2A84:  MOVWF  FE9
2A86:  MOVLW  00
2A88:  ADDWFC 03,W
2A8A:  MOVWF  FEA
2A8C:  CLRF   03
2A8E:  MOVFF  FEF,01
2A92:  MOVFF  03,02
2A96:  MOVLB  0
2A98:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void skip_spc(void) 
.................... { 
.................... 	while (comm_buf[comm_ptr] && (comm_buf[comm_ptr] == ',' || comm_buf[comm_ptr] == ' ')) 
*
2ABA:  CLRF   03
2ABC:  MOVLB  1
2ABE:  MOVF   x41,W
2AC0:  ADDLW  56
2AC2:  MOVWF  FE9
2AC4:  MOVLW  00
2AC6:  ADDWFC 03,W
2AC8:  MOVWF  FEA
2ACA:  MOVF   FEF,F
2ACC:  BZ    2AFE
2ACE:  CLRF   03
2AD0:  MOVF   x41,W
2AD2:  ADDLW  56
2AD4:  MOVWF  FE9
2AD6:  MOVLW  00
2AD8:  ADDWFC 03,W
2ADA:  MOVWF  FEA
2ADC:  MOVF   FEF,W
2ADE:  SUBLW  2C
2AE0:  BZ    2AF6
2AE2:  CLRF   03
2AE4:  MOVF   x41,W
2AE6:  ADDLW  56
2AE8:  MOVWF  FE9
2AEA:  MOVLW  00
2AEC:  ADDWFC 03,W
2AEE:  MOVWF  FEA
2AF0:  MOVF   FEF,W
2AF2:  SUBLW  20
2AF4:  BNZ   2AFE
....................     comm_ptr++; 
2AF6:  INCF   x41,F
2AF8:  MOVLB  0
2AFA:  BRA    2ABA
2AFC:  MOVLB  1
2AFE:  MOVLB  0
2B00:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... SINT get_int(void) 
*
2B56:  MOVLB  2
2B58:  CLRF   x33
2B5A:  MOVLW  01
2B5C:  MOVWF  x32
.................... { 
.................... 	SINT num, sign = 1; 
.................... 	skip_spc(); 
2B5E:  MOVLB  0
2B60:  RCALL  2ABA
.................... 	if (comm_buf[comm_ptr]) 
2B62:  CLRF   03
2B64:  MOVLB  1
2B66:  MOVF   x41,W
2B68:  ADDLW  56
2B6A:  MOVWF  FE9
2B6C:  MOVLW  00
2B6E:  ADDWFC 03,W
2B70:  MOVWF  FEA
2B72:  MOVF   FEF,F
2B74:  BZ    2C00
....................     { 
.................... 		num = 0; 
2B76:  MOVLB  2
2B78:  CLRF   x31
2B7A:  CLRF   x30
.................... 		if (peek_char() == '-') 
2B7C:  MOVLB  0
2B7E:  RCALL  2A7C
2B80:  MOVFF  02,235
2B84:  MOVFF  01,234
2B88:  MOVLB  2
2B8A:  MOVF   01,W
2B8C:  SUBLW  2D
2B8E:  BNZ   2B9E
2B90:  MOVF   x35,F
2B92:  BNZ   2B9E
.................... 		{ 
.................... 			sign = -1; 
2B94:  SETF   x33
2B96:  SETF   x32
.................... 			get_char(); 
2B98:  MOVLB  0
2B9A:  RCALL  2A9A
2B9C:  MOVLB  2
.................... 		} 
.................... 		while (isdigit(comm_buf[comm_ptr])) 
2B9E:  CLRF   03
2BA0:  MOVLB  1
2BA2:  MOVF   x41,W
2BA4:  ADDLW  56
2BA6:  MOVWF  FE9
2BA8:  MOVLW  00
2BAA:  ADDWFC 03,W
2BAC:  MOVWF  FEA
2BAE:  MOVFF  FEF,234
2BB2:  MOVLB  2
2BB4:  MOVF   x34,W
2BB6:  SUBLW  2F
2BB8:  BC    2BFE
2BBA:  MOVF   x34,W
2BBC:  SUBLW  39
2BBE:  BNC   2BFE
.................... 		num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
2BC0:  MOVFF  231,235
2BC4:  MOVFF  230,234
2BC8:  CLRF   x37
2BCA:  MOVLW  0A
2BCC:  MOVWF  x36
2BCE:  MOVLB  0
2BD0:  RCALL  2B02
2BD2:  MOVFF  02,235
2BD6:  MOVFF  01,234
2BDA:  MOVLB  1
2BDC:  MOVF   x41,W
2BDE:  INCF   x41,F
2BE0:  CLRF   03
2BE2:  ADDLW  56
2BE4:  MOVWF  FE9
2BE6:  MOVLW  00
2BE8:  ADDWFC 03,W
2BEA:  MOVWF  FEA
2BEC:  MOVLW  30
2BEE:  SUBWF  FEF,W
2BF0:  MOVLB  2
2BF2:  ADDWF  01,W
2BF4:  MOVWF  x30
2BF6:  MOVLW  00
2BF8:  ADDWFC 02,W
2BFA:  MOVWF  x31
2BFC:  BRA    2B9E
2BFE:  MOVLB  1
.................... 	} 
.................... 	//  skip_spc(); 
.................... 	return num * sign; 
2C00:  MOVFF  231,235
2C04:  MOVFF  230,234
2C08:  MOVFF  233,237
2C0C:  MOVFF  232,236
2C10:  MOVLB  0
2C12:  RCALL  2B02
2C14:  MOVFF  02,03
2C18:  MOVFF  02,02
2C1C:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG str_to_long(void) 
.................... { 
.................... 	ULONG num; 
.................... 	skip_spc(); 
*
6004:  CALL   2ABA
.................... 	if (comm_buf[comm_ptr]) 
6008:  CLRF   03
600A:  MOVLB  1
600C:  MOVF   x41,W
600E:  ADDLW  56
6010:  MOVWF  FE9
6012:  MOVLW  00
6014:  ADDWFC 03,W
6016:  MOVWF  FEA
6018:  MOVF   FEF,F
601A:  BZ    60AA
....................     { 
.................... 		num = 0; 
601C:  MOVLB  2
601E:  CLRF   x0B
6020:  CLRF   x0A
6022:  CLRF   x09
6024:  CLRF   x08
.................... 		while (isdigit(comm_buf[comm_ptr])) 
6026:  CLRF   03
6028:  MOVLB  1
602A:  MOVF   x41,W
602C:  ADDLW  56
602E:  MOVWF  FE9
6030:  MOVLW  00
6032:  ADDWFC 03,W
6034:  MOVWF  FEA
6036:  MOVFF  FEF,20C
603A:  MOVLB  2
603C:  MOVF   x0C,W
603E:  SUBLW  2F
6040:  BC    60A8
6042:  MOVF   x0C,W
6044:  SUBLW  39
6046:  BNC   60A8
.................... 		num = (num * 10) + (comm_buf[comm_ptr++] - '0'); 
6048:  MOVFF  20B,247
604C:  MOVFF  20A,246
6050:  MOVFF  209,245
6054:  MOVFF  208,244
6058:  CLRF   x4B
605A:  CLRF   x4A
605C:  CLRF   x49
605E:  MOVLW  0A
6060:  MOVWF  x48
6062:  MOVLB  0
6064:  CALL   13F4
6068:  MOVFF  03,20F
606C:  MOVFF  02,20E
6070:  MOVFF  01,20D
6074:  MOVFF  00,20C
6078:  MOVLB  1
607A:  MOVF   x41,W
607C:  INCF   x41,F
607E:  CLRF   03
6080:  ADDLW  56
6082:  MOVWF  FE9
6084:  MOVLW  00
6086:  ADDWFC 03,W
6088:  MOVWF  FEA
608A:  MOVLW  30
608C:  SUBWF  FEF,W
608E:  MOVLB  2
6090:  ADDWF  00,W
6092:  MOVWF  x08
6094:  MOVLW  00
6096:  ADDWFC 01,W
6098:  MOVWF  x09
609A:  MOVLW  00
609C:  ADDWFC 02,W
609E:  MOVWF  x0A
60A0:  MOVLW  00
60A2:  ADDWFC x0F,W
60A4:  MOVWF  x0B
60A6:  BRA    6026
60A8:  MOVLB  1
.................... 	} 
.................... 	//  skip_spc(); 
.................... 	return num; 
60AA:  MOVFF  208,00
60AE:  MOVFF  209,01
60B2:  MOVFF  20A,02
60B6:  MOVFF  20B,03
60BA:  MOVLB  0
60BC:  GOTO   65DC (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... ULONG get_hex(void) 
.................... { 
.................... 	ULONG num; 
.................... 	UCHAR chr; 
.................... 	skip_spc(); 
*
5F08:  CALL   2ABA
.................... 	if (peek_char()) 
5F0C:  CALL   2A7C
5F10:  MOVF   01,W
5F12:  IORWF  02,W
5F14:  BTFSC  FD8.2
5F16:  BRA    5FF2
....................     { 
.................... 		num = 0; 
5F18:  MOVLB  2
5F1A:  CLRF   x0B
5F1C:  CLRF   x0A
5F1E:  CLRF   x09
5F20:  CLRF   x08
.................... 		while (isxdigit(peek_char())) 
5F22:  MOVLB  0
5F24:  CALL   2A7C
5F28:  MOVFF  02,20E
5F2C:  MOVFF  01,20D
5F30:  MOVLB  2
5F32:  MOVF   x0E,F
5F34:  BNZ   5F3C
5F36:  MOVF   x0D,W
5F38:  SUBLW  2F
5F3A:  BC    5F46
5F3C:  MOVF   x0E,F
5F3E:  BNZ   5F46
5F40:  MOVF   x0D,W
5F42:  SUBLW  39
5F44:  BC    5F6E
5F46:  MOVF   x0E,F
5F48:  BNZ   5F50
5F4A:  MOVF   x0D,W
5F4C:  SUBLW  40
5F4E:  BC    5F5A
5F50:  MOVF   x0E,F
5F52:  BNZ   5F5A
5F54:  MOVF   x0D,W
5F56:  SUBLW  46
5F58:  BC    5F6E
5F5A:  MOVF   x0E,F
5F5C:  BNZ   5F64
5F5E:  MOVF   x0D,W
5F60:  SUBLW  60
5F62:  BC    5FF0
5F64:  MOVF   x0E,F
5F66:  BNZ   5FF0
5F68:  MOVF   x0D,W
5F6A:  SUBLW  66
5F6C:  BNC   5FF0
.................... 		{ 
.................... 			chr = get_char(); 
5F6E:  MOVLB  0
5F70:  CALL   2A9A
5F74:  MOVFF  01,20C
.................... 			chr = toupper(chr); 
5F78:  MOVLB  2
5F7A:  MOVF   x0C,W
5F7C:  SUBLW  60
5F7E:  BC    5F8C
5F80:  MOVF   x0C,W
5F82:  SUBLW  7A
5F84:  BNC   5F8C
5F86:  MOVF   x0C,W
5F88:  ANDLW  DF
5F8A:  BRA    5F8E
5F8C:  MOVF   x0C,W
5F8E:  MOVWF  x0C
.................... 			if (chr <= '9') 
5F90:  MOVF   x0C,W
5F92:  SUBLW  39
5F94:  BNC   5F9C
.................... 			chr -= '0'; 
5F96:  MOVLW  30
5F98:  SUBWF  x0C,F
5F9A:  BRA    5FA0
.................... 			else 
.................... 			chr = chr - ('A' - 10); 
5F9C:  MOVLW  37
5F9E:  SUBWF  x0C,F
.................... 			num = num * 16 + (ULONG)chr; 
5FA0:  RLCF   x08,W
5FA2:  MOVWF  x0D
5FA4:  RLCF   x09,W
5FA6:  MOVWF  x0E
5FA8:  RLCF   x0A,W
5FAA:  MOVWF  x0F
5FAC:  RLCF   x0B,W
5FAE:  MOVWF  x10
5FB0:  RLCF   x0D,F
5FB2:  RLCF   x0E,F
5FB4:  RLCF   x0F,F
5FB6:  RLCF   x10,F
5FB8:  RLCF   x0D,F
5FBA:  RLCF   x0E,F
5FBC:  RLCF   x0F,F
5FBE:  RLCF   x10,F
5FC0:  RLCF   x0D,F
5FC2:  RLCF   x0E,F
5FC4:  RLCF   x0F,F
5FC6:  RLCF   x10,F
5FC8:  MOVLW  F0
5FCA:  ANDWF  x0D,F
5FCC:  MOVFF  20C,00
5FD0:  CLRF   01
5FD2:  CLRF   02
5FD4:  CLRF   03
5FD6:  MOVF   x0C,W
5FD8:  ADDWF  x0D,W
5FDA:  MOVWF  x08
5FDC:  MOVF   01,W
5FDE:  ADDWFC x0E,W
5FE0:  MOVWF  x09
5FE2:  MOVF   02,W
5FE4:  ADDWFC x0F,W
5FE6:  MOVWF  x0A
5FE8:  MOVF   03,W
5FEA:  ADDWFC x10,W
5FEC:  MOVWF  x0B
5FEE:  BRA    5F22
5FF0:  MOVLB  0
.................... 		} 
.................... 	} 
.................... 	return num; 
5FF2:  MOVFF  208,00
5FF6:  MOVFF  209,01
5FFA:  MOVFF  20A,02
5FFE:  MOVFF  20B,03
6002:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... UINT get_frequency(void) 
.................... { 
.................... 	UINT freq; 
.................... 	freq = get_int() * 10; 
*
31E6:  RCALL  2B56
31E8:  MOVFF  02,22B
31EC:  MOVFF  01,22A
31F0:  MOVFF  02,235
31F4:  MOVFF  01,234
31F8:  MOVLB  2
31FA:  CLRF   x37
31FC:  MOVLW  0A
31FE:  MOVWF  x36
3200:  MOVLB  0
3202:  RCALL  2B02
3204:  MOVFF  02,229
3208:  MOVLB  2
320A:  MOVFF  01,228
.................... 	if (peek_char() == '.') 
320E:  MOVLB  0
3210:  RCALL  2A7C
3212:  MOVFF  02,22B
3216:  MOVFF  01,22A
321A:  MOVLB  2
321C:  MOVF   01,W
321E:  SUBLW  2E
3220:  BNZ   3242
3222:  MOVF   x2B,F
3224:  BNZ   3242
....................     { 
.................... 		get_char(); // skip '.' 
3226:  MOVLB  0
3228:  RCALL  2A9A
.................... 		freq += get_char() - '0'; 
322A:  RCALL  2A9A
322C:  MOVLW  30
322E:  MOVLB  2
3230:  SUBWF  01,W
3232:  MOVWF  00
3234:  MOVLW  00
3236:  SUBWFB 02,W
3238:  MOVWF  03
323A:  MOVF   00,W
323C:  ADDWF  x28,F
323E:  MOVF   03,W
3240:  ADDWFC x29,F
.................... 	} 
.................... 	return freq; 
3242:  MOVFF  228,01
3246:  MOVFF  229,02
324A:  MOVLB  0
324C:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... void inc_dec(UCHAR chr) 
.................... { 
.................... 	UINT incdec; 
.................... 	switch (chr) 
*
59C6:  MOVLB  1
59C8:  MOVF   xD1,W
59CA:  XORLW  69
59CC:  MOVLB  0
59CE:  BZ    5A02
59D0:  XORLW  20
59D2:  BZ    5A32
59D4:  XORLW  2D
59D6:  BZ    5A62
59D8:  XORLW  20
59DA:  BZ    5A96
59DC:  XORLW  6F
59DE:  BTFSC  FD8.2
59E0:  BRA    5ACA
59E2:  XORLW  16
59E4:  BTFSC  FD8.2
59E6:  BRA    5B1A
59E8:  XORLW  10
59EA:  BTFSC  FD8.2
59EC:  BRA    5B6A
59EE:  XORLW  72
59F0:  BTFSC  FD8.2
59F2:  BRA    5BBE
59F4:  XORLW  61
59F6:  BTFSC  FD8.2
59F8:  BRA    5C12
59FA:  XORLW  02
59FC:  BTFSC  FD8.2
59FE:  BRA    5C2A
5A00:  BRA    5C3E
....................     { 
.................... 		case 'i': 
.................... 		if (++D2A_image[11] == 0) 
5A02:  MOVLB  1
5A04:  INCF   x6F,F
5A06:  BNZ   5A14
....................         if (++D2A_image[12] > 3) 
5A08:  INCF   x70,F
5A0A:  MOVF   x70,W
5A0C:  SUBLW  03
5A0E:  BC    5A14
.................... 		{ 
.................... 			D2A_image[11] = 0; 
5A10:  CLRF   x6F
.................... 			D2A_image[12] = 0; 
5A12:  CLRF   x70
.................... 		} 
.................... 		write_D2A(11, D2A_image[11]); 
5A14:  MOVLW  0B
5A16:  MOVLB  2
5A18:  MOVWF  x08
5A1A:  MOVFF  16F,209
5A1E:  MOVLB  0
5A20:  RCALL  593E
.................... 		write_D2A(12, D2A_image[12]); 
5A22:  MOVLW  0C
5A24:  MOVLB  2
5A26:  MOVWF  x08
5A28:  MOVFF  170,209
5A2C:  MOVLB  0
5A2E:  RCALL  593E
.................... 		break; 
*
1E30:  MOVLW  00
1E32:  BTFSC  F83.7
1E34:  MOVLW  01
*
5A30:  BRA    5C3E
.................... 		case 'I': 
.................... 		if (++D2A_image[15] == 0) 
5A32:  MOVLB  1
5A34:  INCF   x73,F
5A36:  BNZ   5A44
....................         if (++D2A_image[16] > 3) 
5A38:  INCF   x74,F
5A3A:  MOVF   x74,W
5A3C:  SUBLW  03
5A3E:  BC    5A44
.................... 		{ 
.................... 			D2A_image[15] = 0; 
5A40:  CLRF   x73
.................... 			D2A_image[16] = 0; 
5A42:  CLRF   x74
.................... 		} 
.................... 		write_D2A(15, D2A_image[15]); 
5A44:  MOVLW  0F
5A46:  MOVLB  2
5A48:  MOVWF  x08
5A4A:  MOVFF  173,209
5A4E:  MOVLB  0
5A50:  RCALL  593E
.................... 		write_D2A(16, D2A_image[16]); 
5A52:  MOVLW  10
5A54:  MOVLB  2
5A56:  MOVWF  x08
5A58:  MOVFF  174,209
5A5C:  MOVLB  0
5A5E:  RCALL  593E
.................... 		break; 
5A60:  BRA    5C3E
.................... 		case 'd': 
.................... 		if (--D2A_image[11] == 255) 
5A62:  MOVLB  1
5A64:  DECF   x6F,F
5A66:  INCFSZ x6F,W
5A68:  BRA    5A78
....................         if (--D2A_image[12] > 3) 
5A6A:  DECF   x70,F
5A6C:  MOVF   x70,W
5A6E:  SUBLW  03
5A70:  BC    5A78
.................... 		{ 
.................... 			D2A_image[11] = 255; 
5A72:  SETF   x6F
.................... 			D2A_image[12] = 3; 
5A74:  MOVLW  03
5A76:  MOVWF  x70
.................... 		} 
.................... 		write_D2A(11, D2A_image[11]); 
5A78:  MOVLW  0B
5A7A:  MOVLB  2
5A7C:  MOVWF  x08
5A7E:  MOVFF  16F,209
5A82:  MOVLB  0
5A84:  RCALL  593E
.................... 		write_D2A(12, D2A_image[12]); 
5A86:  MOVLW  0C
5A88:  MOVLB  2
5A8A:  MOVWF  x08
5A8C:  MOVFF  170,209
5A90:  MOVLB  0
5A92:  RCALL  593E
.................... 		break; 
5A94:  BRA    5C3E
.................... 		case 'D': 
.................... 		if (--D2A_image[15] == 255) 
5A96:  MOVLB  1
5A98:  DECF   x73,F
5A9A:  INCFSZ x73,W
5A9C:  BRA    5AAC
....................         if (--D2A_image[16] > 3) 
5A9E:  DECF   x74,F
5AA0:  MOVF   x74,W
5AA2:  SUBLW  03
5AA4:  BC    5AAC
.................... 		{ 
.................... 			D2A_image[15] = 255; 
5AA6:  SETF   x73
.................... 			D2A_image[16] = 3; 
5AA8:  MOVLW  03
5AAA:  MOVWF  x74
.................... 		} 
.................... 		write_D2A(15, D2A_image[15]); 
5AAC:  MOVLW  0F
5AAE:  MOVLB  2
5AB0:  MOVWF  x08
5AB2:  MOVFF  173,209
5AB6:  MOVLB  0
5AB8:  RCALL  593E
.................... 		write_D2A(16, D2A_image[16]); 
5ABA:  MOVLW  10
5ABC:  MOVLB  2
5ABE:  MOVWF  x08
5AC0:  MOVFF  174,209
5AC4:  MOVLB  0
5AC6:  RCALL  593E
.................... 		break; 
5AC8:  BRA    5C3E
.................... 		case '+': 
.................... 		incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5ACA:  MOVLB  1
5ACC:  MOVFF  171,1D2
5AD0:  MOVF   x72,W
5AD2:  ANDLW  03
5AD4:  MOVWF  xD3
.................... 		if (++incdec > 0x3FF) 
5AD6:  INCF   xD2,F
5AD8:  BTFSC  FD8.2
5ADA:  INCF   xD3,F
5ADC:  MOVF   xD3,W
5ADE:  SUBLW  03
5AE0:  BC    5AE6
....................         incdec = 0; 
5AE2:  CLRF   xD3
5AE4:  CLRF   xD2
.................... 		incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
5AE6:  MOVF   x72,W
5AE8:  ANDLW  C0
5AEA:  MOVWF  xD4
5AEC:  MOVLW  00
5AEE:  IORWF  xD2,F
5AF0:  MOVF   xD4,W
5AF2:  IORWF  xD3,F
.................... 		D2A_image[13] = make8(incdec, 0); 
5AF4:  MOVFF  1D2,171
.................... 		D2A_image[14] = make8(incdec, 1); 
5AF8:  MOVFF  1D3,172
.................... 		write_D2A(11, D2A_image[13]); 
5AFC:  MOVLW  0B
5AFE:  MOVLB  2
5B00:  MOVWF  x08
5B02:  MOVFF  171,209
5B06:  MOVLB  0
5B08:  RCALL  593E
.................... 		write_D2A(12, D2A_image[14]); 
5B0A:  MOVLW  0C
5B0C:  MOVLB  2
5B0E:  MOVWF  x08
5B10:  MOVFF  172,209
5B14:  MOVLB  0
5B16:  RCALL  593E
.................... 		break; 
5B18:  BRA    5C3E
.................... 		case '=': 
.................... 		incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
5B1A:  MOVLB  1
5B1C:  MOVFF  175,1D2
5B20:  MOVF   x76,W
5B22:  ANDLW  03
5B24:  MOVWF  xD3
.................... 		if (++incdec > 0x3FF) 
5B26:  INCF   xD2,F
5B28:  BTFSC  FD8.2
5B2A:  INCF   xD3,F
5B2C:  MOVF   xD3,W
5B2E:  SUBLW  03
5B30:  BC    5B36
....................         incdec = 0; 
5B32:  CLRF   xD3
5B34:  CLRF   xD2
.................... 		incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5B36:  MOVF   x76,W
5B38:  ANDLW  C0
5B3A:  MOVWF  xD4
5B3C:  MOVLW  00
5B3E:  IORWF  xD2,F
5B40:  MOVF   xD4,W
5B42:  IORWF  xD3,F
.................... 		D2A_image[17] = make8(incdec, 0); 
5B44:  MOVFF  1D2,175
.................... 		D2A_image[18] = make8(incdec, 1); 
5B48:  MOVFF  1D3,176
.................... 		write_D2A(11, D2A_image[17]); 
5B4C:  MOVLW  0B
5B4E:  MOVLB  2
5B50:  MOVWF  x08
5B52:  MOVFF  175,209
5B56:  MOVLB  0
5B58:  RCALL  593E
.................... 		write_D2A(12, D2A_image[18]); 
5B5A:  MOVLW  0C
5B5C:  MOVLB  2
5B5E:  MOVWF  x08
5B60:  MOVFF  176,209
5B64:  MOVLB  0
5B66:  RCALL  593E
.................... 		break; 
5B68:  BRA    5C3E
.................... 		case '-': 
.................... 		incdec = make16(D2A_image[14],D2A_image[13]) & 0x3FF; 
5B6A:  MOVLB  1
5B6C:  MOVFF  171,1D2
5B70:  MOVF   x72,W
5B72:  ANDLW  03
5B74:  MOVWF  xD3
.................... 		if (--incdec > 0x3FF) 
5B76:  MOVF   xD2,W
5B78:  BTFSC  FD8.2
5B7A:  DECF   xD3,F
5B7C:  DECF   xD2,F
5B7E:  MOVF   xD3,W
5B80:  SUBLW  03
5B82:  BC    5B8A
....................         incdec = 0x3FF; 
5B84:  MOVLW  03
5B86:  MOVWF  xD3
5B88:  SETF   xD2
.................... 		incdec |= (UINT)(D2A_image[14]  & 0xC0) << 8; 
5B8A:  MOVF   x72,W
5B8C:  ANDLW  C0
5B8E:  MOVWF  xD4
5B90:  MOVLW  00
5B92:  IORWF  xD2,F
5B94:  MOVF   xD4,W
5B96:  IORWF  xD3,F
.................... 		D2A_image[13] = make8(incdec, 0); 
5B98:  MOVFF  1D2,171
.................... 		D2A_image[14] = make8(incdec, 1); 
5B9C:  MOVFF  1D3,172
.................... 		write_D2A(11, D2A_image[13]); 
5BA0:  MOVLW  0B
5BA2:  MOVLB  2
5BA4:  MOVWF  x08
5BA6:  MOVFF  171,209
5BAA:  MOVLB  0
5BAC:  RCALL  593E
.................... 		write_D2A(12, D2A_image[14]); 
5BAE:  MOVLW  0C
5BB0:  MOVLB  2
5BB2:  MOVWF  x08
5BB4:  MOVFF  172,209
5BB8:  MOVLB  0
5BBA:  RCALL  593E
.................... 		break; 
5BBC:  BRA    5C3E
.................... 		case '_': 
.................... 		incdec = make16(D2A_image[18],D2A_image[17]) & 0x3FF; 
5BBE:  MOVLB  1
5BC0:  MOVFF  175,1D2
5BC4:  MOVF   x76,W
5BC6:  ANDLW  03
5BC8:  MOVWF  xD3
.................... 		if (--incdec > 0x3FF) 
5BCA:  MOVF   xD2,W
5BCC:  BTFSC  FD8.2
5BCE:  DECF   xD3,F
5BD0:  DECF   xD2,F
5BD2:  MOVF   xD3,W
5BD4:  SUBLW  03
5BD6:  BC    5BDE
....................         incdec = 0x3FF; 
5BD8:  MOVLW  03
5BDA:  MOVWF  xD3
5BDC:  SETF   xD2
.................... 		incdec |= (UINT)(D2A_image[18]  & 0xC0) << 8; 
5BDE:  MOVF   x76,W
5BE0:  ANDLW  C0
5BE2:  MOVWF  xD4
5BE4:  MOVLW  00
5BE6:  IORWF  xD2,F
5BE8:  MOVF   xD4,W
5BEA:  IORWF  xD3,F
.................... 		D2A_image[17] = make8(incdec, 0); 
5BEC:  MOVFF  1D2,175
.................... 		D2A_image[18] = make8(incdec, 1); 
5BF0:  MOVFF  1D3,176
.................... 		write_D2A(11, D2A_image[17]); 
5BF4:  MOVLW  0B
5BF6:  MOVLB  2
5BF8:  MOVWF  x08
5BFA:  MOVFF  175,209
5BFE:  MOVLB  0
5C00:  RCALL  593E
.................... 		write_D2A(12, D2A_image[18]); 
5C02:  MOVLW  0C
5C04:  MOVLB  2
5C06:  MOVWF  x08
5C08:  MOVFF  176,209
5C0C:  MOVLB  0
5C0E:  RCALL  593E
.................... 		break; 
5C10:  BRA    5C3E
.................... 		case '>': 
.................... 		if (setup.phase_offset < 255) 
5C12:  INCFSZ xBA,W
5C14:  BRA    5C18
5C16:  BRA    5C1A
....................         setup.phase_offset++; 
5C18:  INCF   xBA,F
.................... 		update_FPGA(1, setup.phase_offset); 
5C1A:  MOVLW  01
5C1C:  MOVLB  1
5C1E:  MOVWF  xD4
5C20:  MOVFF  BA,1D5
5C24:  MOVLB  0
5C26:  RCALL  59A8
.................... 		break; 
5C28:  BRA    5C3E
.................... 		case '<': 
.................... 		if (setup.phase_offset) 
5C2A:  MOVF   xBA,F
5C2C:  BZ    5C30
....................         setup.phase_offset--; 
5C2E:  DECF   xBA,F
.................... 		update_FPGA(1, setup.phase_offset); 
5C30:  MOVLW  01
5C32:  MOVLB  1
5C34:  MOVWF  xD4
5C36:  MOVFF  BA,1D5
5C3A:  MOVLB  0
5C3C:  RCALL  59A8
.................... 		break; 
.................... 	} 
5C3E:  GOTO   69D6 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help1(void) 
.................... { 
.................... 	COM1_send_str("\r\n"); 
5C42:  MOVLW  0D
5C44:  MOVLB  2
5C46:  MOVWF  x08
5C48:  MOVLW  0A
5C4A:  MOVWF  x09
5C4C:  CLRF   x0A
5C4E:  MOVLW  02
5C50:  MOVWF  x68
5C52:  MOVLW  08
5C54:  MOVWF  x67
5C56:  MOVLB  0
5C58:  CALL   21D2
.................... 	COM1_send_str("$AI <channel><cr>  \tRequest analog channel value (10 bits)\r\n"); 
5C5C:  MOVLW  02
5C5E:  MOVWF  FEA
5C60:  MOVLW  08
5C62:  MOVWF  FE9
5C64:  MOVFF  FF2,24A
5C68:  BCF    FF2.7
5C6A:  MOVLW  3D
5C6C:  MOVWF  01
5C6E:  CLRF   FF7
5C70:  MOVLW  00
5C72:  CALL   010C
5C76:  TBLRD*-
5C78:  TBLRD*+
5C7A:  MOVFF  FF5,FEE
5C7E:  DECFSZ 01,F
5C80:  BRA    5C78
5C82:  MOVLB  2
5C84:  BTFSC  x4A.7
5C86:  BSF    FF2.7
5C88:  MOVLW  02
5C8A:  MOVWF  x68
5C8C:  MOVLW  08
5C8E:  MOVWF  x67
5C90:  MOVLB  0
5C92:  CALL   21D2
.................... 	COM1_send_str("$AT <level><cr>  \tSet attenuator to <level>\r\n"); 
5C96:  MOVLW  02
5C98:  MOVWF  FEA
5C9A:  MOVLW  08
5C9C:  MOVWF  FE9
5C9E:  MOVFF  FF2,24A
5CA2:  BCF    FF2.7
5CA4:  MOVLW  2E
5CA6:  MOVWF  01
5CA8:  CLRF   FF7
5CAA:  MOVLW  00
5CAC:  CALL   0164
5CB0:  TBLRD*-
5CB2:  TBLRD*+
5CB4:  MOVFF  FF5,FEE
5CB8:  DECFSZ 01,F
5CBA:  BRA    5CB2
5CBC:  MOVLB  2
5CBE:  BTFSC  x4A.7
5CC0:  BSF    FF2.7
5CC2:  MOVLW  02
5CC4:  MOVWF  x68
5CC6:  MOVLW  08
5CC8:  MOVWF  x67
5CCA:  MOVLB  0
5CCC:  CALL   21D2
.................... 	COM1_send_str("$CF <freq><cr>  \tChange frequency (2185.0 - 2300.0 in 0.1 incs)\r\n"); 
5CD0:  MOVLW  02
5CD2:  MOVWF  FEA
5CD4:  MOVLW  08
5CD6:  MOVWF  FE9
5CD8:  MOVFF  FF2,24A
5CDC:  BCF    FF2.7
5CDE:  MOVLW  42
5CE0:  MOVWF  01
5CE2:  CLRF   FF7
5CE4:  MOVLW  00
5CE6:  CALL   01AC
5CEA:  TBLRD*-
5CEC:  TBLRD*+
5CEE:  MOVFF  FF5,FEE
5CF2:  DECFSZ 01,F
5CF4:  BRA    5CEC
5CF6:  MOVLB  2
5CF8:  BTFSC  x4A.7
5CFA:  BSF    FF2.7
5CFC:  MOVLW  02
5CFE:  MOVWF  x68
5D00:  MOVLW  08
5D02:  MOVWF  x67
5D04:  MOVLB  0
5D06:  CALL   21D2
.................... 	COM1_send_str("$DI<cr>  \tRequest digital inputs\r\n"); 
5D0A:  MOVLW  02
5D0C:  MOVWF  FEA
5D0E:  MOVLW  08
5D10:  MOVWF  FE9
5D12:  MOVFF  FF2,24A
5D16:  BCF    FF2.7
5D18:  MOVLW  23
5D1A:  MOVWF  01
5D1C:  CLRF   FF7
5D1E:  MOVLW  00
5D20:  CALL   0208
5D24:  TBLRD*-
5D26:  TBLRD*+
5D28:  MOVFF  FF5,FEE
5D2C:  DECFSZ 01,F
5D2E:  BRA    5D26
5D30:  MOVLB  2
5D32:  BTFSC  x4A.7
5D34:  BSF    FF2.7
5D36:  MOVLW  02
5D38:  MOVWF  x68
5D3A:  MOVLW  08
5D3C:  MOVWF  x67
5D3E:  MOVLB  0
5D40:  CALL   21D2
.................... 	COM1_send_str("$GD <addr><cr>  \tGet D2A register contents\r\n"); 
5D44:  MOVLW  02
5D46:  MOVWF  FEA
5D48:  MOVLW  08
5D4A:  MOVWF  FE9
5D4C:  MOVFF  FF2,24A
5D50:  BCF    FF2.7
5D52:  MOVLW  2D
5D54:  MOVWF  01
5D56:  CLRF   FF7
5D58:  MOVLW  00
5D5A:  CALL   0246
5D5E:  TBLRD*-
5D60:  TBLRD*+
5D62:  MOVFF  FF5,FEE
5D66:  DECFSZ 01,F
5D68:  BRA    5D60
5D6A:  MOVLB  2
5D6C:  BTFSC  x4A.7
5D6E:  BSF    FF2.7
5D70:  MOVLW  02
5D72:  MOVWF  x68
5D74:  MOVLW  08
5D76:  MOVWF  x67
5D78:  MOVLB  0
5D7A:  CALL   21D2
.................... 	COM1_send_str("$GF <addr><cr>  \tGet FPGA register contents\r\n"); 
5D7E:  MOVLW  02
5D80:  MOVWF  FEA
5D82:  MOVLW  08
5D84:  MOVWF  FE9
5D86:  MOVFF  FF2,24A
5D8A:  BCF    FF2.7
5D8C:  MOVLW  2E
5D8E:  MOVWF  01
5D90:  CLRF   FF7
5D92:  MOVLW  00
5D94:  CALL   028E
5D98:  TBLRD*-
5D9A:  TBLRD*+
5D9C:  MOVFF  FF5,FEE
5DA0:  DECFSZ 01,F
5DA2:  BRA    5D9A
5DA4:  MOVLB  2
5DA6:  BTFSC  x4A.7
5DA8:  BSF    FF2.7
5DAA:  MOVLW  02
5DAC:  MOVWF  x68
5DAE:  MOVLW  08
5DB0:  MOVWF  x67
5DB2:  MOVLB  0
5DB4:  CALL   21D2
.................... 	COM1_send_str("$OT <output><cr>  \tSet digital outputs to HEX value\r\n"); 
5DB8:  MOVLW  02
5DBA:  MOVWF  FEA
5DBC:  MOVLW  08
5DBE:  MOVWF  FE9
5DC0:  MOVFF  FF2,24A
5DC4:  BCF    FF2.7
5DC6:  MOVLW  36
5DC8:  MOVWF  01
5DCA:  CLRF   FF7
5DCC:  MOVLW  00
5DCE:  CALL   02D6
5DD2:  TBLRD*-
5DD4:  TBLRD*+
5DD6:  MOVFF  FF5,FEE
5DDA:  DECFSZ 01,F
5DDC:  BRA    5DD4
5DDE:  MOVLB  2
5DE0:  BTFSC  x4A.7
5DE2:  BSF    FF2.7
5DE4:  MOVLW  02
5DE6:  MOVWF  x68
5DE8:  MOVLW  08
5DEA:  MOVWF  x67
5DEC:  MOVLB  0
5DEE:  CALL   21D2
.................... 	COM1_send_str("$RD<cr>  \tReset D2A\r\n"); 
5DF2:  MOVLW  02
5DF4:  MOVWF  FEA
5DF6:  MOVLW  08
5DF8:  MOVWF  FE9
5DFA:  MOVFF  FF2,24A
5DFE:  BCF    FF2.7
5E00:  MOVLW  16
5E02:  MOVWF  01
5E04:  CLRF   FF7
5E06:  MOVLW  00
5E08:  CALL   0326
5E0C:  TBLRD*-
5E0E:  TBLRD*+
5E10:  MOVFF  FF5,FEE
5E14:  DECFSZ 01,F
5E16:  BRA    5E0E
5E18:  MOVLB  2
5E1A:  BTFSC  x4A.7
5E1C:  BSF    FF2.7
5E1E:  MOVLW  02
5E20:  MOVWF  x68
5E22:  MOVLW  08
5E24:  MOVWF  x67
5E26:  MOVLB  0
5E28:  CALL   21D2
.................... 	COM1_send_str("$SD <addr> <data><cr>  \tSet D2A register <addr> to <data>\r\n"); 
5E2C:  MOVLW  02
5E2E:  MOVWF  FEA
5E30:  MOVLW  08
5E32:  MOVWF  FE9
5E34:  MOVFF  FF2,24A
5E38:  BCF    FF2.7
5E3A:  MOVLW  3C
5E3C:  MOVWF  01
5E3E:  CLRF   FF7
5E40:  MOVLW  00
5E42:  CALL   0356
5E46:  TBLRD*-
5E48:  TBLRD*+
5E4A:  MOVFF  FF5,FEE
5E4E:  DECFSZ 01,F
5E50:  BRA    5E48
5E52:  MOVLB  2
5E54:  BTFSC  x4A.7
5E56:  BSF    FF2.7
5E58:  MOVLW  02
5E5A:  MOVWF  x68
5E5C:  MOVLW  08
5E5E:  MOVWF  x67
5E60:  MOVLB  0
5E62:  CALL   21D2
.................... 	COM1_send_str("$SF <addr> <data><cr>  \tSet FPGA register <addr> to <data>\r\n"); 
5E66:  MOVLW  02
5E68:  MOVWF  FEA
5E6A:  MOVLW  08
5E6C:  MOVWF  FE9
5E6E:  MOVFF  FF2,24A
5E72:  BCF    FF2.7
5E74:  MOVLW  3D
5E76:  MOVWF  01
5E78:  CLRF   FF7
5E7A:  MOVLW  00
5E7C:  CALL   03AC
5E80:  TBLRD*-
5E82:  TBLRD*+
5E84:  MOVFF  FF5,FEE
5E88:  DECFSZ 01,F
5E8A:  BRA    5E82
5E8C:  MOVLB  2
5E8E:  BTFSC  x4A.7
5E90:  BSF    FF2.7
5E92:  MOVLW  02
5E94:  MOVWF  x68
5E96:  MOVLW  08
5E98:  MOVWF  x67
5E9A:  MOVLB  0
5E9C:  CALL   21D2
.................... 	COM1_send_str("\r\n"); 
5EA0:  MOVLW  0D
5EA2:  MOVLB  2
5EA4:  MOVWF  x08
5EA6:  MOVLW  0A
5EA8:  MOVWF  x09
5EAA:  CLRF   x0A
5EAC:  MOVLW  02
5EAE:  MOVWF  x68
5EB0:  MOVLW  08
5EB2:  MOVWF  x67
5EB4:  MOVLB  0
5EB6:  CALL   21D2
5EBA:  GOTO   62F4 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... void send_fail_message(void) // VERSION 3.3 17.1.2016 
.................... { 
.................... 	//COM1_send_str("\r\nFAIL\r\n"); 
.................... } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... float read_temperature(void)  
.................... { 
.................... 	float temp; 
.................... 	SINT val; 
.................... 	set_adc_channel(A2D_TEMP); // read temperature 
*
278E:  MOVLW  18
2790:  MOVWF  01
2792:  MOVF   FC2,W
2794:  ANDLW  83
2796:  IORWF  01,W
2798:  MOVWF  FC2
.................... 	delay_us(50); 
279A:  MOVLW  42
279C:  MOVWF  00
279E:  DECFSZ 00,F
27A0:  BRA    279E
27A2:  NOP   
.................... 	val = read_adc(); 
27A4:  BSF    FC2.1
27A6:  BTFSC  FC2.1
27A8:  BRA    27A6
27AA:  MOVFF  FC4,242
27AE:  MOVLB  2
27B0:  MOVFF  FC3,241
.................... 	temp = (float)val / 1024.0 * 3.3; 
27B4:  MOVFF  242,244
27B8:  MOVFF  241,243
27BC:  MOVLB  0
27BE:  BRA    24C4
27C0:  MOVFF  03,246
27C4:  MOVFF  02,245
27C8:  MOVFF  01,244
27CC:  MOVFF  00,243
27D0:  MOVFF  03,251
27D4:  MOVFF  02,250
27D8:  MOVFF  01,24F
27DC:  MOVFF  00,24E
27E0:  MOVLB  2
27E2:  CLRF   x55
27E4:  CLRF   x54
27E6:  CLRF   x53
27E8:  MOVLW  89
27EA:  MOVWF  x52
27EC:  MOVLB  0
27EE:  CALL   1948
27F2:  MOVFF  03,246
27F6:  MOVFF  02,245
27FA:  MOVFF  01,244
27FE:  MOVFF  00,243
2802:  MOVFF  03,251
2806:  MOVFF  02,250
280A:  MOVFF  01,24F
280E:  MOVFF  00,24E
2812:  MOVLW  33
2814:  MOVLB  2
2816:  MOVWF  x55
2818:  MOVWF  x54
281A:  MOVLW  53
281C:  MOVWF  x53
281E:  MOVLW  80
2820:  MOVWF  x52
2822:  MOVLB  0
2824:  CALL   1AA6
2828:  MOVFF  03,240
282C:  MOVFF  02,23F
2830:  MOVFF  01,23E
2834:  MOVFF  00,23D
.................... 	temp -= 0.75; 
2838:  BSF    FD8.1
283A:  MOVFF  240,246
283E:  MOVFF  23F,245
2842:  MOVFF  23E,244
2846:  MOVFF  23D,243
284A:  MOVLB  2
284C:  CLRF   x4A
284E:  CLRF   x49
2850:  MOVLW  40
2852:  MOVWF  x48
2854:  MOVLW  7E
2856:  MOVWF  x47
2858:  MOVLB  0
285A:  RCALL  2516
285C:  MOVFF  03,240
2860:  MOVFF  02,23F
2864:  MOVFF  01,23E
2868:  MOVFF  00,23D
.................... 	temp *= 100; 
286C:  MOVFF  240,251
2870:  MOVFF  23F,250
2874:  MOVFF  23E,24F
2878:  MOVFF  23D,24E
287C:  MOVLB  2
287E:  CLRF   x55
2880:  CLRF   x54
2882:  MOVLW  48
2884:  MOVWF  x53
2886:  MOVLW  85
2888:  MOVWF  x52
288A:  MOVLB  0
288C:  CALL   1AA6
2890:  MOVFF  03,240
2894:  MOVFF  02,23F
2898:  MOVFF  01,23E
289C:  MOVFF  00,23D
.................... 	temp += 25.0; 
28A0:  BCF    FD8.1
28A2:  MOVFF  240,246
28A6:  MOVFF  23F,245
28AA:  MOVFF  23E,244
28AE:  MOVFF  23D,243
28B2:  MOVLB  2
28B4:  CLRF   x4A
28B6:  CLRF   x49
28B8:  MOVLW  48
28BA:  MOVWF  x48
28BC:  MOVLW  83
28BE:  MOVWF  x47
28C0:  MOVLB  0
28C2:  RCALL  2516
28C4:  MOVFF  03,240
28C8:  MOVFF  02,23F
28CC:  MOVFF  01,23E
28D0:  MOVFF  00,23D
.................... 	return temp; 
28D4:  MOVFF  23D,00
28D8:  MOVFF  23E,01
28DC:  MOVFF  23F,02
28E0:  MOVFF  240,03
28E4:  RETURN 0
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status1(void)// VERSION 3.3 21.1.2016 
*
235C:  MOVLB  1
235E:  CLRF   xC0
.................... { 
.................... 	// float temp; 
.................... 	byte t = 0; 
.................... 	t =          (bit)setup.data_source ; 
2360:  CLRF   xC0
2362:  MOVLB  0
2364:  BTFSS  xB0.0
2366:  BRA    236E
2368:  MOVLB  1
236A:  INCF   xC0,F
236C:  MOVLB  0
.................... 	t = t + ( (bit)setup.data_polarity <<  1); 
236E:  MOVLW  00
2370:  BTFSC  xAE.0
2372:  MOVLW  01
2374:  MOVWF  00
2376:  BCF    FD8.0
2378:  RLCF   00,F
237A:  MOVF   00,W
237C:  MOVLB  1
237E:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.randomizer <<     2); 
2380:  MOVLW  00
2382:  MOVLB  0
2384:  BTFSC  xB2.0
2386:  MOVLW  01
2388:  MOVWF  00
238A:  RLCF   00,F
238C:  RLCF   00,F
238E:  MOVLW  FC
2390:  ANDWF  00,F
2392:  MOVF   00,W
2394:  MOVLB  1
2396:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.clock_source <<   3); 
2398:  MOVLW  00
239A:  MOVLB  0
239C:  BTFSC  xAF.0
239E:  MOVLW  01
23A0:  MOVWF  00
23A2:  RLCF   00,F
23A4:  RLCF   00,F
23A6:  RLCF   00,F
23A8:  MOVLW  F8
23AA:  ANDWF  00,F
23AC:  MOVF   00,W
23AE:  MOVLB  1
23B0:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.clock_polarity << 4); 
23B2:  MOVLW  00
23B4:  MOVLB  0
23B6:  BTFSC  xAD.0
23B8:  MOVLW  01
23BA:  MOVWF  00
23BC:  SWAPF  00,F
23BE:  MOVLW  F0
23C0:  ANDWF  00,F
23C2:  MOVF   00,W
23C4:  MOVLB  1
23C6:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.SOQPSK <<         5); 
23C8:  MOVLW  00
23CA:  MOVLB  0
23CC:  BTFSC  xB4.0
23CE:  MOVLW  01
23D0:  MOVWF  00
23D2:  SWAPF  00,F
23D4:  RLCF   00,F
23D6:  MOVLW  E0
23D8:  ANDWF  00,F
23DA:  MOVF   00,W
23DC:  MOVLB  1
23DE:  ADDWF  xC0,F
.................... 	t = t + ( (bit)0 <<       6); 
.................... 	t = t + ( (bit)0 <<       7); 
.................... 	 
.................... 	//  setup.SOQPSK, setup.randomizer, setup.data_polarity, rp, setup.data_source, 
.................... 	return t; 
23E0:  CLRF   03
23E2:  MOVFF  1C0,01
23E6:  MOVFF  03,02
23EA:  MOVLB  0
23EC:  GOTO   2932 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
....................  
.................... SINT Bits_status2(void)// VERSION 3.3 2.2.2016 
.................... { 
.................... 	// float temp; 
.................... 	set_adc_channel(A2D_PREV); // select forward power input 
23F0:  MOVLW  10
23F2:  MOVWF  01
23F4:  MOVF   FC2,W
23F6:  ANDLW  83
23F8:  IORWF  01,W
23FA:  MOVWF  FC2
.................... 	delay_us(20); 
23FC:  MOVLW  1A
23FE:  MOVWF  00
2400:  DECFSZ 00,F
2402:  BRA    2400
2404:  NOP   
.................... 	revp = read_adc(); 
2406:  BSF    FC2.1
2408:  BTFSC  FC2.1
240A:  BRA    2408
240C:  MOVFF  FC4,109
2410:  MOVLB  1
2412:  MOVFF  FC3,108
.................... 	if (revp <= 580) 
2416:  MOVF   x09,W
2418:  SUBLW  02
241A:  BNC   2428
241C:  BNZ   2424
241E:  MOVF   x08,W
2420:  SUBLW  44
2422:  BNC   2428
....................     revp_status = 0;// Q strcpy(revstat, "GOOD"); 
2424:  BCF    xA2.0
2426:  BRA    242A
.................... 	else 
.................... 	revp_status = 1;//Q strcpy(revstat, "BAD"); 
2428:  BSF    xA2.0
.................... 	 
.................... 	byte t = 0; 
242A:  CLRF   xC0
.................... 	t =       (bit)setup.cot ; //RB 
242C:  CLRF   xC0
242E:  MOVLB  0
2430:  BTFSS  xF8.0
2432:  BRA    243A
2434:  MOVLB  1
2436:  INCF   xC0,F
2438:  MOVLB  0
.................... 	t = t + ( (bit)setup.rc <<  1); 
243A:  MOVLW  00
243C:  BTFSC  xFA.0
243E:  MOVLW  01
2440:  MOVWF  00
2442:  BCF    FD8.0
2444:  RLCF   00,F
2446:  MOVF   00,W
2448:  MOVLB  1
244A:  ADDWF  xC0,F
.................... 	t = t + ( (bit)gl_current_power_en_value << 2);//RF 
244C:  MOVLW  00
244E:  BTFSC  x10.0
2450:  MOVLW  01
2452:  MOVWF  00
2454:  RLCF   00,F
2456:  RLCF   00,F
2458:  MOVLW  FC
245A:  ANDWF  00,F
245C:  MOVF   00,W
245E:  ADDWF  xC0,F
.................... 	t = t + ( (bit)(gl_current_power_level == power_level) <<  3); 
2460:  MOVF   19,W
2462:  SUBWF  x0E,W
2464:  BNZ   246C
2466:  MOVF   1A,W
2468:  SUBWF  x0F,W
246A:  BZ    2470
246C:  MOVLW  00
246E:  BRA    2472
2470:  MOVLW  01
2472:  MOVWF  01
2474:  MOVLW  00
2476:  BTFSC  01.0
2478:  MOVLW  01
247A:  MOVWF  00
247C:  RLCF   00,F
247E:  RLCF   00,F
2480:  RLCF   00,F
2482:  MOVLW  F8
2484:  ANDWF  00,F
2486:  MOVF   00,W
2488:  ADDWF  xC0,F
.................... 	t = t + ( (bit)setup.UART_Status << 4); 
248A:  MOVLW  00
248C:  MOVLB  0
248E:  BTFSC  xFF.0
2490:  MOVLW  01
2492:  MOVWF  00
2494:  SWAPF  00,F
2496:  MOVLW  F0
2498:  ANDWF  00,F
249A:  MOVF   00,W
249C:  MOVLB  1
249E:  ADDWF  xC0,F
.................... 	t = t + ( (bit)revp_status <<       5); 
24A0:  MOVLW  00
24A2:  BTFSC  xA2.0
24A4:  MOVLW  01
24A6:  MOVWF  00
24A8:  SWAPF  00,F
24AA:  RLCF   00,F
24AC:  MOVLW  E0
24AE:  ANDWF  00,F
24B0:  MOVF   00,W
24B2:  ADDWF  xC0,F
.................... 	t = t + ( (bit)0 <<       6); 
.................... 	t = t + ( (bit)0 <<       7); 
.................... 	 
.................... 	 
.................... 	return t; 
24B4:  CLRF   03
24B6:  MOVFF  1C0,01
24BA:  MOVFF  03,02
24BE:  MOVLB  0
24C0:  GOTO   2938 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... //----------------------------------------------------------------------------   
.................... SINT  set_power_level(void) 
.................... { 
.................... 	UINT idx; 
.................... 	idx = get_int(); 
*
374A:  CALL   2B56
374E:  MOVFF  02,229
3752:  MOVFF  01,228
.................... 	setup.bitpower_level = idx;// VERSION 3.3 29.02.2016 
3756:  MOVFF  228,101
.................... 	if (idx <= 40 && idx >= 20) 
375A:  MOVLB  2
375C:  MOVF   x29,F
375E:  BNZ   37AE
3760:  MOVF   x28,W
3762:  SUBLW  28
3764:  BNC   37AE
3766:  MOVF   x29,F
3768:  BNZ   3770
376A:  MOVF   x28,W
376C:  SUBLW  13
376E:  BC    37AE
....................     { 
.................... 		setup.power_level = idx - 20; 
3770:  MOVLW  14
3772:  SUBWF  x28,W
3774:  MOVLB  0
3776:  MOVWF  xB8
3778:  MOVLW  00
377A:  MOVLB  2
377C:  SUBWFB x29,W
377E:  MOVLB  0
3780:  MOVWF  xB9
.................... 		power_level = (setup.power_in[setup.power_level]); // * 33) / 50; 
3782:  BCF    FD8.0
3784:  RLCF   xB8,W
3786:  MOVWF  02
3788:  RLCF   xB9,W
378A:  MOVWF  03
378C:  MOVF   02,W
378E:  ADDLW  C7
3790:  MOVWF  FE9
3792:  MOVLW  00
3794:  ADDWFC 03,W
3796:  MOVWF  FEA
3798:  MOVFF  FEC,1A
379C:  MOVF   FED,F
379E:  MOVFF  FEF,19
.................... 		return 1; 
37A2:  MOVLW  01
37A4:  MOVWF  01
37A6:  MOVLW  00
37A8:  MOVWF  02
37AA:  BRA    37B4
37AC:  MOVLB  2
.................... 	} 
.................... 	return 0; 
37AE:  MOVLW  00
37B0:  MOVWF  01
37B2:  MOVWF  02
37B4:  MOVLB  0
37B6:  GOTO   4D6C (RETURN)
.................... } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... SINT  set_low_power_level(void) 
.................... { 
.................... 	UINT idx; 
.................... 	idx = get_int(); 
*
36DA:  CALL   2B56
36DE:  MOVFF  02,229
36E2:  MOVFF  01,228
.................... 	setup.bitlow_power_level  = idx;// VERSION 3.3 29.02.2016 
36E6:  MOVFF  228,100
.................... 	if (idx <= 40 && idx >= 20) 
36EA:  MOVLB  2
36EC:  MOVF   x29,F
36EE:  BNZ   373E
36F0:  MOVF   x28,W
36F2:  SUBLW  28
36F4:  BNC   373E
36F6:  MOVF   x29,F
36F8:  BNZ   3700
36FA:  MOVF   x28,W
36FC:  SUBLW  13
36FE:  BC    373E
....................     { 
.................... 		setup.power_low_level = idx - 20; 
3700:  MOVLW  14
3702:  SUBWF  x28,W
3704:  MOVLB  0
3706:  MOVWF  xF6
3708:  MOVLW  00
370A:  MOVLB  2
370C:  SUBWFB x29,W
370E:  MOVLB  0
3710:  MOVWF  xF7
.................... 		low_power_level = (setup.power_in[setup.power_low_level]); // * 33) / 50; 
3712:  BCF    FD8.0
3714:  RLCF   xF6,W
3716:  MOVWF  02
3718:  RLCF   xF7,W
371A:  MOVWF  03
371C:  MOVF   02,W
371E:  ADDLW  C7
3720:  MOVWF  FE9
3722:  MOVLW  00
3724:  ADDWFC 03,W
3726:  MOVWF  FEA
3728:  MOVFF  FEC,18
372C:  MOVF   FED,F
372E:  MOVFF  FEF,17
.................... 		return 1; 
3732:  MOVLW  01
3734:  MOVWF  01
3736:  MOVLW  00
3738:  MOVWF  02
373A:  BRA    3744
373C:  MOVLB  2
.................... 	} 
.................... 	return 0; 
373E:  MOVLW  00
3740:  MOVWF  01
3742:  MOVWF  02
3744:  MOVLB  0
3746:  GOTO   4CB4 (RETURN)
.................... } 
....................  
.................... void update_temperature_string()  
.................... { 
.................... 	if(setup.pwr) 
*
3614:  MOVF   xAA,W
3616:  IORWF  xAB,W
3618:  BZ    367C
.................... 	{ 
.................... 		sprintf(ttccp_error_message, "\rTEMP=%6.2fdeg\r\nOK\n", read_temperature()); 
361A:  CALL   278E
361E:  MOVFF  03,240
3622:  MOVFF  02,23F
3626:  MOVFF  01,23E
362A:  MOVFF  00,23D
362E:  MOVLW  01
3630:  MOVLB  1
3632:  MOVWF  xA4
3634:  MOVLW  78
3636:  MOVWF  xA3
3638:  MOVLW  C4
363A:  MOVWF  FF6
363C:  MOVLW  0C
363E:  MOVWF  FF7
3640:  MOVLW  06
3642:  MOVLB  2
3644:  MOVWF  x41
3646:  MOVLB  0
3648:  RCALL  3102
364A:  MOVLW  05
364C:  MOVWF  FE9
364E:  MOVFF  240,244
3652:  MOVFF  23F,243
3656:  MOVFF  23E,242
365A:  MOVFF  23D,241
365E:  MOVLW  02
3660:  MOVLB  2
3662:  MOVWF  x45
3664:  MOVLB  0
3666:  BRA    3464
3668:  MOVLW  CF
366A:  MOVWF  FF6
366C:  MOVLW  0C
366E:  MOVWF  FF7
3670:  MOVLW  08
3672:  MOVLB  2
3674:  MOVWF  x41
3676:  MOVLB  0
3678:  RCALL  3102
.................... 	} 
367A:  BRA    36B6
.................... 	else 
.................... 	{ 
.................... 		COM1_send_str("\r\n\nNO TEMP-RF OFF \r\n"); 
367C:  MOVLW  02
367E:  MOVWF  FEA
3680:  MOVLW  28
3682:  MOVWF  FE9
3684:  MOVFF  FF2,23D
3688:  BCF    FF2.7
368A:  MOVLW  15
368C:  MOVWF  01
368E:  CLRF   FF7
3690:  MOVLW  00
3692:  CALL   0404
3696:  TBLRD*-
3698:  TBLRD*+
369A:  MOVFF  FF5,FEE
369E:  DECFSZ 01,F
36A0:  BRA    3698
36A2:  MOVLB  2
36A4:  BTFSC  x3D.7
36A6:  BSF    FF2.7
36A8:  MOVLW  02
36AA:  MOVWF  x68
36AC:  MOVLW  28
36AE:  MOVWF  x67
36B0:  MOVLB  0
36B2:  CALL   21D2
.................... 	} 
36B6:  RETURN 0
.................... } 
.................... //---------------------------------------------------------------------------- 
.................... //---------------------------------------------------------------------------- 
.................... // VERSION 3.3 17.1.2016 
.................... //---------------------------------------------------------------------------- 
.................... /* 
.................... 	The message structure is defined below. 
.................... 	 
.................... 	Byte# Description Remarks 
.................... 	1 Header  Constant - 47 Hex 
.................... 	2 Temperature Send 2's complement 
.................... 	3 Power level 
.................... 	4 Current 
.................... 	5 PLL lock 
.................... 	6 Checksum  Checksum of all preceding bytes 
.................... 	 
.................... 	Table 1 - Status Packet structure 
.................... 	 
.................... 	The status message consists of 6 serial bytes of 10 bits, for a total of 60 bits. 
.................... 	Transmission time is 0.52mS, max PRI 10mS. 
.................... */ 
....................  
.................... void prepare_binary_status(void) 
*
2924:  MOVLB  1
2926:  CLRF   xB9
2928:  CLRF   xB8
.................... { 
.................... 	UINT chksum = 0, idx; 
.................... 	SINT current_temperature;   
.................... 	power_output(); 
292A:  MOVLB  0
292C:  CALL   1F34
.................... 	byte BitsStatus1,BitsStatus2; 
.................... 	BitsStatus1 = Bits_status1(); 
2930:  BRA    235C
2932:  MOVFF  01,1BE
.................... 	BitsStatus2 = Bits_status2(); 
2936:  BRA    23F0
2938:  MOVFF  01,1BF
.................... 	 
.................... 	current_temperature = (SINT)(read_temperature() * 100); 
293C:  RCALL  278E
293E:  MOVFF  03,1C3
2942:  MOVFF  02,1C2
2946:  MOVFF  01,1C1
294A:  MOVFF  00,1C0
294E:  MOVFF  03,251
2952:  MOVFF  02,250
2956:  MOVFF  01,24F
295A:  MOVFF  00,24E
295E:  MOVLB  2
2960:  CLRF   x55
2962:  CLRF   x54
2964:  MOVLW  48
2966:  MOVWF  x53
2968:  MOVLW  85
296A:  MOVWF  x52
296C:  MOVLB  0
296E:  CALL   1AA6
2972:  MOVFF  03,1C3
2976:  MOVFF  02,1C2
297A:  MOVFF  01,1C1
297E:  MOVFF  00,1C0
2982:  BRA    28E6
2984:  MOVFF  02,1BD
2988:  MOVFF  01,1BC
.................... 	//measured_current = read_current(); 
.................... 	//power_level_stat = current_power; 
.................... 	status_buffer[0] = 0xFB;                              // Synchronization Byte 1 
298C:  MOVLW  FB
298E:  MOVLB  1
2990:  MOVWF  x1A
.................... 	status_buffer[1] = 0x60;                              // Synchronization Byte 2 
2992:  MOVLW  60
2994:  MOVWF  x1B
.................... 	status_buffer[2] = TX_Counter;                        // The counter increments by one each time an update is sent 0 to 255 
2996:  MOVFF  116,11C
.................... 	status_buffer[3] = (setup.frequency >> 8) & 0xff;      // MSB TX frequency  
299A:  MOVFF  B7,11D
.................... 	status_buffer[4] = setup.frequency & 0xff;            // LSB TX frequency  
299E:  MOVFF  B6,11E
29A2:  MOVLB  1
.................... 	status_buffer[5] = setup.mode;                        // State of modulation state 
29A4:  MOVFF  AC,11F
.................... 	status_buffer[6] = BitsStatus1;                       // Bits status of: spare, spare, Differential encoding ,Clock inverted ,Clock source ,Data randomization ,Data inverted, Data source 
29A8:  MOVFF  1BE,120
.................... 	if(setup.pwr && gl_current_power_en_value) 
29AC:  MOVLB  0
29AE:  MOVF   xAA,W
29B0:  IORWF  xAB,W
29B2:  BZ    29CE
29B4:  MOVLB  1
29B6:  MOVF   x10,W
29B8:  IORWF  x11,W
29BA:  BTFSS  FD8.2
29BC:  BRA    29C2
29BE:  MOVLB  0
29C0:  BRA    29CE
.................... 	{ 
.................... 		status_buffer[7] = (current_temperature >> 8) & 0xff;  // MSB TX Temperature  
29C2:  MOVFF  1BD,121
.................... 		status_buffer[8] = current_temperature & 0xff;        // LSB TX Temperature  
29C6:  MOVFF  1BC,122
.................... 	}  
29CA:  BRA    29D6
29CC:  MOVLB  0
.................... 	else  
.................... 	{ 
.................... 		// signal that the transmiter is off 
.................... 		status_buffer[7] = 0x7f; 
29CE:  MOVLW  7F
29D0:  MOVLB  1
29D2:  MOVWF  x21
.................... 		status_buffer[8] = 0xff; 
29D4:  SETF   x22
.................... 	} 
.................... 	status_buffer[9] = (setup.bitrate >> 8) & 0xff;       // MSB Bit rate state 
29D6:  MOVFF  A9,123
.................... 	status_buffer[10] = setup.bitrate & 0xff;             // LSB Bit rate state  
29DA:  MOVFF  A8,124
29DE:  MOVLB  1
.................... 	status_buffer[11] = current_power;                    // TX power in dBm 
29E0:  MOVFF  10C,125
.................... 	status_buffer[12] = setup.internal_pattern;           // Data type while using internal data 
29E4:  MOVFF  B1,126
.................... 	status_buffer[13] = BitsStatus2;                      // Bits status of: Reverse Power N/A 
29E8:  MOVFF  1BF,127
.................... 	status_buffer[14] = setup.bitlow_power_level;         // TX low power in dBm (VL) 
29EC:  MOVFF  100,128
.................... 	status_buffer[15] = setup.bitpower_level;             // TX low power in dBm (VP) 
29F0:  MOVFF  101,129
.................... 	status_buffer[16] = revp/2;                           // Revers power div by 2 in order to make it 1 BIT 
29F4:  BCF    FD8.0
29F6:  RRCF   x09,W
29F8:  RRCF   x08,W
29FA:  MOVWF  x2A
.................... 	status_buffer[17] = VER;                              // TX VERSION 
29FC:  MOVLW  01
29FE:  MOVWF  x2B
.................... 	status_buffer[18] = (setup.unit_ID >> 8) & 0xff;      // MSB TX Serial number 
2A00:  MOVFF  F5,12C
.................... 	status_buffer[19] = setup.unit_ID & 0xff;             // LSB TX Serial number 
2A04:  MOVFF  F4,12D
2A08:  MOVLB  1
.................... 	status_buffer[20] = (setup.setup_version >> 8)&0xff;  // MSB of the config version 
2A0A:  MOVFF  105,12E
.................... 	status_buffer[21] = setup.setup_version & 0xff;       // LSB of the config version 
2A0E:  MOVFF  104,12F
.................... 	status_buffer[22] = 0xAA;                             // Spare 
2A12:  MOVLW  AA
2A14:  MOVWF  x30
.................... 	status_buffer[23] = 0xAA;                             // Spare 
2A16:  MOVWF  x31
.................... 	 
.................... 	for (idx = 0; idx < BINARY_STATUS_LENTGH-2; idx++) 
2A18:  CLRF   xBB
2A1A:  CLRF   xBA
2A1C:  MOVF   xBB,F
2A1E:  BNZ   2A42
2A20:  MOVF   xBA,W
2A22:  SUBLW  17
2A24:  BNC   2A42
.................... 	{ 
.................... 		chksum += status_buffer[idx]; 
2A26:  MOVLW  1A
2A28:  ADDWF  xBA,W
2A2A:  MOVWF  FE9
2A2C:  MOVLW  01
2A2E:  ADDWFC xBB,W
2A30:  MOVWF  FEA
2A32:  MOVF   FEF,W
2A34:  ADDWF  xB8,F
2A36:  MOVLW  00
2A38:  ADDWFC xB9,F
2A3A:  INCF   xBA,F
2A3C:  BTFSC  FD8.2
2A3E:  INCF   xBB,F
2A40:  BRA    2A1C
.................... 	} 
.................... 	// add the checksum to the end of the binary message, LSB first (request by the client 16.11.16) 
.................... 	status_buffer[BINARY_STATUS_LENTGH-2] = chksum & 0xff; 
2A42:  MOVFF  1B8,132
.................... 	status_buffer[BINARY_STATUS_LENTGH-1] =(chksum >> 8) & 0xff; 
2A46:  MOVFF  1B9,133
2A4A:  MOVLB  0
2A4C:  GOTO   6D96 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... // command format: 
.................... //   $<cmd> [<number>[,<number>]]<cr> 
.................... // where: 
.................... //    <cmd>       a two letter operation specifier 
.................... //    <number>    value to be used in operation 
.................... //    <cr>        0x0D character ending command string 
.................... // 
.................... UCHAR process_dollar_commands(void) 
.................... { 
.................... 	UCHAR chr, idx, device, addr, data, buf[40]; 
.................... 	ULONG freq, bitrate; 
.................... 	UINT  value; 
.................... 	chr = 2; 
*
625C:  MOVLW  02
625E:  MOVLB  1
6260:  MOVWF  xD1
.................... 	comm_ptr = 0; 
6262:  CLRF   x41
.................... 	switch (toupper(get_char())) 
6264:  MOVLB  0
6266:  CALL   2A9A
626A:  MOVFF  02,209
626E:  MOVFF  01,208
6272:  MOVLB  2
6274:  MOVF   x09,F
6276:  BNZ   627E
6278:  MOVF   x08,W
627A:  SUBLW  60
627C:  BC    628E
627E:  MOVF   x09,F
6280:  BNZ   628E
6282:  MOVF   x08,W
6284:  SUBLW  7A
6286:  BNC   628E
6288:  MOVF   x08,W
628A:  ANDLW  DF
628C:  BRA    6290
628E:  MOVF   x08,W
6290:  XORLW  48
6292:  MOVLB  0
6294:  BZ    62F2
6296:  XORLW  09
6298:  BZ    62FC
629A:  XORLW  02
629C:  BTFSC  FD8.2
629E:  BRA    63D2
62A0:  XORLW  07
62A2:  BTFSC  FD8.2
62A4:  BRA    64A8
62A6:  XORLW  0B
62A8:  BTFSC  FD8.2
62AA:  BRA    6528
62AC:  XORLW  1D
62AE:  BTFSC  FD8.2
62B0:  BRA    6568
62B2:  XORLW  10
62B4:  BTFSC  FD8.2
62B6:  BRA    65AA
62B8:  XORLW  05
62BA:  BTFSC  FD8.2
62BC:  BRA    6604
62BE:  XORLW  01
62C0:  BTFSC  FD8.2
62C2:  BRA    6720
62C4:  XORLW  15
62C6:  BTFSC  FD8.2
62C8:  BRA    67D8
62CA:  XORLW  07
62CC:  BTFSC  FD8.2
62CE:  BRA    687E
62D0:  XORLW  65
62D2:  BTFSC  FD8.2
62D4:  BRA    6948
62D6:  XORLW  03
62D8:  BTFSC  FD8.2
62DA:  GOTO   6956
62DE:  XORLW  01
62E0:  BTFSC  FD8.2
62E2:  GOTO   6960
62E6:  XORLW  64
62E8:  BTFSC  FD8.2
62EA:  GOTO   696E
62EE:  GOTO   6984
....................     { 
.................... 		case 'H': 
.................... 		list_help1(); 
62F2:  BRA    5C42
.................... 		return 0; 
62F4:  MOVLW  00
62F6:  MOVWF  01
62F8:  GOTO   698E
.................... 		case 'A': 
.................... 		switch (toupper(get_char())) 
62FC:  CALL   2A9A
6300:  MOVFF  02,209
6304:  MOVFF  01,208
6308:  MOVLB  2
630A:  MOVF   x09,F
630C:  BNZ   6314
630E:  MOVF   x08,W
6310:  SUBLW  60
6312:  BC    6324
6314:  MOVF   x09,F
6316:  BNZ   6324
6318:  MOVF   x08,W
631A:  SUBLW  7A
631C:  BNC   6324
631E:  MOVF   x08,W
6320:  ANDLW  DF
6322:  BRA    6326
6324:  MOVF   x08,W
6326:  XORLW  54
6328:  MOVLB  0
632A:  BZ    6332
632C:  XORLW  1D
632E:  BZ    633C
6330:  BRA    63D0
....................         { 
.................... 			case 'T': 
.................... 			idx = get_int(); 
6332:  CALL   2B56
6336:  MOVFF  01,1D2
.................... 			 
.................... 			// write to attenuator 
.................... 			break; 
633A:  BRA    63D0
.................... 			case 'I': 
.................... 			idx = get_int(); 
633C:  CALL   2B56
6340:  MOVFF  01,1D2
.................... 			if (idx && idx < 4) 
6344:  MOVLB  1
6346:  MOVF   xD2,F
6348:  BZ    63CE
634A:  MOVF   xD2,W
634C:  SUBLW  03
634E:  BNC   63CE
....................             { 
.................... 				set_adc_channel(idx-1); 
6350:  MOVLW  01
6352:  SUBWF  xD2,W
6354:  MOVLB  2
6356:  MOVWF  x08
6358:  RLCF   x08,W
635A:  MOVWF  00
635C:  RLCF   00,F
635E:  MOVLW  FC
6360:  ANDWF  00,F
6362:  MOVF   FC2,W
6364:  ANDLW  83
6366:  IORWF  00,W
6368:  MOVWF  FC2
.................... 				delay_us(30); 
636A:  MOVLW  27
636C:  MOVWF  00
636E:  DECFSZ 00,F
6370:  BRA    636E
6372:  BRA    6374
.................... 				value = read_adc(); 
6374:  BSF    FC2.1
6376:  BTFSC  FC2.1
6378:  BRA    6376
637A:  MOVFF  FC3,206
637E:  MOVFF  FC4,207
.................... 				sprintf(buf, "$AR %lu\r", value); 
6382:  MOVLW  01
6384:  MOVLB  1
6386:  MOVWF  xA4
6388:  MOVLW  D6
638A:  MOVWF  xA3
638C:  MOVLW  D8
638E:  MOVWF  FF6
6390:  MOVLW  0C
6392:  MOVWF  FF7
6394:  MOVLW  04
6396:  MOVLB  2
6398:  MOVWF  x41
639A:  MOVLB  0
639C:  CALL   3102
63A0:  MOVLW  10
63A2:  MOVWF  FE9
63A4:  MOVFF  207,22D
63A8:  MOVFF  206,22C
63AC:  CALL   312A
63B0:  MOVLW  0D
63B2:  MOVLB  2
63B4:  MOVWF  x4E
63B6:  MOVLB  0
63B8:  CALL   30E0
.................... 				COM1_send_str(buf); 
63BC:  MOVLW  01
63BE:  MOVLB  2
63C0:  MOVWF  x68
63C2:  MOVLW  D6
63C4:  MOVWF  x67
63C6:  MOVLB  0
63C8:  CALL   21D2
63CC:  MOVLB  1
.................... 			} 
.................... 			break; 
63CE:  MOVLB  0
.................... 		} 
.................... 		break; 
63D0:  BRA    698A
.................... 		case 'C': 
.................... 		chr = toupper(get_char()); 
63D2:  CALL   2A9A
63D6:  MOVFF  02,209
63DA:  MOVFF  01,208
63DE:  MOVLB  2
63E0:  MOVF   x09,F
63E2:  BNZ   63EA
63E4:  MOVF   x08,W
63E6:  SUBLW  60
63E8:  BC    63FA
63EA:  MOVF   x09,F
63EC:  BNZ   63FA
63EE:  MOVF   x08,W
63F0:  SUBLW  7A
63F2:  BNC   63FA
63F4:  MOVF   x08,W
63F6:  ANDLW  DF
63F8:  BRA    63FC
63FA:  MOVF   x08,W
63FC:  MOVLB  1
63FE:  MOVWF  xD1
.................... 		if (chr == 'F') 
6400:  MOVF   xD1,W
6402:  SUBLW  46
6404:  BNZ   6438
....................         { 
.................... 			freq = get_frequency(); 
6406:  MOVLB  0
6408:  CALL   31E6
640C:  MOVLB  2
640E:  CLRF   x01
6410:  CLRF   x00
6412:  MOVFF  02,1FF
6416:  MOVFF  01,1FE
.................... 			PLL_compute_freq_parameters(freq); 
641A:  MOVFF  1FF,209
641E:  MOVFF  1FE,208
6422:  MOVFF  1FF,233
6426:  MOVFF  1FE,232
642A:  MOVLB  0
642C:  CALL   14E4
.................... 			PLL_update(); 
6430:  CALL   17BC
.................... 		} 
6434:  BRA    64A2
6436:  MOVLB  1
.................... 		else if (chr == 'P') 
6438:  MOVF   xD1,W
643A:  SUBLW  50
643C:  BNZ   64A4
....................         { 
.................... 			idx = get_int(); 
643E:  MOVLB  0
6440:  CALL   2B56
6444:  MOVFF  01,1D2
.................... 			if (idx < 2) 
6448:  MOVLB  1
644A:  MOVF   xD2,W
644C:  SUBLW  01
644E:  BNC   64A4
.................... 			{ 
.................... 				setup.clock_polarity = idx & 1; 
6450:  MOVF   xD2,W
6452:  ANDLW  01
6454:  MOVLB  0
6456:  MOVWF  xAD
.................... 				sprintf(buf, "$CP %u\r", idx); 
6458:  MOVLW  01
645A:  MOVLB  1
645C:  MOVWF  xA4
645E:  MOVLW  D6
6460:  MOVWF  xA3
6462:  MOVLW  E2
6464:  MOVWF  FF6
6466:  MOVLW  0C
6468:  MOVWF  FF7
646A:  MOVLW  04
646C:  MOVLB  2
646E:  MOVWF  x41
6470:  MOVLB  0
6472:  CALL   3102
6476:  MOVFF  1D2,22C
647A:  MOVLW  1B
647C:  MOVLB  2
647E:  MOVWF  x2D
6480:  MOVLB  0
6482:  CALL   327A
6486:  MOVLW  0D
6488:  MOVLB  2
648A:  MOVWF  x4E
648C:  MOVLB  0
648E:  CALL   30E0
.................... 				COM1_send_str(buf); 
6492:  MOVLW  01
6494:  MOVLB  2
6496:  MOVWF  x68
6498:  MOVLW  D6
649A:  MOVWF  x67
649C:  MOVLB  0
649E:  CALL   21D2
64A2:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		break; 
64A4:  MOVLB  0
64A6:  BRA    698A
.................... 		case 'D': 
.................... 		if (toupper(get_char()) == 'I') 
64A8:  CALL   2A9A
64AC:  MOVFF  02,209
64B0:  MOVFF  01,208
64B4:  MOVLB  2
64B6:  MOVF   x09,F
64B8:  BNZ   64C0
64BA:  MOVF   x08,W
64BC:  SUBLW  60
64BE:  BC    64D0
64C0:  MOVF   x09,F
64C2:  BNZ   64D0
64C4:  MOVF   x08,W
64C6:  SUBLW  7A
64C8:  BNC   64D0
64CA:  MOVF   x08,W
64CC:  ANDLW  DF
64CE:  BRA    64D2
64D0:  MOVF   x08,W
64D2:  SUBLW  49
64D4:  BNZ   6524
....................         { 
.................... 			idx = input_c(); // change to REAL input ports 
64D6:  MOVFF  F82,1D2
.................... 			sprintf(buf, "$DR %02X\r", idx); 
64DA:  MOVLW  01
64DC:  MOVLB  1
64DE:  MOVWF  xA4
64E0:  MOVLW  D6
64E2:  MOVWF  xA3
64E4:  MOVLW  EA
64E6:  MOVWF  FF6
64E8:  MOVLW  0C
64EA:  MOVWF  FF7
64EC:  MOVLW  04
64EE:  MOVLB  2
64F0:  MOVWF  x41
64F2:  MOVLB  0
64F4:  CALL   3102
64F8:  MOVFF  1D2,208
64FC:  MOVLW  37
64FE:  MOVLB  2
6500:  MOVWF  x09
6502:  MOVLB  0
6504:  RCALL  5EBE
6506:  MOVLW  0D
6508:  MOVLB  2
650A:  MOVWF  x4E
650C:  MOVLB  0
650E:  CALL   30E0
.................... 			COM1_send_str(buf); 
6512:  MOVLW  01
6514:  MOVLB  2
6516:  MOVWF  x68
6518:  MOVLW  D6
651A:  MOVWF  x67
651C:  MOVLB  0
651E:  CALL   21D2
6522:  MOVLB  2
.................... 		} 
.................... 		break; 
6524:  MOVLB  0
6526:  BRA    698A
.................... 		case 'O': 
.................... 		if (toupper(get_char()) == 'T') 
6528:  CALL   2A9A
652C:  MOVFF  02,209
6530:  MOVFF  01,208
6534:  MOVLB  2
6536:  MOVF   x09,F
6538:  BNZ   6540
653A:  MOVF   x08,W
653C:  SUBLW  60
653E:  BC    6550
6540:  MOVF   x09,F
6542:  BNZ   6550
6544:  MOVF   x08,W
6546:  SUBLW  7A
6548:  BNC   6550
654A:  MOVF   x08,W
654C:  ANDLW  DF
654E:  BRA    6552
6550:  MOVF   x08,W
6552:  SUBLW  54
6554:  BNZ   6564
....................         { 
.................... 			value = get_hex(); 
6556:  MOVLB  0
6558:  RCALL  5F08
655A:  MOVFF  01,207
655E:  MOVFF  00,206
6562:  MOVLB  2
.................... 			// output bits 
.................... 		} 
.................... 		break; 
6564:  MOVLB  0
6566:  BRA    698A
.................... 		case 'R': 
.................... 		if (toupper(get_char()) == 'D') 
6568:  CALL   2A9A
656C:  MOVFF  02,209
6570:  MOVFF  01,208
6574:  MOVLB  2
6576:  MOVF   x09,F
6578:  BNZ   6580
657A:  MOVF   x08,W
657C:  SUBLW  60
657E:  BC    6590
6580:  MOVF   x09,F
6582:  BNZ   6590
6584:  MOVF   x08,W
6586:  SUBLW  7A
6588:  BNC   6590
658A:  MOVF   x08,W
658C:  ANDLW  DF
658E:  BRA    6592
6590:  MOVF   x08,W
6592:  SUBLW  44
6594:  BNZ   65A6
....................         { 
.................... 			output_high(D2A_RESET); 
6596:  BSF    F8A.3
.................... 			delay_ms(100); 
6598:  MOVLW  64
659A:  MOVWF  x3E
659C:  MOVLB  0
659E:  CALL   0F54
.................... 			output_low(D2A_RESET); 
65A2:  BCF    F8A.3
65A4:  MOVLB  2
.................... 		} 
.................... 		break; 
65A6:  MOVLB  0
65A8:  BRA    698A
.................... 		case 'B':             // bit rate 
.................... 		if (toupper(get_char()) == 'R') 
65AA:  CALL   2A9A
65AE:  MOVFF  02,209
65B2:  MOVFF  01,208
65B6:  MOVLB  2
65B8:  MOVF   x09,F
65BA:  BNZ   65C2
65BC:  MOVF   x08,W
65BE:  SUBLW  60
65C0:  BC    65D2
65C2:  MOVF   x09,F
65C4:  BNZ   65D2
65C6:  MOVF   x08,W
65C8:  SUBLW  7A
65CA:  BNC   65D2
65CC:  MOVF   x08,W
65CE:  ANDLW  DF
65D0:  BRA    65D4
65D2:  MOVF   x08,W
65D4:  SUBLW  52
65D6:  BNZ   6600
....................         { 
.................... 			bitrate = str_to_long(); 
65D8:  MOVLB  0
65DA:  BRA    6004
65DC:  MOVFF  03,205
65E0:  MOVFF  02,204
65E4:  MOVFF  01,203
65E8:  MOVFF  00,202
.................... 			set_bitrate(bitrate); 
65EC:  MOVFF  203,209
65F0:  MOVFF  202,208
65F4:  MOVFF  203,20B
65F8:  MOVFF  202,20A
65FC:  BRA    60C0
65FE:  MOVLB  2
.................... 		} 
.................... 		break; 
6600:  MOVLB  0
6602:  BRA    698A
.................... 		case 'G': 
.................... 		device = get_char(); 
6604:  CALL   2A9A
6608:  MOVFF  01,1D3
.................... 		addr = get_hex(); 
660C:  RCALL  5F08
660E:  MOVFF  00,1D4
.................... 		switch (toupper(device)) 
6612:  MOVLB  1
6614:  MOVF   xD3,W
6616:  SUBLW  60
6618:  BC    6626
661A:  MOVF   xD3,W
661C:  SUBLW  7A
661E:  BNC   6626
6620:  MOVF   xD3,W
6622:  ANDLW  DF
6624:  BRA    6628
6626:  MOVF   xD3,W
6628:  XORLW  46
662A:  MOVLB  0
662C:  BZ    6634
662E:  XORLW  02
6630:  BZ    66AE
6632:  BRA    671E
....................         { 
.................... 			case 'F': 
.................... 			chr = get_FPGA_register(addr, &data); 
6634:  MOVFF  1D4,208
6638:  MOVLW  01
663A:  MOVLB  2
663C:  MOVWF  x0A
663E:  MOVLW  D5
6640:  MOVWF  x09
6642:  MOVLB  0
6644:  BRA    6150
6646:  MOVFF  01,1D1
.................... 			sprintf(buf, " \r\n$SF %02X %02X\r", addr, chr); 
664A:  MOVLW  01
664C:  MOVLB  1
664E:  MOVWF  xA4
6650:  MOVLW  D6
6652:  MOVWF  xA3
6654:  MOVLW  F4
6656:  MOVWF  FF6
6658:  MOVLW  0C
665A:  MOVWF  FF7
665C:  MOVLW  07
665E:  MOVLB  2
6660:  MOVWF  x41
6662:  MOVLB  0
6664:  CALL   3102
6668:  MOVFF  1D4,208
666C:  MOVLW  37
666E:  MOVLB  2
6670:  MOVWF  x09
6672:  MOVLB  0
6674:  RCALL  5EBE
6676:  MOVLW  20
6678:  MOVLB  2
667A:  MOVWF  x4E
667C:  MOVLB  0
667E:  CALL   30E0
6682:  MOVFF  1D1,208
6686:  MOVLW  37
6688:  MOVLB  2
668A:  MOVWF  x09
668C:  MOVLB  0
668E:  RCALL  5EBE
6690:  MOVLW  0D
6692:  MOVLB  2
6694:  MOVWF  x4E
6696:  MOVLB  0
6698:  CALL   30E0
.................... 			COM1_send_str(buf); 
669C:  MOVLW  01
669E:  MOVLB  2
66A0:  MOVWF  x68
66A2:  MOVLW  D6
66A4:  MOVWF  x67
66A6:  MOVLB  0
66A8:  CALL   21D2
.................... 			break; 
66AC:  BRA    671E
.................... 			case 'D': 
.................... 			data = read_D2A(addr); 
66AE:  MOVFF  1D4,208
66B2:  BRA    61FA
66B4:  MOVFF  01,1D5
.................... 			sprintf(buf, " \r\n$SD %02X %02X\r", addr, data); 
66B8:  MOVLW  01
66BA:  MOVLB  1
66BC:  MOVWF  xA4
66BE:  MOVLW  D6
66C0:  MOVWF  xA3
66C2:  MOVLW  06
66C4:  MOVWF  FF6
66C6:  MOVLW  0D
66C8:  MOVWF  FF7
66CA:  MOVLW  07
66CC:  MOVLB  2
66CE:  MOVWF  x41
66D0:  MOVLB  0
66D2:  CALL   3102
66D6:  MOVFF  1D4,208
66DA:  MOVLW  37
66DC:  MOVLB  2
66DE:  MOVWF  x09
66E0:  MOVLB  0
66E2:  CALL   5EBE
66E6:  MOVLW  20
66E8:  MOVLB  2
66EA:  MOVWF  x4E
66EC:  MOVLB  0
66EE:  CALL   30E0
66F2:  MOVFF  1D5,208
66F6:  MOVLW  37
66F8:  MOVLB  2
66FA:  MOVWF  x09
66FC:  MOVLB  0
66FE:  CALL   5EBE
6702:  MOVLW  0D
6704:  MOVLB  2
6706:  MOVWF  x4E
6708:  MOVLB  0
670A:  CALL   30E0
.................... 			COM1_send_str(buf); 
670E:  MOVLW  01
6710:  MOVLB  2
6712:  MOVWF  x68
6714:  MOVLW  D6
6716:  MOVWF  x67
6718:  MOVLB  0
671A:  CALL   21D2
.................... 			break; 
.................... 		} 
.................... 		break; 
671E:  BRA    698A
.................... 		case 'F': // fill tables 
.................... 		skip_spc(); 
6720:  CALL   2ABA
.................... 		idx = get_char(); // get table designator 
6724:  CALL   2A9A
6728:  MOVFF  01,1D2
.................... 		addr = get_int(); // get table index 
672C:  CALL   2B56
6730:  MOVFF  01,1D4
.................... 		value = get_int(); // get value to put into table 
6734:  CALL   2B56
6738:  MOVFF  02,207
673C:  MOVFF  01,206
.................... 		switch (toupper(idx)) 
6740:  MOVLB  1
6742:  MOVF   xD2,W
6744:  SUBLW  60
6746:  BC    6754
6748:  MOVF   xD2,W
674A:  SUBLW  7A
674C:  BNC   6754
674E:  MOVF   xD2,W
6750:  ANDLW  DF
6752:  BRA    6756
6754:  MOVF   xD2,W
6756:  XORLW  4E
6758:  MOVLB  0
675A:  BZ    6766
675C:  XORLW  1E
675E:  BZ    678C
6760:  XORLW  13
6762:  BZ    67B2
6764:  BRA    67D6
....................         { 
.................... 			case 'N': // negative voltage 
.................... 			if (addr < 3) 
6766:  MOVLB  1
6768:  MOVF   xD4,W
676A:  SUBLW  02
676C:  BNC   6788
....................             { 
.................... 				setup.negative_voltage[addr] = value; 
676E:  BCF    FD8.0
6770:  RLCF   xD4,W
6772:  CLRF   03
6774:  ADDLW  BB
6776:  MOVWF  FE9
6778:  MOVLW  00
677A:  ADDWFC 03,W
677C:  MOVWF  FEA
677E:  MOVFF  207,FEC
6782:  MOVF   FED,F
6784:  MOVFF  206,FEF
.................... 			} 
.................... 			break; 
6788:  MOVLB  0
678A:  BRA    67D6
.................... 			case 'P': // positive voltage 
.................... 			if (addr < 21) 
678C:  MOVLB  1
678E:  MOVF   xD4,W
6790:  SUBLW  14
6792:  BNC   67AE
....................             { 
.................... 				setup.power_in[addr] = value; 
6794:  BCF    FD8.0
6796:  RLCF   xD4,W
6798:  CLRF   03
679A:  ADDLW  C7
679C:  MOVWF  FE9
679E:  MOVLW  00
67A0:  ADDWFC 03,W
67A2:  MOVWF  FEA
67A4:  MOVFF  207,FEC
67A8:  MOVF   FED,F
67AA:  MOVFF  206,FEF
.................... 			} 
.................... 			break; 
67AE:  MOVLB  0
67B0:  BRA    67D6
.................... 			case 'C': // cont voltage 
.................... 			if (addr < 3) 
67B2:  MOVLB  1
67B4:  MOVF   xD4,W
67B6:  SUBLW  02
67B8:  BNC   67D4
....................             { 
.................... 				setup.cont_voltage[addr] = value; 
67BA:  BCF    FD8.0
67BC:  RLCF   xD4,W
67BE:  CLRF   03
67C0:  ADDLW  C1
67C2:  MOVWF  FE9
67C4:  MOVLW  00
67C6:  ADDWFC 03,W
67C8:  MOVWF  FEA
67CA:  MOVFF  207,FEC
67CE:  MOVF   FED,F
67D0:  MOVFF  206,FEF
.................... 			} 
.................... 			break; 
67D4:  MOVLB  0
.................... 		} 
.................... 		break; 
67D6:  BRA    698A
.................... 		case 'S': 
.................... 		device = get_char(); 
67D8:  CALL   2A9A
67DC:  MOVFF  01,1D3
.................... 		addr = get_hex(); 
67E0:  CALL   5F08
67E4:  MOVFF  00,1D4
.................... 		data = get_hex(); 
67E8:  CALL   5F08
67EC:  MOVFF  00,1D5
.................... 		switch (toupper(device)) 
67F0:  MOVLB  1
67F2:  MOVF   xD3,W
67F4:  SUBLW  60
67F6:  BC    6804
67F8:  MOVF   xD3,W
67FA:  SUBLW  7A
67FC:  BNC   6804
67FE:  MOVF   xD3,W
6800:  ANDLW  DF
6802:  BRA    6806
6804:  MOVF   xD3,W
6806:  XORLW  46
6808:  MOVLB  0
680A:  BZ    6816
680C:  XORLW  02
680E:  BZ    6848
6810:  XORLW  12
6812:  BZ    686C
6814:  BRA    687C
....................         { 
.................... 			case 'F': 
.................... 			buf[0] = addr; 
6816:  MOVFF  1D4,1D6
.................... 			buf[1] = data; 
681A:  MOVFF  1D5,1D7
.................... 			FPGA_image[addr] = data; 
681E:  CLRF   03
6820:  MOVLB  1
6822:  MOVF   xD4,W
6824:  ADDLW  44
6826:  MOVWF  FE9
6828:  MOVLW  01
682A:  ADDWFC 03,W
682C:  MOVWF  FEA
682E:  MOVFF  1D5,FEF
.................... 			send_FPGA_command(2, buf); 
6832:  MOVLW  02
6834:  MOVLB  2
6836:  MOVWF  x3E
6838:  MOVLW  01
683A:  MOVWF  x40
683C:  MOVLW  D6
683E:  MOVWF  x3F
6840:  MOVLB  0
6842:  CALL   180E
.................... 			break; 
6846:  BRA    687C
.................... 			case 'D': 
.................... 			D2A_image[addr] = data; 
6848:  CLRF   03
684A:  MOVLB  1
684C:  MOVF   xD4,W
684E:  ADDLW  64
6850:  MOVWF  FE9
6852:  MOVLW  01
6854:  ADDWFC 03,W
6856:  MOVWF  FEA
6858:  MOVFF  1D5,FEF
.................... 			write_D2A(addr, data); 
685C:  MOVFF  1D4,208
6860:  MOVFF  1D5,209
6864:  MOVLB  0
6866:  CALL   593E
.................... 			break; 
686A:  BRA    687C
.................... 			case 'V': 
.................... 			allow_write = 2975; 
686C:  MOVLW  0B
686E:  MOVLB  1
6870:  MOVWF  x07
6872:  MOVLW  9F
6874:  MOVWF  x06
.................... 			write_setup(); 
6876:  MOVLB  0
6878:  CALL   3366
.................... 			break; 
.................... 		} 
.................... 		break; 
687C:  BRA    698A
.................... 		case 'T': 
.................... 		if (toupper(get_char()) == 'T') 
687E:  CALL   2A9A
6882:  MOVFF  02,209
6886:  MOVFF  01,208
688A:  MOVLB  2
688C:  MOVF   x09,F
688E:  BNZ   6896
6890:  MOVF   x08,W
6892:  SUBLW  60
6894:  BC    68A6
6896:  MOVF   x09,F
6898:  BNZ   68A6
689A:  MOVF   x08,W
689C:  SUBLW  7A
689E:  BNC   68A6
68A0:  MOVF   x08,W
68A2:  ANDLW  DF
68A4:  BRA    68A8
68A6:  MOVF   x08,W
68A8:  SUBLW  54
68AA:  BNZ   6944
....................         if (toupper(get_char()) == 'C') 
68AC:  MOVLB  0
68AE:  CALL   2A9A
68B2:  MOVFF  02,209
68B6:  MOVFF  01,208
68BA:  MOVLB  2
68BC:  MOVF   x09,F
68BE:  BNZ   68C6
68C0:  MOVF   x08,W
68C2:  SUBLW  60
68C4:  BC    68D6
68C6:  MOVF   x09,F
68C8:  BNZ   68D6
68CA:  MOVF   x08,W
68CC:  SUBLW  7A
68CE:  BNC   68D6
68D0:  MOVF   x08,W
68D2:  ANDLW  DF
68D4:  BRA    68D8
68D6:  MOVF   x08,W
68D8:  SUBLW  43
68DA:  BNZ   6944
.................... 		if (toupper(get_char()) == 'C') 
68DC:  MOVLB  0
68DE:  CALL   2A9A
68E2:  MOVFF  02,209
68E6:  MOVFF  01,208
68EA:  MOVLB  2
68EC:  MOVF   x09,F
68EE:  BNZ   68F6
68F0:  MOVF   x08,W
68F2:  SUBLW  60
68F4:  BC    6906
68F6:  MOVF   x09,F
68F8:  BNZ   6906
68FA:  MOVF   x08,W
68FC:  SUBLW  7A
68FE:  BNC   6906
6900:  MOVF   x08,W
6902:  ANDLW  DF
6904:  BRA    6908
6906:  MOVF   x08,W
6908:  SUBLW  43
690A:  BNZ   6944
.................... 		if (toupper(get_char()) == 'P') 
690C:  MOVLB  0
690E:  CALL   2A9A
6912:  MOVFF  02,209
6916:  MOVFF  01,208
691A:  MOVLB  2
691C:  MOVF   x09,F
691E:  BNZ   6926
6920:  MOVF   x08,W
6922:  SUBLW  60
6924:  BC    6936
6926:  MOVF   x09,F
6928:  BNZ   6936
692A:  MOVF   x08,W
692C:  SUBLW  7A
692E:  BNC   6936
6930:  MOVF   x08,W
6932:  ANDLW  DF
6934:  BRA    6938
6936:  MOVF   x08,W
6938:  SUBLW  50
693A:  BNZ   6944
.................... 		ttccp = 1; 
693C:  MOVLW  01
693E:  MOVLB  1
6940:  MOVWF  x42
6942:  MOVLB  2
.................... 		break; 
6944:  MOVLB  0
6946:  BRA    698A
.................... 		case '1': // year 
.................... 		setup.year = get_int(); 
6948:  CALL   2B56
694C:  MOVFF  02,F2
6950:  MOVFF  01,F1
.................... 		break; 
6954:  BRA    698A
.................... 		case '2': // week 
.................... 		setup.week = get_int(); 
6956:  CALL   2B56
695A:  MOVFF  01,F3
.................... 		break; 
695E:  BRA    698A
.................... 		case '3': // unit ID 
.................... 		setup.unit_ID = get_int(); 
6960:  CALL   2B56
6964:  MOVFF  02,F5
6968:  MOVFF  01,F4
.................... 		break; 
696C:  BRA    698A
....................  
....................  
....................  
.................... case 'W':  
.................... 		power_output(); 
696E:  CALL   1F34
.................... 		delay_ms(50); 
6972:  MOVLW  32
6974:  MOVLB  2
6976:  MOVWF  x3E
6978:  MOVLB  0
697A:  CALL   0F54
.................... 		//ret = 1; 
.................... 		update_all(); 
697E:  CALL   1DCA
.................... 		break; 
6982:  BRA    698A
....................  
....................  
....................  
.................... 		default: 
.................... 		return 0; 
6984:  MOVLW  00
6986:  MOVWF  01
6988:  BRA    698E
.................... 	} 
.................... 	return 0; 
698A:  MOVLW  00
698C:  MOVWF  01
698E:  GOTO   6A1E (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void get_new_bitrate(void) 
.................... { 
.................... 	ULONG bitrate, sub; 
.................... 	bitrate = get_int();//* 100; 
*
3394:  CALL   2B56
3398:  MOVFF  01,00
339C:  MOVFF  02,01
33A0:  CLRF   02
33A2:  CLRF   03
33A4:  MOVFF  03,22B
33A8:  MOVFF  02,22A
33AC:  MOVFF  01,229
33B0:  MOVFF  00,228
.................... 	get_char(); 
33B4:  CALL   2A9A
.................... 	sub = get_int(); 
33B8:  CALL   2B56
33BC:  MOVFF  01,00
33C0:  MOVFF  02,01
33C4:  CLRF   02
33C6:  CLRF   03
33C8:  MOVFF  03,22F
33CC:  MOVFF  02,22E
33D0:  MOVFF  01,22D
33D4:  MOVFF  00,22C
.................... 	 
.................... 	if (peek_char() == '.') 
33D8:  CALL   2A7C
33DC:  MOVFF  02,231
33E0:  MOVFF  01,230
33E4:  MOVLB  2
33E6:  MOVF   01,W
33E8:  SUBLW  2E
33EA:  BNZ   3428
33EC:  MOVF   x31,F
33EE:  BNZ   3428
.................... 	{ 
.................... 		get_char(); 
33F0:  MOVLB  0
33F2:  CALL   2A9A
.................... 		sub = get_int(); 
33F6:  CALL   2B56
33FA:  MOVFF  01,00
33FE:  MOVFF  02,01
3402:  CLRF   02
3404:  CLRF   03
3406:  MOVFF  03,22F
340A:  MOVFF  02,22E
340E:  MOVFF  01,22D
3412:  MOVFF  00,22C
.................... 		bitrate += sub; 
3416:  MOVLB  2
3418:  MOVF   x2C,W
341A:  ADDWF  x28,F
341C:  MOVF   x2D,W
341E:  ADDWFC x29,F
3420:  MOVF   x2E,W
3422:  ADDWFC x2A,F
3424:  MOVF   x2F,W
3426:  ADDWFC x2B,F
.................... 	} 
.................... 	 
.................... 	setup.bitrate = bitrate * 100 + sub; 
3428:  MOVFF  22B,247
342C:  MOVFF  22A,246
3430:  MOVFF  229,245
3434:  MOVFF  228,244
3438:  CLRF   x4B
343A:  CLRF   x4A
343C:  CLRF   x49
343E:  MOVLW  64
3440:  MOVWF  x48
3442:  MOVLB  0
3444:  CALL   13F4
3448:  MOVLB  2
344A:  MOVF   x2C,W
344C:  ADDWF  00,W
344E:  MOVLB  0
3450:  MOVWF  xA8
3452:  MOVLB  2
3454:  MOVF   x2D,W
3456:  ADDWFC 01,W
3458:  MOVLB  0
345A:  MOVWF  xA9
.................... 	//	setup.bitrate1= setup.bitrate; 
.................... 	FPGA_set_bitrate(); 
345C:  CALL   1CD6
3460:  GOTO   49EC (RETURN)
.................... 	 
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... void list_help(void) 
.................... { 
.................... 	COM1_send_str("\r\n\n"); 
*
2C1E:  MOVLW  0D
2C20:  MOVLB  2
2C22:  MOVWF  x28
2C24:  MOVLW  0A
2C26:  MOVWF  x29
2C28:  MOVWF  x2A
2C2A:  CLRF   x2B
2C2C:  MOVLW  02
2C2E:  MOVWF  x68
2C30:  MOVLW  28
2C32:  MOVWF  x67
2C34:  MOVLB  0
2C36:  CALL   21D2
.................... 	COM1_send_str("DS <data soure><cr>  \tSet data source (0-1)\r\n"); 
2C3A:  MOVLW  02
2C3C:  MOVWF  FEA
2C3E:  MOVLW  28
2C40:  MOVWF  FE9
2C42:  MOVFF  FF2,265
2C46:  BCF    FF2.7
2C48:  MOVLW  2E
2C4A:  MOVWF  01
2C4C:  CLRF   FF7
2C4E:  MOVLW  00
2C50:  CALL   0434
2C54:  TBLRD*-
2C56:  TBLRD*+
2C58:  MOVFF  FF5,FEE
2C5C:  DECFSZ 01,F
2C5E:  BRA    2C56
2C60:  MOVLB  2
2C62:  BTFSC  x65.7
2C64:  BSF    FF2.7
2C66:  MOVLW  02
2C68:  MOVWF  x68
2C6A:  MOVLW  28
2C6C:  MOVWF  x67
2C6E:  MOVLB  0
2C70:  CALL   21D2
.................... 	COM1_send_str("DP <data polarity><cr>  \tSet data polarity (0-1)\r\n"); 
2C74:  MOVLW  02
2C76:  MOVWF  FEA
2C78:  MOVLW  28
2C7A:  MOVWF  FE9
2C7C:  MOVFF  FF2,265
2C80:  BCF    FF2.7
2C82:  MOVLW  33
2C84:  MOVWF  01
2C86:  CLRF   FF7
2C88:  MOVLW  00
2C8A:  CALL   047C
2C8E:  TBLRD*-
2C90:  TBLRD*+
2C92:  MOVFF  FF5,FEE
2C96:  DECFSZ 01,F
2C98:  BRA    2C90
2C9A:  MOVLB  2
2C9C:  BTFSC  x65.7
2C9E:  BSF    FF2.7
2CA0:  MOVLW  02
2CA2:  MOVWF  x68
2CA4:  MOVLW  28
2CA6:  MOVWF  x67
2CA8:  MOVLB  0
2CAA:  CALL   21D2
.................... 	COM1_send_str("DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n"); 
2CAE:  MOVLW  02
2CB0:  MOVWF  FEA
2CB2:  MOVLW  28
2CB4:  MOVWF  FE9
2CB6:  MOVFF  FF2,265
2CBA:  BCF    FF2.7
2CBC:  MOVLW  31
2CBE:  MOVWF  01
2CC0:  CLRF   FF7
2CC2:  MOVLW  00
2CC4:  CALL   04CA
2CC8:  TBLRD*-
2CCA:  TBLRD*+
2CCC:  MOVFF  FF5,FEE
2CD0:  DECFSZ 01,F
2CD2:  BRA    2CCA
2CD4:  MOVLB  2
2CD6:  BTFSC  x65.7
2CD8:  BSF    FF2.7
2CDA:  MOVLW  02
2CDC:  MOVWF  x68
2CDE:  MOVLW  28
2CE0:  MOVWF  x67
2CE2:  MOVLB  0
2CE4:  CALL   21D2
.................... 	COM1_send_str("RP <power height><cr>  \tSet power height (0-1)\r\n"); 
2CE8:  MOVLW  02
2CEA:  MOVWF  FEA
2CEC:  MOVLW  28
2CEE:  MOVWF  FE9
2CF0:  MOVFF  FF2,265
2CF4:  BCF    FF2.7
2CF6:  MOVLW  31
2CF8:  MOVWF  01
2CFA:  CLRF   FF7
2CFC:  MOVLW  00
2CFE:  CALL   0516
2D02:  TBLRD*-
2D04:  TBLRD*+
2D06:  MOVFF  FF5,FEE
2D0A:  DECFSZ 01,F
2D0C:  BRA    2D04
2D0E:  MOVLB  2
2D10:  BTFSC  x65.7
2D12:  BSF    FF2.7
2D14:  MOVLW  02
2D16:  MOVWF  x68
2D18:  MOVLW  28
2D1A:  MOVWF  x67
2D1C:  MOVLB  0
2D1E:  CALL   21D2
.................... 	COM1_send_str("RF <power comand><cr>  \tSet power comand (0-1)\r\n"); 
2D22:  MOVLW  02
2D24:  MOVWF  FEA
2D26:  MOVLW  28
2D28:  MOVWF  FE9
2D2A:  MOVFF  FF2,265
2D2E:  BCF    FF2.7
2D30:  MOVLW  31
2D32:  MOVWF  01
2D34:  CLRF   FF7
2D36:  MOVLW  00
2D38:  CALL   0562
2D3C:  TBLRD*-
2D3E:  TBLRD*+
2D40:  MOVFF  FF5,FEE
2D44:  DECFSZ 01,F
2D46:  BRA    2D3E
2D48:  MOVLB  2
2D4A:  BTFSC  x65.7
2D4C:  BSF    FF2.7
2D4E:  MOVLW  02
2D50:  MOVWF  x68
2D52:  MOVLW  28
2D54:  MOVWF  x67
2D56:  MOVLB  0
2D58:  CALL   21D2
.................... 	COM1_send_str("RA <randomizer><cr>  \tSet with/without randomizer (0-1)\r\n"); 
2D5C:  MOVLW  02
2D5E:  MOVWF  FEA
2D60:  MOVLW  28
2D62:  MOVWF  FE9
2D64:  MOVFF  FF2,265
2D68:  BCF    FF2.7
2D6A:  MOVLW  3A
2D6C:  MOVWF  01
2D6E:  CLRF   FF7
2D70:  MOVLW  00
2D72:  CALL   05AE
2D76:  TBLRD*-
2D78:  TBLRD*+
2D7A:  MOVFF  FF5,FEE
2D7E:  DECFSZ 01,F
2D80:  BRA    2D78
2D82:  MOVLB  2
2D84:  BTFSC  x65.7
2D86:  BSF    FF2.7
2D88:  MOVLW  02
2D8A:  MOVWF  x68
2D8C:  MOVLW  28
2D8E:  MOVWF  x67
2D90:  MOVLB  0
2D92:  CALL   21D2
.................... 	COM1_send_str("FR <frequency><cr>  \tSet frequency (2200.0-2400.0)\r\n"); 
2D96:  MOVLW  02
2D98:  MOVWF  FEA
2D9A:  MOVLW  28
2D9C:  MOVWF  FE9
2D9E:  MOVFF  FF2,265
2DA2:  BCF    FF2.7
2DA4:  MOVLW  35
2DA6:  MOVWF  01
2DA8:  CLRF   FF7
2DAA:  MOVLW  00
2DAC:  CALL   0602
2DB0:  TBLRD*-
2DB2:  TBLRD*+
2DB4:  MOVFF  FF5,FEE
2DB8:  DECFSZ 01,F
2DBA:  BRA    2DB2
2DBC:  MOVLB  2
2DBE:  BTFSC  x65.7
2DC0:  BSF    FF2.7
2DC2:  MOVLW  02
2DC4:  MOVWF  x68
2DC6:  MOVLW  28
2DC8:  MOVWF  x67
2DCA:  MOVLB  0
2DCC:  CALL   21D2
.................... 	COM1_send_str("MO <mode><cr>  \tSet mode (0-3)\r\n"); 
2DD0:  MOVLW  02
2DD2:  MOVWF  FEA
2DD4:  MOVLW  28
2DD6:  MOVWF  FE9
2DD8:  MOVFF  FF2,265
2DDC:  BCF    FF2.7
2DDE:  MOVLW  21
2DE0:  MOVWF  01
2DE2:  CLRF   FF7
2DE4:  MOVLW  00
2DE6:  CALL   0652
2DEA:  TBLRD*-
2DEC:  TBLRD*+
2DEE:  MOVFF  FF5,FEE
2DF2:  DECFSZ 01,F
2DF4:  BRA    2DEC
2DF6:  MOVLB  2
2DF8:  BTFSC  x65.7
2DFA:  BSF    FF2.7
2DFC:  MOVLW  02
2DFE:  MOVWF  x68
2E00:  MOVLW  28
2E02:  MOVWF  x67
2E04:  MOVLB  0
2E06:  CALL   21D2
.................... 	COM1_send_str("IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\n"); 
2E0A:  MOVLW  02
2E0C:  MOVWF  FEA
2E0E:  MOVLW  28
2E10:  MOVWF  FE9
2E12:  MOVFF  FF2,265
2E16:  BCF    FF2.7
2E18:  MOVLW  32
2E1A:  MOVWF  01
2E1C:  CLRF   FF7
2E1E:  MOVLW  00
2E20:  CALL   068E
2E24:  TBLRD*-
2E26:  TBLRD*+
2E28:  MOVFF  FF5,FEE
2E2C:  DECFSZ 01,F
2E2E:  BRA    2E26
2E30:  MOVLB  2
2E32:  BTFSC  x65.7
2E34:  BSF    FF2.7
2E36:  MOVLW  02
2E38:  MOVWF  x68
2E3A:  MOVLW  28
2E3C:  MOVWF  x67
2E3E:  MOVLB  0
2E40:  CALL   21D2
.................... 	COM1_send_str("ID <internal pattern><cr>  \tSet internal pattern (0-3)\r\n"); 
2E44:  MOVLW  02
2E46:  MOVWF  FEA
2E48:  MOVLW  28
2E4A:  MOVWF  FE9
2E4C:  MOVFF  FF2,265
2E50:  BCF    FF2.7
2E52:  MOVLW  39
2E54:  MOVWF  01
2E56:  CLRF   FF7
2E58:  MOVLW  00
2E5A:  CALL   06DA
2E5E:  TBLRD*-
2E60:  TBLRD*+
2E62:  MOVFF  FF5,FEE
2E66:  DECFSZ 01,F
2E68:  BRA    2E60
2E6A:  MOVLB  2
2E6C:  BTFSC  x65.7
2E6E:  BSF    FF2.7
2E70:  MOVLW  02
2E72:  MOVWF  x68
2E74:  MOVLW  28
2E76:  MOVWF  x67
2E78:  MOVLB  0
2E7A:  CALL   21D2
.................... 	COM1_send_str("VE <cr>  \tdisplay version info\r\n"); 
2E7E:  MOVLW  02
2E80:  MOVWF  FEA
2E82:  MOVLW  28
2E84:  MOVWF  FE9
2E86:  MOVFF  FF2,265
2E8A:  BCF    FF2.7
2E8C:  MOVLW  21
2E8E:  MOVWF  01
2E90:  CLRF   FF7
2E92:  MOVLW  00
2E94:  CALL   072E
2E98:  TBLRD*-
2E9A:  TBLRD*+
2E9C:  MOVFF  FF5,FEE
2EA0:  DECFSZ 01,F
2EA2:  BRA    2E9A
2EA4:  MOVLB  2
2EA6:  BTFSC  x65.7
2EA8:  BSF    FF2.7
2EAA:  MOVLW  02
2EAC:  MOVWF  x68
2EAE:  MOVLW  28
2EB0:  MOVWF  x67
2EB2:  MOVLB  0
2EB4:  CALL   21D2
.................... 	COM1_send_str("VS <major>.<minor> <cr>  \tset the setup file version\r\n"); 
2EB8:  MOVLW  02
2EBA:  MOVWF  FEA
2EBC:  MOVLW  28
2EBE:  MOVWF  FE9
2EC0:  MOVFF  FF2,265
2EC4:  BCF    FF2.7
2EC6:  MOVLW  37
2EC8:  MOVWF  01
2ECA:  CLRF   FF7
2ECC:  MOVLW  00
2ECE:  CALL   076A
2ED2:  TBLRD*-
2ED4:  TBLRD*+
2ED6:  MOVFF  FF5,FEE
2EDA:  DECFSZ 01,F
2EDC:  BRA    2ED4
2EDE:  MOVLB  2
2EE0:  BTFSC  x65.7
2EE2:  BSF    FF2.7
2EE4:  MOVLW  02
2EE6:  MOVWF  x68
2EE8:  MOVLW  28
2EEA:  MOVWF  x67
2EEC:  MOVLB  0
2EEE:  CALL   21D2
.................... 	COM1_send_str("VP <power level><cr>  \tSet power level (20-40)\r\n"); 
2EF2:  MOVLW  02
2EF4:  MOVWF  FEA
2EF6:  MOVLW  28
2EF8:  MOVWF  FE9
2EFA:  MOVFF  FF2,265
2EFE:  BCF    FF2.7
2F00:  MOVLW  31
2F02:  MOVWF  01
2F04:  CLRF   FF7
2F06:  MOVLW  00
2F08:  CALL   07BC
2F0C:  TBLRD*-
2F0E:  TBLRD*+
2F10:  MOVFF  FF5,FEE
2F14:  DECFSZ 01,F
2F16:  BRA    2F0E
2F18:  MOVLB  2
2F1A:  BTFSC  x65.7
2F1C:  BSF    FF2.7
2F1E:  MOVLW  02
2F20:  MOVWF  x68
2F22:  MOVLW  28
2F24:  MOVWF  x67
2F26:  MOVLB  0
2F28:  CALL   21D2
.................... 	COM1_send_str("VL <power high><cr>  \tSet high power level (20-40)\r\n"); 
2F2C:  MOVLW  02
2F2E:  MOVWF  FEA
2F30:  MOVLW  28
2F32:  MOVWF  FE9
2F34:  MOVFF  FF2,265
2F38:  BCF    FF2.7
2F3A:  MOVLW  35
2F3C:  MOVWF  01
2F3E:  CLRF   FF7
2F40:  MOVLW  00
2F42:  CALL   0808
2F46:  TBLRD*-
2F48:  TBLRD*+
2F4A:  MOVFF  FF5,FEE
2F4E:  DECFSZ 01,F
2F50:  BRA    2F48
2F52:  MOVLB  2
2F54:  BTFSC  x65.7
2F56:  BSF    FF2.7
2F58:  MOVLW  02
2F5A:  MOVWF  x68
2F5C:  MOVLW  28
2F5E:  MOVWF  x67
2F60:  MOVLB  0
2F62:  CALL   21D2
.................... 	COM1_send_str("VM <negative power level><cr>  \tSet negative power level\r\n"); 
2F66:  MOVLW  02
2F68:  MOVWF  FEA
2F6A:  MOVLW  28
2F6C:  MOVWF  FE9
2F6E:  MOVFF  FF2,265
2F72:  BCF    FF2.7
2F74:  MOVLW  3B
2F76:  MOVWF  01
2F78:  CLRF   FF7
2F7A:  MOVLW  00
2F7C:  CALL   0858
2F80:  TBLRD*-
2F82:  TBLRD*+
2F84:  MOVFF  FF5,FEE
2F88:  DECFSZ 01,F
2F8A:  BRA    2F82
2F8C:  MOVLB  2
2F8E:  BTFSC  x65.7
2F90:  BSF    FF2.7
2F92:  MOVLW  02
2F94:  MOVWF  x68
2F96:  MOVLW  28
2F98:  MOVWF  x67
2F9A:  MOVLB  0
2F9C:  CALL   21D2
.................... 	COM1_send_str("VC <posetive power level><cr>  \tSet posetive power level\r\n"); 
2FA0:  MOVLW  02
2FA2:  MOVWF  FEA
2FA4:  MOVLW  28
2FA6:  MOVWF  FE9
2FA8:  MOVFF  FF2,265
2FAC:  BCF    FF2.7
2FAE:  MOVLW  3B
2FB0:  MOVWF  01
2FB2:  CLRF   FF7
2FB4:  MOVLW  00
2FB6:  CALL   08AE
2FBA:  TBLRD*-
2FBC:  TBLRD*+
2FBE:  MOVFF  FF5,FEE
2FC2:  DECFSZ 01,F
2FC4:  BRA    2FBC
2FC6:  MOVLB  2
2FC8:  BTFSC  x65.7
2FCA:  BSF    FF2.7
2FCC:  MOVLW  02
2FCE:  MOVWF  x68
2FD0:  MOVLW  28
2FD2:  MOVWF  x67
2FD4:  MOVLB  0
2FD6:  CALL   21D2
.................... 	COM1_send_str("CS <clock phase><cr>  \tSet clock phase (0-1)\r\n"); 
2FDA:  MOVLW  02
2FDC:  MOVWF  FEA
2FDE:  MOVLW  28
2FE0:  MOVWF  FE9
2FE2:  MOVFF  FF2,265
2FE6:  BCF    FF2.7
2FE8:  MOVLW  2F
2FEA:  MOVWF  01
2FEC:  CLRF   FF7
2FEE:  MOVLW  00
2FF0:  CALL   0904
2FF4:  TBLRD*-
2FF6:  TBLRD*+
2FF8:  MOVFF  FF5,FEE
2FFC:  DECFSZ 01,F
2FFE:  BRA    2FF6
3000:  MOVLB  2
3002:  BTFSC  x65.7
3004:  BSF    FF2.7
3006:  MOVLW  02
3008:  MOVWF  x68
300A:  MOVLW  28
300C:  MOVWF  x67
300E:  MOVLB  0
3010:  CALL   21D2
.................... 	COM1_send_str("UT <UART Time><cr>  \tSet the stop time, default 15 (0-240)\r\n");// VERSION 3.3  21.03.2016 
3014:  MOVLW  02
3016:  MOVWF  FEA
3018:  MOVLW  28
301A:  MOVWF  FE9
301C:  MOVFF  FF2,265
3020:  BCF    FF2.7
3022:  MOVLW  3D
3024:  MOVWF  01
3026:  CLRF   FF7
3028:  MOVLW  00
302A:  CALL   094E
302E:  TBLRD*-
3030:  TBLRD*+
3032:  MOVFF  FF5,FEE
3036:  DECFSZ 01,F
3038:  BRA    3030
303A:  MOVLB  2
303C:  BTFSC  x65.7
303E:  BSF    FF2.7
3040:  MOVLW  02
3042:  MOVWF  x68
3044:  MOVLW  28
3046:  MOVWF  x67
3048:  MOVLB  0
304A:  CALL   21D2
.................... 	COM1_send_str("US <UART Status><cr>  \tSet the Block (0-1)\r\n");// VERSION 3.3  21.03.2016 
304E:  MOVLW  02
3050:  MOVWF  FEA
3052:  MOVLW  28
3054:  MOVWF  FE9
3056:  MOVFF  FF2,265
305A:  BCF    FF2.7
305C:  MOVLW  2D
305E:  MOVWF  01
3060:  CLRF   FF7
3062:  MOVLW  00
3064:  CALL   09A6
3068:  TBLRD*-
306A:  TBLRD*+
306C:  MOVFF  FF5,FEE
3070:  DECFSZ 01,F
3072:  BRA    306A
3074:  MOVLB  2
3076:  BTFSC  x65.7
3078:  BSF    FF2.7
307A:  MOVLW  02
307C:  MOVWF  x68
307E:  MOVLW  28
3080:  MOVWF  x67
3082:  MOVLB  0
3084:  CALL   21D2
.................... 	//COM1_send_str("BG <UART Change><cr>  \tSet the UART refresh rate [Hz] (1-20)\r\n");// VERSION 3.3  23.03.2016  //yehuda 1520Q remove BG command 
.................... 	COM1_send_str("SV <save all><cr>  \tSave parameters\r"); 
3088:  MOVLW  02
308A:  MOVWF  FEA
308C:  MOVLW  28
308E:  MOVWF  FE9
3090:  MOVFF  FF2,265
3094:  BCF    FF2.7
3096:  MOVLW  25
3098:  MOVWF  01
309A:  CLRF   FF7
309C:  MOVLW  00
309E:  CALL   09EE
30A2:  TBLRD*-
30A4:  TBLRD*+
30A6:  MOVFF  FF5,FEE
30AA:  DECFSZ 01,F
30AC:  BRA    30A4
30AE:  MOVLB  2
30B0:  BTFSC  x65.7
30B2:  BSF    FF2.7
30B4:  MOVLW  02
30B6:  MOVWF  x68
30B8:  MOVLW  28
30BA:  MOVWF  x67
30BC:  MOVLB  0
30BE:  CALL   21D2
.................... 	COM1_send_str("\r\n"); 
30C2:  MOVLW  0D
30C4:  MOVLB  2
30C6:  MOVWF  x28
30C8:  MOVLW  0A
30CA:  MOVWF  x29
30CC:  CLRF   x2A
30CE:  MOVLW  02
30D0:  MOVWF  x68
30D2:  MOVLW  28
30D4:  MOVWF  x67
30D6:  MOVLB  0
30D8:  CALL   21D2
30DC:  GOTO   578A (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void process_ttccp_commands(void) 
*
3826:  MOVLB  1
3828:  CLRF   xC4
382A:  CLRF   xEE
.................... { 
.................... 	UCHAR ret = 0, chr, buf[40], query = 0, c1, c2, revstat[12], addr; 
.................... 	ULONG freq, sub; 
.................... 	UINT  val, rp; //VERSION 3.3 us UINT  val, revp, rp; 
.................... 	chr = 2; 
382C:  MOVLW  02
382E:  MOVWF  xC5
.................... 	comm_ptr = 0; 
3830:  CLRF   x41
....................     if (peek_char() == ':') // addressed message? 
3832:  MOVLB  0
3834:  CALL   2A7C
3838:  MOVFF  02,229
383C:  MOVFF  01,228
3840:  MOVLB  2
3842:  MOVF   01,W
3844:  SUBLW  3A
3846:  BNZ   3886
3848:  MOVF   x29,F
384A:  BNZ   3886
....................     { 
.................... 		get_char(); // skip ':' 
384C:  MOVLB  0
384E:  CALL   2A9A
.................... 		addr = get_int(); 
3852:  CALL   2B56
3856:  MOVFF  01,1FD
.................... 		if (get_char() != ':') 
385A:  CALL   2A9A
385E:  MOVFF  02,229
3862:  MOVFF  01,228
3866:  MOVLB  2
3868:  MOVF   01,W
386A:  SUBLW  3A
386C:  BNZ   3872
386E:  MOVF   x29,F
3870:  BNZ   3872
.................... 		break; 
.................... 		if (setup.unit_id != addr) 
3872:  MOVLB  1
3874:  MOVF   xFD,W
3876:  MOVLB  0
3878:  SUBWF  xF4,W
387A:  BNZ   3880
387C:  MOVF   xF5,F
387E:  BZ    3884
.................... 		goto aaa; 
3880:  GOTO   578A
3884:  MOVLB  2
.................... 	} 
....................     break; 
.................... 	c1 = toupper(get_char()); 
3886:  MOVLB  0
3888:  CALL   2A9A
388C:  MOVFF  02,229
3890:  MOVFF  01,228
3894:  MOVLB  2
3896:  MOVF   x29,F
3898:  BNZ   38A0
389A:  MOVF   x28,W
389C:  SUBLW  60
389E:  BC    38B0
38A0:  MOVF   x29,F
38A2:  BNZ   38B0
38A4:  MOVF   x28,W
38A6:  SUBLW  7A
38A8:  BNC   38B0
38AA:  MOVF   x28,W
38AC:  ANDLW  DF
38AE:  BRA    38B2
38B0:  MOVF   x28,W
38B2:  MOVLB  1
38B4:  MOVWF  xEF
.................... 	c2 = toupper(get_char()); 
38B6:  MOVLB  0
38B8:  CALL   2A9A
38BC:  MOVFF  02,229
38C0:  MOVFF  01,228
38C4:  MOVLB  2
38C6:  MOVF   x29,F
38C8:  BNZ   38D0
38CA:  MOVF   x28,W
38CC:  SUBLW  60
38CE:  BC    38E0
38D0:  MOVF   x29,F
38D2:  BNZ   38E0
38D4:  MOVF   x28,W
38D6:  SUBLW  7A
38D8:  BNC   38E0
38DA:  MOVF   x28,W
38DC:  ANDLW  DF
38DE:  BRA    38E2
38E0:  MOVF   x28,W
38E2:  MOVLB  1
38E4:  MOVWF  xF0
.................... 	skip_spc(); 
38E6:  MOVLB  0
38E8:  CALL   2ABA
.................... 	 
.................... 	if (peek_char() == 13) // is this a query? 
38EC:  CALL   2A7C
38F0:  MOVFF  02,229
38F4:  MOVFF  01,228
38F8:  MOVLB  2
38FA:  MOVF   01,W
38FC:  SUBLW  0D
38FE:  BNZ   390C
3900:  MOVF   x29,F
3902:  BNZ   390C
....................     query = 1; // YES 
3904:  MOVLW  01
3906:  MOVLB  1
3908:  MOVWF  xEE
390A:  MOVLB  2
.................... 	switch (c1) 
390C:  MOVLB  1
390E:  MOVF   xEF,W
3910:  XORLW  4C
3912:  MOVLB  0
3914:  BZ    3984
3916:  XORLW  68
3918:  BZ    39CA
391A:  XORLW  6C
391C:  BTFSC  FD8.2
391E:  BRA    3A2A
3920:  XORLW  0E
3922:  BTFSC  FD8.2
3924:  BRA    3A7A
3926:  XORLW  0B
3928:  BTFSC  FD8.2
392A:  BRA    3B7C
392C:  XORLW  09
392E:  BTFSC  FD8.2
3930:  BRA    3C9A
3932:  XORLW  16
3934:  BTFSC  FD8.2
3936:  BRA    3FCA
3938:  XORLW  05
393A:  BTFSC  FD8.2
393C:  GOTO   45F6
3940:  XORLW  04
3942:  BTFSC  FD8.2
3944:  GOTO   4614
3948:  XORLW  06
394A:  BTFSC  FD8.2
394C:  GOTO   4656
3950:  XORLW  1C
3952:  BTFSC  FD8.2
3954:  GOTO   4874
3958:  XORLW  1D
395A:  BTFSC  FD8.2
395C:  GOTO   49F8
3960:  XORLW  02
3962:  BTFSC  FD8.2
3964:  GOTO   4A1C
3968:  XORLW  15
396A:  BTFSC  FD8.2
396C:  GOTO   4E6C
3970:  XORLW  04
3972:  BTFSC  FD8.2
3974:  GOTO   508A
3978:  XORLW  16
397A:  BTFSC  FD8.2
397C:  GOTO   519E
3980:  GOTO   5742
....................     { 
.................... 		case 'L': // login or logout 
.................... 		switch (c2) 
3984:  MOVLB  1
3986:  MOVF   xF0,W
3988:  XORLW  49
398A:  MOVLB  0
398C:  BZ    3994
398E:  XORLW  06
3990:  BZ    39C0
3992:  BRA    39C6
....................         { 
.................... 			case 'I':               // login 
.................... 			val = get_int(); 
3994:  CALL   2B56
3998:  MOVFF  02,207
399C:  MOVFF  01,206
.................... 			if (val == 17592) 
39A0:  MOVLB  2
39A2:  MOVF   x06,W
39A4:  SUBLW  B8
39A6:  BNZ   39B6
39A8:  MOVF   x07,W
39AA:  SUBLW  44
39AC:  BNZ   39B6
....................             ttccp_login = 1; 
39AE:  MOVLW  01
39B0:  MOVLB  1
39B2:  MOVWF  x34
39B4:  MOVLB  2
.................... 			debug_mode = 1; 
39B6:  MOVLW  01
39B8:  MOVLB  1
39BA:  MOVWF  x43
.................... 			break; 
39BC:  MOVLB  0
39BE:  BRA    39C6
.................... 			case 'O':              // logout 
.................... 			ttccp_login = 0; 
39C0:  MOVLB  1
39C2:  CLRF   x34
.................... 			break; 
39C4:  MOVLB  0
.................... 		} 
.................... 		break; 
39C6:  GOTO   578A
.................... 		case '$': 
.................... 		if (!ttccp_login) break; 
39CA:  MOVLB  1
39CC:  MOVF   x34,F
39CE:  BNZ   39D8
39D0:  MOVLB  0
39D2:  GOTO   578A
39D6:  MOVLB  1
.................... 		if (c2 == 'R') // switch to $ commands ONLY after ttccp login 
39D8:  MOVF   xF0,W
39DA:  SUBLW  52
39DC:  BNZ   3A24
....................         { 
.................... 			val = get_int(); 
39DE:  MOVLB  0
39E0:  CALL   2B56
39E4:  MOVFF  02,207
39E8:  MOVFF  01,206
.................... 			if (val != 17591) 
39EC:  MOVLB  2
39EE:  MOVF   x06,W
39F0:  SUBLW  B7
39F2:  BNZ   39FA
39F4:  MOVF   x07,W
39F6:  SUBLW  44
39F8:  BZ    39FE
....................             return; 
39FA:  GOTO   578C
.................... 			ttccp = 0; 
39FE:  MOVLB  1
3A00:  CLRF   x42
.................... 			COM1_send_str("\r\n\n*"); 
3A02:  MOVLW  0D
3A04:  MOVLB  2
3A06:  MOVWF  x0A
3A08:  MOVLW  0A
3A0A:  MOVWF  x0B
3A0C:  MOVWF  x0C
3A0E:  MOVLW  2A
3A10:  MOVWF  x0D
3A12:  CLRF   x0E
3A14:  MOVLW  02
3A16:  MOVWF  x68
3A18:  MOVLW  0A
3A1A:  MOVWF  x67
3A1C:  MOVLB  0
3A1E:  CALL   21D2
3A22:  MOVLB  1
.................... 		} 
.................... 		break; 
3A24:  MOVLB  0
3A26:  GOTO   578A
.................... 		 
.................... 		/*  case ':': 
.................... 			if(c2 == setup.unit_id+48) 
.................... 			if(toupper(get_char()) == ':') 
.................... 			comm_ptr = 2; 
.................... 			break; 
.................... 		*/ 
.................... 		case 'H': 
.................... 		if (!ttccp_login) break; 
3A2A:  MOVLB  1
3A2C:  MOVF   x34,F
3A2E:  BNZ   3A38
3A30:  MOVLB  0
3A32:  GOTO   578A
3A36:  MOVLB  1
.................... 		COM1_send_str("\r\t HELP LIST \r"); 
3A38:  MOVLW  02
3A3A:  MOVWF  FEA
3A3C:  MOVLW  0F
3A3E:  MOVWF  FE9
3A40:  MOVFF  FF2,228
3A44:  BCF    FF2.7
3A46:  MOVWF  01
3A48:  CLRF   FF7
3A4A:  MOVLW  00
3A4C:  MOVLB  0
3A4E:  CALL   0A2E
3A52:  TBLRD*-
3A54:  TBLRD*+
3A56:  MOVFF  FF5,FEE
3A5A:  DECFSZ 01,F
3A5C:  BRA    3A54
3A5E:  MOVLB  2
3A60:  BTFSC  x28.7
3A62:  BSF    FF2.7
3A64:  MOVLW  02
3A66:  MOVWF  x68
3A68:  MOVLW  0F
3A6A:  MOVWF  x67
3A6C:  MOVLB  0
3A6E:  CALL   21D2
.................... 		list_help(); 
3A72:  GOTO   2C1E
.................... 		break; 
3A76:  GOTO   578A
.................... 		 
.................... 		case 'F': 
.................... 		if (!ttccp_login) break; 
3A7A:  MOVLB  1
3A7C:  MOVF   x34,F
3A7E:  BNZ   3A88
3A80:  MOVLB  0
3A82:  GOTO   578A
3A86:  MOVLB  1
.................... 		switch (c2) 
3A88:  MOVF   xF0,W
3A8A:  XORLW  52
3A8C:  MOVLB  0
3A8E:  BZ    3A92
3A90:  BRA    3B78
....................         { 
.................... 			case 'R': // set frequency 
.................... 			if(c2 == 'R') 
3A92:  MOVLB  1
3A94:  MOVF   xF0,W
3A96:  SUBLW  52
3A98:  BNZ   3B3C
....................             { 
.................... 				if (query) 
3A9A:  MOVF   xEE,F
3A9C:  BZ    3AEA
.................... 				{ 
.................... 					sprintf(buf, "FR %lu\r", setup.frequency); 
3A9E:  MOVLW  01
3AA0:  MOVWF  xA4
3AA2:  MOVLW  C6
3AA4:  MOVWF  xA3
3AA6:  MOVLW  18
3AA8:  MOVWF  FF6
3AAA:  MOVLW  0D
3AAC:  MOVWF  FF7
3AAE:  MOVLW  03
3AB0:  MOVLB  2
3AB2:  MOVWF  x41
3AB4:  MOVLB  0
3AB6:  CALL   3102
3ABA:  MOVLW  10
3ABC:  MOVWF  FE9
3ABE:  MOVFF  B7,22D
3AC2:  MOVFF  B6,22C
3AC6:  CALL   312A
3ACA:  MOVLW  0D
3ACC:  MOVLB  2
3ACE:  MOVWF  x4E
3AD0:  MOVLB  0
3AD2:  CALL   30E0
.................... 					COM1_send_str(buf); 
3AD6:  MOVLW  01
3AD8:  MOVLB  2
3ADA:  MOVWF  x68
3ADC:  MOVLW  C6
3ADE:  MOVWF  x67
3AE0:  MOVLB  0
3AE2:  CALL   21D2
.................... 				} 
3AE6:  BRA    3B38
3AE8:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					freq = get_frequency(); 
3AEA:  MOVLB  0
3AEC:  CALL   31E6
3AF0:  MOVLB  2
3AF2:  CLRF   x01
3AF4:  CLRF   x00
3AF6:  MOVFF  02,1FF
3AFA:  MOVFF  01,1FE
.................... 					setup.frequency = freq; 
3AFE:  MOVFF  1FF,B7
3B02:  MOVFF  1FE,B6
.................... 					PLL_compute_freq_parameters(freq); 
3B06:  MOVFF  1FF,229
3B0A:  MOVFF  1FE,228
3B0E:  MOVFF  1FF,233
3B12:  MOVFF  1FE,232
3B16:  MOVLB  0
3B18:  CALL   14E4
.................... 					PLL_update(); 
3B1C:  CALL   17BC
.................... 					delay_ms(50); 
3B20:  MOVLW  32
3B22:  MOVLB  2
3B24:  MOVWF  x3E
3B26:  MOVLB  0
3B28:  CALL   0F54
.................... 					PLL_update(); 
3B2C:  CALL   17BC
.................... 					ret = 1; 
3B30:  MOVLW  01
3B32:  MOVLB  1
3B34:  MOVWF  xC4
3B36:  MOVLB  0
.................... 				} 
.................... 			} 
3B38:  BRA    3B78
3B3A:  MOVLB  1
....................             else 
.................... 			COM1_send_str("\r\nFAULT\r\n"); 
3B3C:  MOVLW  02
3B3E:  MOVWF  FEA
3B40:  MOVLW  0F
3B42:  MOVWF  FE9
3B44:  MOVFF  FF2,228
3B48:  BCF    FF2.7
3B4A:  MOVLW  0A
3B4C:  MOVWF  01
3B4E:  CLRF   FF7
3B50:  MOVLW  00
3B52:  MOVLB  0
3B54:  CALL   0A58
3B58:  TBLRD*-
3B5A:  TBLRD*+
3B5C:  MOVFF  FF5,FEE
3B60:  DECFSZ 01,F
3B62:  BRA    3B5A
3B64:  MOVLB  2
3B66:  BTFSC  x28.7
3B68:  BSF    FF2.7
3B6A:  MOVLW  02
3B6C:  MOVWF  x68
3B6E:  MOVLW  0F
3B70:  MOVWF  x67
3B72:  MOVLB  0
3B74:  CALL   21D2
.................... 			break; 
.................... 		} 
.................... 		break; 
3B78:  GOTO   578A
.................... 		 
.................... 		case 'M': 
.................... 		if (!ttccp_login) break; 
3B7C:  MOVLB  1
3B7E:  MOVF   x34,F
3B80:  BNZ   3B8A
3B82:  MOVLB  0
3B84:  GOTO   578A
3B88:  MOVLB  1
.................... 		if (c2 == 'O')  // mode - Addr0 bit 0-3 
3B8A:  MOVF   xF0,W
3B8C:  SUBLW  4F
3B8E:  BNZ   3C56
.................... 		{ 
....................             if(query) 
3B90:  MOVF   xEE,F
3B92:  BZ    3BDE
....................             { 
.................... 				sprintf(buf, "MO %u\r", setup.mode); 
3B94:  MOVLW  01
3B96:  MOVWF  xA4
3B98:  MOVLW  C6
3B9A:  MOVWF  xA3
3B9C:  MOVLW  20
3B9E:  MOVWF  FF6
3BA0:  MOVLW  0D
3BA2:  MOVWF  FF7
3BA4:  MOVLW  03
3BA6:  MOVLB  2
3BA8:  MOVWF  x41
3BAA:  MOVLB  0
3BAC:  CALL   3102
3BB0:  MOVFF  AC,22C
3BB4:  MOVLW  1B
3BB6:  MOVLB  2
3BB8:  MOVWF  x2D
3BBA:  MOVLB  0
3BBC:  CALL   327A
3BC0:  MOVLW  0D
3BC2:  MOVLB  2
3BC4:  MOVWF  x4E
3BC6:  MOVLB  0
3BC8:  CALL   30E0
.................... 				COM1_send_str(buf); 
3BCC:  MOVLW  01
3BCE:  MOVLB  2
3BD0:  MOVWF  x68
3BD2:  MOVLW  C6
3BD4:  MOVWF  x67
3BD6:  MOVLB  0
3BD8:  CALL   21D2
3BDC:  MOVLB  1
.................... 			} 
.................... 			val = get_int(); 
3BDE:  MOVLB  0
3BE0:  CALL   2B56
3BE4:  MOVFF  02,207
3BE8:  MOVFF  01,206
.................... 			if (val <= 3) 
3BEC:  MOVLB  2
3BEE:  MOVF   x07,F
3BF0:  BNZ   3C0C
3BF2:  MOVF   x06,W
3BF4:  SUBLW  03
3BF6:  BNC   3C0C
....................             { 
.................... 				setup.mode = val; 
3BF8:  MOVFF  206,AC
.................... 				FPGA_set_reg0(); 
3BFC:  MOVLB  0
3BFE:  CALL   187C
.................... 				ret = 1; 
3C02:  MOVLW  01
3C04:  MOVLB  1
3C06:  MOVWF  xC4
.................... 			} 
3C08:  BRA    3C54
3C0A:  MOVLB  2
.................... 			else 
....................             { 
.................... 				COM1_send_str("\r\nFAIL\r\n"); 
3C0C:  MOVLW  02
3C0E:  MOVWF  FEA
3C10:  MOVLW  0F
3C12:  MOVWF  FE9
3C14:  MOVFF  FF2,228
3C18:  BCF    FF2.7
3C1A:  MOVLW  09
3C1C:  MOVWF  01
3C1E:  CLRF   FF7
3C20:  MOVLW  00
3C22:  MOVLB  0
3C24:  CALL   0A7C
3C28:  TBLRD*-
3C2A:  TBLRD*+
3C2C:  MOVFF  FF5,FEE
3C30:  DECFSZ 01,F
3C32:  BRA    3C2A
3C34:  MOVLB  2
3C36:  BTFSC  x28.7
3C38:  BSF    FF2.7
3C3A:  MOVLW  02
3C3C:  MOVWF  x68
3C3E:  MOVLW  0F
3C40:  MOVWF  x67
3C42:  MOVLB  0
3C44:  CALL   21D2
.................... 				ret = 0; 
3C48:  MOVLB  1
3C4A:  CLRF   xC4
.................... 				break; 
3C4C:  MOVLB  0
3C4E:  GOTO   578A
3C52:  MOVLB  1
.................... 			} 
.................... 		} 
3C54:  BRA    3C94
.................... 		else 
.................... 		COM1_send_str("\r\nFAIL\r\n"); 
3C56:  MOVLW  02
3C58:  MOVWF  FEA
3C5A:  MOVLW  0F
3C5C:  MOVWF  FE9
3C5E:  MOVFF  FF2,228
3C62:  BCF    FF2.7
3C64:  MOVLW  09
3C66:  MOVWF  01
3C68:  CLRF   FF7
3C6A:  MOVLW  00
3C6C:  MOVLB  0
3C6E:  CALL   0A7C
3C72:  TBLRD*-
3C74:  TBLRD*+
3C76:  MOVFF  FF5,FEE
3C7A:  DECFSZ 01,F
3C7C:  BRA    3C74
3C7E:  MOVLB  2
3C80:  BTFSC  x28.7
3C82:  BSF    FF2.7
3C84:  MOVLW  02
3C86:  MOVWF  x68
3C88:  MOVLW  0F
3C8A:  MOVWF  x67
3C8C:  MOVLB  0
3C8E:  CALL   21D2
3C92:  MOVLB  1
.................... 		break; 
3C94:  MOVLB  0
3C96:  GOTO   578A
.................... 		 
.................... 		case 'D': 
.................... 		if (!ttccp_login) break; 
3C9A:  MOVLB  1
3C9C:  MOVF   x34,F
3C9E:  BNZ   3CA8
3CA0:  MOVLB  0
3CA2:  GOTO   578A
3CA6:  MOVLB  1
.................... 		switch (c2) 
3CA8:  MOVF   xF0,W
3CAA:  XORLW  53
3CAC:  MOVLB  0
3CAE:  BZ    3CBE
3CB0:  XORLW  03
3CB2:  BTFSC  FD8.2
3CB4:  BRA    3DC0
3CB6:  XORLW  15
3CB8:  BTFSC  FD8.2
3CBA:  BRA    3EC6
3CBC:  BRA    3FC6
....................         { 
.................... 			// case 'B':  // debug mode 
.................... 			//   debug_mode = 1; 
.................... 			//   break; 
.................... 			case 'S':   // Addr 6 bit 1   setup.data_source 
.................... 			if (query) 
3CBE:  MOVLB  1
3CC0:  MOVF   xEE,F
3CC2:  BZ    3D10
....................             { 
.................... 				sprintf(buf, "DS %u\r", setup.data_source); 
3CC4:  MOVLW  01
3CC6:  MOVWF  xA4
3CC8:  MOVLW  C6
3CCA:  MOVWF  xA3
3CCC:  MOVLW  28
3CCE:  MOVWF  FF6
3CD0:  MOVLW  0D
3CD2:  MOVWF  FF7
3CD4:  MOVLW  03
3CD6:  MOVLB  2
3CD8:  MOVWF  x41
3CDA:  MOVLB  0
3CDC:  CALL   3102
3CE0:  MOVFF  B0,22C
3CE4:  MOVLW  1B
3CE6:  MOVLB  2
3CE8:  MOVWF  x2D
3CEA:  MOVLB  0
3CEC:  CALL   327A
3CF0:  MOVLW  0D
3CF2:  MOVLB  2
3CF4:  MOVWF  x4E
3CF6:  MOVLB  0
3CF8:  CALL   30E0
.................... 				COM1_send_str(buf); 
3CFC:  MOVLW  01
3CFE:  MOVLB  2
3D00:  MOVWF  x68
3D02:  MOVLW  C6
3D04:  MOVWF  x67
3D06:  MOVLB  0
3D08:  CALL   21D2
.................... 			} 
3D0C:  BRA    3DB6
3D0E:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3D10:  MOVLB  0
3D12:  CALL   2B56
3D16:  MOVFF  02,207
3D1A:  MOVFF  01,206
.................... 				if (val < 2) 
3D1E:  MOVLB  2
3D20:  MOVF   x07,F
3D22:  BNZ   3D38
3D24:  MOVF   x06,W
3D26:  SUBLW  01
3D28:  BNC   3D38
.................... 				{ 
.................... 					setup.data_source = val; 
3D2A:  MOVFF  206,B0
.................... 					FPGA_set_reg6(); 
3D2E:  MOVLB  0
3D30:  CALL   18D8
.................... 				} 
3D34:  BRA    3DB6
3D36:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
3D38:  MOVLW  02
3D3A:  MOVWF  FEA
3D3C:  MOVLW  0F
3D3E:  MOVWF  FE9
3D40:  MOVFF  FF2,228
3D44:  BCF    FF2.7
3D46:  MOVLW  09
3D48:  MOVWF  01
3D4A:  CLRF   FF7
3D4C:  MOVLW  00
3D4E:  MOVLB  0
3D50:  CALL   0A7C
3D54:  TBLRD*-
3D56:  TBLRD*+
3D58:  MOVFF  FF5,FEE
3D5C:  DECFSZ 01,F
3D5E:  BRA    3D56
3D60:  MOVLB  2
3D62:  BTFSC  x28.7
3D64:  BSF    FF2.7
3D66:  MOVLW  02
3D68:  MOVWF  x68
3D6A:  MOVLW  0F
3D6C:  MOVWF  x67
3D6E:  MOVLB  0
3D70:  CALL   21D2
.................... 					sprintf(ttccp_error_message, "ERR DS %u\r", setup.data_source); 
3D74:  MOVLW  01
3D76:  MOVLB  1
3D78:  MOVWF  xA4
3D7A:  MOVLW  78
3D7C:  MOVWF  xA3
3D7E:  MOVLW  30
3D80:  MOVWF  FF6
3D82:  MOVLW  0D
3D84:  MOVWF  FF7
3D86:  MOVLW  07
3D88:  MOVLB  2
3D8A:  MOVWF  x41
3D8C:  MOVLB  0
3D8E:  CALL   3102
3D92:  MOVFF  B0,22C
3D96:  MOVLW  1B
3D98:  MOVLB  2
3D9A:  MOVWF  x2D
3D9C:  MOVLB  0
3D9E:  CALL   327A
3DA2:  MOVLW  0D
3DA4:  MOVLB  2
3DA6:  MOVWF  x4E
3DA8:  MOVLB  0
3DAA:  CALL   30E0
.................... 					ret = 0; 
3DAE:  MOVLB  1
3DB0:  CLRF   xC4
.................... 					break; 
3DB2:  MOVLB  0
3DB4:  BRA    3FC6
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
3DB6:  MOVLW  01
3DB8:  MOVLB  1
3DBA:  MOVWF  xC4
.................... 			break; 
3DBC:  MOVLB  0
3DBE:  BRA    3FC6
.................... 			 
.................... 			case 'P':   // Addr 0 bit 5   setup.data_polarity 
.................... 			if (query) 
3DC0:  MOVLB  1
3DC2:  MOVF   xEE,F
3DC4:  BZ    3E12
....................             { 
.................... 				sprintf(buf, "DP %u\r", setup.data_polarity); 
3DC6:  MOVLW  01
3DC8:  MOVWF  xA4
3DCA:  MOVLW  C6
3DCC:  MOVWF  xA3
3DCE:  MOVLW  3C
3DD0:  MOVWF  FF6
3DD2:  MOVLW  0D
3DD4:  MOVWF  FF7
3DD6:  MOVLW  03
3DD8:  MOVLB  2
3DDA:  MOVWF  x41
3DDC:  MOVLB  0
3DDE:  CALL   3102
3DE2:  MOVFF  AE,22C
3DE6:  MOVLW  1B
3DE8:  MOVLB  2
3DEA:  MOVWF  x2D
3DEC:  MOVLB  0
3DEE:  CALL   327A
3DF2:  MOVLW  0D
3DF4:  MOVLB  2
3DF6:  MOVWF  x4E
3DF8:  MOVLB  0
3DFA:  CALL   30E0
.................... 				COM1_send_str(buf); 
3DFE:  MOVLW  01
3E00:  MOVLB  2
3E02:  MOVWF  x68
3E04:  MOVLW  C6
3E06:  MOVWF  x67
3E08:  MOVLB  0
3E0A:  CALL   21D2
.................... 			} 
3E0E:  BRA    3EBC
3E10:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3E12:  MOVLB  0
3E14:  CALL   2B56
3E18:  MOVFF  02,207
3E1C:  MOVFF  01,206
.................... 				if (val < 2) 
3E20:  MOVLB  2
3E22:  MOVF   x07,F
3E24:  BNZ   3E3E
3E26:  MOVF   x06,W
3E28:  SUBLW  01
3E2A:  BNC   3E3E
.................... 				{ 
.................... 					setup.data_polarity = 1 - val;	// VERSION 3.6: DP0: INVERT, DP1: NORMAL 
3E2C:  MOVLW  01
3E2E:  BSF    FD8.0
3E30:  SUBFWB x06,W
3E32:  MOVLB  0
3E34:  MOVWF  xAE
.................... 													// Instead: 	DP0: NORMAL, DP1: INVERT 
.................... 					FPGA_set_reg0(); 
3E36:  CALL   187C
.................... 				} 
3E3A:  BRA    3EBC
3E3C:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
3E3E:  MOVLW  02
3E40:  MOVWF  FEA
3E42:  MOVLW  0F
3E44:  MOVWF  FE9
3E46:  MOVFF  FF2,228
3E4A:  BCF    FF2.7
3E4C:  MOVLW  09
3E4E:  MOVWF  01
3E50:  CLRF   FF7
3E52:  MOVLW  00
3E54:  MOVLB  0
3E56:  CALL   0A7C
3E5A:  TBLRD*-
3E5C:  TBLRD*+
3E5E:  MOVFF  FF5,FEE
3E62:  DECFSZ 01,F
3E64:  BRA    3E5C
3E66:  MOVLB  2
3E68:  BTFSC  x28.7
3E6A:  BSF    FF2.7
3E6C:  MOVLW  02
3E6E:  MOVWF  x68
3E70:  MOVLW  0F
3E72:  MOVWF  x67
3E74:  MOVLB  0
3E76:  CALL   21D2
.................... 					sprintf(ttccp_error_message, "ERR DP %u\r", setup.data_polarity); 
3E7A:  MOVLW  01
3E7C:  MOVLB  1
3E7E:  MOVWF  xA4
3E80:  MOVLW  78
3E82:  MOVWF  xA3
3E84:  MOVLW  44
3E86:  MOVWF  FF6
3E88:  MOVLW  0D
3E8A:  MOVWF  FF7
3E8C:  MOVLW  07
3E8E:  MOVLB  2
3E90:  MOVWF  x41
3E92:  MOVLB  0
3E94:  CALL   3102
3E98:  MOVFF  AE,22C
3E9C:  MOVLW  1B
3E9E:  MOVLB  2
3EA0:  MOVWF  x2D
3EA2:  MOVLB  0
3EA4:  CALL   327A
3EA8:  MOVLW  0D
3EAA:  MOVLB  2
3EAC:  MOVWF  x4E
3EAE:  MOVLB  0
3EB0:  CALL   30E0
.................... 					ret = 0; 
3EB4:  MOVLB  1
3EB6:  CLRF   xC4
.................... 					break; 
3EB8:  MOVLB  0
3EBA:  BRA    3FC6
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
3EBC:  MOVLW  01
3EBE:  MOVLB  1
3EC0:  MOVWF  xC4
.................... 			break; 
3EC2:  MOVLB  0
3EC4:  BRA    3FC6
.................... 			 
.................... 			case 'E':   // Addr 0 bit 7   setup.SOQPSK 
.................... 			if (query) 
3EC6:  MOVLB  1
3EC8:  MOVF   xEE,F
3ECA:  BZ    3F18
....................             { 
.................... 				sprintf(buf,"DE %u\r", setup.SOQPSK); 
3ECC:  MOVLW  01
3ECE:  MOVWF  xA4
3ED0:  MOVLW  C6
3ED2:  MOVWF  xA3
3ED4:  MOVLW  50
3ED6:  MOVWF  FF6
3ED8:  MOVLW  0D
3EDA:  MOVWF  FF7
3EDC:  MOVLW  03
3EDE:  MOVLB  2
3EE0:  MOVWF  x41
3EE2:  MOVLB  0
3EE4:  CALL   3102
3EE8:  MOVFF  B4,22C
3EEC:  MOVLW  1B
3EEE:  MOVLB  2
3EF0:  MOVWF  x2D
3EF2:  MOVLB  0
3EF4:  CALL   327A
3EF8:  MOVLW  0D
3EFA:  MOVLB  2
3EFC:  MOVWF  x4E
3EFE:  MOVLB  0
3F00:  CALL   30E0
.................... 				COM1_send_str(buf); 
3F04:  MOVLW  01
3F06:  MOVLB  2
3F08:  MOVWF  x68
3F0A:  MOVLW  C6
3F0C:  MOVWF  x67
3F0E:  MOVLB  0
3F10:  CALL   21D2
.................... 			} 
3F14:  BRA    3FBE
3F16:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
3F18:  MOVLB  0
3F1A:  CALL   2B56
3F1E:  MOVFF  02,207
3F22:  MOVFF  01,206
.................... 				if (val < 2) 
3F26:  MOVLB  2
3F28:  MOVF   x07,F
3F2A:  BNZ   3F40
3F2C:  MOVF   x06,W
3F2E:  SUBLW  01
3F30:  BNC   3F40
.................... 				{ 
.................... 					setup.SOQPSK = val; 
3F32:  MOVFF  206,B4
.................... 					FPGA_set_reg0(); 
3F36:  MOVLB  0
3F38:  CALL   187C
.................... 				} 
3F3C:  BRA    3FBE
3F3E:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
3F40:  MOVLW  02
3F42:  MOVWF  FEA
3F44:  MOVLW  0F
3F46:  MOVWF  FE9
3F48:  MOVFF  FF2,228
3F4C:  BCF    FF2.7
3F4E:  MOVLW  09
3F50:  MOVWF  01
3F52:  CLRF   FF7
3F54:  MOVLW  00
3F56:  MOVLB  0
3F58:  CALL   0A7C
3F5C:  TBLRD*-
3F5E:  TBLRD*+
3F60:  MOVFF  FF5,FEE
3F64:  DECFSZ 01,F
3F66:  BRA    3F5E
3F68:  MOVLB  2
3F6A:  BTFSC  x28.7
3F6C:  BSF    FF2.7
3F6E:  MOVLW  02
3F70:  MOVWF  x68
3F72:  MOVLW  0F
3F74:  MOVWF  x67
3F76:  MOVLB  0
3F78:  CALL   21D2
.................... 					sprintf(ttccp_error_message, "ERR DE %u\r", setup.SOQPSK); 
3F7C:  MOVLW  01
3F7E:  MOVLB  1
3F80:  MOVWF  xA4
3F82:  MOVLW  78
3F84:  MOVWF  xA3
3F86:  MOVLW  58
3F88:  MOVWF  FF6
3F8A:  MOVLW  0D
3F8C:  MOVWF  FF7
3F8E:  MOVLW  07
3F90:  MOVLB  2
3F92:  MOVWF  x41
3F94:  MOVLB  0
3F96:  CALL   3102
3F9A:  MOVFF  B4,22C
3F9E:  MOVLW  1B
3FA0:  MOVLB  2
3FA2:  MOVWF  x2D
3FA4:  MOVLB  0
3FA6:  CALL   327A
3FAA:  MOVLW  0D
3FAC:  MOVLB  2
3FAE:  MOVWF  x4E
3FB0:  MOVLB  0
3FB2:  CALL   30E0
.................... 					ret = 0; 
3FB6:  MOVLB  1
3FB8:  CLRF   xC4
.................... 					break; 
3FBA:  MOVLB  0
3FBC:  BRA    3FC6
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
3FBE:  MOVLW  01
3FC0:  MOVLB  1
3FC2:  MOVWF  xC4
.................... 			break; 
3FC4:  MOVLB  0
.................... 		} 
.................... 		break; 
3FC6:  GOTO   578A
.................... 		 
.................... 		case 'R': 
.................... 		if (!ttccp_login) break; 
3FCA:  MOVLB  1
3FCC:  MOVF   x34,F
3FCE:  BNZ   3FD8
3FD0:  MOVLB  0
3FD2:  GOTO   578A
3FD6:  MOVLB  1
.................... 		switch (c2) 
3FD8:  MOVLW  41
3FDA:  SUBWF  xF0,W
3FDC:  ADDLW  F0
3FDE:  BTFSC  FD8.0
3FE0:  BRA    45F0
3FE2:  ADDLW  10
3FE4:  MOVLB  0
3FE6:  GOTO   5792
....................         { 
.................... 			case 'P':  // HI or LO power - discrete output + DAC   setup.power_high 
.................... 			if (query) 
3FEA:  MOVLB  1
3FEC:  MOVF   xEE,F
3FEE:  BZ    403C
....................             { 
.................... 				sprintf(buf, "RP %u\r", setup.power_high); 
3FF0:  MOVLW  01
3FF2:  MOVWF  xA4
3FF4:  MOVLW  C6
3FF6:  MOVWF  xA3
3FF8:  MOVLW  64
3FFA:  MOVWF  FF6
3FFC:  MOVLW  0D
3FFE:  MOVWF  FF7
4000:  MOVLW  03
4002:  MOVLB  2
4004:  MOVWF  x41
4006:  MOVLB  0
4008:  CALL   3102
400C:  MOVFF  B3,22C
4010:  MOVLW  1B
4012:  MOVLB  2
4014:  MOVWF  x2D
4016:  MOVLB  0
4018:  CALL   327A
401C:  MOVLW  0D
401E:  MOVLB  2
4020:  MOVWF  x4E
4022:  MOVLB  0
4024:  CALL   30E0
.................... 				COM1_send_str(buf); 
4028:  MOVLW  01
402A:  MOVLB  2
402C:  MOVWF  x68
402E:  MOVLW  C6
4030:  MOVWF  x67
4032:  MOVLB  0
4034:  CALL   21D2
.................... 			} 
4038:  BRA    4142
403A:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
403C:  MOVLB  0
403E:  CALL   2B56
4042:  MOVFF  02,207
4046:  MOVFF  01,206
.................... 				if (val < 2) 
404A:  MOVLB  2
404C:  MOVF   x07,F
404E:  BNZ   40C4
4050:  MOVF   x06,W
4052:  SUBLW  01
4054:  BNC   40C4
.................... 				{ 
.................... 					if(setup.rc == 1) 
4056:  MOVLB  0
4058:  DECFSZ xFA,W
405A:  BRA    407C
405C:  MOVF   xFB,F
405E:  BNZ   407C
.................... 					{ 
.................... 						if(val == 0) 
4060:  MOVLB  2
4062:  MOVF   x06,F
4064:  BNZ   4076
4066:  MOVF   x07,F
4068:  BNZ   4076
.................... 						{ 
.................... 							setup.rp =1; 
406A:  MOVLB  0
406C:  CLRF   xFD
406E:  MOVLW  01
4070:  MOVWF  xFC
.................... 						} 
4072:  BRA    407C
4074:  MOVLB  2
.................... 						else 
.................... 						 
.................... 						setup.rp = 0; 
4076:  MOVLB  0
4078:  CLRF   xFD
407A:  CLRF   xFC
.................... 					} 
.................... 					if(val == 1) 
407C:  MOVLB  2
407E:  DECFSZ x06,W
4080:  BRA    40A4
4082:  MOVF   x07,F
4084:  BNZ   40A4
.................... 					{ 
.................... 						rp_command = setup.rp = 0; 
4086:  MOVLB  0
4088:  CLRF   xFD
408A:  CLRF   xFC
408C:  MOVFF  FC,1A0
.................... 						delay_ms(50); 
4090:  MOVLW  32
4092:  MOVLB  2
4094:  MOVWF  x3E
4096:  MOVLB  0
4098:  CALL   0F54
.................... 						update_all(); 
409C:  CALL   1DCA
.................... 					} 
40A0:  BRA    40C0
40A2:  MOVLB  2
.................... 					else 
.................... 					{ 
.................... 						rp_command = setup.rp = 1; 
40A4:  MOVLB  0
40A6:  CLRF   xFD
40A8:  MOVLW  01
40AA:  MOVWF  xFC
40AC:  MOVFF  FC,1A0
.................... 						delay_ms(50); 
40B0:  MOVLW  32
40B2:  MOVLB  2
40B4:  MOVWF  x3E
40B6:  MOVLB  0
40B8:  CALL   0F54
.................... 						update_all(); 
40BC:  CALL   1DCA
.................... 					} 
.................... 				} 
40C0:  BRA    4142
40C2:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
40C4:  MOVLW  02
40C6:  MOVWF  FEA
40C8:  MOVLW  0F
40CA:  MOVWF  FE9
40CC:  MOVFF  FF2,228
40D0:  BCF    FF2.7
40D2:  MOVLW  09
40D4:  MOVWF  01
40D6:  CLRF   FF7
40D8:  MOVLW  00
40DA:  MOVLB  0
40DC:  CALL   0A7C
40E0:  TBLRD*-
40E2:  TBLRD*+
40E4:  MOVFF  FF5,FEE
40E8:  DECFSZ 01,F
40EA:  BRA    40E2
40EC:  MOVLB  2
40EE:  BTFSC  x28.7
40F0:  BSF    FF2.7
40F2:  MOVLW  02
40F4:  MOVWF  x68
40F6:  MOVLW  0F
40F8:  MOVWF  x67
40FA:  MOVLB  0
40FC:  CALL   21D2
.................... 					sprintf(ttccp_error_message, "ERR RP %u\r", rp_command); 
4100:  MOVLW  01
4102:  MOVLB  1
4104:  MOVWF  xA4
4106:  MOVLW  78
4108:  MOVWF  xA3
410A:  MOVLW  6C
410C:  MOVWF  FF6
410E:  MOVLW  0D
4110:  MOVWF  FF7
4112:  MOVLW  07
4114:  MOVLB  2
4116:  MOVWF  x41
4118:  MOVLB  0
411A:  CALL   3102
411E:  MOVFF  1A0,22C
4122:  MOVLW  1B
4124:  MOVLB  2
4126:  MOVWF  x2D
4128:  MOVLB  0
412A:  CALL   327A
412E:  MOVLW  0D
4130:  MOVLB  2
4132:  MOVWF  x4E
4134:  MOVLB  0
4136:  CALL   30E0
.................... 					ret = 0; 
413A:  MOVLB  1
413C:  CLRF   xC4
.................... 					break; 
413E:  BRA    45F0
4140:  MOVLB  0
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
4142:  MOVLW  01
4144:  MOVLB  1
4146:  MOVWF  xC4
.................... 			break; 
4148:  BRA    45F0
.................... 			 
.................... 			case 'F': // discrete output - power amp on/off       setup.power_amp 
.................... 			if (query) 
414A:  MOVLB  1
414C:  MOVF   xEE,F
414E:  BZ    419C
....................             { 
.................... 				sprintf(buf, "RF %u\r", pwr_command); 
4150:  MOVLW  01
4152:  MOVWF  xA4
4154:  MOVLW  C6
4156:  MOVWF  xA3
4158:  MOVLW  78
415A:  MOVWF  FF6
415C:  MOVLW  0D
415E:  MOVWF  FF7
4160:  MOVLW  03
4162:  MOVLB  2
4164:  MOVWF  x41
4166:  MOVLB  0
4168:  CALL   3102
416C:  MOVFF  1A1,22C
4170:  MOVLW  1B
4172:  MOVLB  2
4174:  MOVWF  x2D
4176:  MOVLB  0
4178:  CALL   327A
417C:  MOVLW  0D
417E:  MOVLB  2
4180:  MOVWF  x4E
4182:  MOVLB  0
4184:  CALL   30E0
.................... 				COM1_send_str(buf); 
4188:  MOVLW  01
418A:  MOVLB  2
418C:  MOVWF  x68
418E:  MOVLW  C6
4190:  MOVWF  x67
4192:  MOVLB  0
4194:  CALL   21D2
.................... 			} 
4198:  BRA    4308
419A:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
419C:  MOVLB  0
419E:  CALL   2B56
41A2:  MOVFF  02,207
41A6:  MOVFF  01,206
.................... 				if (val == 0) 
41AA:  MOVLB  2
41AC:  MOVF   x06,F
41AE:  BNZ   4218
41B0:  MOVF   x07,F
41B2:  BNZ   4218
.................... 				{ 
.................... 					if(setup.cot || setup.rc) 
41B4:  MOVLB  0
41B6:  MOVF   xF8,W
41B8:  IORWF  xF9,W
41BA:  BNZ   41C2
41BC:  MOVF   xFA,W
41BE:  IORWF  xFB,W
41C0:  BZ    41E8
.................... 					{ 
.................... 						pwr_command = 0; 
41C2:  MOVLB  1
41C4:  CLRF   xA1
.................... 						setup.pwr = pwr_command; 
41C6:  MOVLB  0
41C8:  CLRF   xAB
41CA:  MOVFF  1A1,AA
.................... 						delay_ms(60); 
41CE:  MOVLW  3C
41D0:  MOVLB  2
41D2:  MOVWF  x3E
41D4:  MOVLB  0
41D6:  CALL   0F54
.................... 						update_all(); 
41DA:  CALL   1DCA
.................... 						ret = 1; 
41DE:  MOVLW  01
41E0:  MOVLB  1
41E2:  MOVWF  xC4
.................... 					} 
41E4:  BRA    4214
41E6:  MOVLB  0
.................... 					else if(setup.cot == 0 || setup.rc) 
41E8:  MOVF   xF8,F
41EA:  BNZ   41F0
41EC:  MOVF   xF9,F
41EE:  BZ    41F6
41F0:  MOVF   xFA,W
41F2:  IORWF  xFB,W
41F4:  BZ    4212
.................... 					{ 
.................... 						pwr_command = 0; 
41F6:  MOVLB  1
41F8:  CLRF   xA1
.................... 						setup.pwr = pwr_command; 
41FA:  MOVLB  0
41FC:  CLRF   xAB
41FE:  MOVFF  1A1,AA
.................... 						delay_ms(60); 
4202:  MOVLW  3C
4204:  MOVLB  2
4206:  MOVWF  x3E
4208:  MOVLB  0
420A:  CALL   0F54
.................... 						update_all(); 
420E:  CALL   1DCA
4212:  MOVLB  1
.................... 					} 
.................... 				} 
4214:  BRA    4306
4216:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					if (val == 1) 
4218:  DECFSZ x06,W
421A:  BRA    428A
421C:  MOVF   x07,F
421E:  BNZ   428A
.................... 					{ 
.................... 						if(setup.cot) 
4220:  MOVLB  0
4222:  MOVF   xF8,W
4224:  IORWF  xF9,W
4226:  BZ    4254
.................... 						{ 
.................... 							pwr_command = 1; 
4228:  MOVLW  01
422A:  MOVLB  1
422C:  MOVWF  xA1
.................... 							setup.pwr = pwr_command; 
422E:  MOVLB  0
4230:  CLRF   xAB
4232:  MOVFF  1A1,AA
.................... 							power_output(); 
4236:  CALL   1F34
.................... 							delay_ms(50); 
423A:  MOVLW  32
423C:  MOVLB  2
423E:  MOVWF  x3E
4240:  MOVLB  0
4242:  CALL   0F54
.................... 							ret = 1; 
4246:  MOVLW  01
4248:  MOVLB  1
424A:  MOVWF  xC4
.................... 							update_all(); 
424C:  MOVLB  0
424E:  CALL   1DCA
.................... 						} 
4252:  BRA    4286
.................... 						else if(setup.cot == 0) 
4254:  MOVF   xF8,F
4256:  BNZ   4286
4258:  MOVF   xF9,F
425A:  BNZ   4286
.................... 						{ 
.................... 							pwr_command = 1; 
425C:  MOVLW  01
425E:  MOVLB  1
4260:  MOVWF  xA1
.................... 							setup.pwr = pwr_command; 
4262:  MOVLB  0
4264:  CLRF   xAB
4266:  MOVFF  1A1,AA
.................... 							power_output(); 
426A:  CALL   1F34
.................... 							delay_ms(50); 
426E:  MOVLW  32
4270:  MOVLB  2
4272:  MOVWF  x3E
4274:  MOVLB  0
4276:  CALL   0F54
.................... 							ret = 1; 
427A:  MOVLW  01
427C:  MOVLB  1
427E:  MOVWF  xC4
.................... 							update_all(); 
4280:  MOVLB  0
4282:  CALL   1DCA
.................... 						} 
.................... 					} 
4286:  BRA    4308
4288:  MOVLB  2
.................... 					else 
.................... 					{ 
.................... 						COM1_send_str("\r\nFAIL\r\n"); 
428A:  MOVLW  02
428C:  MOVWF  FEA
428E:  MOVLW  0F
4290:  MOVWF  FE9
4292:  MOVFF  FF2,228
4296:  BCF    FF2.7
4298:  MOVLW  09
429A:  MOVWF  01
429C:  CLRF   FF7
429E:  MOVLW  00
42A0:  MOVLB  0
42A2:  CALL   0A7C
42A6:  TBLRD*-
42A8:  TBLRD*+
42AA:  MOVFF  FF5,FEE
42AE:  DECFSZ 01,F
42B0:  BRA    42A8
42B2:  MOVLB  2
42B4:  BTFSC  x28.7
42B6:  BSF    FF2.7
42B8:  MOVLW  02
42BA:  MOVWF  x68
42BC:  MOVLW  0F
42BE:  MOVWF  x67
42C0:  MOVLB  0
42C2:  CALL   21D2
.................... 						sprintf(ttccp_error_message, "ERR RF %u\r", pwr_command); 
42C6:  MOVLW  01
42C8:  MOVLB  1
42CA:  MOVWF  xA4
42CC:  MOVLW  78
42CE:  MOVWF  xA3
42D0:  MOVLW  80
42D2:  MOVWF  FF6
42D4:  MOVLW  0D
42D6:  MOVWF  FF7
42D8:  MOVLW  07
42DA:  MOVLB  2
42DC:  MOVWF  x41
42DE:  MOVLB  0
42E0:  CALL   3102
42E4:  MOVFF  1A1,22C
42E8:  MOVLW  1B
42EA:  MOVLB  2
42EC:  MOVWF  x2D
42EE:  MOVLB  0
42F0:  CALL   327A
42F4:  MOVLW  0D
42F6:  MOVLB  2
42F8:  MOVWF  x4E
42FA:  MOVLB  0
42FC:  CALL   30E0
.................... 						ret = 0; 
4300:  MOVLB  1
4302:  CLRF   xC4
.................... 						break; 
4304:  BRA    45F0
4306:  MOVLB  0
.................... 					} 
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
4308:  MOVLW  01
430A:  MOVLB  1
430C:  MOVWF  xC4
.................... 			break; 
430E:  BRA    45F0
.................... 			 
.................... 			case 'C': 
....................          	if (query) 
4310:  MOVLB  1
4312:  MOVF   xEE,F
4314:  BZ    4362
....................             { 
.................... 				sprintf(buf, "RC %lu\r", setup.rc); 
4316:  MOVLW  01
4318:  MOVWF  xA4
431A:  MOVLW  C6
431C:  MOVWF  xA3
431E:  MOVLW  8C
4320:  MOVWF  FF6
4322:  MOVLW  0D
4324:  MOVWF  FF7
4326:  MOVLW  03
4328:  MOVLB  2
432A:  MOVWF  x41
432C:  MOVLB  0
432E:  CALL   3102
4332:  MOVLW  10
4334:  MOVWF  FE9
4336:  MOVFF  FB,22D
433A:  MOVFF  FA,22C
433E:  CALL   312A
4342:  MOVLW  0D
4344:  MOVLB  2
4346:  MOVWF  x4E
4348:  MOVLB  0
434A:  CALL   30E0
.................... 				COM1_send_str(buf); 
434E:  MOVLW  01
4350:  MOVLB  2
4352:  MOVWF  x68
4354:  MOVLW  C6
4356:  MOVWF  x67
4358:  MOVLB  0
435A:  CALL   21D2
.................... 			} 
435E:  BRA    43FC
4360:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4362:  MOVLB  0
4364:  CALL   2B56
4368:  MOVFF  02,207
436C:  MOVFF  01,206
.................... 				if(val < 2) 
4370:  MOVLB  2
4372:  MOVF   x07,F
4374:  BNZ   43C0
4376:  MOVF   x06,W
4378:  SUBLW  01
437A:  BNC   43C0
.................... 				{ 
.................... 					if(val == 0) 
437C:  MOVF   x06,F
437E:  BNZ   439C
4380:  MOVF   x07,F
4382:  BNZ   439C
.................... 					{ 
.................... 						setup.rc = 0; 
4384:  MOVLB  0
4386:  CLRF   xFB
4388:  CLRF   xFA
.................... 						delay_ms(50); 
438A:  MOVLW  32
438C:  MOVLB  2
438E:  MOVWF  x3E
4390:  MOVLB  0
4392:  CALL   0F54
.................... 						update_all(); 
4396:  CALL   1DCA
439A:  MOVLB  2
.................... 					} 
.................... 					if(val == 1) 
439C:  DECFSZ x06,W
439E:  BRA    43BE
43A0:  MOVF   x07,F
43A2:  BNZ   43BE
.................... 					{ 
.................... 						setup.rc = 1; 
43A4:  MOVLB  0
43A6:  CLRF   xFB
43A8:  MOVLW  01
43AA:  MOVWF  xFA
.................... 						delay_ms(50); 
43AC:  MOVLW  32
43AE:  MOVLB  2
43B0:  MOVWF  x3E
43B2:  MOVLB  0
43B4:  CALL   0F54
.................... 						update_all(); 
43B8:  CALL   1DCA
43BC:  MOVLB  2
.................... 					} 
.................... 				} 
43BE:  BRA    43FE
.................... 				else 
.................... 				COM1_send_str("\r\nFAULT\r\n"); 
43C0:  MOVLW  02
43C2:  MOVWF  FEA
43C4:  MOVLW  0F
43C6:  MOVWF  FE9
43C8:  MOVFF  FF2,228
43CC:  BCF    FF2.7
43CE:  MOVLW  0A
43D0:  MOVWF  01
43D2:  CLRF   FF7
43D4:  MOVLW  00
43D6:  MOVLB  0
43D8:  CALL   0A58
43DC:  TBLRD*-
43DE:  TBLRD*+
43E0:  MOVFF  FF5,FEE
43E4:  DECFSZ 01,F
43E6:  BRA    43DE
43E8:  MOVLB  2
43EA:  BTFSC  x28.7
43EC:  BSF    FF2.7
43EE:  MOVLW  02
43F0:  MOVWF  x68
43F2:  MOVLW  0F
43F4:  MOVWF  x67
43F6:  MOVLB  0
43F8:  CALL   21D2
43FC:  MOVLB  2
.................... 			} 
.................... 			break; 
43FE:  MOVLB  1
4400:  BRA    45F0
.................... 			 
.................... 			case 'B': 
....................             if (query) 
4402:  MOVLB  1
4404:  MOVF   xEE,F
4406:  BZ    4454
....................             { 
.................... 				sprintf(buf, "RB %lu\r", setup.cot); 
4408:  MOVLW  01
440A:  MOVWF  xA4
440C:  MOVLW  C6
440E:  MOVWF  xA3
4410:  MOVLW  94
4412:  MOVWF  FF6
4414:  MOVLW  0D
4416:  MOVWF  FF7
4418:  MOVLW  03
441A:  MOVLB  2
441C:  MOVWF  x41
441E:  MOVLB  0
4420:  CALL   3102
4424:  MOVLW  10
4426:  MOVWF  FE9
4428:  MOVFF  F9,22D
442C:  MOVFF  F8,22C
4430:  CALL   312A
4434:  MOVLW  0D
4436:  MOVLB  2
4438:  MOVWF  x4E
443A:  MOVLB  0
443C:  CALL   30E0
.................... 				COM1_send_str(buf); 
4440:  MOVLW  01
4442:  MOVLB  2
4444:  MOVWF  x68
4446:  MOVLW  C6
4448:  MOVWF  x67
444A:  MOVLB  0
444C:  CALL   21D2
.................... 			} 
4450:  BRA    44CE
4452:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4454:  MOVLB  0
4456:  CALL   2B56
445A:  MOVFF  02,207
445E:  MOVFF  01,206
.................... 				if(val < 2) 
4462:  MOVLB  2
4464:  MOVF   x07,F
4466:  BNZ   4492
4468:  MOVF   x06,W
446A:  SUBLW  01
446C:  BNC   4492
.................... 				{ 
.................... 					setup.cot = val; 
446E:  MOVFF  207,F9
4472:  MOVFF  206,F8
.................... 					pwr_command++; 
4476:  MOVLB  1
4478:  INCF   xA1,F
.................... 					pwr_command &= 1; 
447A:  MOVLW  01
447C:  ANDWF  xA1,F
.................... 					delay_ms(50); 
447E:  MOVLW  32
4480:  MOVLB  2
4482:  MOVWF  x3E
4484:  MOVLB  0
4486:  CALL   0F54
.................... 					update_all(); 
448A:  CALL   1DCA
.................... 				} 
448E:  BRA    44CE
4490:  MOVLB  2
.................... 				else 
.................... 				COM1_send_str("\r\nFAULT\r\n"); 
4492:  MOVLW  02
4494:  MOVWF  FEA
4496:  MOVLW  0F
4498:  MOVWF  FE9
449A:  MOVFF  FF2,228
449E:  BCF    FF2.7
44A0:  MOVLW  0A
44A2:  MOVWF  01
44A4:  CLRF   FF7
44A6:  MOVLW  00
44A8:  MOVLB  0
44AA:  CALL   0A58
44AE:  TBLRD*-
44B0:  TBLRD*+
44B2:  MOVFF  FF5,FEE
44B6:  DECFSZ 01,F
44B8:  BRA    44B0
44BA:  MOVLB  2
44BC:  BTFSC  x28.7
44BE:  BSF    FF2.7
44C0:  MOVLW  02
44C2:  MOVWF  x68
44C4:  MOVLW  0F
44C6:  MOVWF  x67
44C8:  MOVLB  0
44CA:  CALL   21D2
.................... 			} 
.................... 			break; 
44CE:  MOVLB  1
44D0:  BRA    45F0
.................... 			 
.................... 			case 'A': // Addr 0 bit 6     setup.randomizer 
.................... 			if (query) 
44D2:  MOVLB  1
44D4:  MOVF   xEE,F
44D6:  BZ    4524
....................             { 
.................... 				sprintf(buf, "RA %u\r", setup.randomizer); 
44D8:  MOVLW  01
44DA:  MOVWF  xA4
44DC:  MOVLW  C6
44DE:  MOVWF  xA3
44E0:  MOVLW  9C
44E2:  MOVWF  FF6
44E4:  MOVLW  0D
44E6:  MOVWF  FF7
44E8:  MOVLW  03
44EA:  MOVLB  2
44EC:  MOVWF  x41
44EE:  MOVLB  0
44F0:  CALL   3102
44F4:  MOVFF  B2,22C
44F8:  MOVLW  1B
44FA:  MOVLB  2
44FC:  MOVWF  x2D
44FE:  MOVLB  0
4500:  CALL   327A
4504:  MOVLW  0D
4506:  MOVLB  2
4508:  MOVWF  x4E
450A:  MOVLB  0
450C:  CALL   30E0
.................... 				COM1_send_str(buf); 
4510:  MOVLW  01
4512:  MOVLB  2
4514:  MOVWF  x68
4516:  MOVLW  C6
4518:  MOVWF  x67
451A:  MOVLB  0
451C:  CALL   21D2
.................... 			} 
4520:  BRA    45D0
4522:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4524:  MOVLB  0
4526:  CALL   2B56
452A:  MOVFF  02,207
452E:  MOVFF  01,206
.................... 				if (val < 2) 
4532:  MOVLB  2
4534:  MOVF   x07,F
4536:  BNZ   4552
4538:  MOVF   x06,W
453A:  SUBLW  01
453C:  BNC   4552
.................... 				{ 
.................... 					setup.randomizer = val; 
453E:  MOVFF  206,B2
.................... 					FPGA_set_reg0(); 
4542:  MOVLB  0
4544:  CALL   187C
.................... 					ret = 1; 
4548:  MOVLW  01
454A:  MOVLB  1
454C:  MOVWF  xC4
.................... 				} 
454E:  BRA    45CE
4550:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
4552:  MOVLW  02
4554:  MOVWF  FEA
4556:  MOVLW  0F
4558:  MOVWF  FE9
455A:  MOVFF  FF2,228
455E:  BCF    FF2.7
4560:  MOVLW  09
4562:  MOVWF  01
4564:  CLRF   FF7
4566:  MOVLW  00
4568:  MOVLB  0
456A:  CALL   0A7C
456E:  TBLRD*-
4570:  TBLRD*+
4572:  MOVFF  FF5,FEE
4576:  DECFSZ 01,F
4578:  BRA    4570
457A:  MOVLB  2
457C:  BTFSC  x28.7
457E:  BSF    FF2.7
4580:  MOVLW  02
4582:  MOVWF  x68
4584:  MOVLW  0F
4586:  MOVWF  x67
4588:  MOVLB  0
458A:  CALL   21D2
.................... 					sprintf(ttccp_error_message, "ERR RA %u\r", setup.randomizer); 
458E:  MOVLW  01
4590:  MOVLB  1
4592:  MOVWF  xA4
4594:  MOVLW  78
4596:  MOVWF  xA3
4598:  MOVLW  A4
459A:  MOVWF  FF6
459C:  MOVLW  0D
459E:  MOVWF  FF7
45A0:  MOVLW  07
45A2:  MOVLB  2
45A4:  MOVWF  x41
45A6:  MOVLB  0
45A8:  CALL   3102
45AC:  MOVFF  B2,22C
45B0:  MOVLW  1B
45B2:  MOVLB  2
45B4:  MOVWF  x2D
45B6:  MOVLB  0
45B8:  CALL   327A
45BC:  MOVLW  0D
45BE:  MOVLB  2
45C0:  MOVWF  x4E
45C2:  MOVLB  0
45C4:  CALL   30E0
.................... 					ret = 0; 
45C8:  MOVLB  1
45CA:  CLRF   xC4
.................... 					break; 
45CC:  BRA    45F0
45CE:  MOVLB  0
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
45D0:  MOVLW  01
45D2:  MOVLB  1
45D4:  MOVWF  xC4
.................... 			break; 
45D6:  BRA    45F0
.................... 			 
.................... 			case 'L':    // recall 
.................... 			read_setup(); 
45D8:  CALL   1090
.................... 			update_all(); 
45DC:  CALL   1DCA
.................... 			ret = 1; 
45E0:  MOVLW  01
45E2:  MOVLB  1
45E4:  MOVWF  xC4
.................... 			break; 
45E6:  BRA    45F0
.................... 			case 'E':   // reset 
.................... 			reset_cpu(); 
45E8:  RESET
.................... 			break; 
45EA:  MOVLB  1
45EC:  BRA    45F0
45EE:  MOVLB  1
.................... 		} 
.................... 		break; 
45F0:  MOVLB  0
45F2:  GOTO   578A
.................... 		 
.................... 		case 'W':            // query 
.................... 		if (!ttccp_login) break; 
45F6:  MOVLB  1
45F8:  MOVF   x34,F
45FA:  BNZ   4604
45FC:  MOVLB  0
45FE:  GOTO   578A
4602:  MOVLB  1
.................... 		if (c2 == 'A') 
4604:  MOVF   xF0,W
4606:  SUBLW  41
4608:  BNZ   460E
....................         { 
.................... 			//xxxx 
.................... 			ret = 1; 
460A:  MOVLW  01
460C:  MOVWF  xC4
.................... 		} 
.................... 		break; 
460E:  MOVLB  0
4610:  GOTO   578A
.................... 		 
.................... 		case 'S': 
.................... 		if (!ttccp_login) break; 
4614:  MOVLB  1
4616:  MOVF   x34,F
4618:  BNZ   4622
461A:  MOVLB  0
461C:  GOTO   578A
4620:  MOVLB  1
.................... 		switch (c2) 
4622:  MOVF   xF0,W
4624:  XORLW  50
4626:  MOVLB  0
4628:  BZ    4630
462A:  XORLW  06
462C:  BZ    463A
462E:  BRA    4652
....................         { 
.................... 			case 'P': // power down - discrete outputs 
.................... 			ret = 1; 
4630:  MOVLW  01
4632:  MOVLB  1
4634:  MOVWF  xC4
.................... 			break; 
4636:  MOVLB  0
4638:  BRA    4652
.................... 			case 'V': 
.................... 			allow_write = 2975; 
463A:  MOVLW  0B
463C:  MOVLB  1
463E:  MOVWF  x07
4640:  MOVLW  9F
4642:  MOVWF  x06
.................... 			write_setup(); 
4644:  MOVLB  0
4646:  CALL   3366
.................... 			ret = 1; 
464A:  MOVLW  01
464C:  MOVLB  1
464E:  MOVWF  xC4
.................... 			break; 
4650:  MOVLB  0
.................... 		} 
.................... 		break; 
4652:  GOTO   578A
.................... 		 
.................... 		 
.................... 		case 'U': // VERSION 3.3 UT US 
.................... 		if (!ttccp_login) break; 
4656:  MOVLB  1
4658:  MOVF   x34,F
465A:  BNZ   4664
465C:  MOVLB  0
465E:  GOTO   578A
4662:  MOVLB  1
.................... 		switch (c2) 
4664:  MOVF   xF0,W
4666:  XORLW  54
4668:  MOVLB  0
466A:  BZ    4674
466C:  XORLW  07
466E:  BTFSC  FD8.2
4670:  BRA    477A
4672:  BRA    4870
....................         { 
.................... 			case 'T':  
.................... 			if (query) 
4674:  MOVLB  1
4676:  MOVF   xEE,F
4678:  BZ    46C6
....................             { 
.................... 				sprintf(buf, "UT %u\r", setup.UART_Time); 
467A:  MOVLW  01
467C:  MOVWF  xA4
467E:  MOVLW  C6
4680:  MOVWF  xA3
4682:  MOVLW  B0
4684:  MOVWF  FF6
4686:  MOVLW  0D
4688:  MOVWF  FF7
468A:  MOVLW  03
468C:  MOVLB  2
468E:  MOVWF  x41
4690:  MOVLB  0
4692:  CALL   3102
4696:  MOVFF  FE,22C
469A:  MOVLW  1B
469C:  MOVLB  2
469E:  MOVWF  x2D
46A0:  MOVLB  0
46A2:  CALL   327A
46A6:  MOVLW  0D
46A8:  MOVLB  2
46AA:  MOVWF  x4E
46AC:  MOVLB  0
46AE:  CALL   30E0
.................... 				COM1_send_str(buf); 
46B2:  MOVLW  01
46B4:  MOVLB  2
46B6:  MOVWF  x68
46B8:  MOVLW  C6
46BA:  MOVWF  x67
46BC:  MOVLB  0
46BE:  CALL   21D2
.................... 			} 
46C2:  BRA    476E
46C4:  MOVLB  1
.................... 			else 
.................... 			{ 
.................... 	            val = get_int(); 
46C6:  MOVLB  0
46C8:  CALL   2B56
46CC:  MOVFF  02,207
46D0:  MOVFF  01,206
.................... 	            if (val < 240 && val > 10) 
46D4:  MOVLB  2
46D6:  MOVF   x07,F
46D8:  BNZ   46F0
46DA:  MOVF   x06,W
46DC:  SUBLW  EF
46DE:  BNC   46F0
46E0:  MOVF   x07,F
46E2:  BNZ   46EA
46E4:  MOVF   x06,W
46E6:  SUBLW  0A
46E8:  BC    46F0
.................... 				{ 
.................... 					setup.UART_Time = val;	               
46EA:  MOVFF  206,FE
.................... 				} 
46EE:  BRA    4770
.................... 	            else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
46F0:  MOVLW  02
46F2:  MOVWF  FEA
46F4:  MOVLW  0F
46F6:  MOVWF  FE9
46F8:  MOVFF  FF2,228
46FC:  BCF    FF2.7
46FE:  MOVLW  09
4700:  MOVWF  01
4702:  CLRF   FF7
4704:  MOVLW  00
4706:  MOVLB  0
4708:  CALL   0A7C
470C:  TBLRD*-
470E:  TBLRD*+
4710:  MOVFF  FF5,FEE
4714:  DECFSZ 01,F
4716:  BRA    470E
4718:  MOVLB  2
471A:  BTFSC  x28.7
471C:  BSF    FF2.7
471E:  MOVLW  02
4720:  MOVWF  x68
4722:  MOVLW  0F
4724:  MOVWF  x67
4726:  MOVLB  0
4728:  CALL   21D2
.................... 					sprintf(ttccp_error_message, "ERR UT %u\r", setup.UART_Time); 
472C:  MOVLW  01
472E:  MOVLB  1
4730:  MOVWF  xA4
4732:  MOVLW  78
4734:  MOVWF  xA3
4736:  MOVLW  B8
4738:  MOVWF  FF6
473A:  MOVLW  0D
473C:  MOVWF  FF7
473E:  MOVLW  07
4740:  MOVLB  2
4742:  MOVWF  x41
4744:  MOVLB  0
4746:  CALL   3102
474A:  MOVFF  FE,22C
474E:  MOVLW  1B
4750:  MOVLB  2
4752:  MOVWF  x2D
4754:  MOVLB  0
4756:  CALL   327A
475A:  MOVLW  0D
475C:  MOVLB  2
475E:  MOVWF  x4E
4760:  MOVLB  0
4762:  CALL   30E0
.................... 					ret = 0; 
4766:  MOVLB  1
4768:  CLRF   xC4
.................... 					break; 
476A:  MOVLB  0
476C:  BRA    4870
476E:  MOVLB  2
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
4770:  MOVLW  01
4772:  MOVLB  1
4774:  MOVWF  xC4
.................... 			break;  
4776:  MOVLB  0
4778:  BRA    4870
.................... 			 
.................... 			case 'S': 
.................... 			{ 
.................... 				if (query) 
477A:  MOVLB  1
477C:  MOVF   xEE,F
477E:  BZ    47CC
.................... 				{ 
.................... 					sprintf(buf, "US %u\r",setup.UART_Status); 
4780:  MOVLW  01
4782:  MOVWF  xA4
4784:  MOVLW  C6
4786:  MOVWF  xA3
4788:  MOVLW  C4
478A:  MOVWF  FF6
478C:  MOVLW  0D
478E:  MOVWF  FF7
4790:  MOVLW  03
4792:  MOVLB  2
4794:  MOVWF  x41
4796:  MOVLB  0
4798:  CALL   3102
479C:  MOVFF  FF,22C
47A0:  MOVLW  1B
47A2:  MOVLB  2
47A4:  MOVWF  x2D
47A6:  MOVLB  0
47A8:  CALL   327A
47AC:  MOVLW  0D
47AE:  MOVLB  2
47B0:  MOVWF  x4E
47B2:  MOVLB  0
47B4:  CALL   30E0
.................... 					COM1_send_str(buf); 
47B8:  MOVLW  01
47BA:  MOVLB  2
47BC:  MOVWF  x68
47BE:  MOVLW  C6
47C0:  MOVWF  x67
47C2:  MOVLB  0
47C4:  CALL   21D2
.................... 				} 
47C8:  BRA    486A
47CA:  MOVLB  1
.................... 				else 
.................... 				{ 
.................... 					val = get_int(); 
47CC:  MOVLB  0
47CE:  CALL   2B56
47D2:  MOVFF  02,207
47D6:  MOVFF  01,206
.................... 					if (val < 2) 
47DA:  MOVLB  2
47DC:  MOVF   x07,F
47DE:  BNZ   47EC
47E0:  MOVF   x06,W
47E2:  SUBLW  01
47E4:  BNC   47EC
.................... 					{ 
.................... 						setup.UART_Status = val; 
47E6:  MOVFF  206,FF
.................... 					} 
47EA:  BRA    486C
.................... 					else 
.................... 					{ 
.................... 			  			COM1_send_str("\r\nFAIL\r\n"); 
47EC:  MOVLW  02
47EE:  MOVWF  FEA
47F0:  MOVLW  0F
47F2:  MOVWF  FE9
47F4:  MOVFF  FF2,228
47F8:  BCF    FF2.7
47FA:  MOVLW  09
47FC:  MOVWF  01
47FE:  CLRF   FF7
4800:  MOVLW  00
4802:  MOVLB  0
4804:  CALL   0A7C
4808:  TBLRD*-
480A:  TBLRD*+
480C:  MOVFF  FF5,FEE
4810:  DECFSZ 01,F
4812:  BRA    480A
4814:  MOVLB  2
4816:  BTFSC  x28.7
4818:  BSF    FF2.7
481A:  MOVLW  02
481C:  MOVWF  x68
481E:  MOVLW  0F
4820:  MOVWF  x67
4822:  MOVLB  0
4824:  CALL   21D2
.................... 						sprintf(ttccp_error_message, "ERR US %u\r", setup.UART_Status); 
4828:  MOVLW  01
482A:  MOVLB  1
482C:  MOVWF  xA4
482E:  MOVLW  78
4830:  MOVWF  xA3
4832:  MOVLW  CC
4834:  MOVWF  FF6
4836:  MOVLW  0D
4838:  MOVWF  FF7
483A:  MOVLW  07
483C:  MOVLB  2
483E:  MOVWF  x41
4840:  MOVLB  0
4842:  CALL   3102
4846:  MOVFF  FF,22C
484A:  MOVLW  1B
484C:  MOVLB  2
484E:  MOVWF  x2D
4850:  MOVLB  0
4852:  CALL   327A
4856:  MOVLW  0D
4858:  MOVLB  2
485A:  MOVWF  x4E
485C:  MOVLB  0
485E:  CALL   30E0
.................... 						ret = 0; 
4862:  MOVLB  1
4864:  CLRF   xC4
.................... 						break; 
4866:  MOVLB  0
4868:  BRA    4870
486A:  MOVLB  2
.................... 					} 
.................... 				} 
.................... 				break; 
486C:  MOVLB  0
486E:  BRA    4870
.................... 			} 
.................... 			break; 
.................... 		} 
.................... 		break; 
4870:  GOTO   578A
.................... /*		///////////////////////////yehuda 1520Q remove BG command 
.................... 		case 'B': // VERSION 3.6 BG Block Ghange and Check Function 23.0.2016 
.................... 		if (!ttccp_login) break; 
.................... 		switch (c2) 
....................         { 
.................... 			case 'G':      
.................... 			if (query) 
....................             { 
.................... 				sprintf(buf, "BG %lu\r", setup.Block_per_second); 
.................... 				COM1_send_str(buf); 
.................... 			} 
.................... 			else 
....................             { 
.................... 				sub = get_int(); 
.................... 				if (sub >= 1 && sub <= 20) 
.................... 				{ 
....................  
.................... 					setup.Block_per_second = (1000 / sub); 
.................... 				} 
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
.................... 					sprintf(ttccp_error_message, "ERR BG %lu\r", 1000 / setup.Block_per_second); 
.................... 					ret = 0; 
.................... 					break; 
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
.................... 			break; 
.................... 		} 
.................... 		break; 
.................... */		 
....................       	 
.................... 		case 'I': 
.................... 		if (!ttccp_login) break; 
4874:  MOVLB  1
4876:  MOVF   x34,F
4878:  BNZ   4882
487A:  MOVLB  0
487C:  GOTO   578A
4880:  MOVLB  1
.................... 		switch (c2) 
4882:  MOVF   xF0,W
4884:  XORLW  44
4886:  MOVLB  0
4888:  BZ    4892
488A:  XORLW  07
488C:  BTFSC  FD8.2
488E:  BRA    4994
4890:  BRA    49F4
....................         { 
.................... 			case 'D':     // Addr 6 bits 2-5     setup.internal_pattern 
.................... 			if (query) 
4892:  MOVLB  1
4894:  MOVF   xEE,F
4896:  BZ    48E4
....................             { 
.................... 				sprintf(buf, "ID %u\r", setup.internal_pattern); 
4898:  MOVLW  01
489A:  MOVWF  xA4
489C:  MOVLW  C6
489E:  MOVWF  xA3
48A0:  MOVLW  D8
48A2:  MOVWF  FF6
48A4:  MOVLW  0D
48A6:  MOVWF  FF7
48A8:  MOVLW  03
48AA:  MOVLB  2
48AC:  MOVWF  x41
48AE:  MOVLB  0
48B0:  CALL   3102
48B4:  MOVFF  B1,22C
48B8:  MOVLW  1B
48BA:  MOVLB  2
48BC:  MOVWF  x2D
48BE:  MOVLB  0
48C0:  CALL   327A
48C4:  MOVLW  0D
48C6:  MOVLB  2
48C8:  MOVWF  x4E
48CA:  MOVLB  0
48CC:  CALL   30E0
.................... 				COM1_send_str(buf); 
48D0:  MOVLW  01
48D2:  MOVLB  2
48D4:  MOVWF  x68
48D6:  MOVLW  C6
48D8:  MOVWF  x67
48DA:  MOVLB  0
48DC:  CALL   21D2
.................... 			} 
48E0:  BRA    498A
48E2:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
48E4:  MOVLB  0
48E6:  CALL   2B56
48EA:  MOVFF  02,207
48EE:  MOVFF  01,206
.................... 				if (val < 4) 
48F2:  MOVLB  2
48F4:  MOVF   x07,F
48F6:  BNZ   490C
48F8:  MOVF   x06,W
48FA:  SUBLW  03
48FC:  BNC   490C
.................... 				{ 
.................... 					setup.internal_pattern = val; 
48FE:  MOVFF  206,B1
.................... 					FPGA_set_reg6(); 
4902:  MOVLB  0
4904:  CALL   18D8
.................... 				} 
4908:  BRA    498A
490A:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
490C:  MOVLW  02
490E:  MOVWF  FEA
4910:  MOVLW  0F
4912:  MOVWF  FE9
4914:  MOVFF  FF2,228
4918:  BCF    FF2.7
491A:  MOVLW  09
491C:  MOVWF  01
491E:  CLRF   FF7
4920:  MOVLW  00
4922:  MOVLB  0
4924:  CALL   0A7C
4928:  TBLRD*-
492A:  TBLRD*+
492C:  MOVFF  FF5,FEE
4930:  DECFSZ 01,F
4932:  BRA    492A
4934:  MOVLB  2
4936:  BTFSC  x28.7
4938:  BSF    FF2.7
493A:  MOVLW  02
493C:  MOVWF  x68
493E:  MOVLW  0F
4940:  MOVWF  x67
4942:  MOVLB  0
4944:  CALL   21D2
.................... 					sprintf(ttccp_error_message, "ERR ID %u\r", setup.internal_pattern); 
4948:  MOVLW  01
494A:  MOVLB  1
494C:  MOVWF  xA4
494E:  MOVLW  78
4950:  MOVWF  xA3
4952:  MOVLW  E0
4954:  MOVWF  FF6
4956:  MOVLW  0D
4958:  MOVWF  FF7
495A:  MOVLW  07
495C:  MOVLB  2
495E:  MOVWF  x41
4960:  MOVLB  0
4962:  CALL   3102
4966:  MOVFF  B1,22C
496A:  MOVLW  1B
496C:  MOVLB  2
496E:  MOVWF  x2D
4970:  MOVLB  0
4972:  CALL   327A
4976:  MOVLW  0D
4978:  MOVLB  2
497A:  MOVWF  x4E
497C:  MOVLB  0
497E:  CALL   30E0
.................... 					ret = 0; 
4982:  MOVLB  1
4984:  CLRF   xC4
.................... 					break; 
4986:  MOVLB  0
4988:  BRA    49F4
.................... 				} 
.................... 			} 
.................... 			ret = 1; 
498A:  MOVLW  01
498C:  MOVLB  1
498E:  MOVWF  xC4
.................... 			break; 
4990:  MOVLB  0
4992:  BRA    49F4
.................... 			 
.................... 			case 'C':    // Addr 2 - 5 bit rate 
.................... 			if (query) 
4994:  MOVLB  1
4996:  MOVF   xEE,F
4998:  BZ    49E6
....................             { 
.................... 				sprintf(buf, "IC %lu\r", setup.bitrate); 
499A:  MOVLW  01
499C:  MOVWF  xA4
499E:  MOVLW  C6
49A0:  MOVWF  xA3
49A2:  MOVLW  EC
49A4:  MOVWF  FF6
49A6:  MOVLW  0D
49A8:  MOVWF  FF7
49AA:  MOVLW  03
49AC:  MOVLB  2
49AE:  MOVWF  x41
49B0:  MOVLB  0
49B2:  CALL   3102
49B6:  MOVLW  10
49B8:  MOVWF  FE9
49BA:  MOVFF  A9,22D
49BE:  MOVFF  A8,22C
49C2:  CALL   312A
49C6:  MOVLW  0D
49C8:  MOVLB  2
49CA:  MOVWF  x4E
49CC:  MOVLB  0
49CE:  CALL   30E0
.................... 				COM1_send_str(buf); 
49D2:  MOVLW  01
49D4:  MOVLB  2
49D6:  MOVWF  x68
49D8:  MOVLW  C6
49DA:  MOVWF  x67
49DC:  MOVLB  0
49DE:  CALL   21D2
.................... 			} 
49E2:  BRA    49EC
49E4:  MOVLB  1
.................... 			else 
....................             { 
.................... 				get_new_bitrate(); 
49E6:  MOVLB  0
49E8:  GOTO   3394
.................... 			} 
.................... 			ret = 1; 
49EC:  MOVLW  01
49EE:  MOVLB  1
49F0:  MOVWF  xC4
.................... 			break; 
49F2:  MOVLB  0
.................... 		} 
.................... 		break; 
49F4:  GOTO   578A
.................... 		 
.................... 		case 'T': 
.................... 		if (!ttccp_login) break; 
49F8:  MOVLB  1
49FA:  MOVF   x34,F
49FC:  BNZ   4A06
49FE:  MOVLB  0
4A00:  GOTO   578A
4A04:  MOVLB  1
.................... 		if (c2 == 'E') 
4A06:  MOVF   xF0,W
4A08:  SUBLW  45
4A0A:  BNZ   4A16
....................         { 
....................             update_temperature_string(); 
4A0C:  MOVLB  0
4A0E:  CALL   3614
....................             ret = 0; 
4A12:  MOVLB  1
4A14:  CLRF   xC4
.................... 		} 
.................... 		break; 
4A16:  MOVLB  0
4A18:  GOTO   578A
.................... 		 
.................... 		case 'V': 
.................... 		if (!ttccp_login) break; 
4A1C:  MOVLB  1
4A1E:  MOVF   x34,F
4A20:  BNZ   4A2A
4A22:  MOVLB  0
4A24:  GOTO   578A
4A28:  MOVLB  1
.................... 		switch (c2) 
4A2A:  MOVF   xF0,W
4A2C:  XORLW  45
4A2E:  MOVLB  0
4A30:  BZ    4A52
4A32:  XORLW  16
4A34:  BTFSC  FD8.2
4A36:  BRA    4B94
4A38:  XORLW  1F
4A3A:  BTFSC  FD8.2
4A3C:  BRA    4CA6
4A3E:  XORLW  1C
4A40:  BTFSC  FD8.2
4A42:  BRA    4CFE
4A44:  XORLW  1D
4A46:  BTFSC  FD8.2
4A48:  BRA    4D76
4A4A:  XORLW  0E
4A4C:  BTFSC  FD8.2
4A4E:  BRA    4DEC
4A50:  BRA    4E68
....................         { 
.................... 			case 'E':  // return version 
.................... 			if(c2 =='E') 
4A52:  MOVLB  1
4A54:  MOVF   xF0,W
4A56:  SUBLW  45
4A58:  BNZ   4B52
.................... 			{ 
.................... 				sprintf(buf, "VE %s VS %lu.%lu ID=%02lu DT=%02lu%02u\r",  
....................                 VERSION, ((setup.setup_version >> 8) & 0xff), (setup.setup_version & 0xff), 
....................                 setup.unit_ID, setup.year, setup.week); 
4A5A:  MOVFF  105,228
4A5E:  MOVLB  2
4A60:  CLRF   x29
4A62:  CLRF   x29
4A64:  MOVFF  104,22A
4A68:  MOVLB  2
4A6A:  CLRF   x2B
4A6C:  MOVLW  01
4A6E:  MOVLB  1
4A70:  MOVWF  xA4
4A72:  MOVLW  C6
4A74:  MOVWF  xA3
4A76:  MOVLW  F4
4A78:  MOVWF  FF6
4A7A:  MOVLW  0D
4A7C:  MOVWF  FF7
4A7E:  MOVLW  03
4A80:  MOVLB  2
4A82:  MOVWF  x41
4A84:  MOVLB  0
4A86:  CALL   3102
4A8A:  MOVLW  BA
4A8C:  MOVWF  FF6
4A8E:  MOVLW  0A
4A90:  MOVWF  FF7
4A92:  GOTO   36B8
4A96:  MOVLW  F9
4A98:  MOVWF  FF6
4A9A:  MOVLW  0D
4A9C:  MOVWF  FF7
4A9E:  MOVLW  04
4AA0:  MOVLB  2
4AA2:  MOVWF  x41
4AA4:  MOVLB  0
4AA6:  CALL   3102
4AAA:  MOVLW  10
4AAC:  MOVWF  FE9
4AAE:  MOVFF  229,22D
4AB2:  MOVFF  228,22C
4AB6:  CALL   312A
4ABA:  MOVLW  2E
4ABC:  MOVLB  2
4ABE:  MOVWF  x4E
4AC0:  MOVLB  0
4AC2:  CALL   30E0
4AC6:  MOVLW  10
4AC8:  MOVWF  FE9
4ACA:  MOVFF  22B,22D
4ACE:  MOVFF  22A,22C
4AD2:  CALL   312A
4AD6:  MOVLW  04
4AD8:  MOVWF  FF6
4ADA:  MOVLW  0E
4ADC:  MOVWF  FF7
4ADE:  MOVLW  04
4AE0:  MOVLB  2
4AE2:  MOVWF  x41
4AE4:  MOVLB  0
4AE6:  CALL   3102
4AEA:  MOVLW  0B
4AEC:  MOVWF  FE9
4AEE:  MOVFF  F5,22D
4AF2:  MOVFF  F4,22C
4AF6:  CALL   312A
4AFA:  MOVLW  0D
4AFC:  MOVWF  FF6
4AFE:  MOVLW  0E
4B00:  MOVWF  FF7
4B02:  MOVLW  04
4B04:  MOVLB  2
4B06:  MOVWF  x41
4B08:  MOVLB  0
4B0A:  CALL   3102
4B0E:  MOVLW  0B
4B10:  MOVWF  FE9
4B12:  MOVFF  F2,22D
4B16:  MOVFF  F1,22C
4B1A:  CALL   312A
4B1E:  MOVFF  F3,22C
4B22:  MOVLW  01
4B24:  MOVLB  2
4B26:  MOVWF  x2D
4B28:  MOVLB  0
4B2A:  CALL   327A
4B2E:  MOVLW  0D
4B30:  MOVLB  2
4B32:  MOVWF  x4E
4B34:  MOVLB  0
4B36:  CALL   30E0
.................... 				COM1_send_str(buf); 
4B3A:  MOVLW  01
4B3C:  MOVLB  2
4B3E:  MOVWF  x68
4B40:  MOVLW  C6
4B42:  MOVWF  x67
4B44:  MOVLB  0
4B46:  CALL   21D2
.................... 				ret = 1; 
4B4A:  MOVLW  01
4B4C:  MOVLB  1
4B4E:  MOVWF  xC4
.................... 			} 
4B50:  BRA    4B90
.................... 			else 
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
4B52:  MOVLW  02
4B54:  MOVWF  FEA
4B56:  MOVLW  0F
4B58:  MOVWF  FE9
4B5A:  MOVFF  FF2,228
4B5E:  BCF    FF2.7
4B60:  MOVLW  09
4B62:  MOVWF  01
4B64:  CLRF   FF7
4B66:  MOVLW  00
4B68:  MOVLB  0
4B6A:  CALL   0A7C
4B6E:  TBLRD*-
4B70:  TBLRD*+
4B72:  MOVFF  FF5,FEE
4B76:  DECFSZ 01,F
4B78:  BRA    4B70
4B7A:  MOVLB  2
4B7C:  BTFSC  x28.7
4B7E:  BSF    FF2.7
4B80:  MOVLW  02
4B82:  MOVWF  x68
4B84:  MOVLW  0F
4B86:  MOVWF  x67
4B88:  MOVLB  0
4B8A:  CALL   21D2
4B8E:  MOVLB  1
.................... 			break; 
4B90:  MOVLB  0
4B92:  BRA    4E68
.................... 			case 'S': // set setup version 
.................... 			{ 
.................... 				if (query) { 
4B94:  MOVLB  1
4B96:  MOVF   xEE,F
4B98:  BZ    4C0E
.................... 					sprintf(buf, "VS %lu%lu\r", (setup.setup_version >> 8) & 0xff, setup.setup_version & 0xff); 
4B9A:  MOVFF  105,228
4B9E:  MOVLB  2
4BA0:  CLRF   x29
4BA2:  CLRF   x29
4BA4:  MOVFF  104,22A
4BA8:  MOVLB  2
4BAA:  CLRF   x2B
4BAC:  MOVLW  01
4BAE:  MOVLB  1
4BB0:  MOVWF  xA4
4BB2:  MOVLW  C6
4BB4:  MOVWF  xA3
4BB6:  MOVLW  1C
4BB8:  MOVWF  FF6
4BBA:  MOVLW  0E
4BBC:  MOVWF  FF7
4BBE:  MOVLW  03
4BC0:  MOVLB  2
4BC2:  MOVWF  x41
4BC4:  MOVLB  0
4BC6:  CALL   3102
4BCA:  MOVLW  10
4BCC:  MOVWF  FE9
4BCE:  MOVFF  229,22D
4BD2:  MOVFF  228,22C
4BD6:  CALL   312A
4BDA:  MOVLW  10
4BDC:  MOVWF  FE9
4BDE:  MOVFF  22B,22D
4BE2:  MOVFF  22A,22C
4BE6:  CALL   312A
4BEA:  MOVLW  0D
4BEC:  MOVLB  2
4BEE:  MOVWF  x4E
4BF0:  MOVLB  0
4BF2:  CALL   30E0
.................... 					COM1_send_str(buf); 
4BF6:  MOVLW  01
4BF8:  MOVLB  2
4BFA:  MOVWF  x68
4BFC:  MOVLW  C6
4BFE:  MOVWF  x67
4C00:  MOVLB  0
4C02:  CALL   21D2
.................... 					ret = 1; 
4C06:  MOVLW  01
4C08:  MOVLB  1
4C0A:  MOVWF  xC4
.................... 					} else { 
4C0C:  BRA    4CA2
.................... 					val = get_int(); 
4C0E:  MOVLB  0
4C10:  CALL   2B56
4C14:  MOVFF  02,207
4C18:  MOVFF  01,206
.................... 					if (peek_char() == '.') 
4C1C:  CALL   2A7C
4C20:  MOVFF  02,229
4C24:  MOVFF  01,228
4C28:  MOVLB  2
4C2A:  MOVF   01,W
4C2C:  SUBLW  2E
4C2E:  BNZ   4C64
4C30:  MOVF   x29,F
4C32:  BNZ   4C64
.................... 					{ 
.................... 						get_char(); // skip '.' 
4C34:  MOVLB  0
4C36:  CALL   2A9A
.................... 						rp = get_int(); 
4C3A:  CALL   2B56
4C3E:  MOVFF  02,209
4C42:  MOVFF  01,208
.................... 						rp += val << 8; 
4C46:  MOVLW  00
4C48:  MOVLB  2
4C4A:  ADDWF  x08,F
4C4C:  MOVF   x06,W
4C4E:  ADDWFC x09,F
.................... 						setup.setup_version = rp;    
4C50:  MOVFF  209,105
4C54:  MOVFF  208,104
.................... 						ret = 1;                  
4C58:  MOVLW  01
4C5A:  MOVLB  1
4C5C:  MOVWF  xC4
.................... 						break; 
4C5E:  MOVLB  0
4C60:  BRA    4E68
4C62:  MOVLB  2
.................... 					} 
.................... 					COM1_send_str("\r\nFAIL\r\n");                 
4C64:  MOVLW  02
4C66:  MOVWF  FEA
4C68:  MOVLW  0F
4C6A:  MOVWF  FE9
4C6C:  MOVFF  FF2,228
4C70:  BCF    FF2.7
4C72:  MOVLW  09
4C74:  MOVWF  01
4C76:  CLRF   FF7
4C78:  MOVLW  00
4C7A:  MOVLB  0
4C7C:  CALL   0A7C
4C80:  TBLRD*-
4C82:  TBLRD*+
4C84:  MOVFF  FF5,FEE
4C88:  DECFSZ 01,F
4C8A:  BRA    4C82
4C8C:  MOVLB  2
4C8E:  BTFSC  x28.7
4C90:  BSF    FF2.7
4C92:  MOVLW  02
4C94:  MOVWF  x68
4C96:  MOVLW  0F
4C98:  MOVWF  x67
4C9A:  MOVLB  0
4C9C:  CALL   21D2
4CA0:  MOVLB  1
.................... 				} 
.................... 				break; 
4CA2:  MOVLB  0
4CA4:  BRA    4E68
.................... 			}  
.................... 			case 'L':  // set low power level 
.................... 			if(c2 == 'L') 
4CA6:  MOVLB  1
4CA8:  MOVF   xF0,W
4CAA:  SUBLW  4C
4CAC:  BNZ   4CBC
.................... 			{ 
.................... 				set_low_power_level(); 
4CAE:  MOVLB  0
4CB0:  GOTO   36DA
.................... 				ret = 1; 
4CB4:  MOVLW  01
4CB6:  MOVLB  1
4CB8:  MOVWF  xC4
.................... 			} 
4CBA:  BRA    4CFA
.................... 			else 
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
4CBC:  MOVLW  02
4CBE:  MOVWF  FEA
4CC0:  MOVLW  0F
4CC2:  MOVWF  FE9
4CC4:  MOVFF  FF2,228
4CC8:  BCF    FF2.7
4CCA:  MOVLW  09
4CCC:  MOVWF  01
4CCE:  CLRF   FF7
4CD0:  MOVLW  00
4CD2:  MOVLB  0
4CD4:  CALL   0A7C
4CD8:  TBLRD*-
4CDA:  TBLRD*+
4CDC:  MOVFF  FF5,FEE
4CE0:  DECFSZ 01,F
4CE2:  BRA    4CDA
4CE4:  MOVLB  2
4CE6:  BTFSC  x28.7
4CE8:  BSF    FF2.7
4CEA:  MOVLW  02
4CEC:  MOVWF  x68
4CEE:  MOVLW  0F
4CF0:  MOVWF  x67
4CF2:  MOVLB  0
4CF4:  CALL   21D2
4CF8:  MOVLB  1
.................... 			break; 
4CFA:  MOVLB  0
4CFC:  BRA    4E68
.................... 			 
.................... 			case 'P':  // power level control like in Generic TX  $P 
.................... 			if (query) 
4CFE:  MOVLB  1
4D00:  MOVF   xEE,F
4D02:  BZ    4D66
....................             { 
.................... 				sprintf(buf, "VP %lu\r", setup.power_level + 20); 
4D04:  MOVLW  14
4D06:  MOVLB  0
4D08:  ADDWF  xB8,W
4D0A:  MOVLB  2
4D0C:  MOVWF  x28
4D0E:  MOVLW  00
4D10:  MOVLB  0
4D12:  ADDWFC xB9,W
4D14:  MOVLB  2
4D16:  MOVWF  x29
4D18:  MOVLW  01
4D1A:  MOVLB  1
4D1C:  MOVWF  xA4
4D1E:  MOVLW  C6
4D20:  MOVWF  xA3
4D22:  MOVLW  28
4D24:  MOVWF  FF6
4D26:  MOVLW  0E
4D28:  MOVWF  FF7
4D2A:  MOVLW  03
4D2C:  MOVLB  2
4D2E:  MOVWF  x41
4D30:  MOVLB  0
4D32:  CALL   3102
4D36:  MOVLW  10
4D38:  MOVWF  FE9
4D3A:  MOVFF  229,22D
4D3E:  MOVFF  228,22C
4D42:  CALL   312A
4D46:  MOVLW  0D
4D48:  MOVLB  2
4D4A:  MOVWF  x4E
4D4C:  MOVLB  0
4D4E:  CALL   30E0
.................... 				COM1_send_str(buf); 
4D52:  MOVLW  01
4D54:  MOVLB  2
4D56:  MOVWF  x68
4D58:  MOVLW  C6
4D5A:  MOVWF  x67
4D5C:  MOVLB  0
4D5E:  CALL   21D2
.................... 			} 
4D62:  BRA    4D6C
4D64:  MOVLB  1
.................... 			else 
....................             set_power_level(); 
4D66:  MOVLB  0
4D68:  GOTO   374A
....................             ret = 1; 
4D6C:  MOVLW  01
4D6E:  MOVLB  1
4D70:  MOVWF  xC4
.................... 			break; 
4D72:  MOVLB  0
4D74:  BRA    4E68
.................... 			 
.................... 			case 'M': // manual power level 
.................... 			if (query) 
4D76:  MOVLB  1
4D78:  MOVF   xEE,F
4D7A:  BZ    4DC8
....................             { 
.................... 				sprintf(buf, "VM %lu\r", manual_negative); 
4D7C:  MOVLW  01
4D7E:  MOVWF  xA4
4D80:  MOVLW  C6
4D82:  MOVWF  xA3
4D84:  MOVLW  30
4D86:  MOVWF  FF6
4D88:  MOVLW  0E
4D8A:  MOVWF  FF7
4D8C:  MOVLW  03
4D8E:  MOVLB  2
4D90:  MOVWF  x41
4D92:  MOVLB  0
4D94:  CALL   3102
4D98:  MOVLW  10
4D9A:  MOVWF  FE9
4D9C:  MOVFF  20,22D
4DA0:  MOVFF  1F,22C
4DA4:  CALL   312A
4DA8:  MOVLW  0D
4DAA:  MOVLB  2
4DAC:  MOVWF  x4E
4DAE:  MOVLB  0
4DB0:  CALL   30E0
.................... 				COM1_send_str(buf); 
4DB4:  MOVLW  01
4DB6:  MOVLB  2
4DB8:  MOVWF  x68
4DBA:  MOVLW  C6
4DBC:  MOVWF  x67
4DBE:  MOVLB  0
4DC0:  CALL   21D2
.................... 			} 
4DC4:  BRA    4DEA
4DC6:  MOVLB  1
.................... 			else 
....................             { 
.................... 				manual_negative = get_int(); 
4DC8:  MOVLB  0
4DCA:  CALL   2B56
4DCE:  MOVFF  02,20
4DD2:  MOVFF  01,1F
.................... 				set_AD5314(DAC_NEG_VOLT, val); 
4DD6:  MOVLW  06
4DD8:  MOVLB  2
4DDA:  MOVWF  x2E
4DDC:  MOVFF  207,230
4DE0:  MOVFF  206,22F
4DE4:  MOVLB  0
4DE6:  CALL   10C2
.................... 			} 
.................... 			break; 
4DEA:  BRA    4E68
.................... 			case 'C': // manual power level 
.................... 			if (query) 
4DEC:  MOVLB  1
4DEE:  MOVF   xEE,F
4DF0:  BZ    4E3E
....................             { 
.................... 				sprintf(buf, "VC %lu\r", manual_pos); 
4DF2:  MOVLW  01
4DF4:  MOVWF  xA4
4DF6:  MOVLW  C6
4DF8:  MOVWF  xA3
4DFA:  MOVLW  38
4DFC:  MOVWF  FF6
4DFE:  MOVLW  0E
4E00:  MOVWF  FF7
4E02:  MOVLW  03
4E04:  MOVLB  2
4E06:  MOVWF  x41
4E08:  MOVLB  0
4E0A:  CALL   3102
4E0E:  MOVLW  10
4E10:  MOVWF  FE9
4E12:  MOVFF  22,22D
4E16:  MOVFF  21,22C
4E1A:  CALL   312A
4E1E:  MOVLW  0D
4E20:  MOVLB  2
4E22:  MOVWF  x4E
4E24:  MOVLB  0
4E26:  CALL   30E0
.................... 				COM1_send_str(buf); 
4E2A:  MOVLW  01
4E2C:  MOVLB  2
4E2E:  MOVWF  x68
4E30:  MOVLW  C6
4E32:  MOVWF  x67
4E34:  MOVLB  0
4E36:  CALL   21D2
.................... 			} 
4E3A:  BRA    4E68
4E3C:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4E3E:  MOVLB  0
4E40:  CALL   2B56
4E44:  MOVFF  02,207
4E48:  MOVFF  01,206
.................... 				manual_pos = val; 
4E4C:  MOVFF  207,22
4E50:  MOVFF  206,21
.................... 				set_AD5314(DAC_POS_VOLT, val); 
4E54:  MOVLW  02
4E56:  MOVLB  2
4E58:  MOVWF  x2E
4E5A:  MOVFF  207,230
4E5E:  MOVFF  206,22F
4E62:  MOVLB  0
4E64:  CALL   10C2
.................... 			} 
.................... 			break; 
.................... 		} 
.................... 		break; 
4E68:  GOTO   578A
.................... 		 
.................... 		case 'C': 
.................... 		if (!ttccp_login) break; 
4E6C:  MOVLB  1
4E6E:  MOVF   x34,F
4E70:  BNZ   4E7A
4E72:  MOVLB  0
4E74:  GOTO   578A
4E78:  MOVLB  1
.................... 		if (c2 == 'S')  // Addr 6 bit 0    setup.clock_source 
4E7A:  MOVF   xF0,W
4E7C:  SUBLW  53
4E7E:  BTFSS  FD8.2
4E80:  BRA    4F82
....................         { 
.................... 			if (query) 
4E82:  MOVF   xEE,F
4E84:  BZ    4ED2
....................             { 
.................... 				sprintf(buf, "CS %u\r", setup.clock_source); 
4E86:  MOVLW  01
4E88:  MOVWF  xA4
4E8A:  MOVLW  C6
4E8C:  MOVWF  xA3
4E8E:  MOVLW  40
4E90:  MOVWF  FF6
4E92:  MOVLW  0E
4E94:  MOVWF  FF7
4E96:  MOVLW  03
4E98:  MOVLB  2
4E9A:  MOVWF  x41
4E9C:  MOVLB  0
4E9E:  CALL   3102
4EA2:  MOVFF  AF,22C
4EA6:  MOVLW  1B
4EA8:  MOVLB  2
4EAA:  MOVWF  x2D
4EAC:  MOVLB  0
4EAE:  CALL   327A
4EB2:  MOVLW  0D
4EB4:  MOVLB  2
4EB6:  MOVWF  x4E
4EB8:  MOVLB  0
4EBA:  CALL   30E0
.................... 				COM1_send_str(buf); 
4EBE:  MOVLW  01
4EC0:  MOVLB  2
4EC2:  MOVWF  x68
4EC4:  MOVLW  C6
4EC6:  MOVWF  x67
4EC8:  MOVLB  0
4ECA:  CALL   21D2
.................... 			} 
4ECE:  BRA    4F7A
4ED0:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4ED2:  MOVLB  0
4ED4:  CALL   2B56
4ED8:  MOVFF  02,207
4EDC:  MOVFF  01,206
.................... 				if (val < 2) 
4EE0:  MOVLB  2
4EE2:  MOVF   x07,F
4EE4:  BNZ   4EFA
4EE6:  MOVF   x06,W
4EE8:  SUBLW  01
4EEA:  BNC   4EFA
.................... 				{ 
.................... 					setup.clock_source = val; 
4EEC:  MOVFF  206,AF
.................... 					FPGA_set_reg6(); 
4EF0:  MOVLB  0
4EF2:  CALL   18D8
.................... 				} 
4EF6:  BRA    4F7A
4EF8:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
4EFA:  MOVLW  02
4EFC:  MOVWF  FEA
4EFE:  MOVLW  0F
4F00:  MOVWF  FE9
4F02:  MOVFF  FF2,228
4F06:  BCF    FF2.7
4F08:  MOVLW  09
4F0A:  MOVWF  01
4F0C:  CLRF   FF7
4F0E:  MOVLW  00
4F10:  MOVLB  0
4F12:  CALL   0A7C
4F16:  TBLRD*-
4F18:  TBLRD*+
4F1A:  MOVFF  FF5,FEE
4F1E:  DECFSZ 01,F
4F20:  BRA    4F18
4F22:  MOVLB  2
4F24:  BTFSC  x28.7
4F26:  BSF    FF2.7
4F28:  MOVLW  02
4F2A:  MOVWF  x68
4F2C:  MOVLW  0F
4F2E:  MOVWF  x67
4F30:  MOVLB  0
4F32:  CALL   21D2
.................... 					sprintf(ttccp_error_message, "ERR CS %u\r", setup.clock_source); 
4F36:  MOVLW  01
4F38:  MOVLB  1
4F3A:  MOVWF  xA4
4F3C:  MOVLW  78
4F3E:  MOVWF  xA3
4F40:  MOVLW  48
4F42:  MOVWF  FF6
4F44:  MOVLW  0E
4F46:  MOVWF  FF7
4F48:  MOVLW  07
4F4A:  MOVLB  2
4F4C:  MOVWF  x41
4F4E:  MOVLB  0
4F50:  CALL   3102
4F54:  MOVFF  AF,22C
4F58:  MOVLW  1B
4F5A:  MOVLB  2
4F5C:  MOVWF  x2D
4F5E:  MOVLB  0
4F60:  CALL   327A
4F64:  MOVLW  0D
4F66:  MOVLB  2
4F68:  MOVWF  x4E
4F6A:  MOVLB  0
4F6C:  CALL   30E0
.................... 					ret = 0; 
4F70:  MOVLB  1
4F72:  CLRF   xC4
.................... 					break; 
4F74:  MOVLB  0
4F76:  GOTO   578A
.................... 				} 
.................... 			} 
.................... 			 
.................... 			ret = 1; 
4F7A:  MOVLW  01
4F7C:  MOVLB  1
4F7E:  MOVWF  xC4
.................... 		} 
4F80:  BRA    5086
.................... 		else if (c2 == 'P')  // Addr 6 bit 0    setup.clock_source 
4F82:  MOVF   xF0,W
4F84:  SUBLW  50
4F86:  BTFSS  FD8.2
4F88:  BRA    5086
....................         { 
.................... 			if (query) 
4F8A:  MOVF   xEE,F
4F8C:  BZ    4FDA
....................             { 
.................... 				sprintf(buf, "CP %u\r", setup.clock_polarity); 
4F8E:  MOVLW  01
4F90:  MOVWF  xA4
4F92:  MOVLW  C6
4F94:  MOVWF  xA3
4F96:  MOVLW  54
4F98:  MOVWF  FF6
4F9A:  MOVLW  0E
4F9C:  MOVWF  FF7
4F9E:  MOVLW  03
4FA0:  MOVLB  2
4FA2:  MOVWF  x41
4FA4:  MOVLB  0
4FA6:  CALL   3102
4FAA:  MOVFF  AD,22C
4FAE:  MOVLW  1B
4FB0:  MOVLB  2
4FB2:  MOVWF  x2D
4FB4:  MOVLB  0
4FB6:  CALL   327A
4FBA:  MOVLW  0D
4FBC:  MOVLB  2
4FBE:  MOVWF  x4E
4FC0:  MOVLB  0
4FC2:  CALL   30E0
.................... 				COM1_send_str(buf); 
4FC6:  MOVLW  01
4FC8:  MOVLB  2
4FCA:  MOVWF  x68
4FCC:  MOVLW  C6
4FCE:  MOVWF  x67
4FD0:  MOVLB  0
4FD2:  CALL   21D2
.................... 			} 
4FD6:  BRA    5080
4FD8:  MOVLB  1
.................... 			else 
....................             { 
.................... 				val = get_int(); 
4FDA:  MOVLB  0
4FDC:  CALL   2B56
4FE0:  MOVFF  02,207
4FE4:  MOVFF  01,206
.................... 				if (val < 2) 
4FE8:  MOVLB  2
4FEA:  MOVF   x07,F
4FEC:  BNZ   5002
4FEE:  MOVF   x06,W
4FF0:  SUBLW  01
4FF2:  BNC   5002
.................... 				{ 
.................... 					setup.clock_polarity = val; 
4FF4:  MOVFF  206,AD
.................... 					FPGA_set_reg0(); 
4FF8:  MOVLB  0
4FFA:  CALL   187C
.................... 				} 
4FFE:  BRA    5080
5000:  MOVLB  2
.................... 				else 
.................... 				{ 
.................... 					COM1_send_str("\r\nFAIL\r\n"); 
5002:  MOVLW  02
5004:  MOVWF  FEA
5006:  MOVLW  0F
5008:  MOVWF  FE9
500A:  MOVFF  FF2,228
500E:  BCF    FF2.7
5010:  MOVLW  09
5012:  MOVWF  01
5014:  CLRF   FF7
5016:  MOVLW  00
5018:  MOVLB  0
501A:  CALL   0A7C
501E:  TBLRD*-
5020:  TBLRD*+
5022:  MOVFF  FF5,FEE
5026:  DECFSZ 01,F
5028:  BRA    5020
502A:  MOVLB  2
502C:  BTFSC  x28.7
502E:  BSF    FF2.7
5030:  MOVLW  02
5032:  MOVWF  x68
5034:  MOVLW  0F
5036:  MOVWF  x67
5038:  MOVLB  0
503A:  CALL   21D2
.................... 					sprintf(ttccp_error_message, "ERR CP %u\r", setup.clock_polarity); 
503E:  MOVLW  01
5040:  MOVLB  1
5042:  MOVWF  xA4
5044:  MOVLW  78
5046:  MOVWF  xA3
5048:  MOVLW  5C
504A:  MOVWF  FF6
504C:  MOVLW  0E
504E:  MOVWF  FF7
5050:  MOVLW  07
5052:  MOVLB  2
5054:  MOVWF  x41
5056:  MOVLB  0
5058:  CALL   3102
505C:  MOVFF  AD,22C
5060:  MOVLW  1B
5062:  MOVLB  2
5064:  MOVWF  x2D
5066:  MOVLB  0
5068:  CALL   327A
506C:  MOVLW  0D
506E:  MOVLB  2
5070:  MOVWF  x4E
5072:  MOVLB  0
5074:  CALL   30E0
.................... 					ret = 0; 
5078:  MOVLB  1
507A:  CLRF   xC4
.................... 					break; 
507C:  MOVLB  0
507E:  BRA    578A
.................... 				} 
.................... 			} 
.................... 			 
.................... 			ret = 1; 
5080:  MOVLW  01
5082:  MOVLB  1
5084:  MOVWF  xC4
.................... 		} 
.................... 		break; 
5086:  MOVLB  0
5088:  BRA    578A
.................... 		 
.................... 		case 'G': 
.................... 		if (!ttccp_login) break; 
508A:  MOVLB  1
508C:  MOVF   x34,F
508E:  BNZ   5096
5090:  MOVLB  0
5092:  BRA    578A
5094:  MOVLB  1
.................... 		switch (c2) 
5096:  MOVF   xF0,W
5098:  XORLW  50
509A:  MOVLB  0
509C:  BZ    50A8
509E:  XORLW  04
50A0:  BZ    511C
50A2:  XORLW  06
50A4:  BZ    5128
50A6:  BRA    519A
....................         { 
.................... 			case 'P': 
.................... 			set_adc_channel(A2D_POWER); // read temperature 
50A8:  MOVLW  14
50AA:  MOVWF  01
50AC:  MOVF   FC2,W
50AE:  ANDLW  83
50B0:  IORWF  01,W
50B2:  MOVWF  FC2
.................... 			delay_us(50); 
50B4:  MOVLW  42
50B6:  MOVWF  00
50B8:  DECFSZ 00,F
50BA:  BRA    50B8
50BC:  NOP   
.................... 			val = read_adc(); 
50BE:  BSF    FC2.1
50C0:  BTFSC  FC2.1
50C2:  BRA    50C0
50C4:  MOVFF  FC4,207
50C8:  MOVLB  2
50CA:  MOVFF  FC3,206
.................... 			sprintf(ttccp_error_message, "\nGP %lu\r\n", val); 
50CE:  MOVLW  01
50D0:  MOVLB  1
50D2:  MOVWF  xA4
50D4:  MOVLW  78
50D6:  MOVWF  xA3
50D8:  MOVLW  68
50DA:  MOVWF  FF6
50DC:  MOVLW  0E
50DE:  MOVWF  FF7
50E0:  MOVLW  04
50E2:  MOVLB  2
50E4:  MOVWF  x41
50E6:  MOVLB  0
50E8:  CALL   3102
50EC:  MOVLW  10
50EE:  MOVWF  FE9
50F0:  MOVFF  207,22D
50F4:  MOVFF  206,22C
50F8:  CALL   312A
50FC:  MOVLW  0D
50FE:  MOVLB  2
5100:  MOVWF  x4E
5102:  MOVLB  0
5104:  CALL   30E0
5108:  MOVLW  0A
510A:  MOVLB  2
510C:  MOVWF  x4E
510E:  MOVLB  0
5110:  CALL   30E0
.................... 			ret = 0; 
5114:  MOVLB  1
5116:  CLRF   xC4
.................... 			break; 
5118:  MOVLB  0
511A:  BRA    519A
.................... 			case 'T': 
....................             update_temperature_string(); 
511C:  CALL   3614
....................             ret = 0; 
5120:  MOVLB  1
5122:  CLRF   xC4
....................             break; 
5124:  MOVLB  0
5126:  BRA    519A
.................... 			 
.................... 			case 'R': 
....................             set_adc_channel(A2D_PREV); // select forward power input 
5128:  MOVLW  10
512A:  MOVWF  01
512C:  MOVF   FC2,W
512E:  ANDLW  83
5130:  IORWF  01,W
5132:  MOVWF  FC2
....................             delay_us(20); 
5134:  MOVLW  1A
5136:  MOVWF  00
5138:  DECFSZ 00,F
513A:  BRA    5138
513C:  NOP   
....................             val = read_adc(); 
513E:  BSF    FC2.1
5140:  BTFSC  FC2.1
5142:  BRA    5140
5144:  MOVFF  FC4,207
5148:  MOVLB  2
514A:  MOVFF  FC3,206
....................             sprintf(ttccp_error_message, "\nGR %lu\r\n", val); 
514E:  MOVLW  01
5150:  MOVLB  1
5152:  MOVWF  xA4
5154:  MOVLW  78
5156:  MOVWF  xA3
5158:  MOVLW  72
515A:  MOVWF  FF6
515C:  MOVLW  0E
515E:  MOVWF  FF7
5160:  MOVLW  04
5162:  MOVLB  2
5164:  MOVWF  x41
5166:  MOVLB  0
5168:  CALL   3102
516C:  MOVLW  10
516E:  MOVWF  FE9
5170:  MOVFF  207,22D
5174:  MOVFF  206,22C
5178:  CALL   312A
517C:  MOVLW  0D
517E:  MOVLB  2
5180:  MOVWF  x4E
5182:  MOVLB  0
5184:  CALL   30E0
5188:  MOVLW  0A
518A:  MOVLB  2
518C:  MOVWF  x4E
518E:  MOVLB  0
5190:  CALL   30E0
.................... 			ret = 0; 
5194:  MOVLB  1
5196:  CLRF   xC4
5198:  MOVLB  0
.................... 		} 
.................... 		break; 
519A:  BRA    578A
.................... 		break; 
519C:  BRA    578A
.................... 		 
.................... 		case 'Q': //statusl      if (!ttccp_login) break; 
.................... 		 
....................         COM1_send_str("\r\n\nOK Request Status \r\n\n"); 
519E:  MOVLW  02
51A0:  MOVWF  FEA
51A2:  MOVLW  0F
51A4:  MOVWF  FE9
51A6:  MOVFF  FF2,228
51AA:  BCF    FF2.7
51AC:  MOVLW  19
51AE:  MOVWF  01
51B0:  CLRF   FF7
51B2:  MOVLW  00
51B4:  CALL   0ACA
51B8:  TBLRD*-
51BA:  TBLRD*+
51BC:  MOVFF  FF5,FEE
51C0:  DECFSZ 01,F
51C2:  BRA    51BA
51C4:  MOVLB  2
51C6:  BTFSC  x28.7
51C8:  BSF    FF2.7
51CA:  MOVLW  02
51CC:  MOVWF  x68
51CE:  MOVLW  0F
51D0:  MOVWF  x67
51D2:  MOVLB  0
51D4:  CALL   21D2
....................         COM1_send_str(VERSION); 
51D8:  MOVLW  02
51DA:  MOVWF  FEA
51DC:  MOVLW  0F
51DE:  MOVWF  FE9
51E0:  MOVFF  FF2,228
51E4:  BCF    FF2.7
51E6:  MOVWF  01
51E8:  CLRF   FF7
51EA:  MOVLW  00
51EC:  CALL   0AA0
51F0:  TBLRD*-
51F2:  TBLRD*+
51F4:  MOVFF  FF5,FEE
51F8:  DECFSZ 01,F
51FA:  BRA    51F2
51FC:  MOVLB  2
51FE:  BTFSC  x28.7
5200:  BSF    FF2.7
5202:  MOVLW  02
5204:  MOVWF  x68
5206:  MOVLW  0F
5208:  MOVWF  x67
520A:  MOVLB  0
520C:  CALL   21D2
....................         sprintf(buf, "\r\nID=%lu DT=%02lu%02u\r", 
.................... 		setup.unit_ID, setup.year, setup.week); 
5210:  MOVLW  01
5212:  MOVLB  1
5214:  MOVWF  xA4
5216:  MOVLW  C6
5218:  MOVWF  xA3
521A:  MOVLW  7C
521C:  MOVWF  FF6
521E:  MOVLW  0E
5220:  MOVWF  FF7
5222:  MOVLW  05
5224:  MOVLB  2
5226:  MOVWF  x41
5228:  MOVLB  0
522A:  CALL   3102
522E:  MOVLW  10
5230:  MOVWF  FE9
5232:  MOVFF  F5,22D
5236:  MOVFF  F4,22C
523A:  CALL   312A
523E:  MOVLW  84
5240:  MOVWF  FF6
5242:  MOVLW  0E
5244:  MOVWF  FF7
5246:  MOVLW  04
5248:  MOVLB  2
524A:  MOVWF  x41
524C:  MOVLB  0
524E:  CALL   3102
5252:  MOVLW  0B
5254:  MOVWF  FE9
5256:  MOVFF  F2,22D
525A:  MOVFF  F1,22C
525E:  CALL   312A
5262:  MOVFF  F3,22C
5266:  MOVLW  01
5268:  MOVLB  2
526A:  MOVWF  x2D
526C:  MOVLB  0
526E:  CALL   327A
5272:  MOVLW  0D
5274:  MOVLB  2
5276:  MOVWF  x4E
5278:  MOVLB  0
527A:  CALL   30E0
....................         COM1_send_str(buf); 
527E:  MOVLW  01
5280:  MOVLB  2
5282:  MOVWF  x68
5284:  MOVLW  C6
5286:  MOVWF  x67
5288:  MOVLB  0
528A:  CALL   21D2
.................... 		 
....................         set_adc_channel(A2D_PREV); // select forward power input 
528E:  MOVLW  10
5290:  MOVWF  01
5292:  MOVF   FC2,W
5294:  ANDLW  83
5296:  IORWF  01,W
5298:  MOVWF  FC2
....................         delay_us(20); 
529A:  MOVLW  1A
529C:  MOVWF  00
529E:  DECFSZ 00,F
52A0:  BRA    529E
52A2:  NOP   
....................         revp = read_adc(); 
52A4:  BSF    FC2.1
52A6:  BTFSC  FC2.1
52A8:  BRA    52A6
52AA:  MOVFF  FC4,109
52AE:  MOVLB  1
52B0:  MOVFF  FC3,108
.................... 		 
....................         if (revp <= 580) 
52B4:  MOVF   x09,W
52B6:  SUBLW  02
52B8:  BNC   52EE
52BA:  BNZ   52C2
52BC:  MOVF   x08,W
52BE:  SUBLW  44
52C0:  BNC   52EE
.................... 		strcpy(revstat, "GOOD"); 
52C2:  MOVLW  01
52C4:  MOVWF  FEA
52C6:  MOVLW  F1
52C8:  MOVWF  FE9
52CA:  MOVFF  FF2,228
52CE:  BCF    FF2.7
52D0:  MOVLW  00
52D2:  MOVLB  0
52D4:  CALL   0AFE
52D8:  TBLRD*-
52DA:  TBLRD*+
52DC:  MOVF   FF5,W
52DE:  MOVWF  FEE
52E0:  IORLW  00
52E2:  BNZ   52DA
52E4:  MOVLB  2
52E6:  BTFSC  x28.7
52E8:  BSF    FF2.7
52EA:  BRA    5316
52EC:  MOVLB  1
....................         else 
.................... 		strcpy(revstat, "BAD"); 
52EE:  MOVLW  01
52F0:  MOVWF  FEA
52F2:  MOVLW  F1
52F4:  MOVWF  FE9
52F6:  MOVFF  FF2,228
52FA:  BCF    FF2.7
52FC:  MOVLW  00
52FE:  MOVLB  0
5300:  CALL   0B1E
5304:  TBLRD*-
5306:  TBLRD*+
5308:  MOVF   FF5,W
530A:  MOVWF  FEE
530C:  IORLW  00
530E:  BNZ   5306
5310:  MOVLB  2
5312:  BTFSC  x28.7
5314:  BSF    FF2.7
.................... 		 
....................         if(setup.rp) 
5316:  MOVLB  0
5318:  MOVF   xFC,W
531A:  IORWF  xFD,W
531C:  BZ    5328
.................... 		rp=0; 
531E:  MOVLB  2
5320:  CLRF   x09
5322:  CLRF   x08
5324:  BRA    5330
5326:  MOVLB  0
....................         else 
.................... 		rp=1; 
5328:  MOVLB  2
532A:  CLRF   x09
532C:  MOVLW  01
532E:  MOVWF  x08
.................... 		 
.................... 		 
.................... 		sprintf(buf, "\r\n\nFREQ=%lu, REV=%s, FFWR=%lu, IC=%lu.%luMbps, MO=%u, CS=%u, RF=%lu\r" 
.................... 		setup.frequency, revstat, current_power, setup.bitrate/100, setup.bitrate%100, setup.mode, setup.clock_source, setup.pwr); 
5330:  MOVFF  A9,22B
5334:  MOVFF  A8,22A
5338:  CLRF   x2D
533A:  MOVLW  64
533C:  MOVWF  x2C
533E:  MOVLB  0
5340:  CALL   37BA
5344:  MOVFF  02,229
5348:  MOVFF  01,228
534C:  MOVFF  A9,22B
5350:  MOVFF  A8,22A
5354:  MOVLB  2
5356:  CLRF   x2D
5358:  MOVLW  64
535A:  MOVWF  x2C
535C:  MOVLB  0
535E:  CALL   37BA
5362:  MOVFF  00,22A
5366:  MOVFF  03,22B
536A:  MOVLW  01
536C:  MOVLB  1
536E:  MOVWF  xA4
5370:  MOVLW  C6
5372:  MOVWF  xA3
5374:  MOVLW  94
5376:  MOVWF  FF6
5378:  MOVLW  0E
537A:  MOVWF  FF7
537C:  MOVLW  08
537E:  MOVLB  2
5380:  MOVWF  x41
5382:  MOVLB  0
5384:  CALL   3102
5388:  MOVLW  10
538A:  MOVWF  FE9
538C:  MOVFF  B7,22D
5390:  MOVFF  B6,22C
5394:  CALL   312A
5398:  MOVLW  9F
539A:  MOVWF  FF6
539C:  MOVLW  0E
539E:  MOVWF  FF7
53A0:  MOVLW  06
53A2:  MOVLB  2
53A4:  MOVWF  x41
53A6:  MOVLB  0
53A8:  CALL   3102
53AC:  MOVLW  01
53AE:  MOVWF  FEA
53B0:  MOVLW  F1
53B2:  MOVWF  FE9
53B4:  GOTO   3800
53B8:  MOVLW  A7
53BA:  MOVWF  FF6
53BC:  MOVLW  0E
53BE:  MOVWF  FF7
53C0:  MOVLW  07
53C2:  MOVLB  2
53C4:  MOVWF  x41
53C6:  MOVLB  0
53C8:  CALL   3102
53CC:  MOVLW  10
53CE:  MOVWF  FE9
53D0:  MOVFF  10D,22D
53D4:  MOVFF  10C,22C
53D8:  CALL   312A
53DC:  MOVLW  B1
53DE:  MOVWF  FF6
53E0:  MOVLW  0E
53E2:  MOVWF  FF7
53E4:  MOVLW  05
53E6:  MOVLB  2
53E8:  MOVWF  x41
53EA:  MOVLB  0
53EC:  CALL   3102
53F0:  MOVLW  10
53F2:  MOVWF  FE9
53F4:  MOVFF  229,22D
53F8:  MOVFF  228,22C
53FC:  CALL   312A
5400:  MOVLW  2E
5402:  MOVLB  2
5404:  MOVWF  x4E
5406:  MOVLB  0
5408:  CALL   30E0
540C:  MOVLW  10
540E:  MOVWF  FE9
5410:  MOVFF  22B,22D
5414:  MOVFF  22A,22C
5418:  CALL   312A
541C:  MOVLW  BD
541E:  MOVWF  FF6
5420:  MOVLW  0E
5422:  MOVWF  FF7
5424:  MOVLW  09
5426:  MOVLB  2
5428:  MOVWF  x41
542A:  MOVLB  0
542C:  CALL   3102
5430:  MOVFF  AC,22C
5434:  MOVLW  1B
5436:  MOVLB  2
5438:  MOVWF  x2D
543A:  MOVLB  0
543C:  CALL   327A
5440:  MOVLW  C8
5442:  MOVWF  FF6
5444:  MOVLW  0E
5446:  MOVWF  FF7
5448:  MOVLW  05
544A:  MOVLB  2
544C:  MOVWF  x41
544E:  MOVLB  0
5450:  CALL   3102
5454:  MOVFF  AF,22C
5458:  MOVLW  1B
545A:  MOVLB  2
545C:  MOVWF  x2D
545E:  MOVLB  0
5460:  CALL   327A
5464:  MOVLW  CF
5466:  MOVWF  FF6
5468:  MOVLW  0E
546A:  MOVWF  FF7
546C:  MOVLW  05
546E:  MOVLB  2
5470:  MOVWF  x41
5472:  MOVLB  0
5474:  CALL   3102
5478:  MOVLW  10
547A:  MOVWF  FE9
547C:  MOVFF  AB,22D
5480:  MOVFF  AA,22C
5484:  CALL   312A
5488:  MOVLW  0D
548A:  MOVLB  2
548C:  MOVWF  x4E
548E:  MOVLB  0
5490:  CALL   30E0
.................... 		COM1_send_str(buf); 
5494:  MOVLW  01
5496:  MOVLB  2
5498:  MOVWF  x68
549A:  MOVLW  C6
549C:  MOVWF  x67
549E:  MOVLB  0
54A0:  CALL   21D2
.................... 		 
.................... 		sprintf(buf, "\r\n\nDE=%u, RA=%u, DP=%u, RP=%lu, DS=%u, ID=%u, VL=%lu, RB=%lu, RC=%lu, CP=%u  \r" 
.................... 		setup.SOQPSK, setup.randomizer, 1 - setup.data_polarity, rp, setup.data_source, 
.................... 		setup.internal_pattern, setup.power_low_level+20, setup.cot, setup.rc, 
.................... 		setup.clock_polarity); 
54A4:  MOVLW  01
54A6:  BSF    FD8.0
54A8:  SUBFWB xAE,W
54AA:  MOVLB  2
54AC:  MOVWF  x28
54AE:  MOVLW  14
54B0:  MOVLB  0
54B2:  ADDWF  xF6,W
54B4:  MOVLB  2
54B6:  MOVWF  x29
54B8:  MOVLW  00
54BA:  MOVLB  0
54BC:  ADDWFC xF7,W
54BE:  MOVLB  2
54C0:  MOVWF  x2A
54C2:  MOVLW  01
54C4:  MOVLB  1
54C6:  MOVWF  xA4
54C8:  MOVLW  C6
54CA:  MOVWF  xA3
54CC:  MOVLW  DA
54CE:  MOVWF  FF6
54D0:  MOVLW  0E
54D2:  MOVWF  FF7
54D4:  MOVLW  06
54D6:  MOVLB  2
54D8:  MOVWF  x41
54DA:  MOVLB  0
54DC:  CALL   3102
54E0:  MOVFF  B4,22C
54E4:  MOVLW  1B
54E6:  MOVLB  2
54E8:  MOVWF  x2D
54EA:  MOVLB  0
54EC:  CALL   327A
54F0:  MOVLW  E2
54F2:  MOVWF  FF6
54F4:  MOVLW  0E
54F6:  MOVWF  FF7
54F8:  MOVLW  05
54FA:  MOVLB  2
54FC:  MOVWF  x41
54FE:  MOVLB  0
5500:  CALL   3102
5504:  MOVFF  B2,22C
5508:  MOVLW  1B
550A:  MOVLB  2
550C:  MOVWF  x2D
550E:  MOVLB  0
5510:  CALL   327A
5514:  MOVLW  E9
5516:  MOVWF  FF6
5518:  MOVLW  0E
551A:  MOVWF  FF7
551C:  MOVLW  05
551E:  MOVLB  2
5520:  MOVWF  x41
5522:  MOVLB  0
5524:  CALL   3102
5528:  MOVFF  228,22C
552C:  MOVLW  1B
552E:  MOVLB  2
5530:  MOVWF  x2D
5532:  MOVLB  0
5534:  CALL   327A
5538:  MOVLW  F0
553A:  MOVWF  FF6
553C:  MOVLW  0E
553E:  MOVWF  FF7
5540:  MOVLW  05
5542:  MOVLB  2
5544:  MOVWF  x41
5546:  MOVLB  0
5548:  CALL   3102
554C:  MOVLW  10
554E:  MOVWF  FE9
5550:  MOVFF  209,22D
5554:  MOVFF  208,22C
5558:  CALL   312A
555C:  MOVLW  F8
555E:  MOVWF  FF6
5560:  MOVLW  0E
5562:  MOVWF  FF7
5564:  MOVLW  05
5566:  MOVLB  2
5568:  MOVWF  x41
556A:  MOVLB  0
556C:  CALL   3102
5570:  MOVFF  B0,22C
5574:  MOVLW  1B
5576:  MOVLB  2
5578:  MOVWF  x2D
557A:  MOVLB  0
557C:  CALL   327A
5580:  MOVLW  FF
5582:  MOVWF  FF6
5584:  MOVLW  0E
5586:  MOVWF  FF7
5588:  MOVLW  05
558A:  MOVLB  2
558C:  MOVWF  x41
558E:  MOVLB  0
5590:  CALL   3102
5594:  MOVFF  B1,22C
5598:  MOVLW  1B
559A:  MOVLB  2
559C:  MOVWF  x2D
559E:  MOVLB  0
55A0:  CALL   327A
55A4:  MOVLW  06
55A6:  MOVWF  FF6
55A8:  MOVLW  0F
55AA:  MOVWF  FF7
55AC:  MOVLW  05
55AE:  MOVLB  2
55B0:  MOVWF  x41
55B2:  MOVLB  0
55B4:  CALL   3102
55B8:  MOVLW  10
55BA:  MOVWF  FE9
55BC:  MOVFF  22A,22D
55C0:  MOVFF  229,22C
55C4:  CALL   312A
55C8:  MOVLW  0E
55CA:  MOVWF  FF6
55CC:  MOVLW  0F
55CE:  MOVWF  FF7
55D0:  MOVLW  05
55D2:  MOVLB  2
55D4:  MOVWF  x41
55D6:  MOVLB  0
55D8:  CALL   3102
55DC:  MOVLW  10
55DE:  MOVWF  FE9
55E0:  MOVFF  F9,22D
55E4:  MOVFF  F8,22C
55E8:  CALL   312A
55EC:  MOVLW  16
55EE:  MOVWF  FF6
55F0:  MOVLW  0F
55F2:  MOVWF  FF7
55F4:  MOVLW  05
55F6:  MOVLB  2
55F8:  MOVWF  x41
55FA:  MOVLB  0
55FC:  CALL   3102
5600:  MOVLW  10
5602:  MOVWF  FE9
5604:  MOVFF  FB,22D
5608:  MOVFF  FA,22C
560C:  CALL   312A
5610:  MOVLW  1E
5612:  MOVWF  FF6
5614:  MOVLW  0F
5616:  MOVWF  FF7
5618:  MOVLW  05
561A:  MOVLB  2
561C:  MOVWF  x41
561E:  MOVLB  0
5620:  CALL   3102
5624:  MOVFF  AD,22C
5628:  MOVLW  1B
562A:  MOVLB  2
562C:  MOVWF  x2D
562E:  MOVLB  0
5630:  CALL   327A
5634:  MOVLW  25
5636:  MOVWF  FF6
5638:  MOVLW  0F
563A:  MOVWF  FF7
563C:  MOVLW  03
563E:  MOVLB  2
5640:  MOVWF  x41
5642:  MOVLB  0
5644:  CALL   3102
.................... 		COM1_send_str(buf); 
5648:  MOVLW  01
564A:  MOVLB  2
564C:  MOVWF  x68
564E:  MOVLW  C6
5650:  MOVWF  x67
5652:  MOVLB  0
5654:  CALL   21D2
.................... 		 
.................... 		sprintf(buf, "\r\n\nUT=%u, US=%u BG= %lu [Hz] %lu [mSec]\r" setup.UART_Time, setup.UART_Status, 1000 / setup.Block_per_second , setup.Block_per_second); // VERSION 3.3 17.1.2016 
5658:  MOVLW  03
565A:  MOVLB  2
565C:  MOVWF  x2B
565E:  MOVLW  E8
5660:  MOVWF  x2A
5662:  MOVFF  103,22D
5666:  MOVFF  102,22C
566A:  MOVLB  0
566C:  CALL   37BA
5670:  MOVFF  02,229
5674:  MOVFF  01,228
5678:  MOVLW  01
567A:  MOVLB  1
567C:  MOVWF  xA4
567E:  MOVLW  C6
5680:  MOVWF  xA3
5682:  MOVLW  2A
5684:  MOVWF  FF6
5686:  MOVLW  0F
5688:  MOVWF  FF7
568A:  MOVLW  06
568C:  MOVLB  2
568E:  MOVWF  x41
5690:  MOVLB  0
5692:  CALL   3102
5696:  MOVFF  FE,22C
569A:  MOVLW  1B
569C:  MOVLB  2
569E:  MOVWF  x2D
56A0:  MOVLB  0
56A2:  CALL   327A
56A6:  MOVLW  32
56A8:  MOVWF  FF6
56AA:  MOVLW  0F
56AC:  MOVWF  FF7
56AE:  MOVLW  05
56B0:  MOVLB  2
56B2:  MOVWF  x41
56B4:  MOVLB  0
56B6:  CALL   3102
56BA:  MOVFF  FF,22C
56BE:  MOVLW  1B
56C0:  MOVLB  2
56C2:  MOVWF  x2D
56C4:  MOVLB  0
56C6:  CALL   327A
56CA:  MOVLW  39
56CC:  MOVWF  FF6
56CE:  MOVLW  0F
56D0:  MOVWF  FF7
56D2:  MOVLW  05
56D4:  MOVLB  2
56D6:  MOVWF  x41
56D8:  MOVLB  0
56DA:  CALL   3102
56DE:  MOVLW  10
56E0:  MOVWF  FE9
56E2:  MOVFF  229,22D
56E6:  MOVFF  228,22C
56EA:  CALL   312A
56EE:  MOVLW  41
56F0:  MOVWF  FF6
56F2:  MOVLW  0F
56F4:  MOVWF  FF7
56F6:  MOVLW  06
56F8:  MOVLB  2
56FA:  MOVWF  x41
56FC:  MOVLB  0
56FE:  CALL   3102
5702:  MOVLW  10
5704:  MOVWF  FE9
5706:  MOVFF  103,22D
570A:  MOVFF  102,22C
570E:  CALL   312A
5712:  MOVLW  4A
5714:  MOVWF  FF6
5716:  MOVLW  0F
5718:  MOVWF  FF7
571A:  MOVLW  08
571C:  MOVLB  2
571E:  MOVWF  x41
5720:  MOVLB  0
5722:  CALL   3102
.................... 		COM1_send_str(buf); 
5726:  MOVLW  01
5728:  MOVLB  2
572A:  MOVWF  x68
572C:  MOVLW  C6
572E:  MOVWF  x67
5730:  MOVLB  0
5732:  CALL   21D2
.................... 		 
....................         update_temperature_string(); 
5736:  CALL   3614
....................         ret = 0; 
573A:  MOVLB  1
573C:  CLRF   xC4
.................... 		break; 
573E:  MOVLB  0
5740:  BRA    578A
.................... 		default: 
....................       	{ 
.................... 			if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
5742:  MOVLB  1
5744:  MOVF   x34,F
5746:  BNZ   574E
5748:  MOVLB  0
574A:  BRA    578A
574C:  MOVLB  1
.................... 			COM1_send_str("\r\nFAIL\r\n"); 
574E:  MOVLW  02
5750:  MOVWF  FEA
5752:  MOVLW  0F
5754:  MOVWF  FE9
5756:  MOVFF  FF2,228
575A:  BCF    FF2.7
575C:  MOVLW  09
575E:  MOVWF  01
5760:  CLRF   FF7
5762:  MOVLW  00
5764:  MOVLB  0
5766:  CALL   0A7C
576A:  TBLRD*-
576C:  TBLRD*+
576E:  MOVFF  FF5,FEE
5772:  DECFSZ 01,F
5774:  BRA    576C
5776:  MOVLB  2
5778:  BTFSC  x28.7
577A:  BSF    FF2.7
577C:  MOVLW  02
577E:  MOVWF  x68
5780:  MOVLW  0F
5782:  MOVWF  x67
5784:  MOVLB  0
5786:  CALL   21D2
578A:  MOVLB  2
.................... 			 
.................... 		} 
.................... 	} 
.................... 	aaa: 
.................... 	return; 
578C:  MOVLB  0
578E:  GOTO   5894 (RETURN)
.................... } 
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void ttccp_handler(void) 
.................... { 
.................... 	UINT chr, ret; 
.................... 	 
.................... 	switch (comm_state) 
*
57D6:  MOVF   54,W
57D8:  XORLW  00
57DA:  BZ    57E8
57DC:  XORLW  02
57DE:  BZ    5818
57E0:  XORLW  01
57E2:  BTFSC  FD8.2
57E4:  BRA    593A
57E6:  BRA    593A
....................     { 
.................... 		case COMM_INIT: 
.................... 		comm_ridx = 0; 
57E8:  CLRF   55
.................... 		comm_state = COMM_WAIT_CR; 
57EA:  MOVLW  02
57EC:  MOVWF  54
.................... 		comm_timeout = 0; 
57EE:  CLRF   xA7
57F0:  CLRF   xA6
.................... 		if (ttccp_login) 
57F2:  MOVLB  1
57F4:  MOVF   x34,F
57F6:  BZ    5814
.................... 		COM1_send_str("\r>"); 
57F8:  MOVLW  0D
57FA:  MOVWF  xBE
57FC:  MOVLW  3E
57FE:  MOVWF  xBF
5800:  CLRF   xC0
5802:  MOVLW  01
5804:  MOVLB  2
5806:  MOVWF  x68
5808:  MOVLW  BE
580A:  MOVWF  x67
580C:  MOVLB  0
580E:  CALL   21D2
5812:  MOVLB  1
.................... 		break; 
5814:  MOVLB  0
5816:  BRA    593A
.................... 		case COMM_WAIT_CR: 
.................... 		if (COM1_rcnt) 
5818:  MOVF   31,F
581A:  BTFSC  FD8.2
581C:  BRA    590C
....................         { 
.................... 			comm_timeout = 0; 
581E:  CLRF   xA7
5820:  CLRF   xA6
.................... 			chr = COM1_get_chr(); 
5822:  CALL   2A50
5826:  MOVLB  1
5828:  CLRF   xBB
582A:  MOVFF  01,1BA
.................... 			comm_buf[comm_ridx++] = chr; 
582E:  MOVF   55,W
5830:  INCF   55,F
5832:  CLRF   03
5834:  ADDLW  56
5836:  MOVWF  FE9
5838:  MOVLW  00
583A:  ADDWFC 03,W
583C:  MOVWF  FEA
583E:  MOVFF  1BA,FEF
.................... 			if (comm_ridx > 70) 
5842:  MOVF   55,W
5844:  SUBLW  46
5846:  BC    5850
.................... 			{ 
.................... 				comm_state = 0; 
5848:  CLRF   54
.................... 				break; 
584A:  MOVLB  0
584C:  BRA    593A
584E:  MOVLB  1
.................... 			} 
.................... 			if (chr == 13 || chr == ';') 
5850:  MOVF   xBA,W
5852:  SUBLW  0D
5854:  BNZ   585A
5856:  MOVF   xBB,F
5858:  BZ    5864
585A:  MOVF   xBA,W
585C:  SUBLW  3B
585E:  BNZ   590E
5860:  MOVF   xBB,F
5862:  BNZ   590E
.................... 			{ 
.................... 				if (chr == ';') 
5864:  MOVF   xBA,W
5866:  SUBLW  3B
5868:  BNZ   5886
586A:  MOVF   xBB,F
586C:  BNZ   5886
.................... 				{ 
.................... 					comm_buf[comm_ridx-1] = 13; 
586E:  MOVLW  01
5870:  SUBWF  55,W
5872:  CLRF   03
5874:  ADDLW  56
5876:  MOVWF  FE9
5878:  MOVLW  00
587A:  ADDWFC 03,W
587C:  MOVWF  FEA
587E:  MOVLW  0D
5880:  MOVWF  FEF
.................... 					comm_ridx = 0; 
5882:  CLRF   55
.................... 				} 
5884:  BRA    588E
.................... 				else 
.................... 				COM1_init(); 
5886:  MOVLB  0
5888:  CALL   0FA2
588C:  MOVLB  1
.................... 				process_ttccp_commands(); 
588E:  MOVLB  0
5890:  GOTO   3826
.................... 				if (debug_mode) 
5894:  MOVLB  1
5896:  MOVF   x43,F
5898:  BZ    58A4
.................... 				if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
589A:  MOVF   x34,F
589C:  BNZ   58A4
589E:  MOVLB  0
58A0:  BRA    593A
58A2:  MOVLB  1
.................... 				COM1_send_str("\r\nOK\n"); 
58A4:  MOVLW  0D
58A6:  MOVWF  xBE
58A8:  MOVLW  0A
58AA:  MOVWF  xBF
58AC:  MOVLW  4F
58AE:  MOVWF  xC0
58B0:  MOVLW  4B
58B2:  MOVWF  xC1
58B4:  MOVLW  0A
58B6:  MOVWF  xC2
58B8:  CLRF   xC3
58BA:  MOVLW  01
58BC:  MOVLB  2
58BE:  MOVWF  x68
58C0:  MOVLW  BE
58C2:  MOVWF  x67
58C4:  MOVLB  0
58C6:  CALL   21D2
.................... 				if (ret == 1) 
58CA:  MOVLB  1
58CC:  DECFSZ xBC,W
58CE:  BRA    58FC
58D0:  MOVF   xBD,F
58D2:  BNZ   58FC
.................... 				{ 
.................... 					if (!ttccp_login) break;// VERSION 3.3 27.01.2016 
58D4:  MOVF   x34,F
58D6:  BNZ   58DE
58D8:  MOVLB  0
58DA:  BRA    593A
58DC:  MOVLB  1
.................... 					COM1_send_str("\n\r"); 
58DE:  MOVLW  0A
58E0:  MOVWF  xBE
58E2:  MOVLW  0D
58E4:  MOVWF  xBF
58E6:  CLRF   xC0
58E8:  MOVLW  01
58EA:  MOVLB  2
58EC:  MOVWF  x68
58EE:  MOVLW  BE
58F0:  MOVWF  x67
58F2:  MOVLB  0
58F4:  CALL   21D2
.................... 				} 
58F8:  BRA    590C
58FA:  MOVLB  1
.................... 				else 
.................... 				COM1_send_str(ttccp_error_message); 
58FC:  MOVLW  01
58FE:  MOVLB  2
5900:  MOVWF  x68
5902:  MOVLW  78
5904:  MOVWF  x67
5906:  MOVLB  0
5908:  CALL   21D2
590C:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		 
.................... 		if (comm_state > COMM_WAIT_DLR) 
590E:  MOVF   54,W
5910:  SUBLW  01
5912:  BC    5936
....................         if (TMR_100MS_COMM_TO) 
5914:  BTFSS  28.1
5916:  BRA    5936
.................... 		{ 
.................... 			TMR_100MS_COMM_TO = 0; 
5918:  BCF    28.1
.................... 			if (++comm_timeout > 10000) // time out after 10 seconds from last char 
591A:  MOVLB  0
591C:  INCF   xA6,F
591E:  BTFSC  FD8.2
5920:  INCF   xA7,F
5922:  MOVF   xA7,W
5924:  SUBLW  26
5926:  BC    5934
5928:  XORLW  FF
592A:  BNZ   5932
592C:  MOVF   xA6,W
592E:  SUBLW  10
5930:  BC    5934
....................             comm_state = 0; 
5932:  CLRF   54
5934:  MOVLB  1
.................... 		} 
.................... 		break; 
5936:  MOVLB  0
5938:  BRA    593A
.................... 		case COMM_DELAY: 
.................... 		break; 
.................... 	} 
593A:  GOTO   6B62 (RETURN)
.................... } 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void dollar_handler(void) 
.................... { 
.................... 	UINT chr, ret; 
.................... 	 
.................... 	switch (comm_state) 
*
6992:  MOVF   54,W
6994:  ADDLW  FC
6996:  BTFSC  FD8.0
6998:  BRA    6AF8
699A:  ADDLW  04
699C:  GOTO   6AFC
....................     { 
.................... 		case COMM_INIT: 
.................... 		comm_ridx = 0; 
69A0:  CLRF   55
.................... 		comm_state++; 
69A2:  INCF   54,F
.................... 		break; 
69A4:  BRA    6AF8
.................... 		case COMM_WAIT_DLR: 
.................... 		#ignore_warnings 201 
.................... 		if (COM1_rcnt) 
69A6:  MOVF   31,F
69A8:  BZ    69D6
....................         if ((chr = COM1_get_chr()) == '$') 
69AA:  CALL   2A50
69AE:  MOVLB  1
69B0:  CLRF   xBB
69B2:  MOVFF  01,1BA
69B6:  MOVF   xBA,W
69B8:  SUBLW  24
69BA:  BNZ   69CC
69BC:  MOVF   xBB,F
69BE:  BNZ   69CC
.................... 		{ 
.................... 			comm_state++; 
69C0:  INCF   54,F
.................... 			comm_timeout = 0; 
69C2:  MOVLB  0
69C4:  CLRF   xA7
69C6:  CLRF   xA6
.................... 		} 
69C8:  BRA    69D6
69CA:  MOVLB  1
....................         else 
.................... 		inc_dec(chr); 
69CC:  MOVFF  1BA,1D1
69D0:  MOVLB  0
69D2:  GOTO   59C6
.................... 		break; 
69D6:  BRA    6AF8
.................... 		case COMM_WAIT_CR: 
.................... 		if (COM1_rcnt) 
69D8:  MOVF   31,F
69DA:  BTFSC  FD8.2
69DC:  BRA    6ACA
....................         { 
.................... 			comm_timeout = 0; 
69DE:  CLRF   xA7
69E0:  CLRF   xA6
.................... 			chr = COM1_get_chr(); 
69E2:  CALL   2A50
69E6:  MOVLB  1
69E8:  CLRF   xBB
69EA:  MOVFF  01,1BA
.................... 			comm_buf[comm_ridx++] = chr; 
69EE:  MOVF   55,W
69F0:  INCF   55,F
69F2:  CLRF   03
69F4:  ADDLW  56
69F6:  MOVWF  FE9
69F8:  MOVLW  00
69FA:  ADDWFC 03,W
69FC:  MOVWF  FEA
69FE:  MOVFF  1BA,FEF
.................... 			if (comm_ridx > 70) 
6A02:  MOVF   55,W
6A04:  SUBLW  46
6A06:  BC    6A10
.................... 			{ 
.................... 				comm_state = 0; 
6A08:  CLRF   54
.................... 				break; 
6A0A:  MOVLB  0
6A0C:  BRA    6AF8
6A0E:  MOVLB  1
.................... 			} 
.................... 			if (chr == 13) 
6A10:  MOVF   xBA,W
6A12:  SUBLW  0D
6A14:  BNZ   6A80
6A16:  MOVF   xBB,F
6A18:  BNZ   6A80
.................... 			{ 
.................... 				ret = process_dollar_commands(); 
6A1A:  MOVLB  0
6A1C:  BRA    625C
6A1E:  MOVLB  1
6A20:  CLRF   xBD
6A22:  MOVFF  01,1BC
.................... 				if (ret == 1) 
6A26:  DECFSZ xBC,W
6A28:  BRA    6A2E
6A2A:  MOVF   xBD,F
6A2C:  BNZ   6A2E
.................... 				{ 
.................... 					//            store_setup(); 
.................... 					//            update_all(); 
.................... 				} 
.................... 				if (ret != 255) 
6A2E:  INCFSZ xBC,W
6A30:  BRA    6A36
6A32:  MOVF   xBD,F
6A34:  BZ    6A76
.................... 				COM1_send_str("\r\nOK\r\n*"); 
6A36:  MOVLW  01
6A38:  MOVWF  FEA
6A3A:  MOVLW  BE
6A3C:  MOVWF  FE9
6A3E:  MOVFF  FF2,1D1
6A42:  BCF    FF2.7
6A44:  MOVLW  08
6A46:  MOVWF  01
6A48:  CLRF   FF7
6A4A:  MOVLW  00
6A4C:  MOVLB  0
6A4E:  CALL   0B3C
6A52:  TBLRD*-
6A54:  TBLRD*+
6A56:  MOVFF  FF5,FEE
6A5A:  DECFSZ 01,F
6A5C:  BRA    6A54
6A5E:  MOVLB  1
6A60:  BTFSC  xD1.7
6A62:  BSF    FF2.7
6A64:  MOVLW  01
6A66:  MOVLB  2
6A68:  MOVWF  x68
6A6A:  MOVLW  BE
6A6C:  MOVWF  x67
6A6E:  MOVLB  0
6A70:  CALL   21D2
6A74:  MOVLB  1
.................... 				COM1_init(); 
6A76:  MOVLB  0
6A78:  CALL   0FA2
.................... 			} 
6A7C:  BRA    6ACA
6A7E:  MOVLB  1
.................... 			else if (chr == 27) 
6A80:  MOVF   xBA,W
6A82:  SUBLW  1B
6A84:  BNZ   6ACC
6A86:  MOVF   xBB,F
6A88:  BNZ   6ACC
.................... 			{ 
.................... 				COM1_send_str("\r\n\nBREAK\r\n"); 
6A8A:  MOVLW  01
6A8C:  MOVWF  FEA
6A8E:  MOVLW  C6
6A90:  MOVWF  FE9
6A92:  MOVFF  FF2,1D1
6A96:  BCF    FF2.7
6A98:  MOVLW  0B
6A9A:  MOVWF  01
6A9C:  CLRF   FF7
6A9E:  MOVLW  00
6AA0:  MOVLB  0
6AA2:  CALL   0B5E
6AA6:  TBLRD*-
6AA8:  TBLRD*+
6AAA:  MOVFF  FF5,FEE
6AAE:  DECFSZ 01,F
6AB0:  BRA    6AA8
6AB2:  MOVLB  1
6AB4:  BTFSC  xD1.7
6AB6:  BSF    FF2.7
6AB8:  MOVLW  01
6ABA:  MOVLB  2
6ABC:  MOVWF  x68
6ABE:  MOVLW  C6
6AC0:  MOVWF  x67
6AC2:  MOVLB  0
6AC4:  CALL   21D2
.................... 				comm_state = 0; 
6AC8:  CLRF   54
6ACA:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		 
.................... 		if (comm_state > COMM_WAIT_DLR) 
6ACC:  MOVF   54,W
6ACE:  SUBLW  01
6AD0:  BC    6AF4
....................         if (TMR_100MS_COMM_TO) 
6AD2:  BTFSS  28.1
6AD4:  BRA    6AF4
.................... 		{ 
.................... 			TMR_100MS_COMM_TO = 0; 
6AD6:  BCF    28.1
.................... 			if (++comm_timeout > 10000) // time out after 10 seconds from last char 
6AD8:  MOVLB  0
6ADA:  INCF   xA6,F
6ADC:  BTFSC  FD8.2
6ADE:  INCF   xA7,F
6AE0:  MOVF   xA7,W
6AE2:  SUBLW  26
6AE4:  BC    6AF2
6AE6:  XORLW  FF
6AE8:  BNZ   6AF0
6AEA:  MOVF   xA6,W
6AEC:  SUBLW  10
6AEE:  BC    6AF2
....................             comm_state = 0; 
6AF0:  CLRF   54
6AF2:  MOVLB  1
.................... 		} 
.................... 		break; 
6AF4:  MOVLB  0
6AF6:  BRA    6AF8
.................... 		case COMM_DELAY: 
.................... 		break; 
.................... 	} 
6AF8:  GOTO   6B62 (RETURN)
.................... } 
....................  
....................  
.................... //---------------------------------------------------------------------------- 
.................... #separate 
.................... void comm_handler(void) 
.................... { 
.................... 	UINT chr; 
.................... 	 
.................... 	if (OERR) 
*
6B28:  BTFSS  FAB.1
6B2A:  BRA    6B3C
....................     { 
.................... 		OERR = 0; 
6B2C:  BCF    FAB.1
.................... 		CREN = 0; 
6B2E:  BCF    FAB.4
.................... 		delay_us(5); 
6B30:  MOVLW  06
6B32:  MOVWF  00
6B34:  DECFSZ 00,F
6B36:  BRA    6B34
6B38:  NOP   
.................... 		CREN = 1; 
6B3A:  BSF    FAB.4
.................... 	} 
.................... 	if (FERR) 
6B3C:  BTFSS  FAB.2
6B3E:  BRA    6B4C
....................     { 
.................... 		FERR = 0; 
6B40:  BCF    FAB.2
.................... 		chr = RCREG1; 
6B42:  MOVLB  1
6B44:  CLRF   xB9
6B46:  MOVFF  FAE,1B8
6B4A:  MOVLB  0
.................... 	} 
.................... 	if (ttccp) 
6B4C:  MOVLB  1
6B4E:  MOVF   x42,F
6B50:  BZ    6B5E
....................     ttccp_handler(); 
6B52:  MOVLB  0
6B54:  GOTO   57D6
6B58:  MOVLB  0
6B5A:  BRA    6B62
6B5C:  MOVLB  1
.................... 	else 
....................     dollar_handler(); 
6B5E:  MOVLB  0
6B60:  BRA    6992
6B62:  GOTO   6DAE (RETURN)
.................... } 
....................  
....................  
....................  
....................  
.................... //========== functions ========================================= 
.................... // // VERSION 3.3 US 30.03.2016 
.................... //========== functions ========================================= 
.................... typedef struct { 
....................   UINT analog; 
....................   UINT Pout; 
.................... } POWER_TRANS; 
....................  
.................... const POWER_TRANS Ptrans[] = { 
....................  
.................... //  dec    vmeas    Pout 
.................... {  1  ,  998  },//  ,1 
.................... {  2  ,  500  },//  ,2 
.................... {  3  ,  353  },//  ,3 
.................... {  4  ,  260  },//  ,4 
.................... {  5  ,  210  },//  ,5 
.................... {  6  ,  170  },//  ,6 
.................... {  7  ,  144  },//  ,7 
.................... {  8  ,  124  },//  ,8 
.................... {  9  ,  110  },//  ,9 
.................... {  10  , 99  },// ,10 
.................... {  11  ,  88  },//  ,11 
.................... {  12  ,  79  },//  ,12 
.................... {  13  ,  72  },//  ,13 
.................... {  14  ,  67  },//  ,14 
.................... {  15  ,  62  },//  ,15 
.................... {  16  ,  57  },//  ,16 
.................... {  17  ,  52  },//  ,17 
.................... {  18  ,  50  },//  ,18 
.................... {  19  ,  46  },//  ,19 
.................... {  20  ,  44  },//  ,20 
.................... }; 
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 FFWR 
.................... //============================================================================= 
.................... typedef struct { 
....................   UINT analog1; 
....................   UINT Pout1; 
.................... } POWER_TRANS1; 
....................  
.................... const POWER_TRANS1 Ptrans1[] = { 
....................  
.................... //  dec    vmeas    Pout1 
.................... {  80  ,  20  },//  0.29V  ,0 
.................... {  102  ,  21  },//  0.33V  ,1 
.................... {  118  ,  22  },//  0.38V  ,2 
.................... {  127  ,  23  },//  0.41V  ,3 
.................... {  143  ,  24  },//  0.46V  ,4 
.................... {  167  ,  25  },//  0.54V  ,5 
.................... {  183  ,  26  },//  0.59V  ,6 
.................... {  208  ,  27  },//  0.67V  ,7 
.................... {  226  ,  28  },//  0.73V  ,8 
.................... {  257  ,  29  },//  0.83V  ,9 
.................... {  288  ,  30  },//  0.93V  ,10 
.................... {  322  ,  31  },//  1.04V  ,11 
.................... {  360  ,  32  },//  1.16V  ,12 
.................... {  400  ,  33  },//  1.29V  ,13 
.................... {  446  ,  34  },//  1.44V  ,14 
.................... {  505  ,  35  },//  1.63V  ,15 
.................... {  564  ,  36  },//  1.82V  ,16 
.................... {  645  ,  37  },//  2.08V  ,17 
.................... {  722  ,  38  },//  2.33V  ,18 
.................... {  818  ,  39  },//  2.64V  ,19 
.................... {  992  ,  40  },//  3.2V  ,20 
.................... {  1005,   41  }, //  3.2V    ,21 
.................... {   1023,   55  } 
.................... }; 
....................  
.................... //============================================================================= 
.................... //============================================================================= 
.................... void send_FPGA_command(UCHAR length, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
.................... //  output_high(D2A_SCLK); 
.................... //  delay_us(10); 
....................   output_low(CSN); 
*
180E:  BCF    F8A.2
....................   delay_us(10); 
1810:  MOVLW  0C
1812:  MOVWF  00
1814:  DECFSZ 00,F
1816:  BRA    1814
1818:  BRA    181A
181A:  NOP   
....................   while (length--) 
181C:  MOVLB  2
181E:  MOVF   x3E,W
1820:  DECF   x3E,F
1822:  XORLW  00
1824:  BZ    186A
....................     { 
....................     xbyte = *data++; 
1826:  MOVFF  240,03
182A:  MOVF   x3F,W
182C:  INCF   x3F,F
182E:  BTFSC  FD8.2
1830:  INCF   x40,F
1832:  MOVWF  FE9
1834:  MOVFF  03,FEA
1838:  MOVFF  FEF,241
....................     for (cnt = 0; cnt < 8; cnt++, xbyte <<= 1) 
183C:  CLRF   x42
183E:  MOVF   x42,W
1840:  SUBLW  07
1842:  BNC   1868
....................       { 
....................       if (xbyte & 0x80) 
1844:  BTFSS  x41.7
1846:  BRA    184C
....................         output_high(D2A_MOSI); 
1848:  BSF    F8C.4
184A:  BRA    184E
....................       else 
....................         output_low(D2A_MOSI); 
184C:  BCF    F8C.4
....................       delay_us(1); 
184E:  BRA    1850
1850:  BRA    1852
....................       output_high(D2A_SCLK); 
1852:  BSF    F8C.0
....................       delay_us(1); 
1854:  BRA    1856
1856:  BRA    1858
....................       output_low(D2A_SCLK); 
1858:  BCF    F8C.0
....................       delay_us(1); 
185A:  BRA    185C
185C:  BRA    185E
185E:  MOVF   x42,W
1860:  INCF   x42,F
1862:  BCF    FD8.0
1864:  RLCF   x41,F
1866:  BRA    183E
....................       } 
1868:  BRA    181E
....................     } 
....................   delay_us(10); 
186A:  MOVLW  0C
186C:  MOVWF  00
186E:  DECFSZ 00,F
1870:  BRA    186E
1872:  BRA    1874
1874:  NOP   
....................   output_high(CSN); 
1876:  BSF    F8A.2
1878:  MOVLB  0
187A:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... UCHAR get_FPGA_register(UCHAR addr, UCHAR *data) 
....................   { 
....................   UCHAR xbyte, cnt; 
....................   output_low(CSN); 
*
6150:  BCF    F8A.2
....................   for (cnt = 0; cnt < 8; cnt++, addr <<= 1) 
6152:  MOVLB  2
6154:  CLRF   x0C
6156:  MOVF   x0C,W
6158:  SUBLW  07
615A:  BNC   6192
....................     { 
....................     if (addr & 0x80) 
615C:  BTFSS  x08.7
615E:  BRA    6164
....................       output_high(D2A_MOSI); 
6160:  BSF    F8C.4
6162:  BRA    6166
....................     else 
....................       output_low(D2A_MOSI); 
6164:  BCF    F8C.4
....................     delay_us(5); 
6166:  MOVLW  06
6168:  MOVWF  00
616A:  DECFSZ 00,F
616C:  BRA    616A
616E:  NOP   
....................     output_high(D2A_SCLK); 
6170:  BSF    F8C.0
....................     delay_us(5); 
6172:  MOVLW  06
6174:  MOVWF  00
6176:  DECFSZ 00,F
6178:  BRA    6176
617A:  NOP   
....................     output_low(D2A_SCLK); 
617C:  BCF    F8C.0
....................     delay_us(5); 
617E:  MOVLW  06
6180:  MOVWF  00
6182:  DECFSZ 00,F
6184:  BRA    6182
6186:  NOP   
6188:  MOVF   x0C,W
618A:  INCF   x0C,F
618C:  BCF    FD8.0
618E:  RLCF   x08,F
6190:  BRA    6156
....................     } 
....................   for (xbyte = 0, cnt = 0; cnt < 8; cnt++) 
6192:  CLRF   x0B
6194:  CLRF   x0C
6196:  MOVF   x0C,W
6198:  SUBLW  07
619A:  BNC   61E0
....................     { 
....................     xbyte <<= 1; 
619C:  BCF    FD8.0
619E:  RLCF   x0B,F
....................     delay_us(5); 
61A0:  MOVLW  06
61A2:  MOVWF  00
61A4:  DECFSZ 00,F
61A6:  BRA    61A4
61A8:  NOP   
....................     output_high(D2A_SCLK); 
61AA:  BSF    F8C.0
....................     delay_us(3); 
61AC:  MOVLW  03
61AE:  MOVWF  00
61B0:  DECFSZ 00,F
61B2:  BRA    61B0
61B4:  BRA    61B6
....................     if (input(D2A_MISO)) 
61B6:  BTFSS  F83.1
61B8:  BRA    61C6
....................       { 
....................       xbyte |= 1; 
61BA:  BSF    x0B.0
....................       delay_us(2); 
61BC:  MOVLW  02
61BE:  MOVWF  00
61C0:  DECFSZ 00,F
61C2:  BRA    61C0
61C4:  NOP   
....................       } 
....................     delay_us(2); 
61C6:  MOVLW  02
61C8:  MOVWF  00
61CA:  DECFSZ 00,F
61CC:  BRA    61CA
61CE:  NOP   
....................     output_low(D2A_SCLK); 
61D0:  BCF    F8C.0
....................     delay_us(3); 
61D2:  MOVLW  03
61D4:  MOVWF  00
61D6:  DECFSZ 00,F
61D8:  BRA    61D6
61DA:  BRA    61DC
61DC:  INCF   x0C,F
61DE:  BRA    6196
....................     } 
....................   *data = xbyte; 
61E0:  MOVFF  209,FE9
61E4:  MOVFF  20A,FEA
61E8:  MOVFF  20B,FEF
....................   output_high(CSN); 
61EC:  BSF    F8A.2
....................   output_low(D2A_SCLK); 
61EE:  BCF    F8C.0
....................   return xbyte; 
61F0:  MOVFF  20B,01
61F4:  MOVLB  0
61F6:  GOTO   6646 (RETURN)
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... //BR(31:0)=Round(2^32 * (bit rate)/240.0MHz) 
.................... ULONG compute_bitrate_coefficient(ULONG bitrate) 
....................   { 
....................   float bitspersec, temp; 
....................   bitspersec = (float)bitrate; 
*
1BDE:  MOVFF  245,251
1BE2:  MOVFF  244,250
1BE6:  MOVFF  243,24F
1BEA:  MOVFF  242,24E
1BEE:  BRA    190E
1BF0:  MOVFF  03,249
1BF4:  MOVFF  02,248
1BF8:  MOVFF  01,247
1BFC:  MOVFF  00,246
....................   temp = bitspersec / 240000000.0; 
1C00:  MOVFF  249,251
1C04:  MOVFF  248,250
1C08:  MOVFF  247,24F
1C0C:  MOVFF  246,24E
1C10:  MOVLW  C0
1C12:  MOVLB  2
1C14:  MOVWF  x55
1C16:  MOVLW  E1
1C18:  MOVWF  x54
1C1A:  MOVLW  64
1C1C:  MOVWF  x53
1C1E:  MOVLW  9A
1C20:  MOVWF  x52
1C22:  MOVLB  0
1C24:  RCALL  1948
1C26:  MOVFF  03,24D
1C2A:  MOVFF  02,24C
1C2E:  MOVFF  01,24B
1C32:  MOVFF  00,24A
....................   temp *= 65536.0; 
1C36:  MOVFF  24D,251
1C3A:  MOVFF  24C,250
1C3E:  MOVFF  24B,24F
1C42:  MOVFF  24A,24E
1C46:  MOVLB  2
1C48:  CLRF   x55
1C4A:  CLRF   x54
1C4C:  CLRF   x53
1C4E:  MOVLW  8F
1C50:  MOVWF  x52
1C52:  MOVLB  0
1C54:  RCALL  1AA6
1C56:  MOVFF  03,24D
1C5A:  MOVFF  02,24C
1C5E:  MOVFF  01,24B
1C62:  MOVFF  00,24A
....................   temp *= 65536.0; 
1C66:  MOVFF  24D,251
1C6A:  MOVFF  24C,250
1C6E:  MOVFF  24B,24F
1C72:  MOVFF  24A,24E
1C76:  MOVLB  2
1C78:  CLRF   x55
1C7A:  CLRF   x54
1C7C:  CLRF   x53
1C7E:  MOVLW  8F
1C80:  MOVWF  x52
1C82:  MOVLB  0
1C84:  RCALL  1AA6
1C86:  MOVFF  03,24D
1C8A:  MOVFF  02,24C
1C8E:  MOVFF  01,24B
1C92:  MOVFF  00,24A
....................   return (ULONG)temp - 1; 
1C96:  MOVFF  24D,251
1C9A:  MOVFF  24C,250
1C9E:  MOVFF  24B,24F
1CA2:  MOVFF  24A,24E
1CA6:  RCALL  1B9C
1CA8:  MOVFF  03,251
1CAC:  MOVFF  02,250
1CB0:  MOVFF  01,24F
1CB4:  MOVFF  00,24E
1CB8:  MOVLW  01
1CBA:  MOVLB  2
1CBC:  SUBWF  00,W
1CBE:  MOVWF  00
1CC0:  MOVLW  00
1CC2:  SUBWFB 01,W
1CC4:  MOVWF  01
1CC6:  MOVLW  00
1CC8:  SUBWFB 02,W
1CCA:  MOVWF  02
1CCC:  MOVLW  00
1CCE:  SUBWFB 03,W
1CD0:  MOVWF  03
1CD2:  MOVLB  0
1CD4:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void update_FPGA(UCHAR addr, UCHAR value) 
....................   { 
....................   UCHAR buf[3]; 
....................   buf[0] = addr; 
*
59A8:  MOVFF  1D4,1D6
....................   buf[1] = value; 
59AC:  MOVFF  1D5,1D7
....................   send_FPGA_command(2, buf); 
59B0:  MOVLW  02
59B2:  MOVLB  2
59B4:  MOVWF  x3E
59B6:  MOVLW  01
59B8:  MOVWF  x40
59BA:  MOVLW  D6
59BC:  MOVWF  x3F
59BE:  MOVLB  0
59C0:  CALL   180E
59C4:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void set_bitrate(UINT bitrate) 
....................   { 
....................   UCHAR buf[7]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)bitrate * 10000L); 
*
60C0:  MOVLB  2
60C2:  CLRF   x1A
60C4:  CLRF   x19
60C6:  MOVFF  20B,218
60CA:  MOVFF  20A,217
60CE:  MOVFF  21A,247
60D2:  MOVFF  219,246
60D6:  MOVFF  20B,245
60DA:  MOVFF  20A,244
60DE:  CLRF   x4B
60E0:  CLRF   x4A
60E2:  MOVLW  27
60E4:  MOVWF  x49
60E6:  MOVLW  10
60E8:  MOVWF  x48
60EA:  MOVLB  0
60EC:  CALL   13F4
60F0:  MOVFF  03,21A
60F4:  MOVFF  02,219
60F8:  MOVFF  01,218
60FC:  MOVFF  00,217
6100:  MOVFF  03,245
6104:  MOVFF  02,244
6108:  MOVFF  01,243
610C:  MOVFF  00,242
6110:  CALL   1BDE
6114:  MOVFF  03,216
6118:  MOVFF  02,215
611C:  MOVFF  01,214
6120:  MOVFF  00,213
....................   buf[0] = 2; 
6124:  MOVLW  02
6126:  MOVLB  2
6128:  MOVWF  x0C
....................   buf[1] = make8(bitf, 0); 
612A:  MOVFF  213,20D
....................   buf[2] = make8(bitf, 1); 
612E:  MOVFF  214,20E
....................   buf[3] = make8(bitf, 2); 
6132:  MOVFF  215,20F
....................   buf[4] = make8(bitf, 3); 
6136:  MOVFF  216,210
....................   send_FPGA_command(5, buf); 
613A:  MOVLW  05
613C:  MOVWF  x3E
613E:  MOVLW  02
6140:  MOVWF  x40
6142:  MOVLW  0C
6144:  MOVWF  x3F
6146:  MOVLB  0
6148:  CALL   180E
614C:  GOTO   65FE (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg0(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   buf[0] = 0; 
*
187C:  MOVLB  2
187E:  CLRF   x32
....................   buf[1] = setup.mode | 
....................            (setup.clock_polarity << 4) | 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
1880:  MOVLB  0
1882:  SWAPF  xAD,W
1884:  MOVWF  00
1886:  MOVLW  F0
1888:  ANDWF  00,F
188A:  MOVF   00,W
188C:  IORWF  xAC,W
188E:  MOVLB  2
1890:  MOVWF  x3A
1892:  MOVLB  0
1894:  SWAPF  xAE,W
1896:  MOVWF  00
1898:  RLCF   00,F
189A:  MOVLW  E0
189C:  ANDWF  00,F
189E:  MOVF   00,W
18A0:  MOVLB  2
18A2:  IORWF  x3A,F
18A4:  MOVLB  0
18A6:  SWAPF  xB2,W
18A8:  MOVWF  00
18AA:  RLCF   00,F
18AC:  RLCF   00,F
18AE:  MOVLW  C0
18B0:  ANDWF  00,F
18B2:  MOVF   00,W
18B4:  MOVLB  2
18B6:  IORWF  x3A,F
18B8:  CLRF   00
18BA:  MOVLB  0
18BC:  BTFSC  xB4.0
18BE:  BSF    00.7
18C0:  MOVF   00,W
18C2:  MOVLB  2
18C4:  IORWF  x3A,W
18C6:  MOVWF  x33
....................   send_FPGA_command(2, buf); 
18C8:  MOVLW  02
18CA:  MOVWF  x3E
18CC:  MOVWF  x40
18CE:  MOVLW  32
18D0:  MOVWF  x3F
18D2:  MOVLB  0
18D4:  RCALL  180E
18D6:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void FPGA_set_reg6(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   buf[0] = 6; 
18D8:  MOVLW  06
18DA:  MOVLB  2
18DC:  MOVWF  x32
....................   buf[1] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
18DE:  BCF    FD8.0
18E0:  MOVLB  0
18E2:  RLCF   xB0,W
18E4:  IORWF  xAF,W
18E6:  MOVLB  2
18E8:  MOVWF  x3A
18EA:  MOVLB  0
18EC:  RLCF   xB1,W
18EE:  MOVWF  00
18F0:  RLCF   00,F
18F2:  MOVLW  FC
18F4:  ANDWF  00,F
18F6:  MOVF   00,W
18F8:  MOVLB  2
18FA:  IORWF  x3A,W
18FC:  MOVWF  x33
....................   send_FPGA_command(2, buf); 
18FE:  MOVLW  02
1900:  MOVWF  x3E
1902:  MOVWF  x40
1904:  MOVLW  32
1906:  MOVWF  x3F
1908:  MOVLB  0
190A:  RCALL  180E
190C:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void FPGA_set_bitrate(void) 
....................   { 
....................   UCHAR buf[8]; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
*
1CD6:  MOVLB  2
1CD8:  CLRF   x41
1CDA:  CLRF   x40
1CDC:  MOVFF  A9,23F
1CE0:  MOVFF  A8,23E
1CE4:  MOVFF  241,247
1CE8:  MOVFF  240,246
1CEC:  MOVFF  A9,245
1CF0:  MOVFF  A8,244
1CF4:  CLRF   x4B
1CF6:  CLRF   x4A
1CF8:  MOVLW  27
1CFA:  MOVWF  x49
1CFC:  MOVLW  10
1CFE:  MOVWF  x48
1D00:  MOVLB  0
1D02:  CALL   13F4
1D06:  MOVFF  03,241
1D0A:  MOVFF  02,240
1D0E:  MOVFF  01,23F
1D12:  MOVFF  00,23E
1D16:  MOVFF  03,245
1D1A:  MOVFF  02,244
1D1E:  MOVFF  01,243
1D22:  MOVFF  00,242
1D26:  RCALL  1BDE
1D28:  MOVFF  03,23D
1D2C:  MOVFF  02,23C
1D30:  MOVFF  01,23B
1D34:  MOVFF  00,23A
....................   buf[0] = 2; buf[1] = make8(bitf, 0); 
1D38:  MOVLW  02
1D3A:  MOVLB  2
1D3C:  MOVWF  x32
1D3E:  MOVFF  23A,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1D42:  MOVLW  02
1D44:  MOVWF  x3E
1D46:  MOVWF  x40
1D48:  MOVLW  32
1D4A:  MOVWF  x3F
1D4C:  MOVLB  0
1D4E:  RCALL  180E
1D50:  MOVLW  0A
1D52:  MOVLB  2
1D54:  MOVWF  x3E
1D56:  MOVLB  0
1D58:  CALL   0F54
....................   buf[0] = 3; buf[1] = make8(bitf, 1); 
1D5C:  MOVLW  03
1D5E:  MOVLB  2
1D60:  MOVWF  x32
1D62:  MOVFF  23B,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1D66:  MOVLW  02
1D68:  MOVWF  x3E
1D6A:  MOVWF  x40
1D6C:  MOVLW  32
1D6E:  MOVWF  x3F
1D70:  MOVLB  0
1D72:  RCALL  180E
1D74:  MOVLW  0A
1D76:  MOVLB  2
1D78:  MOVWF  x3E
1D7A:  MOVLB  0
1D7C:  CALL   0F54
....................   buf[0] = 4; buf[1] = make8(bitf, 2); 
1D80:  MOVLW  04
1D82:  MOVLB  2
1D84:  MOVWF  x32
1D86:  MOVFF  23C,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1D8A:  MOVLW  02
1D8C:  MOVWF  x3E
1D8E:  MOVWF  x40
1D90:  MOVLW  32
1D92:  MOVWF  x3F
1D94:  MOVLB  0
1D96:  RCALL  180E
1D98:  MOVLW  0A
1D9A:  MOVLB  2
1D9C:  MOVWF  x3E
1D9E:  MOVLB  0
1DA0:  CALL   0F54
....................   buf[0] = 5; buf[1] = make8(bitf, 3); 
1DA4:  MOVLW  05
1DA6:  MOVLB  2
1DA8:  MOVWF  x32
1DAA:  MOVFF  23D,233
....................   send_FPGA_command(2, buf); delay_ms(10); 
1DAE:  MOVLW  02
1DB0:  MOVWF  x3E
1DB2:  MOVWF  x40
1DB4:  MOVLW  32
1DB6:  MOVWF  x3F
1DB8:  MOVLB  0
1DBA:  RCALL  180E
1DBC:  MOVLW  0A
1DBE:  MOVLB  2
1DC0:  MOVWF  x3E
1DC2:  MOVLB  0
1DC4:  CALL   0F54
1DC8:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void set_synchronizer_params(void) 
....................   { 
....................   UCHAR buf[8], idx; 
....................   ULONG bitf; 
....................   bitf = compute_bitrate_coefficient((ULONG)setup.bitrate * 10000L); 
....................   buf[0] = setup.mode | 
.................... /*           (setup.clock_polarity << 4) |*/ 
....................            (setup.data_polarity  << 5) | 
....................            (setup.randomizer     << 6) | 
....................            (setup.SOQPSK         << 7); 
....................   buf[1] = setup.phase_offset; 
....................   buf[2] = make8(bitf, 0); 
....................   buf[3] = make8(bitf, 1); 
....................   buf[4] = make8(bitf, 2); 
....................   buf[5] = make8(bitf, 3); 
....................   buf[6] = setup.clock_source | 
....................            (setup.data_source << 1) | 
....................            (setup.internal_pattern << 2); 
....................   for (idx = 0; idx < 7; idx++) 
....................     { 
....................     update_FPGA(idx, buf[idx]); 
....................     delay_ms(5); 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void write_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
32F6:  MOVLB  2
32F8:  MOVFF  22D,03
32FC:  MOVF   x2C,W
32FE:  BTFSC  FD8.2
3300:  DECF   x2D,F
3302:  DECF   x2C,F
3304:  IORWF  03,W
3306:  BZ    3360
....................     write_eeprom(addr++, *data++); 
3308:  MOVF   x29,W
330A:  MOVWF  03
330C:  MOVF   x28,W
330E:  INCF   x28,F
3310:  BTFSC  FD8.2
3312:  INCF   x29,F
3314:  MOVWF  x2E
3316:  MOVFF  03,22F
331A:  MOVF   x2B,W
331C:  MOVWF  03
331E:  MOVF   x2A,W
3320:  INCF   x2A,F
3322:  BTFSC  FD8.2
3324:  INCF   x2B,F
3326:  MOVWF  FE9
3328:  MOVFF  03,FEA
332C:  MOVFF  FEF,230
3330:  MOVF   FF2,W
3332:  MOVWF  00
3334:  BCF    FF2.7
3336:  MOVFF  22E,FA9
333A:  MOVFF  230,FA8
333E:  BCF    FA6.6
3340:  BCF    FA6.7
3342:  BSF    FA6.2
3344:  MOVLB  F
3346:  MOVLW  55
3348:  MOVWF  FA7
334A:  MOVLW  AA
334C:  MOVWF  FA7
334E:  BSF    FA6.1
3350:  BTFSC  FA6.1
3352:  BRA    3350
3354:  BCF    FA6.2
3356:  MOVF   00,W
3358:  IORWF  FF2,F
335A:  MOVLB  0
335C:  BRA    32F6
335E:  MOVLB  2
3360:  MOVLB  0
3362:  GOTO   338A (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void read_int_eeprom(UINT addr, UCHAR *data, UINT size) 
....................   { 
....................   while (size--) 
*
101E:  MOVLB  2
1020:  MOVFF  22D,03
1024:  MOVF   x2C,W
1026:  BTFSC  FD8.2
1028:  DECF   x2D,F
102A:  DECF   x2C,F
102C:  IORWF  03,W
102E:  BZ    106E
....................     *data++ = read_eeprom(addr++); 
1030:  MOVF   x2B,W
1032:  MOVWF  03
1034:  MOVF   x2A,W
1036:  INCF   x2A,F
1038:  BTFSC  FD8.2
103A:  INCF   x2B,F
103C:  MOVWF  FE9
103E:  MOVFF  03,FEA
1042:  MOVF   x29,W
1044:  MOVWF  03
1046:  MOVF   x28,W
1048:  INCF   x28,F
104A:  BTFSC  FD8.2
104C:  INCF   x29,F
104E:  MOVWF  x30
1050:  MOVFF  03,231
1054:  MOVFF  FF2,232
1058:  BCF    FF2.7
105A:  MOVFF  230,FA9
105E:  BCF    FA6.6
1060:  BCF    FA6.7
1062:  BSF    FA6.0
1064:  MOVF   FA8,W
1066:  BTFSC  x32.7
1068:  BSF    FF2.7
106A:  MOVWF  FEF
106C:  BRA    1020
106E:  MOVLB  0
1070:  GOTO   10A6 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void write_setup(void) 
....................   { 
....................   if (allow_write == 2975) 
*
3366:  MOVLB  1
3368:  MOVF   x06,W
336A:  SUBLW  9F
336C:  BNZ   338C
336E:  MOVF   x07,W
3370:  SUBLW  0B
3372:  BNZ   338C
....................     write_int_eeprom(0, &setup, sizeof(setup)); 
3374:  MOVLB  2
3376:  CLRF   x29
3378:  CLRF   x28
337A:  CLRF   x2B
337C:  MOVLW  A8
337E:  MOVWF  x2A
3380:  CLRF   x2D
3382:  MOVLW  5E
3384:  MOVWF  x2C
3386:  MOVLB  0
3388:  BRA    32F6
338A:  MOVLB  1
....................   allow_write = 0; 
338C:  CLRF   x07
338E:  CLRF   x06
3390:  MOVLB  0
3392:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... void read_setup(void) 
....................   { 
....................   read_int_eeprom(0, &setup, sizeof(setup)); 
*
1090:  MOVLB  2
1092:  CLRF   x29
1094:  CLRF   x28
1096:  CLRF   x2B
1098:  MOVLW  A8
109A:  MOVWF  x2A
109C:  CLRF   x2D
109E:  MOVLW  5E
10A0:  MOVWF  x2C
10A2:  MOVLB  0
10A4:  BRA    101E
....................   if (setup.clock_source == 0xFF || setup.data_source == 0xFF) 
10A6:  INCFSZ xAF,W
10A8:  BRA    10AC
10AA:  BRA    10B0
10AC:  INCFSZ xB0,W
10AE:  BRA    10C0
....................     memset(&setup, 0, sizeof(setup)); 
10B0:  CLRF   FEA
10B2:  MOVLW  A8
10B4:  MOVWF  FE9
10B6:  CLRF   00
10B8:  CLRF   02
10BA:  MOVLW  5E
10BC:  MOVWF  01
10BE:  BRA    1074
10C0:  RETURN 0
....................   } 
....................  
.................... //-------------------------------------------------------------- 
.................... //============================================================================= 
.................... // VERSION 3.3 US 30.03.2016 
.................... //============================================================================= 
.................... UINT convert_power(UINT analog) 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
....................     { 
....................   if (analog >= Ptrans[idx].analog && analog < Ptrans[idx+1].analog) 
....................     return Ptrans[idx].Pout; 
....................   } 
....................   return 0; 
....................   } 
....................  
.................... //============================================================================= 
.................... // VERSION 3.3  04.052016 
.................... //============================================================================= 
.................... UINT convert_power1(UINT analog)// FFWR POWER 
....................   { 
....................   UINT idx; 
....................   for (idx = 0; idx < 20; idx++) 
*
1312:  MOVLB  2
1314:  CLRF   x2F
1316:  CLRF   x2E
1318:  MOVF   x2F,F
131A:  BNZ   13EA
131C:  MOVF   x2E,W
131E:  SUBLW  13
1320:  BNC   13EA
....................     { 
....................   if (analog >= Ptrans1[idx].analog1 && analog < Ptrans1[idx+1].analog1) 
1322:  RLCF   x2E,W
1324:  MOVWF  x30
1326:  RLCF   x2F,W
1328:  MOVWF  x31
132A:  RLCF   x30,F
132C:  RLCF   x31,F
132E:  MOVLW  FC
1330:  ANDWF  x30,F
1332:  MOVFF  231,03
1336:  MOVF   x30,W
1338:  MOVFF  FF2,232
133C:  BCF    FF2.7
133E:  MOVLB  0
1340:  RCALL  0B84
1342:  TBLRD*+
1344:  MOVFF  FF5,03
1348:  MOVLB  2
134A:  BTFSC  x32.7
134C:  BSF    FF2.7
134E:  MOVWF  01
1350:  MOVF   03,W
1352:  SUBWF  x2D,W
1354:  BNC   13E2
1356:  BNZ   135E
1358:  MOVF   01,W
135A:  SUBWF  x2C,W
135C:  BNC   13E2
135E:  MOVLW  01
1360:  ADDWF  x2E,W
1362:  MOVWF  x32
1364:  MOVLW  00
1366:  ADDWFC x2F,W
1368:  MOVWF  x33
136A:  RLCF   x32,F
136C:  RLCF   x33,F
136E:  RLCF   x32,F
1370:  RLCF   x33,F
1372:  MOVLW  FC
1374:  ANDWF  x32,F
1376:  MOVFF  233,03
137A:  MOVF   x32,W
137C:  MOVFF  FF2,234
1380:  BCF    FF2.7
1382:  MOVLB  0
1384:  CALL   0B84
1388:  TBLRD*+
138A:  MOVFF  FF5,03
138E:  MOVLB  2
1390:  BTFSC  x34.7
1392:  BSF    FF2.7
1394:  MOVWF  01
1396:  MOVF   x2D,W
1398:  SUBWF  03,W
139A:  BNC   13E2
139C:  BNZ   13A4
139E:  MOVF   01,W
13A0:  SUBWF  x2C,W
13A2:  BC    13E2
....................     return Ptrans1[idx].Pout1; 
13A4:  RLCF   x2E,W
13A6:  MOVWF  x30
13A8:  RLCF   x2F,W
13AA:  MOVWF  x31
13AC:  RLCF   x30,F
13AE:  RLCF   x31,F
13B0:  MOVLW  FC
13B2:  ANDWF  x30,F
13B4:  MOVLW  02
13B6:  ADDWF  x30,W
13B8:  MOVWF  01
13BA:  MOVLW  00
13BC:  ADDWFC x31,W
13BE:  MOVWF  03
13C0:  MOVF   01,W
13C2:  MOVFF  FF2,230
13C6:  BCF    FF2.7
13C8:  MOVLB  0
13CA:  CALL   0B84
13CE:  TBLRD*+
13D0:  MOVFF  FF5,03
13D4:  MOVLB  2
13D6:  BTFSC  x30.7
13D8:  BSF    FF2.7
13DA:  MOVWF  01
13DC:  MOVFF  03,02
13E0:  BRA    13F0
13E2:  INCF   x2E,F
13E4:  BTFSC  FD8.2
13E6:  INCF   x2F,F
13E8:  BRA    1318
....................   } 
....................   return 0; 
13EA:  MOVLW  00
13EC:  MOVWF  01
13EE:  MOVWF  02
13F0:  MOVLB  0
13F2:  RETURN 0
....................   } 
....................  
.................... //============================================================================= 
.................... // this functions sets the POWER_EN discrete high / low 
.................... // depanding on the state of 1 discrete (STANDBY) and 2 variables 
.................... // (setup.cot & setup.pwr). 
.................... // the function also calls 'update_all' when a transition from  
.................... // low to high occurs. 
.................... // the truth table for setting the discrete is: 
....................  
.................... // SB cot pwr Output 
.................... // 0   0   0    H 
.................... // 0   0   1    L 
.................... // 0   1   0    L 
.................... // 0   1   1    H 
.................... // 1   0   0    L 
.................... // 1   0   1    H 
.................... // 1   1   0    H 
.................... // 1   1   1    L 
....................  
.................... // the reduction of this function is:  
.................... // not(sb^cot^pwr) or 
.................... // sb ^ (cot == pwr) (used below) 
.................... //============================================================================= 
.................... void set_power_en()  
*
1E36:  MOVLB  2
1E38:  MOVWF  x2E
1E3A:  MOVLB  0
1E3C:  MOVF   xAA,W
1E3E:  SUBWF  xF8,W
1E40:  BNZ   1E48
1E42:  MOVF   xAB,W
1E44:  SUBWF  xF9,W
1E46:  BZ    1E4C
1E48:  MOVLW  00
1E4A:  BRA    1E4E
1E4C:  MOVLW  01
1E4E:  MOVLB  2
1E50:  XORWF  x2E,W
1E52:  MOVWF  x2C
1E54:  CLRF   x2D
.................... { 
....................     static UINT last_val = 0; // saving the last state of the discrete 
....................     UINT dval = input(STANDBY) ^ (setup.cot == setup.pwr); 
....................  
....................     // set the discrete 
....................     if(dval)  
1E56:  MOVF   x2C,W
1E58:  IORWF  x2D,W
1E5A:  BZ    1E60
....................     { 
....................         output_high(POWER_EN); 
1E5C:  BSF    F8C.6
....................     } 
1E5E:  BRA    1E7E
....................     else 
....................     { 
....................         output_low(POWER_EN);       //yehuda shut down the fpga 
1E60:  BCF    F8C.6
....................         if(setup.cot == 1)  
1E62:  MOVLB  0
1E64:  DECFSZ xF8,W
1E66:  BRA    1E7C
1E68:  MOVF   xF9,F
1E6A:  BNZ   1E7C
....................         { 
....................             // this was a special case in before the refactoring 
....................             // it is not known why the call is only when cot == 1 
....................             set_AD5314(DAC_POS_VOLT, 0);     
1E6C:  MOVLW  02
1E6E:  MOVLB  2
1E70:  MOVWF  x2E
1E72:  CLRF   x30
1E74:  CLRF   x2F
1E76:  MOVLB  0
1E78:  CALL   10C2
1E7C:  MOVLB  2
....................         } 
....................     } 
....................  
....................     // call update all on low to high transition 
....................     if(last_val == 0 && dval == 1)  
1E7E:  MOVLB  1
1E80:  MOVF   xA5,F
1E82:  BNZ   1EAC
1E84:  MOVF   xA6,F
1E86:  BNZ   1EAC
1E88:  MOVLB  2
1E8A:  DECFSZ x2C,W
1E8C:  BRA    1E90
1E8E:  BRA    1E94
1E90:  MOVLB  1
1E92:  BRA    1EAC
1E94:  MOVF   x2D,F
1E96:  BTFSC  FD8.2
1E98:  BRA    1E9E
1E9A:  MOVLB  1
1E9C:  BRA    1EAC
....................     { 
....................         delay_ms(50); 
1E9E:  MOVLW  32
1EA0:  MOVWF  x3E
1EA2:  MOVLB  0
1EA4:  CALL   0F54
....................         update_all();    ////tamir 3/7/18  
1EA8:  RCALL  1DCA
1EAA:  MOVLB  1
....................     } 
....................     last_val = dval; 
1EAC:  MOVFF  22D,1A6
1EB0:  MOVFF  22C,1A5
....................     gl_current_power_en_value = dval; 
1EB4:  MOVFF  22D,111
1EB8:  MOVFF  22C,110
1EBC:  MOVLB  0
1EBE:  GOTO   2090 (RETURN)
.................... } 
....................  
.................... //============================================================================= 
.................... // this function returns the requested power level (SV / VL) based on  
.................... // 3 parameters, rc, rp and the discrete HILOW 
.................... // in high power mode (rc=1), if the discrete & rp are equal the function should 
.................... // return SV (power_level) if not, it should return VL (low_power_level). 
.................... // in low power mode (rc=0), if the discrete & rp are equal the function should 
.................... // return VL (low_power_level) if not, it should return SV (power_level). 
.................... //============================================================================= 
.................... UINT get_requested_power_level() { 
....................     UINT levels[2]; 
....................     int l; 
....................     levels[0] = power_level; 
1EC2:  MOVFF  1A,22D
1EC6:  MOVFF  19,22C
....................     levels[1] = low_power_level; 
1ECA:  MOVFF  18,22F
1ECE:  MOVFF  17,22E
....................  
....................     l = (setup.rc & 0x1) ^ (input(HILO) == setup.rp); 
1ED2:  MOVF   xFA,W
1ED4:  ANDLW  01
1ED6:  MOVLB  2
1ED8:  MOVWF  x31
1EDA:  CLRF   x32
1EDC:  MOVLW  00
1EDE:  BTFSC  F83.2
1EE0:  MOVLW  01
1EE2:  MOVLB  0
1EE4:  SUBWF  xFC,W
1EE6:  BNZ   1EEC
1EE8:  MOVF   xFD,F
1EEA:  BZ    1EF0
1EEC:  MOVLW  00
1EEE:  BRA    1EF2
1EF0:  MOVLW  01
1EF2:  MOVLB  2
1EF4:  XORWF  x31,W
1EF6:  MOVWF  x30
....................      
....................     gl_current_power_level = levels[l]; 
1EF8:  BCF    FD8.0
1EFA:  RLCF   x30,W
1EFC:  CLRF   03
1EFE:  ADDLW  2C
1F00:  MOVWF  FE9
1F02:  MOVLW  02
1F04:  ADDWFC 03,W
1F06:  MOVWF  FEA
1F08:  MOVFF  FEC,10F
1F0C:  MOVF   FED,F
1F0E:  MOVFF  FEF,10E
....................     return levels[l]; 
1F12:  BCF    FD8.0
1F14:  RLCF   x30,W
1F16:  CLRF   03
1F18:  ADDLW  2C
1F1A:  MOVWF  FE9
1F1C:  MOVLW  02
1F1E:  ADDWFC 03,W
1F20:  MOVWF  FEA
1F22:  MOVFF  FEF,01
1F26:  INCF   FE9,F
1F28:  MOVF   FEF,W
1F2A:  DECF   FE9,F
1F2C:  MOVWF  02
1F2E:  MOVLB  0
1F30:  GOTO   2092 (RETURN)
.................... } 
....................  
.................... //============================================================================= 
.................... void power_output(void) 
....................   { 
....................   UINT power, level; 
....................   if (manual_pos != 0xFFFF) 
1F34:  INCFSZ 21,W
1F36:  BRA    1F3E
1F38:  INCFSZ 22,W
1F3A:  BRA    1F3E
1F3C:  BRA    1F96
....................     { 
....................     if (TMR_100MS_POWER) 
1F3E:  BTFSS  28.3
1F40:  BRA    1F94
....................       { 
....................       TMR_100MS_POWER = 0; 
1F42:  BCF    28.3
....................       set_AD5314(DAC_POS_VOLT, manual_pos); 
1F44:  MOVLW  02
1F46:  MOVLB  2
1F48:  MOVWF  x2E
1F4A:  MOVFF  22,230
1F4E:  MOVFF  21,22F
1F52:  MOVLB  0
1F54:  CALL   10C2
....................       set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
1F58:  MOVLW  14
1F5A:  MOVWF  01
1F5C:  MOVF   FC2,W
1F5E:  ANDLW  83
1F60:  IORWF  01,W
1F62:  MOVWF  FC2
....................       delay_us(20); 
1F64:  MOVLW  1A
1F66:  MOVWF  00
1F68:  DECFSZ 00,F
1F6A:  BRA    1F68
1F6C:  NOP   
....................       power = read_adc(); 
1F6E:  BSF    FC2.1
1F70:  BTFSC  FC2.1
1F72:  BRA    1F70
1F74:  MOVFF  FC4,229
1F78:  MOVLB  2
1F7A:  MOVFF  FC3,228
....................       current_power = convert_power1(power); 
1F7E:  MOVFF  229,22D
1F82:  MOVFF  228,22C
1F86:  MOVLB  0
1F88:  CALL   1312
1F8C:  MOVFF  02,10D
1F90:  MOVFF  01,10C
....................       } 
....................  
....................  
....................     return; 
1F94:  BRA    211E
....................     } 
....................      
....................   if (setup.frequency < FREQ_LOW_THRESH){ 
1F96:  MOVF   xB7,W
1F98:  SUBLW  58
1F9A:  BNC   1FDA
1F9C:  BNZ   1FA4
1F9E:  MOVF   xB6,W
1FA0:  SUBLW  29
1FA2:  BNC   1FDA
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[0]); 
1FA4:  MOVLW  06
1FA6:  MOVLB  2
1FA8:  MOVWF  x2E
1FAA:  MOVFF  BC,230
1FAE:  MOVFF  BB,22F
1FB2:  MOVLB  0
1FB4:  CALL   10C2
.................... 	delay_ms(1); 
1FB8:  MOVLW  01
1FBA:  MOVLB  2
1FBC:  MOVWF  x3E
1FBE:  MOVLB  0
1FC0:  CALL   0F54
.................... 	set_AD5314(DAC_CONT_VOLT, setup.cont_voltage[0]); 
1FC4:  MOVLW  0A
1FC6:  MOVLB  2
1FC8:  MOVWF  x2E
1FCA:  MOVFF  C2,230
1FCE:  MOVFF  C1,22F
1FD2:  MOVLB  0
1FD4:  CALL   10C2
.................... 	} 
1FD8:  BRA    2052
....................   else if (setup.frequency < FREQ_HIGH_THRESH){ 
1FDA:  MOVF   xB7,W
1FDC:  SUBLW  5A
1FDE:  BNC   201E
1FE0:  BNZ   1FE8
1FE2:  MOVF   xB6,W
1FE4:  SUBLW  F9
1FE6:  BNC   201E
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[1]); 
1FE8:  MOVLW  06
1FEA:  MOVLB  2
1FEC:  MOVWF  x2E
1FEE:  MOVFF  BE,230
1FF2:  MOVFF  BD,22F
1FF6:  MOVLB  0
1FF8:  CALL   10C2
.................... 	delay_ms(1); 
1FFC:  MOVLW  01
1FFE:  MOVLB  2
2000:  MOVWF  x3E
2002:  MOVLB  0
2004:  CALL   0F54
.................... 	set_AD5314(DAC_CONT_VOLT, setup.cont_voltage[1]); 
2008:  MOVLW  0A
200A:  MOVLB  2
200C:  MOVWF  x2E
200E:  MOVFF  C4,230
2012:  MOVFF  C3,22F
2016:  MOVLB  0
2018:  CALL   10C2
.................... 	} 
201C:  BRA    2052
....................   else{ 
....................     set_AD5314(DAC_NEG_VOLT, setup.negative_voltage[2]); 
201E:  MOVLW  06
2020:  MOVLB  2
2022:  MOVWF  x2E
2024:  MOVFF  C0,230
2028:  MOVFF  BF,22F
202C:  MOVLB  0
202E:  CALL   10C2
.................... 	delay_ms(1); 
2032:  MOVLW  01
2034:  MOVLB  2
2036:  MOVWF  x3E
2038:  MOVLB  0
203A:  CALL   0F54
.................... 	set_AD5314(DAC_CONT_VOLT, setup.cont_voltage[2]); 
203E:  MOVLW  0A
2040:  MOVLB  2
2042:  MOVWF  x2E
2044:  MOVFF  C6,230
2048:  MOVFF  C5,22F
204C:  MOVLB  0
204E:  CALL   10C2
.................... 	} 
....................  
....................   set_adc_channel(A2D_POWER); // select forward power input A2D_POWER 
2052:  MOVLW  14
2054:  MOVWF  01
2056:  MOVF   FC2,W
2058:  ANDLW  83
205A:  IORWF  01,W
205C:  MOVWF  FC2
....................   delay_us(20); 
205E:  MOVLW  1A
2060:  MOVWF  00
2062:  DECFSZ 00,F
2064:  BRA    2062
2066:  NOP   
....................   power = read_adc(); 
2068:  BSF    FC2.1
206A:  BTFSC  FC2.1
206C:  BRA    206A
206E:  MOVFF  FC4,229
2072:  MOVLB  2
2074:  MOVFF  FC3,228
....................   
....................  
....................   current_power = convert_power1(power); 
2078:  MOVFF  229,22D
207C:  MOVFF  228,22C
2080:  MOVLB  0
2082:  CALL   1312
2086:  MOVFF  02,10D
208A:  MOVFF  01,10C
....................   set_power_en();      
208E:  BRA    1E30
....................    
....................   level = get_requested_power_level(); 
2090:  BRA    1EC2
2092:  MOVFF  02,22B
2096:  MOVFF  01,22A
....................  
....................  
....................   if (power > level + DEADBAND || power < level - DEADBAND) 
209A:  MOVLW  06
209C:  MOVLB  2
209E:  ADDWF  x2A,W
20A0:  MOVWF  01
20A2:  MOVLW  00
20A4:  ADDWFC x2B,W
20A6:  MOVWF  03
20A8:  MOVF   03,W
20AA:  SUBWF  x29,W
20AC:  BNC   20B6
20AE:  BNZ   20D4
20B0:  MOVF   x28,W
20B2:  SUBWF  01,W
20B4:  BNC   20D4
20B6:  MOVLW  06
20B8:  SUBWF  x2A,W
20BA:  MOVWF  00
20BC:  MOVLW  00
20BE:  SUBWFB x2B,W
20C0:  MOVWF  03
20C2:  MOVFF  00,01
20C6:  MOVF   x29,W
20C8:  SUBWF  03,W
20CA:  BNC   2120
20CC:  BNZ   20D4
20CE:  MOVF   01,W
20D0:  SUBWF  x28,W
20D2:  BC    2120
....................     { 
....................     if (power < level) 
20D4:  MOVF   x29,W
20D6:  SUBWF  x2B,W
20D8:  BNC   20FA
20DA:  BNZ   20E2
20DC:  MOVF   x2A,W
20DE:  SUBWF  x28,W
20E0:  BC    20FA
....................       { 
....................       if (power_control <= 1010) 
20E2:  MOVF   1C,W
20E4:  SUBLW  03
20E6:  BNC   20F8
20E8:  BNZ   20F0
20EA:  MOVF   1B,W
20EC:  SUBLW  F2
20EE:  BNC   20F8
....................         power_control += DEADBAND / 2;		 
20F0:  MOVLW  03
20F2:  ADDWF  1B,F
20F4:  MOVLW  00
20F6:  ADDWFC 1C,F
....................       } 
20F8:  BRA    210C
....................     else if (power_control >= 150)			 
20FA:  MOVF   1C,F
20FC:  BNZ   2104
20FE:  MOVF   1B,W
2100:  SUBLW  95
2102:  BC    210C
....................       { 
....................       power_control -= DEADBAND / 2; 
2104:  MOVLW  03
2106:  SUBWF  1B,F
2108:  MOVLW  00
210A:  SUBWFB 1C,F
....................       } 
....................     set_AD5314(DAC_POS_VOLT, power_control); 
210C:  MOVLW  02
210E:  MOVWF  x2E
2110:  MOVFF  1C,230
2114:  MOVFF  1B,22F
2118:  MOVLB  0
211A:  CALL   10C2
211E:  MOVLB  2
....................     }	 
2120:  MOVLB  0
2122:  RETURN 0
.................... } 
....................  
....................  
.................... //============================================================================= 
.................... #separate 
.................... void delay_mst(UINT delay) 
....................   { 
....................   TMR_1MS_DELAY = 0; 
....................   while (delay) 
....................     { 
....................     if (TMR_1MS_DELAY) 
....................       { 
....................       TMR_1MS_DELAY = 0; 
....................       delay--; 
....................       } 
....................     } 
....................   } 
....................  
.................... //============================================================================= 
.................... void init_io_ports(void) 
....................   { 
....................   output_a(0); 
*
0F7E:  CLRF   F89
....................   output_b(0); 
0F80:  CLRF   F8A
....................   output_c(0); 
0F82:  CLRF   F8B
....................   output_d(0); 
0F84:  CLRF   F8C
....................   output_e(0); 
0F86:  CLRF   F8D
....................   set_tris_a(0b11100001); 
0F88:  MOVLW  E1
0F8A:  MOVWF  F92
....................   set_tris_b(0b11010001);     
0F8C:  MOVLW  D1
0F8E:  MOVWF  F93
....................   set_tris_c(0b11010001); 
0F90:  MOVWF  F94
....................   set_tris_d(0b10001110); 
0F92:  MOVLW  8E
0F94:  MOVWF  F95
....................   set_tris_e(0b11111011); 
0F96:  BSF    F96.0
0F98:  BSF    F96.1
0F9A:  BCF    F96.2
0F9C:  BSF    F96.3
0F9E:  GOTO   0FE2 (RETURN)
....................   } 
....................  
.................... //============================================================================= 
.................... void init_system(void) 
....................   { 
....................  
....................   setup_timer_2(T2_DIV_BY_4,99,10);    // 1.0 ms interrupt 
*
0FB8:  MOVLW  48
0FBA:  IORLW  05
0FBC:  MOVWF  FBA
0FBE:  MOVLW  63
0FC0:  MOVWF  FBB
....................  
....................   setup_timer_3(T3_DISABLED | T3_DIV_BY_1); 
0FC2:  CLRF   FB4
0FC4:  CLRF   FB1
....................  
....................   setup_timer_4(T4_DIV_BY_4,99,1);     // 100 us interrupt 
0FC6:  MOVLW  00
0FC8:  IORLW  05
0FCA:  MOVLB  F
0FCC:  MOVWF  x51
0FCE:  MOVLW  63
0FD0:  MOVWF  x52
....................  
....................   setup_timer_5(T5_DISABLED | T5_DIV_BY_1); 
0FD2:  CLRF   x4D
0FD4:  CLRF   x4E
....................  
....................   setup_timer_6(T6_DISABLED,0,1); 
0FD6:  MOVLW  00
0FD8:  MOVWF  x4A
0FDA:  MOVLW  00
0FDC:  MOVWF  x4B
....................  
....................   init_io_ports(); 
0FDE:  MOVLB  0
0FE0:  BRA    0F7E
....................  
....................   setup_adc_ports(sAN0|sAN4|sAN5|sAN6|sAN11); 
0FE2:  MOVF   FC1,W
0FE4:  ANDLW  F0
0FE6:  MOVWF  FC1
0FE8:  MOVLW  21
0FEA:  MOVLB  F
0FEC:  MOVWF  x38
0FEE:  MOVLW  03
0FF0:  MOVWF  x3C
0FF2:  MOVLW  10
0FF4:  MOVWF  x39
0FF6:  MOVLW  00
0FF8:  MOVWF  x3A
0FFA:  MOVWF  x3B
....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
0FFC:  MOVF   FC0,W
0FFE:  ANDLW  C0
1000:  IORLW  25
1002:  MOVWF  FC0
1004:  BSF    FC0.7
1006:  BSF    FC2.0
....................  
....................   setup_comparator(NC_NC_NC_NC); 
1008:  CLRF   F77
100A:  MOVLW  04
100C:  MOVWF  F78
100E:  MOVWF  F79
....................  
....................   COM1_init(); 
1010:  MOVLB  0
1012:  RCALL  0FA2
....................   enable_interrupts(INT_TIMER2); 
1014:  BSF    F9D.1
....................   enable_interrupts(GLOBAL); 
1016:  MOVLW  C0
1018:  IORWF  FF2,F
101A:  GOTO   6C08 (RETURN)
....................   } 
....................  
....................  
.................... //============================================================================= 
.................... void update_all(void) 
....................   { 
....................   UINT freq, bitr; 
....................   freq = setup.frequency; 
*
1DCA:  MOVFF  B7,22F
1DCE:  MOVFF  B6,22E
....................   delay_ms(5); 
1DD2:  MOVLW  05
1DD4:  MOVLB  2
1DD6:  MOVWF  x3E
1DD8:  MOVLB  0
1DDA:  CALL   0F54
....................   PLL_compute_freq_parameters(freq); 
1DDE:  MOVFF  22F,233
1DE2:  MOVFF  22E,232
1DE6:  CALL   14E4
....................   delay_ms(5); 
1DEA:  MOVLW  05
1DEC:  MOVLB  2
1DEE:  MOVWF  x3E
1DF0:  MOVLB  0
1DF2:  CALL   0F54
....................   PLL_update(); 
1DF6:  RCALL  17BC
....................   delay_ms(5); 
1DF8:  MOVLW  05
1DFA:  MOVLB  2
1DFC:  MOVWF  x3E
1DFE:  MOVLB  0
1E00:  CALL   0F54
....................   FPGA_set_reg0(); 
1E04:  RCALL  187C
....................   delay_ms(5); 
1E06:  MOVLW  05
1E08:  MOVLB  2
1E0A:  MOVWF  x3E
1E0C:  MOVLB  0
1E0E:  CALL   0F54
....................   FPGA_set_reg6(); 
1E12:  RCALL  18D8
....................   delay_ms(5); 
1E14:  MOVLW  05
1E16:  MOVLB  2
1E18:  MOVWF  x3E
1E1A:  MOVLB  0
1E1C:  CALL   0F54
....................   FPGA_set_bitrate(); 
1E20:  RCALL  1CD6
....................   bitr = setup.bitrate; 
1E22:  MOVFF  A9,231
1E26:  MOVFF  A8,230
....................   power_control = 0; 
1E2A:  CLRF   1C
1E2C:  CLRF   1B
1E2E:  RETURN 0
....................   } 
....................  
.................... void timer_tick()  
.................... { 
....................     if(timerTick_1ms == 1) { 
*
22B0:  DECFSZ 30,W
22B2:  BRA    2354
....................         timerTick_1ms = 0; 
22B4:  CLRF   30
....................         if (++TMR_SendStatus >= (setup.Block_per_second / 2) && StartStatusFlag == 1 && setup.UART_Status == 1&& (stay_on == 1 || stay_on == 0)) // VERSION 3.3 17.1.2016 
22B6:  INCF   2B,F
22B8:  BTFSC  FD8.2
22BA:  INCF   2C,F
22BC:  BCF    FD8.0
22BE:  MOVLB  1
22C0:  RRCF   x03,W
22C2:  MOVWF  03
22C4:  RRCF   x02,W
22C6:  MOVWF  02
22C8:  MOVWF  01
22CA:  MOVF   03,W
22CC:  SUBWF  2C,W
22CE:  BNC   2318
22D0:  BNZ   22D8
22D2:  MOVF   01,W
22D4:  SUBWF  2B,W
22D6:  BNC   2318
22D8:  DECFSZ 2F,W
22DA:  BRA    2318
22DC:  MOVLB  0
22DE:  DECFSZ xFF,W
22E0:  BRA    22E4
22E2:  BRA    22E8
22E4:  MOVLB  1
22E6:  BRA    2318
22E8:  MOVLB  1
22EA:  DECFSZ x12,W
22EC:  BRA    22F2
22EE:  MOVF   x13,F
22F0:  BZ    22FA
22F2:  MOVF   x12,F
22F4:  BNZ   2318
22F6:  MOVF   x13,F
22F8:  BNZ   2318
....................         { 
....................             TMR_SendStatus = 0; 
22FA:  CLRF   2C
22FC:  CLRF   2B
....................             SendStatusFlag = 1; 
22FE:  MOVLW  01
2300:  MOVWF  2D
....................             TX_Counter++; //VERSION 3.3 21.3.2016 count the number of times the status block is sent 
2302:  INCF   x16,F
2304:  BTFSC  FD8.2
2306:  INCF   x17,F
....................             if (!ttccp_login) 
2308:  MOVF   x34,F
230A:  BNZ   2318
....................             { 
....................               	COM1_send_block(BINARY_STATUS_LENTGH); 
230C:  CLRF   xB9
230E:  MOVLW  1A
2310:  MOVWF  xB8
2312:  MOVLB  0
2314:  BRA    229A
2316:  MOVLB  1
....................             } 
....................         } 
....................         if (++TMR_1mS_Cnt >= 10) 
2318:  INCF   24,F
231A:  MOVF   24,W
231C:  SUBLW  09
231E:  BC    2356
....................         { 
....................             TMR_1mS_Cnt = 0; 
2320:  CLRF   24
....................             ++TMR_SendStatus; //1mSec count for rhe status VERSION 3.3 20.2.2016 
2322:  INCF   2B,F
2324:  BTFSC  FD8.2
2326:  INCF   2C,F
....................             TMR_10mS_Count++; 
2328:  INCF   25,F
....................             TMR_10mS_Flags = 0xFF; 
232A:  SETF   26
....................             if (++TMR_10mS_Cnt >= 10) 
232C:  INCF   27,F
232E:  MOVF   27,W
2330:  SUBLW  09
2332:  BC    2356
....................             { 
....................                 TMR_10mS_Cnt = 0; 
2334:  CLRF   27
....................                 TMR_100mS_Flags = 0xFF; 
2336:  SETF   28
....................                 if (++TMR_100mS_Cnt >= 10) 
2338:  INCF   29,F
233A:  MOVF   29,W
233C:  SUBLW  09
233E:  BC    2356
....................                 { 
....................                     TMR_100mS_Cnt = 0; 
2340:  CLRF   29
....................                     TMR_1sec_Flags = 0xFF; 
2342:  SETF   2A
....................                     if (++TMR_StartStatus >= setup.UART_Time) // VERSION 3.3 17.1.2016 
2344:  INCF   2E,F
2346:  MOVLB  0
2348:  MOVF   xFE,W
234A:  SUBWF  2E,W
234C:  BNC   2354
....................            			{ 
....................            			    TMR_StartStatus = 0; 
234E:  CLRF   2E
....................             			StartStatusFlag = 1; 
2350:  MOVLW  01
2352:  MOVWF  2F
2354:  MOVLB  1
....................             		} 
....................                 } 
....................             } 
....................         } 
....................     } 
2356:  MOVLB  0
2358:  GOTO   6D50 (RETURN)
.................... } 
....................  
....................  
.................... //============================================================================= 
.................... void main(void) 
*
6B66:  CLRF   FF8
6B68:  BCF    FD0.7
6B6A:  BSF    07.7
6B6C:  MOVLW  70
6B6E:  MOVWF  FD3
6B70:  BCF    F9B.6
6B72:  BCF    F9B.7
6B74:  BCF    FB8.3
6B76:  MOVLW  19
6B78:  MOVWF  FAF
6B7A:  MOVLW  A6
6B7C:  MOVWF  FAC
6B7E:  MOVLW  90
6B80:  MOVWF  FAB
6B82:  SETF   20
6B84:  SETF   1F
6B86:  SETF   22
6B88:  SETF   21
6B8A:  CLRF   2C
6B8C:  CLRF   2B
6B8E:  CLRF   2D
6B90:  CLRF   2E
6B92:  CLRF   2F
6B94:  CLRF   30
6B96:  MOVLB  1
6B98:  CLRF   x07
6B9A:  CLRF   x06
6B9C:  CLRF   x0F
6B9E:  CLRF   x0E
6BA0:  CLRF   x11
6BA2:  CLRF   x10
6BA4:  CLRF   x13
6BA6:  CLRF   x12
6BA8:  CLRF   x17
6BAA:  CLRF   x16
6BAC:  MOVLW  01
6BAE:  MOVWF  x34
6BB0:  MOVWF  x42
6BB2:  MOVWF  x43
6BB4:  MOVFF  FC,1A0
6BB8:  MOVFF  AA,1A1
6BBC:  CLRF   xA4
6BBE:  CLRF   xA3
6BC0:  CLRF   xA6
6BC2:  CLRF   xA5
6BC4:  MOVF   FC1,W
6BC6:  ANDLW  F0
6BC8:  MOVWF  FC1
6BCA:  MOVLW  00
6BCC:  MOVLB  F
6BCE:  MOVWF  x38
6BD0:  MOVWF  x3C
6BD2:  MOVWF  x39
6BD4:  MOVWF  x3A
6BD6:  MOVWF  x3B
6BD8:  MOVLB  1
6BDA:  CLRF   x88
6BDC:  CLRF   F77
6BDE:  CLRF   F78
6BE0:  CLRF   F79
6BE2:  MOVLW  03
6BE4:  MOVWF  xA8
6BE6:  MOVLW  E8
6BE8:  MOVWF  xA7
....................   { 
....................   int16 vouta = 1000; 
.................... output_high(POWER_EN); 
6BEA:  BSF    F8C.6
.................... delay_ms(1000); 
6BEC:  MOVLW  04
6BEE:  MOVWF  xB8
6BF0:  MOVLW  FA
6BF2:  MOVLB  2
6BF4:  MOVWF  x3E
6BF6:  MOVLB  0
6BF8:  CALL   0F54
6BFC:  MOVLB  1
6BFE:  DECFSZ xB8,F
6C00:  BRA    6BF0
....................   init_system();  
6C02:  MOVLB  0
6C04:  GOTO   0FB8
....................   output_high(D2A_CSB); 
6C08:  BSF    F8A.1
....................   delay_ms(100); 
6C0A:  MOVLW  64
6C0C:  MOVLB  2
6C0E:  MOVWF  x3E
6C10:  MOVLB  0
6C12:  CALL   0F54
....................   read_setup(); 
6C16:  CALL   1090
....................    
....................   if (!setup.UART_Time)// VERSION 3.3: 10.2.2016  
6C1A:  MOVF   xFE,F
6C1C:  BNZ   6C22
.................... 		setup.UART_Time = 10; 
6C1E:  MOVLW  0A
6C20:  MOVWF  xFE
.................... 	if (setup.Block_per_second == 0) 
6C22:  MOVLB  1
6C24:  MOVF   x02,F
6C26:  BNZ   6C32
6C28:  MOVF   x03,F
6C2A:  BNZ   6C32
....................     setup.Block_per_second = 100; 
6C2C:  CLRF   x03
6C2E:  MOVLW  64
6C30:  MOVWF  x02
.................... 	//setup.UART_Status = 1;// VERSION 3.3: 10.2.2016  
....................   power_level = setup.power_in[setup.power_level]; 
6C32:  BCF    FD8.0
6C34:  MOVLB  0
6C36:  RLCF   xB8,W
6C38:  MOVWF  02
6C3A:  RLCF   xB9,W
6C3C:  MOVWF  03
6C3E:  MOVF   02,W
6C40:  ADDLW  C7
6C42:  MOVWF  FE9
6C44:  MOVLW  00
6C46:  ADDWFC 03,W
6C48:  MOVWF  FEA
6C4A:  MOVFF  FEC,1A
6C4E:  MOVF   FED,F
6C50:  MOVFF  FEF,19
....................   low_power_level = setup.power_in[setup.power_low_level]; 
6C54:  BCF    FD8.0
6C56:  RLCF   xF6,W
6C58:  MOVWF  02
6C5A:  RLCF   xF7,W
6C5C:  MOVWF  03
6C5E:  MOVF   02,W
6C60:  ADDLW  C7
6C62:  MOVWF  FE9
6C64:  MOVLW  00
6C66:  ADDWFC 03,W
6C68:  MOVWF  FEA
6C6A:  MOVFF  FEC,18
6C6E:  MOVF   FED,F
6C70:  MOVFF  FEF,17
....................   power_control = 0; 
6C74:  CLRF   1C
6C76:  CLRF   1B
....................   power_output(); 
6C78:  CALL   1F34
....................    
....................  
....................   PLL_initialize(); 
6C7C:  GOTO   2124
....................   delay_ms(50); 
6C80:  MOVLW  32
6C82:  MOVLB  2
6C84:  MOVWF  x3E
6C86:  MOVLB  0
6C88:  CALL   0F54
....................   update_all(); 
6C8C:  CALL   1DCA
....................  
....................   output_high(D2A_RESET); 
6C90:  BSF    F8A.3
....................   delay_ms(50); 
6C92:  MOVLW  32
6C94:  MOVLB  2
6C96:  MOVWF  x3E
6C98:  MOVLB  0
6C9A:  CALL   0F54
....................   output_low(D2A_RESET); 
6C9E:  BCF    F8A.3
....................    
....................  
....................   COM1_send_str("\r\n"); 
6CA0:  MOVLW  0D
6CA2:  MOVLB  1
6CA4:  MOVWF  xA9
6CA6:  MOVLW  0A
6CA8:  MOVWF  xAA
6CAA:  CLRF   xAB
6CAC:  MOVLW  01
6CAE:  MOVLB  2
6CB0:  MOVWF  x68
6CB2:  MOVLW  A9
6CB4:  MOVWF  x67
6CB6:  MOVLB  0
6CB8:  CALL   21D2
....................   COM1_send_str(VERSION); 
6CBC:  MOVLW  01
6CBE:  MOVWF  FEA
6CC0:  MOVLW  A9
6CC2:  MOVWF  FE9
6CC4:  MOVFF  FF2,1B8
6CC8:  BCF    FF2.7
6CCA:  MOVLW  0F
6CCC:  MOVWF  01
6CCE:  CLRF   FF7
6CD0:  MOVLW  00
6CD2:  CALL   0AA0
6CD6:  TBLRD*-
6CD8:  TBLRD*+
6CDA:  MOVFF  FF5,FEE
6CDE:  DECFSZ 01,F
6CE0:  BRA    6CD8
6CE2:  MOVLB  1
6CE4:  BTFSC  xB8.7
6CE6:  BSF    FF2.7
6CE8:  MOVLW  01
6CEA:  MOVLB  2
6CEC:  MOVWF  x68
6CEE:  MOVLW  A9
6CF0:  MOVWF  x67
6CF2:  MOVLB  0
6CF4:  CALL   21D2
....................   COM1_send_str("\r\n"); 
6CF8:  MOVLW  0D
6CFA:  MOVLB  1
6CFC:  MOVWF  xA9
6CFE:  MOVLW  0A
6D00:  MOVWF  xAA
6D02:  CLRF   xAB
6D04:  MOVLW  01
6D06:  MOVLB  2
6D08:  MOVWF  x68
6D0A:  MOVLW  A9
6D0C:  MOVWF  x67
6D0E:  MOVLB  0
6D10:  CALL   21D2
....................  
....................   set_AD5314(DAC_POS_VOLT, vouta); 
6D14:  MOVLW  02
6D16:  MOVLB  2
6D18:  MOVWF  x2E
6D1A:  MOVFF  1A8,230
6D1E:  MOVFF  1A7,22F
6D22:  MOVLB  0
6D24:  CALL   10C2
....................  
....................  
....................   delay_ms(500); 
6D28:  MOVLW  02
6D2A:  MOVLB  1
6D2C:  MOVWF  xB8
6D2E:  MOVLW  FA
6D30:  MOVLB  2
6D32:  MOVWF  x3E
6D34:  MOVLB  0
6D36:  CALL   0F54
6D3A:  MOVLB  1
6D3C:  DECFSZ xB8,F
6D3E:  BRA    6D2E
....................   output_high(POWER_EN); 
6D40:  BSF    F8C.6
....................  
.................... update_all(); 
6D42:  MOVLB  0
6D44:  CALL   1DCA
.................... output_high(FPGA_RSTN); 
6D48:  BSF    F8B.5
....................  
.................... #ignore_warnings 203 
....................   while (1) 
....................     { 
....................     restart_wdt(); 
6D4A:  CLRWDT
....................     timer_tick(); 
6D4C:  GOTO   22B0
....................     if (TMR_100mS_BLINK) 
6D50:  BTFSS  28.0
6D52:  BRA    6D5C
....................       { 
....................       TMR_100mS_BLINK = 0; 
6D54:  BCF    28.0
....................       output_toggle(LED1); 
6D56:  BTG    F8A.5
....................       delay_us(1); 
6D58:  BRA    6D5A
6D5A:  BRA    6D5C
....................       } 
....................      
....................     if (StartStatusFlag == 1 && (COM1_rxo == 0) && (stay_on == 1 || stay_on == 0)) 
6D5C:  DECFSZ 2F,W
6D5E:  BRA    6D96
6D60:  MOVF   33,F
6D62:  BNZ   6D96
6D64:  MOVLB  1
6D66:  DECFSZ x12,W
6D68:  BRA    6D6E
6D6A:  MOVF   x13,F
6D6C:  BZ    6D82
6D6E:  MOVF   x12,F
6D70:  BTFSC  FD8.2
6D72:  BRA    6D78
6D74:  MOVLB  0
6D76:  BRA    6D96
6D78:  MOVF   x13,F
6D7A:  BTFSC  FD8.2
6D7C:  BRA    6D82
6D7E:  MOVLB  0
6D80:  BRA    6D96
....................     	{         
.................... 				if (setup.UART_Status == 1) 
6D82:  MOVLB  0
6D84:  DECFSZ xFF,W
6D86:  BRA    6D96
.................... 		      { 
.................... 			      stay_on = 1; 
6D88:  MOVLB  1
6D8A:  CLRF   x13
6D8C:  MOVLW  01
6D8E:  MOVWF  x12
.................... 		      //StartStatusFlag = 0; 
.................... 		      //if (!ttccp_login) 
.................... 		        prepare_binary_status();		        
6D90:  MOVLB  0
6D92:  GOTO   2924
.................... 		      }  
.................... 		      
....................        } 
....................  		if (stay_on == 2 || stay_on == 0) //US1 or US0 StartStatusFlag == 0  (StartStatusFlag == 1 && setup.UART_Status == 0)&&  
6D96:  MOVLB  1
6D98:  MOVF   x12,W
6D9A:  SUBLW  02
6D9C:  BNZ   6DA2
6D9E:  MOVF   x13,F
6DA0:  BZ    6DAA
6DA2:  MOVF   x12,F
6DA4:  BNZ   6DBA
6DA6:  MOVF   x13,F
6DA8:  BNZ   6DBA
....................  			{   
.................... 		    
.................... 		   			comm_handler(); 
6DAA:  MOVLB  0
6DAC:  BRA    6B28
.................... 		   			if (COM1_rxo != 0 ) 
6DAE:  MOVF   33,F
6DB0:  BZ    6DBC
.................... 		   				stay_on = 2; 
6DB2:  MOVLB  1
6DB4:  CLRF   x13
6DB6:  MOVLW  02
6DB8:  MOVWF  x12
6DBA:  MOVLB  0
.................... 		  }     
.................... 		power_output(); 
6DBC:  CALL   1F34
.................... 		delay_ms(1);		//yehuda 
6DC0:  MOVLW  01
6DC2:  MOVLB  2
6DC4:  MOVWF  x3E
6DC6:  MOVLB  0
6DC8:  CALL   0F54
6DCC:  BRA    6D4A
....................  
....................  
....................  
....................    } 
....................   } 
....................  
6DCE:  BRA    6DCE

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
