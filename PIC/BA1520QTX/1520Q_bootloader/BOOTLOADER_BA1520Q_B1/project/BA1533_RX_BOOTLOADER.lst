CCS PCH C Compiler, Version 4.137, 5799               30-Jul-18 11:13

               Filename: C:\BA\Software_projects\PIC\1533\BA_1533\BA1533RXv1_0\BOOTLOADER_BA1533_RX_B1\project\BA1533_RX_BOOTLOADER.lst

               ROM used: 5228 bytes (16%)
                         Largest free fragment is 24576
               RAM used: 899 (58%) at main() level
                         1016 (66%) worst case
               Stack:    9 worst case (7 in main + 2 for interrupts)

*
0000:  GOTO   0100
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   00C6
0060:  BTFSS  F9D.4
0062:  GOTO   006C
0066:  BTFSC  F9E.4
0068:  GOTO   0912
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
....................  
....................  
.................... #include <18F45K22.h> 
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #define LOADER_END 0x1FFF 
.................... #include <boot.h> 
.................... #undef LOADER_END 
.................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
.................... #define LOADER_END   0x1FFF 
.................... #define LOADER_SIZE  0x3FF 
....................  
.................... #ifndef _bootloader 
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
....................  
.................... /* when in operational software, keep out of the bootloader sections */ 
.................... #org 0, 0xfff {} 
.................... #org 0x1000, 0x1ffe {} 
....................  
.................... #else 
....................  
.................... /* when in the bootloader, keep out of the operational sections */ 
.................... #org 0x2000, 0x7ffe {} 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=64000000) 
0A7A:  MOVLW  03
0A7C:  MOVWF  FEA
0A7E:  MOVLW  E1
0A80:  MOVWF  FE9
0A82:  MOVF   FEF,W
0A84:  BZ    0AA2
0A86:  MOVLW  14
0A88:  MOVWF  01
0A8A:  CLRF   00
0A8C:  DECFSZ 00,F
0A8E:  BRA    0A8C
0A90:  DECFSZ 01,F
0A92:  BRA    0A8A
0A94:  MOVLW  BF
0A96:  MOVWF  00
0A98:  DECFSZ 00,F
0A9A:  BRA    0A98
0A9C:  BRA    0A9E
0A9E:  DECFSZ FEF,F
0AA0:  BRA    0A86
0AA2:  RETURN 0
.................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
.................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
.................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
.................... #define safe_write_program_memory(address, pointer, size) \ 
....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... #ifndef __CRC8__ 
.................... #define __CRC8__ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... uint8_t crc8(uint8_t* buffer, uint16_t size); 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
0CC6:  MOVLB  3
0CC8:  CLRF   xED
....................  
....................  
....................  
0CCA:  MOVFF  3EC,03
0CCE:  MOVF   xEB,W
0CD0:  BTFSC  FD8.2
0CD2:  DECF   xEC,F
0CD4:  DECF   xEB,F
0CD6:  MOVWF  xEF
0CD8:  MOVFF  03,3F0
0CDC:  MOVF   xEF,F
0CDE:  BNZ   0CE4
0CE0:  MOVF   xF0,F
0CE2:  BZ    0D0C
....................  
0CE4:  MOVFF  3EA,03
0CE8:  MOVF   xE9,W
0CEA:  INCF   xE9,F
0CEC:  BTFSC  FD8.2
0CEE:  INCF   xEA,F
0CF0:  MOVWF  FE9
0CF2:  MOVFF  03,FEA
0CF6:  MOVF   FEF,W
0CF8:  XORWF  xED,W
0CFA:  MOVWF  xEE
....................  
0CFC:  CLRF   03
0CFE:  MOVF   xEE,W
0D00:  MOVLB  0
0D02:  RCALL  0802
0D04:  MOVFF  FE8,3ED
....................  
0D08:  MOVLB  3
0D0A:  BRA    0CCA
....................  
0D0C:  MOVFF  3ED,01
....................  
0D10:  MOVLB  0
0D12:  RETURN 0
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include <18F45K22.h> 
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #define LOADER_END 0x1FFF 
.................... #include <boot.h> 
.................... #undef LOADER_END 
.................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
.................... #define LOADER_END   0x1FFF 
.................... #define LOADER_SIZE  0x3FF 
....................  
.................... #ifndef _bootloader 
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
....................  
.................... /* when in operational software, keep out of the bootloader sections */ 
.................... #org 0, 0xfff {} 
.................... #org 0x1000, 0x1ffe {} 
....................  
.................... #else 
....................  
.................... /* when in the bootloader, keep out of the operational sections */ 
.................... #org 0x2000, 0x7ffe {} 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=64000000) 
.................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
.................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
.................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
.................... #define safe_write_program_memory(address, pointer, size) \ 
....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
....................  
....................  
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
....................  
....................  
.................... /* 
....................  * comm.h 
....................  * 
....................  *  Created on: Mar 23, 2017 
....................  *      Author: asaf 
....................  */ 
....................  
.................... #ifndef COMM_H_ 
.................... #define COMM_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdbool.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
....................  
.................... #define MSG_MAX_MESSAGE_LEN 80 
....................  
.................... #ifndef MIN 
.................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
.................... #endif 
.................... #ifndef MAX 
.................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
.................... #endif 
....................  
.................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
.................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
....................  
.................... void comm_init(); 
.................... bool comm_receive_message(void* buffer, uint16_t* size); 
.................... void comm_send_message(void* buffer, uint16_t size); 
....................  
....................  
....................  
.................... #endif /* COMM_H_ */ 
....................  
....................  
.................... /* 
....................  * uart.h 
....................  * 
....................  *  Created on: Mar 23, 2017 
....................  *      Author: asaf 
....................  */ 
....................  
.................... #ifndef UART_H_ 
.................... #define UART_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... void uart_init(); 
.................... void uart_disable(); 
.................... uint8_t uart_get_byte_blocking(); 
.................... uint8_t uart_get_byte_nonblocking(uint8_t *dst); 
.................... void uart_send(void* buffer, uint8_t size); 
.................... void uart_clear_errors(); 
....................  
.................... #endif /* UART_H_ */ 
....................  
....................  
.................... /* 
....................  * message.h 
....................  * 
....................  *  Created on: Mar 23, 2017 
....................  *      Author: asaf 
....................  */ 
....................  
.................... #ifndef MESSAGE_H_ 
.................... #define MESSAGE_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include "calibration.h" 
.................... #ifndef CALIBRATION_H_ 
.................... #define CALIBRATION_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdbool.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
....................  
.................... #define CALIBRATION_AREA_START 0x4000 
.................... #define CALIBRATION_AREA_END 0x4FFF 
....................  
.................... typedef enum { 
....................   CALIBRATION_TABLE_PARAMS = 0, 
....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
....................   CALIBRATION_TABLE_MAX = 3 
.................... } calibration_table_id_t; 
....................  
.................... typedef enum { 
....................   PARAM_CAL_TBL_VERSION = 0, 
....................   PARAM_SERIAL_NUM = 1, 
....................   PARAM_TEMP_MULT = 2, 
....................   PARAM_FWD_MULT = 3, 
....................   PARAM_REV_TRESH = 4, 
....................   PARAM_INP_PWR_MULT = 5, 
....................   PARAM_PWR_CURRENT_MULT = 6, 
....................   PARAM_PRE_AMP_MULT = 7, 
....................   PARAM_ISENSE_PA1_MULT = 8, 
....................   PARAM_ISENSE_PA2_MULT = 9, 
....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
....................   PARAM_TX_ON_TIMING_USEC = 11, 
....................   PARAM_TX_OFF_TIMING_USEC = 12, 
....................   PARAM_PA_ON_TIMING_USEC = 13, 
....................   PARAM_PA_OFF_TIMING_USEC = 14, 
....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
.................... } calibration_param_t; 
....................  
.................... #define CALIBRATION_TABLE_INDEX_MAX 32 
....................  
.................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
.................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
.................... #INLINE 
.................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
.................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
....................  
.................... #endif /* CALIBRATION_H_ */ 
....................  
....................  
.................... enum { 
....................   NUM_ADC_SAMPLES = 4, 
.................... }; 
....................  
.................... enum { 
....................   OP_CONTROL_MESSAGE = 0x00, 
....................   OP_VERSION_REQUEST_MESSAGE = 0x02, 
....................   OP_CHANGE_MODE_MESSAGE = 0x03, 
....................   OP_SET_CALIBRATION_TABLE_MESSAGE = 0x04, 
....................   OP_GET_CALIBRATION_TABLE_MESSAGE = 0x05, 
....................   OP_SET_DATA_LINE_MESSAGE = 0x06, 
....................   OP_GET_DATA_LINE_MESSAGE = 0x07, 
....................   OP_FINISH_UPDATE_PROCESS_MESSAGE = 0x08, 
....................   OP_BIT_STATUS_REQUEST_MESSAGE = 0x09, 
.................... }; 
....................  
.................... enum { 
....................   OP_ACK_RESPONSE = 0x80, 
....................   OP_SF_STATUS_RESPONSE = 0x81, 
....................   OP_VERSION_RESPONSE = 0x82, 
....................   OP_GET_CALIBRATION_TABLE_RESPONSE = 0x85, 
....................   OP_SET_DATA_LINE_RESPONSE = 0x86, 
....................   OP_GET_DATA_LINE_RESPONSE = 0x87, 
....................   OP_BIT_STATUS_RESPONSE = 0x89, 
.................... }; 
....................  
.................... typedef enum { 
....................   MODE_OPERATIONAL = 0, 
....................   MODE_TECHNICIAN = 1, 
....................   MODE_MAINTENANCE = 2, 
.................... } software_mode_t; 
....................  
.................... enum { 
....................   CALIBRATION_TABLE_TEMP = 0, 
....................   CALIBRATION_TABLE_FWD = 1, 
....................   CALIBRATION_TABLE_REV = 2, 
....................   CALIBRATION_TABLE_INP = 3, 
....................   CALIBRATION_TABLE_CURRENT = 4, 
....................   CALIBRATION_TABLE_PA_BIAS = 5, 
....................   CALIBRATION_TABLE_TIMING = 6, 
....................   CALIBRATION_TABLE_GENERAL = 7, 
.................... }; 
....................  
.................... enum { 
....................   PROGRAMMING_STATUS_OK = 0, 
....................   PROGRAMMING_STATUS_ERROR = 1, 
.................... }; 
....................  
.................... typedef struct message_t { 
....................   uint8_t opcode; 
....................   uint8_t payload[]; /* this will include the payload and the crc */ 
.................... } message_t; 
....................  
.................... typedef struct generic_response_t { 
....................   uint8_t opcode; 
.................... } generic_response_t; 
....................  
.................... /* message payloads*/ 
....................  
.................... typedef struct control_bits_t { 
....................   uint8_t tx_on : 1; 
....................   uint8_t pa_gain : 3; 
....................   uint8_t tx_ant : 1; 
....................   uint8_t amplifier_operation_frequency : 1; 
....................   uint8_t reset : 1; 
....................   uint8_t dont_change : 1; 
.................... } control_bits_t; 
....................  
.................... typedef struct control_message_payload_t { 
....................   control_bits_t bits; 
....................   uint16_t control_identifier; 
.................... } control_message_payload_t; 
....................  
.................... typedef struct change_mode_message_payload_t { 
....................   uint8_t mode; 
.................... } change_mode_message_payload_t; 
....................  
....................  
.................... typedef struct set_calibration_table_message_payload_t { 
....................   uint8_t table_id; 
....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
.................... } set_calibration_table_message_payload_t; 
....................  
.................... typedef struct get_calibration_table_message_payload_t { 
....................   uint8_t table_id; 
.................... } get_calibration_table_message_payload_t; 
....................  
.................... typedef struct set_data_line_payload_t { 
....................   uint32_t address; 
....................   uint8_t data[64]; 
.................... } set_data_line_payload_t; 
....................  
.................... typedef struct get_data_line_payload_t { 
....................   uint32_t address; 
.................... } get_data_line_payload_t; 
....................  
.................... /* responses */ 
....................  
.................... typedef struct ack_response_t { 
....................   generic_response_t generic; 
.................... } ack_response_t; 
....................  
.................... typedef struct sf_status_response_t { 
....................   generic_response_t generic; 
....................   control_bits_t last_control_bits; 
....................   uint16_t tti_counter; 
....................   uint16_t control_identifier; 
....................   uint16_t fwd_power_values[NUM_ADC_SAMPLES]; 
.................... //  uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda move rev power to bit status 
....................   uint16_t input_power_values[NUM_ADC_SAMPLES]; 
....................   //uint16_t pre_amp_power_values[NUM_ADC_SAMPLES];		//yehuda move pre amp to bit status 
....................   uint16_t temperature; 
....................   uint16_t power_amplifier_current; 
....................   uint8_t reverse_power_status;							//Difference between forword power and reverse power compared to general calibration rev tresh param 
.................... } sf_status_response_t; 
....................  
.................... typedef struct bit_status_response_t { 
....................   generic_response_t generic; 
....................   control_bits_t last_control_bits; 
....................   uint16_t tti_counter; 
....................   uint8_t mode; 
....................   uint16_t pre_amp_power_values[NUM_ADC_SAMPLES]; 		//yehuda add pre amp to bit status 
....................   uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda add rev power to bit status 
.................... } bit_status_response_t; 
....................  
.................... typedef struct version_response_t { 
....................   generic_response_t generic; 
....................   uint8_t day; 
....................   uint8_t month; 
....................   uint16_t year; 
....................   uint8_t major; 
....................   uint8_t minor; 
....................   uint16_t serial_number; 
.................... } version_response_t; 
....................  
.................... typedef struct calibration_table_response_t { 
....................   generic_response_t generic; 
....................   uint8_t table_id; 
....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
.................... } calibration_table_response_t; 
....................  
.................... typedef struct set_data_line_response_t { 
....................   generic_response_t generic; 
....................   uint32_t address; 
....................   uint8_t status; 
.................... } set_data_line_response_t; 
....................  
.................... typedef struct get_data_line_response_t { 
....................   generic_response_t generic; 
....................   uint32_t address; 
....................   uint8_t data[64]; 
.................... } get_data_line_response_t; 
....................  
.................... #endif /* MESSAGE_H_ */ 
....................  
....................  
.................... /* 
....................  * rfc1662.h 
....................  * 
....................  *  Created on: 09/01/2011 
....................  *      Author: asafe 
....................  */ 
....................  
.................... #ifndef __RFC1662_H__ 
.................... #define __RFC1662_H__ 
....................  
.................... #define CHAR_FLAG 0x7E 
.................... #define CHAR_FLAG_XORED 0x5E 
.................... #define CHAR_ESCAPE 0x7D 
.................... #define CHAR_ESCAPE_XORED 0x5D 
....................  
.................... int rfc1662_unpack(unsigned char *data, int len, unsigned char *dest); 
.................... int rfc1662_pack(unsigned char *data, int dataLen, unsigned char *dest); 
....................  
.................... #endif /* __RFC1662_H__ */ 
....................  
....................  
.................... #ifndef INCLUDE_TIMER_H_ 
.................... #define INCLUDE_TIMER_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdbool.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
....................  
.................... typedef void (*timer_func)(void* arg); 
....................  
.................... typedef struct { 
....................   //bool triggred; 
....................   uint32_t expTime; 
....................   void *arg; 
....................   timer_func func; 
.................... } timer_task_t; 
....................  
.................... #INLINE 
.................... uint32_t timer_get_us_count(); 
.................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg); 
.................... void timer_yield(); 
....................  
.................... #endif /* INCLUDE_TIMER_H_ */ 
....................  
....................  
.................... /* 
....................  * message_handlers.h 
....................  * 
....................  *  Created on: Mar 26, 2017 
....................  *      Author: asaf 
....................  */ 
....................  
.................... #ifndef MESSAGE_HANDLERS_H_ 
.................... #define MESSAGE_HANDLERS_H_ 
....................  
.................... void init_message_handlers(); 
.................... void process_message(uint8_t* message, uint16_t length); 
.................... #INLINE 
.................... void perform_last_control_message(); 
.................... void control_handle_timer(); 
.................... void samp_if_needed(); 
....................  
.................... #endif /* MESSAGE_HANDLERS_H_ */ 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
00F4:  GOTO   0B98
....................  
00F8:  GOTO   06DA (RETURN)
....................  
....................  
....................  
....................  
*
0D88:  MOVLB  3
0D8A:  BCF    x8F.0
0D8C:  CLRF   x90
....................  
....................  
....................  
....................  
....................  
....................  
0D8E:  MOVLW  03
0D90:  MOVWF  x94
0D92:  MOVLW  91
0D94:  MOVWF  x93
0D96:  MOVLB  0
0D98:  BRA    0BDA
0D9A:  MOVF   01,F
0D9C:  BNZ   0DA0
....................  
....................  
0D9E:  BRA    0DE0
....................  
....................  
0DA0:  CLRF   03
0DA2:  MOVLB  3
0DA4:  MOVF   x90,W
0DA6:  ADDLW  20
0DA8:  MOVWF  FE9
0DAA:  MOVLW  00
0DAC:  ADDWFC 03,W
0DAE:  MOVWF  FEA
0DB0:  MOVFF  391,FEF
....................  
....................  
0DB4:  CLRF   03
0DB6:  MOVF   x90,W
0DB8:  ADDLW  20
0DBA:  MOVWF  FE9
0DBC:  MOVLW  00
0DBE:  ADDWFC 03,W
0DC0:  MOVWF  FEA
0DC2:  MOVF   FEF,W
0DC4:  SUBLW  7E
0DC6:  BZ    0DD4
....................  
0DC8:  INCF   x90,F
....................  
0DCA:  MOVF   x90,W
0DCC:  SUBLW  A2
0DCE:  BNZ   0DD2
....................  
0DD0:  CLRF   x90
....................  
....................  
0DD2:  BRA    0DE0
....................  
0DD4:  MOVF   x90,W
0DD6:  SUBLW  01
0DD8:  BC    0DDE
....................  
0DDA:  BSF    x8F.0
....................  
0DDC:  BRA    0DE0
....................  
....................  
0DDE:  CLRF   x90
....................  
....................  
....................  
0DE0:  MOVLB  3
0DE2:  BTFSS  x8F.0
0DE4:  BRA    0D8E
....................  
....................  
0DE6:  BTFSS  x8F.0
0DE8:  BRA    0E28
....................  
0DEA:  CLRF   x94
0DEC:  MOVLW  20
0DEE:  MOVWF  x93
0DF0:  MOVFF  390,395
0DF4:  MOVFF  38C,397
0DF8:  MOVFF  38B,396
0DFC:  MOVLB  0
0DFE:  BRA    0D14
0E00:  MOVFF  01,392
....................  
0E04:  MOVLB  3
0E06:  MOVF   x92,W
0E08:  SUBLW  FF
0E0A:  BNZ   0E12
....................  
....................  
....................  
0E0C:  MOVLW  00
0E0E:  MOVWF  01
0E10:  BRA    0E2C
....................  
....................  
0E12:  MOVFF  38D,FE9
0E16:  MOVFF  38E,FEA
0E1A:  CLRF   FEC
0E1C:  MOVF   FED,F
0E1E:  MOVFF  392,FEF
....................  
0E22:  MOVLW  01
0E24:  MOVWF  01
0E26:  BRA    0E2C
....................  
....................  
....................  
0E28:  MOVLW  00
0E2A:  MOVWF  01
....................  
0E2C:  MOVLB  0
0E2E:  GOTO   15F4 (RETURN)
....................  
....................  
*
0F9E:  MOVFF  3DC,3E2
0FA2:  MOVFF  3DB,3E1
0FA6:  MOVFF  3DD,3E3
0FAA:  MOVLB  3
0FAC:  CLRF   xE5
0FAE:  MOVLW  20
0FB0:  MOVWF  xE4
0FB2:  MOVLB  0
0FB4:  BRA    1042
0FB6:  MOVLB  3
0FB8:  CLRF   xE0
0FBA:  MOVFF  01,3DF
....................  
....................  
0FBE:  CLRF   xE2
0FC0:  MOVLW  20
0FC2:  MOVWF  xE1
0FC4:  MOVFF  3DF,3E3
0FC8:  MOVLB  0
0FCA:  BRA    0F84
....................  
0FCC:  RETURN 0
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include <18F45K22.h> 
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #define LOADER_END 0x1FFF 
.................... #include <boot.h> 
.................... #undef LOADER_END 
.................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
.................... #define LOADER_END   0x1FFF 
.................... #define LOADER_SIZE  0x3FF 
....................  
.................... #ifndef _bootloader 
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
....................  
.................... /* when in operational software, keep out of the bootloader sections */ 
.................... #org 0, 0xfff {} 
.................... #org 0x1000, 0x1ffe {} 
....................  
.................... #else 
....................  
.................... /* when in the bootloader, keep out of the operational sections */ 
.................... #org 0x2000, 0x7ffe {} 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=64000000) 
.................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
.................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
.................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
.................... #define safe_write_program_memory(address, pointer, size) \ 
....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
....................  
....................  
....................  
.................... /* 
....................  * rfc1662.h 
....................  * 
....................  *  Created on: 09/01/2011 
....................  *      Author: asafe 
....................  */ 
....................  
.................... #ifndef __RFC1662_H__ 
.................... #define __RFC1662_H__ 
....................  
.................... #define CHAR_FLAG 0x7E 
.................... #define CHAR_FLAG_XORED 0x5E 
.................... #define CHAR_ESCAPE 0x7D 
.................... #define CHAR_ESCAPE_XORED 0x5D 
....................  
.................... int rfc1662_unpack(unsigned char *data, int len, unsigned char *dest); 
.................... int rfc1662_pack(unsigned char *data, int dataLen, unsigned char *dest); 
....................  
.................... #endif /* __RFC1662_H__ */ 
....................  
....................  
.................... #ifndef __CRC8__ 
.................... #define __CRC8__ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... uint8_t crc8(uint8_t* buffer, uint16_t size); 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
*
0EBE:  MOVLB  3
0EC0:  CLRF   xF0
0EC2:  CLRF   xF1
....................  
....................  
....................  
0EC4:  CLRF   xF0
0EC6:  MOVF   xEF,W
0EC8:  SUBWF  xF0,W
0ECA:  BC    0F7C
....................  
....................  
0ECC:  CLRF   03
0ECE:  MOVF   xF0,W
0ED0:  ADDWF  xEB,W
0ED2:  MOVWF  FE9
0ED4:  MOVF   xEC,W
0ED6:  ADDWFC 03,W
0ED8:  MOVWF  FEA
0EDA:  MOVF   FEF,W
0EDC:  SUBLW  7E
0EDE:  BNZ   0F0A
....................  
....................  
0EE0:  MOVF   xF1,W
0EE2:  INCF   xF1,F
0EE4:  CLRF   03
0EE6:  ADDWF  xED,W
0EE8:  MOVWF  FE9
0EEA:  MOVF   xEE,W
0EEC:  ADDWFC 03,W
0EEE:  MOVWF  FEA
0EF0:  MOVLW  7D
0EF2:  MOVWF  FEF
....................  
0EF4:  MOVF   xF1,W
0EF6:  INCF   xF1,F
0EF8:  CLRF   03
0EFA:  ADDWF  xED,W
0EFC:  MOVWF  FE9
0EFE:  MOVF   xEE,W
0F00:  ADDWFC 03,W
0F02:  MOVWF  FEA
0F04:  MOVLW  5E
0F06:  MOVWF  FEF
....................  
....................  
0F08:  BRA    0F78
0F0A:  CLRF   03
0F0C:  MOVF   xF0,W
0F0E:  ADDWF  xEB,W
0F10:  MOVWF  FE9
0F12:  MOVF   xEC,W
0F14:  ADDWFC 03,W
0F16:  MOVWF  FEA
0F18:  MOVF   FEF,W
0F1A:  SUBLW  7D
0F1C:  BNZ   0F48
....................  
....................  
0F1E:  MOVF   xF1,W
0F20:  INCF   xF1,F
0F22:  CLRF   03
0F24:  ADDWF  xED,W
0F26:  MOVWF  FE9
0F28:  MOVF   xEE,W
0F2A:  ADDWFC 03,W
0F2C:  MOVWF  FEA
0F2E:  MOVLW  7D
0F30:  MOVWF  FEF
....................  
0F32:  MOVF   xF1,W
0F34:  INCF   xF1,F
0F36:  CLRF   03
0F38:  ADDWF  xED,W
0F3A:  MOVWF  FE9
0F3C:  MOVF   xEE,W
0F3E:  ADDWFC 03,W
0F40:  MOVWF  FEA
0F42:  MOVLW  5D
0F44:  MOVWF  FEF
....................  
....................  
0F46:  BRA    0F78
....................  
....................  
0F48:  MOVF   xF1,W
0F4A:  INCF   xF1,F
0F4C:  CLRF   03
0F4E:  ADDWF  xED,W
0F50:  MOVWF  01
0F52:  MOVF   xEE,W
0F54:  ADDWFC 03,F
0F56:  MOVFF  03,3F3
0F5A:  CLRF   03
0F5C:  MOVF   xF0,W
0F5E:  ADDWF  xEB,W
0F60:  MOVWF  FE9
0F62:  MOVF   xEC,W
0F64:  ADDWFC 03,W
0F66:  MOVWF  FEA
0F68:  MOVFF  FEF,3F4
0F6C:  MOVFF  3F3,FEA
0F70:  MOVFF  01,FE9
0F74:  MOVFF  3F4,FEF
....................  
....................  
0F78:  INCF   xF0,F
0F7A:  BRA    0EC6
....................  
0F7C:  MOVFF  3F1,01
....................  
0F80:  MOVLB  0
0F82:  RETURN 0
....................  
....................  
....................  
*
0C10:  MOVLB  3
0C12:  CLRF   xA0
0C14:  CLRF   xA1
....................  
....................  
....................  
0C16:  CLRF   xA0
0C18:  MOVF   x9F,W
0C1A:  SUBWF  xA0,W
0C1C:  BC    0CBC
....................  
....................  
0C1E:  CLRF   03
0C20:  MOVF   xA0,W
0C22:  ADDWF  x9B,W
0C24:  MOVWF  FE9
0C26:  MOVF   x9C,W
0C28:  ADDWFC 03,W
0C2A:  MOVWF  FEA
0C2C:  MOVF   FEF,W
0C2E:  SUBLW  7D
0C30:  BNZ   0C88
....................  
....................  
0C32:  INCF   xA0,F
....................  
0C34:  CLRF   03
0C36:  MOVF   xA0,W
0C38:  ADDWF  x9B,W
0C3A:  MOVWF  FE9
0C3C:  MOVF   x9C,W
0C3E:  ADDWFC 03,W
0C40:  MOVWF  FEA
0C42:  MOVF   FEF,W
0C44:  SUBLW  5E
0C46:  BNZ   0C5E
....................  
....................  
0C48:  MOVF   xA1,W
0C4A:  INCF   xA1,F
0C4C:  CLRF   03
0C4E:  ADDWF  x9D,W
0C50:  MOVWF  FE9
0C52:  MOVF   x9E,W
0C54:  ADDWFC 03,W
0C56:  MOVWF  FEA
0C58:  MOVLW  7E
0C5A:  MOVWF  FEF
....................  
....................  
0C5C:  BRA    0C86
0C5E:  CLRF   03
0C60:  MOVF   xA0,W
0C62:  ADDWF  x9B,W
0C64:  MOVWF  FE9
0C66:  MOVF   x9C,W
0C68:  ADDWFC 03,W
0C6A:  MOVWF  FEA
0C6C:  MOVF   FEF,W
0C6E:  SUBLW  5D
0C70:  BNZ   0C86
....................  
....................  
0C72:  MOVF   xA1,W
0C74:  INCF   xA1,F
0C76:  CLRF   03
0C78:  ADDWF  x9D,W
0C7A:  MOVWF  FE9
0C7C:  MOVF   x9E,W
0C7E:  ADDWFC 03,W
0C80:  MOVWF  FEA
0C82:  MOVLW  7D
0C84:  MOVWF  FEF
....................  
....................  
....................  
....................  
....................  
....................  
....................  
0C86:  BRA    0CB8
....................  
....................  
0C88:  MOVF   xA1,W
0C8A:  INCF   xA1,F
0C8C:  CLRF   03
0C8E:  ADDWF  x9D,W
0C90:  MOVWF  01
0C92:  MOVF   x9E,W
0C94:  ADDWFC 03,F
0C96:  MOVFF  03,3A3
0C9A:  CLRF   03
0C9C:  MOVF   xA0,W
0C9E:  ADDWF  x9B,W
0CA0:  MOVWF  FE9
0CA2:  MOVF   x9C,W
0CA4:  ADDWFC 03,W
0CA6:  MOVWF  FEA
0CA8:  MOVFF  FEF,3A4
0CAC:  MOVFF  3A3,FEA
0CB0:  MOVFF  01,FE9
0CB4:  MOVFF  3A4,FEF
....................  
....................  
0CB8:  INCF   xA0,F
0CBA:  BRA    0C18
....................  
0CBC:  MOVFF  3A1,01
....................  
0CC0:  MOVLB  0
0CC2:  GOTO   0D30 (RETURN)
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
1042:  MOVLB  3
1044:  CLRF   xE6
1046:  CLRF   xE7
1048:  MOVFF  3E2,3EA
104C:  MOVFF  3E1,3E9
1050:  CLRF   xEC
1052:  MOVFF  3E3,3EB
1056:  MOVLB  0
1058:  RCALL  0CC6
105A:  MOVFF  01,3E8
....................  
....................  
....................  
....................  
....................  
....................  
105E:  MOVLW  01
1060:  MOVLB  3
1062:  ADDWF  xE4,W
1064:  MOVWF  xE9
1066:  MOVLW  00
1068:  ADDWFC xE5,W
106A:  MOVWF  xEA
106C:  MOVFF  3E2,3EC
1070:  MOVFF  3E1,3EB
1074:  MOVFF  3EA,3EE
1078:  MOVFF  3E9,3ED
107C:  MOVFF  3E3,3EF
1080:  MOVLB  0
1082:  RCALL  0EBE
1084:  MOVFF  01,3E6
....................  
1088:  MOVLW  01
108A:  MOVLB  3
108C:  ADDWF  xE6,W
108E:  CLRF   03
1090:  ADDWF  xE4,W
1092:  MOVWF  xE9
1094:  MOVF   xE5,W
1096:  ADDWFC 03,W
1098:  MOVWF  xEA
109A:  MOVLW  03
109C:  MOVWF  xEC
109E:  MOVLW  E8
10A0:  MOVWF  xEB
10A2:  MOVFF  3EA,3EE
10A6:  MOVFF  3E9,3ED
10AA:  MOVLW  01
10AC:  MOVWF  xEF
10AE:  MOVLB  0
10B0:  RCALL  0EBE
10B2:  MOVFF  01,3E7
....................  
....................  
10B6:  MOVLB  3
10B8:  MOVFF  3E4,FE9
10BC:  MOVFF  3E5,FEA
10C0:  MOVLW  7E
10C2:  MOVWF  FEF
....................  
10C4:  MOVF   xE7,W
10C6:  ADDWF  xE6,W
10C8:  ADDLW  01
10CA:  CLRF   03
10CC:  ADDWF  xE4,W
10CE:  MOVWF  FE9
10D0:  MOVF   xE5,W
10D2:  ADDWFC 03,W
10D4:  MOVWF  FEA
10D6:  MOVLW  7E
10D8:  MOVWF  FEF
....................  
....................  
....................  
10DA:  MOVF   xE7,W
10DC:  ADDWF  xE6,W
10DE:  ADDLW  02
10E0:  MOVWF  01
....................  
10E2:  MOVLB  0
10E4:  GOTO   0FB6 (RETURN)
....................  
....................  
....................  
....................  
*
0D14:  MOVLB  3
0D16:  CLRF   x98
....................  
....................  
....................  
0D18:  MOVFF  394,39C
0D1C:  MOVFF  393,39B
0D20:  MOVFF  397,39E
0D24:  MOVFF  396,39D
0D28:  MOVFF  395,39F
0D2C:  MOVLB  0
0D2E:  BRA    0C10
0D30:  MOVFF  01,398
....................  
....................  
0D34:  MOVLB  3
0D36:  MOVF   x98,F
0D38:  BNZ   0D40
....................  
0D3A:  MOVLW  FF
0D3C:  MOVWF  01
0D3E:  BRA    0D82
....................  
....................  
....................  
0D40:  MOVLW  01
0D42:  SUBWF  x98,W
0D44:  MOVWF  x9B
0D46:  MOVFF  397,3EA
0D4A:  MOVFF  396,3E9
0D4E:  CLRF   xEC
0D50:  MOVWF  xEB
0D52:  MOVLB  0
0D54:  RCALL  0CC6
0D56:  MOVFF  01,399
0D5A:  MOVLW  01
0D5C:  MOVLB  3
0D5E:  SUBWF  x98,W
0D60:  CLRF   03
0D62:  ADDWF  x96,W
0D64:  MOVWF  FE9
0D66:  MOVF   x97,W
0D68:  ADDWFC 03,W
0D6A:  MOVWF  FEA
0D6C:  MOVFF  FEF,39A
....................  
0D70:  MOVF   x9A,W
0D72:  SUBWF  x99,W
0D74:  BNZ   0D7E
....................  
....................  
....................  
0D76:  MOVLW  01
0D78:  SUBWF  x98,W
0D7A:  MOVWF  01
0D7C:  BRA    0D82
....................  
....................  
....................  
0D7E:  MOVLW  FF
0D80:  MOVWF  01
....................  
0D82:  MOVLB  0
0D84:  GOTO   0E00 (RETURN)
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include <18F45K22.h> 
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #define LOADER_END 0x1FFF 
.................... #include <boot.h> 
.................... #undef LOADER_END 
.................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
.................... #define LOADER_END   0x1FFF 
.................... #define LOADER_SIZE  0x3FF 
....................  
.................... #ifndef _bootloader 
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
....................  
.................... /* when in operational software, keep out of the bootloader sections */ 
.................... #org 0, 0xfff {} 
.................... #org 0x1000, 0x1ffe {} 
....................  
.................... #else 
....................  
.................... /* when in the bootloader, keep out of the operational sections */ 
.................... #org 0x2000, 0x7ffe {} 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=64000000) 
.................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
.................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
.................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
.................... #define safe_write_program_memory(address, pointer, size) \ 
....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
....................  
....................  
....................  
.................... #byte TOSU = 0xFFF 
.................... #word TOS = 0xFFE 
.................... #byte STKPTR = 0xFFC 
.................... #bit    STKPTR0 = STKPTR.0 
.................... #bit    STKPTR1 = STKPTR.1 
.................... #bit    STKPTR2 = STKPTR.2 
.................... #bit    STKPTR3 = STKPTR.3 
.................... #bit    STKPTR4 = STKPTR.4 
.................... #bit    STKUNF = STKPTR.6 
.................... #bit    STKFUL = STKPTR.7 
.................... #byte PCLATU = 0xFFB 
.................... #byte PCLATH = 0xFFA 
.................... #byte PCL = 0xFF9 
.................... #byte TBLPTRU = 0xFF8 
.................... #word TBLPTR = 0xFF7 
.................... #byte TABLAT = 0xFF5 
.................... #word PROD = 0xFF4 
.................... #byte INTCON = 0xFF2 
.................... #bit    RBIF = INTCON.0 
.................... #bit    INT0IF = INTCON.1 
.................... #bit    TMR0IF = INTCON.2 
.................... #bit    RBIE = INTCON.3 
.................... #bit    INT0IE = INTCON.4 
.................... #bit    TMR0IE = INTCON.5 
.................... #bit    PEIE_GIEL = INTCON.6 
.................... #bit    GIE_GIEH = INTCON.7 
.................... #byte INTCON2 = 0xFF1 
.................... #bit    RBIP = INTCON2.0 
.................... #bit    TMR0IP = INTCON2.2 
.................... #bit    INTEDG2 = INTCON2.4 
.................... #bit    INTEDG1 = INTCON2.5 
.................... #bit    INTEDG0 = INTCON2.6 
.................... #bit    RBPU = INTCON2.7 
.................... #byte INTCON3 = 0xFF0 
.................... #bit    INT1IF = INTCON3.0 
.................... #bit    INT2IF = INTCON3.1 
.................... #bit    INT1IE = INTCON3.3 
.................... #bit    INT2IE = INTCON3.4 
.................... #bit    INT1IP = INTCON3.6 
.................... #bit    INT2IP = INTCON3.7 
.................... #byte INDF0 = 0xFEF 
.................... #byte POSTINC0 = 0xFEE 
.................... #byte POSTDEC0 = 0xFED 
.................... #byte PREINC0 = 0xFEC 
.................... #byte PLUSW0 = 0xFEB 
.................... #word FSR0 = 0xFEA 
.................... #byte WREG = 0xFE8 
.................... #byte INDF1 = 0xFE7 
.................... #byte POSTINC1 = 0xFE6 
.................... #byte POSTDEC1 = 0xFE5 
.................... #byte PREINC1 = 0xFE4 
.................... #byte PLUSW1 = 0xFE3 
.................... #word FSR1 = 0xFE2 
.................... #byte BSR = 0xFE0 
.................... #byte INDF2 = 0xFDF 
.................... #byte POSTINC2 = 0xFDE 
.................... #byte POSTDEC2 = 0xFDD 
.................... #byte PREINC2 = 0xFDC 
.................... #byte PLUSW2 = 0xFDB 
.................... #word FSR2 = 0xFDA 
.................... #byte STATUS = 0xFD8 
.................... #bit    C = STATUS.0 
.................... #bit    DC = STATUS.1 
.................... #bit    Z = STATUS.2 
.................... #bit    OV = STATUS.3 
.................... #bit    N = STATUS.4 
.................... #word TMR0 = 0xFD7 
.................... #byte T0CON = 0xFD5 
.................... #bit    T0PS0 = T0CON.0 
.................... #bit    T0PS1 = T0CON.1 
.................... #bit    T0PS2 = T0CON.2 
.................... #bit    PSA = T0CON.3 
.................... #bit    T0SE = T0CON.4 
.................... #bit    T0CS = T0CON.5 
.................... #bit    T08BIT = T0CON.6 
.................... #bit    TMR0ON = T0CON.7 
.................... #byte OSCCON = 0xFD3 
.................... #bit    SCS0 = OSCCON.0 
.................... #bit    SCS1 = OSCCON.1 
.................... #bit    HFIOFS = OSCCON.2 
.................... #bit    OSTS = OSCCON.3 
.................... #bit    IRCF0 = OSCCON.4 
.................... #bit    IRCF1 = OSCCON.5 
.................... #bit    IRCF2 = OSCCON.6 
.................... #bit    IDLEN = OSCCON.7 
.................... #byte OSCCON2 = 0xFD2 
.................... #bit    LFIOFS = OSCCON2.0 
.................... #bit    MFIOFS = OSCCON2.1 
.................... #bit    PRISD = OSCCON2.2 
.................... #bit    SOSCGO = OSCCON2.3 
.................... #bit    MFIOSEL = OSCCON2.4 
.................... #bit    SOSCRUN = OSCCON2.6 
.................... #bit    PLLRDY = OSCCON2.7 
.................... #byte WDTCON = 0xFD1 
.................... #bit    SWDTEN = WDTCON.0 
.................... #byte RCON = 0xFD0 
.................... #bit    BOR = RCON.0 
.................... #bit    POR = RCON.1 
.................... #bit    PD = RCON.2 
.................... #bit    TO = RCON.3 
.................... #bit    RI = RCON.4 
.................... #bit    SBOREN = RCON.6 
.................... #bit    IPEN = RCON.7 
.................... #word TMR1 = 0xFCF 
.................... #byte T1CON = 0xFCD 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1RD16 = T1CON.1 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1SOSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
.................... #byte T1GCON = 0xFCC 
.................... #bit    T1GSS0 = T1GCON.0 
.................... #bit    T1GSS1 = T1GCON.1 
.................... #bit    T1GVAL = T1GCON.2 
.................... #bit    T1GGO = T1GCON.3 
.................... #bit    T1GSPM = T1GCON.4 
.................... #bit    T1GTM = T1GCON.5 
.................... #bit    T1GPOL = T1GCON.6 
.................... #bit    TMR1GE = T1GCON.7 
.................... #byte SSP1CON3 = 0xFCB 
.................... #bit    DHEN = SSP1CON3.0 
.................... #bit    AHEN = SSP1CON3.1 
.................... #bit    SBCDE = SSP1CON3.2 
.................... #bit    SDAHT = SSP1CON3.3 
.................... #bit    BOEN = SSP1CON3.4 
.................... #bit    SCIE = SSP1CON3.5 
.................... #bit    PCIE = SSP1CON3.6 
.................... #bit    ACKTIM = SSP1CON3.7 
.................... #byte SSP1MSK = 0xFCA 
.................... #byte SSP1BUF = 0xFC9 
.................... #byte SSP1ADD = 0xFC8 
.................... #byte SSP1STAT = 0xFC7 
.................... #bit    BF = SSP1STAT.0 
.................... #bit    UA = SSP1STAT.1 
.................... #bit    R = SSP1STAT.2 
.................... #bit    S = SSP1STAT.3 
.................... #bit    P = SSP1STAT.4 
.................... #bit    D = SSP1STAT.5 
.................... #bit    CKE = SSP1STAT.6 
.................... #bit    SMP = SSP1STAT.7 
.................... #byte SSP1CON1 = 0xFC6 
.................... #bit    SSPM0 = SSP1CON1.0 
.................... #bit    SSPM1 = SSP1CON1.1 
.................... #bit    SSPM2 = SSP1CON1.2 
.................... #bit    SSPM3 = SSP1CON1.3 
.................... #bit    CKP = SSP1CON1.4 
.................... #bit    SSPEN = SSP1CON1.5 
.................... #bit    SSPOV = SSP1CON1.6 
.................... #bit    WCOL = SSP1CON1.7 
.................... #byte SSP1CON2 = 0xFC5 
.................... #bit    SEN = SSP1CON2.0 
.................... #bit    RSEN = SSP1CON2.1 
.................... #bit    PEN = SSP1CON2.2 
.................... #bit    RCEN = SSP1CON2.3 
.................... #bit    ACKEN = SSP1CON2.4 
.................... #bit    ACKDT = SSP1CON2.5 
.................... #bit    ACKSTAT = SSP1CON2.6 
.................... #bit    GCEN = SSP1CON2.7 
.................... #word ADRES = 0xFC4 
.................... #byte ADCON0 = 0xFC2 
.................... #bit    ADON = ADCON0.0 
.................... #bit    GO = ADCON0.1 
.................... #bit    CHS0 = ADCON0.2 
.................... #bit    CHS1 = ADCON0.3 
.................... #bit    CHS2 = ADCON0.4 
.................... #bit    CHS3 = ADCON0.5 
.................... #bit    CHS4 = ADCON0.6 
.................... #byte ADCON1 = 0xFC1 
.................... #bit    NVCFG0 = ADCON1.0 
.................... #bit    NVCFG1 = ADCON1.1 
.................... #bit    PVCFG0 = ADCON1.2 
.................... #bit    PVCFG1 = ADCON1.3 
.................... #bit    TRIGSEL = ADCON1.7 
.................... #byte ADCON2 = 0xFC0 
.................... #bit    ADCS0 = ADCON2.0 
.................... #bit    ADCS1 = ADCON2.1 
.................... #bit    ADCS2 = ADCON2.2 
.................... #bit    ACQT0 = ADCON2.3 
.................... #bit    ACQT1 = ADCON2.4 
.................... #bit    ACQT2 = ADCON2.5 
.................... #bit    ADFM = ADCON2.7 
.................... #word CCPR1 = 0xFBF 
.................... #byte CCP1CON = 0xFBD 
.................... #bit    CCP1M0 = CCP1CON.0 
.................... #bit    CCP1M1 = CCP1CON.1 
.................... #bit    CCP1M2 = CCP1CON.2 
.................... #bit    CCP1M3 = CCP1CON.3 
.................... #bit    DC1B0 = CCP1CON.4 
.................... #bit    DC1B1 = CCP1CON.5 
.................... #bit    P1M0 = CCP1CON.6 
.................... #bit    P1M1 = CCP1CON.7 
.................... #byte TMR2 = 0xFBC 
.................... #byte PR2 = 0xFBB 
.................... #byte T2CON = 0xFBA 
.................... #bit    T2CKPS0 = T2CON.0 
.................... #bit    T2CKPS1 = T2CON.1 
.................... #bit    TMR2ON = T2CON.2 
.................... #bit    T2OUTPS0 = T2CON.3 
.................... #bit    T2OUTPS1 = T2CON.4 
.................... #bit    T2OUTPS2 = T2CON.5 
.................... #bit    T2OUTPS3 = T2CON.6 
.................... #byte PSTR1CON = 0xFB9 
.................... #bit    STR1A = PSTR1CON.0 
.................... #bit    STR1B = PSTR1CON.1 
.................... #bit    STR1C = PSTR1CON.2 
.................... #bit    STR1D = PSTR1CON.3 
.................... #bit    STR1SYNC = PSTR1CON.4 
.................... #byte BAUDCON1 = 0xFB8 
.................... #bit    ABDEN = BAUDCON1.0 
.................... #bit    WUE = BAUDCON1.1 
.................... #bit    BRG16 = BAUDCON1.3 
.................... #bit    CKTXP = BAUDCON1.4 
.................... #bit    DTRXP = BAUDCON1.5 
.................... #bit    RCIDL = BAUDCON1.6 
.................... #bit    ABDOVF = BAUDCON1.7 
.................... #byte PWM1CON = 0xFB7 
.................... #bit    P1DC0 = PWM1CON.0 
.................... #bit    P1DC1 = PWM1CON.1 
.................... #bit    P1DC2 = PWM1CON.2 
.................... #bit    P1DC3 = PWM1CON.3 
.................... #bit    P1DC4 = PWM1CON.4 
.................... #bit    P1DC5 = PWM1CON.5 
.................... #bit    P1DC6 = PWM1CON.6 
.................... #bit    P1RSEN = PWM1CON.7 
.................... #byte ECCP1AS = 0xFB6 
.................... #bit    P1SSBD0 = ECCP1AS.0 
.................... #bit    P1SSBD1 = ECCP1AS.1 
.................... #bit    P1SSAC0 = ECCP1AS.2 
.................... #bit    P1SSAC1 = ECCP1AS.3 
.................... #bit    CCP1AS0 = ECCP1AS.4 
.................... #bit    CCP1AS1 = ECCP1AS.5 
.................... #bit    CCP1AS2 = ECCP1AS.6 
.................... #bit    CCP1ASE = ECCP1AS.7 
.................... #byte T3GCON = 0xFB4 
.................... #bit    T3GSS0 = T3GCON.0 
.................... #bit    T3GSS1 = T3GCON.1 
.................... #bit    T3GVAL = T3GCON.2 
.................... #bit    T3GGO = T3GCON.3 
.................... #bit    T3GSPM = T3GCON.4 
.................... #bit    T3GTM = T3GCON.5 
.................... #bit    T3GPOL = T3GCON.6 
.................... #bit    TMR3GE = T3GCON.7 
.................... #word TMR3 = 0xFB3 
.................... #byte T3CON = 0xFB1 
.................... #bit    TMR3ON = T3CON.0 
.................... #bit    T3RD16 = T3CON.1 
.................... #bit    T3SYNC = T3CON.2 
.................... #bit    T3SOSCEN = T3CON.3 
.................... #bit    T3CKPS0 = T3CON.4 
.................... #bit    T3CKPS1 = T3CON.5 
.................... #bit    TMR3CS0 = T3CON.6 
.................... #bit    TMR3CS1 = T3CON.7 
.................... #byte SPBRGH1 = 0xFB0 
.................... #byte SPBRG1 = 0xFAF 
.................... #byte RCREG1 = 0xFAE 
.................... #byte TXREG1 = 0xFAD 
.................... #byte TXSTA1 = 0xFAC 
.................... #bit    TX9D = TXSTA1.0 
.................... #bit    TRMT = TXSTA1.1 
.................... #bit    BRGH = TXSTA1.2 
.................... #bit    SENDB = TXSTA1.3 
.................... #bit    SYNC = TXSTA1.4 
.................... #bit    TXEN = TXSTA1.5 
.................... #bit    TX9 = TXSTA1.6 
.................... #bit    CSRC = TXSTA1.7 
.................... #byte RCSTA1 = 0xFAB 
.................... #bit    RX9D = RCSTA1.0 
.................... #bit    OERR = RCSTA1.1 
.................... #bit    FERR = RCSTA1.2 
.................... #bit    ADDEN = RCSTA1.3 
.................... #bit    CREN = RCSTA1.4 
.................... #bit    SREN = RCSTA1.5 
.................... #bit    RX9 = RCSTA1.6 
.................... #bit    SPEN = RCSTA1.7 
.................... #byte EEADR = 0xFA9 
.................... #byte EEDATA = 0xFA8 
.................... #byte EECON2 = 0xFA7 
.................... #byte EECON1 = 0xFA6 
.................... #bit    RD = EECON1.0 
.................... #bit    WR = EECON1.1 
.................... #bit    WREN = EECON1.2 
.................... #bit    WRERR = EECON1.3 
.................... #bit    FREE = EECON1.4 
.................... #bit    CFGS = EECON1.6 
.................... #bit    EEPGD = EECON1.7 
.................... #byte IPR3 = 0xFA5 
.................... #bit    TMR1GIP = IPR3.0 
.................... #bit    TMR3GIP = IPR3.1 
.................... #bit    TMR5GIP = IPR3.2 
.................... #bit    CTMUIP = IPR3.3 
.................... #bit    TX2IP = IPR3.4 
.................... #bit    RC2IP = IPR3.5 
.................... #bit    BCL2IP = IPR3.6 
.................... #bit    SSP2IP = IPR3.7 
.................... #byte PIR3 = 0xFA4 
.................... #bit    TMR1GIF = PIR3.0 
.................... #bit    TMR3GIF = PIR3.1 
.................... #bit    TMR5GIF = PIR3.2 
.................... #bit    CTMUIF = PIR3.3 
.................... #bit    TX2IF = PIR3.4 
.................... #bit    RC2IF = PIR3.5 
.................... #bit    BCL2IF = PIR3.6 
.................... #bit    SSP2IF = PIR3.7 
.................... #byte PIE3 = 0xFA3 
.................... #bit    TMR1GIE = PIE3.0 
.................... #bit    TMR3GIE = PIE3.1 
.................... #bit    TMR5GIE = PIE3.2 
.................... #bit    CTMUIE = PIE3.3 
.................... #bit    TX2IE = PIE3.4 
.................... #bit    RC2IE = PIE3.5 
.................... #bit    BCL2IE = PIE3.6 
.................... #bit    SSP2IE = PIE3.7 
.................... #byte IPR2 = 0xFA2 
.................... #bit    CCP2IP = IPR2.0 
.................... #bit    TMR3IP = IPR2.1 
.................... #bit    HLVDIP = IPR2.2 
.................... #bit    BCL1IP = IPR2.3 
.................... #bit    EEIP = IPR2.4 
.................... #bit    C2IP = IPR2.5 
.................... #bit    C1IP = IPR2.6 
.................... #bit    OSCFIP = IPR2.7 
.................... #byte PIR2 = 0xFA1 
.................... #bit    CCP2IF = PIR2.0 
.................... #bit    TMR3IF = PIR2.1 
.................... #bit    HLVDIF = PIR2.2 
.................... #bit    BCL1IF = PIR2.3 
.................... #bit    EEIF = PIR2.4 
.................... #bit    C2IF = PIR2.5 
.................... #bit    C1IF = PIR2.6 
.................... #bit    OSCFIF = PIR2.7 
.................... #byte PIE2 = 0xFA0 
.................... #bit    CCP2IE = PIE2.0 
.................... #bit    TMR3IE = PIE2.1 
.................... #bit    HLVDIE = PIE2.2 
.................... #bit    BCL1IE = PIE2.3 
.................... #bit    EEIE = PIE2.4 
.................... #bit    C2IE = PIE2.5 
.................... #bit    C1IE = PIE2.6 
.................... #bit    OSCFIE = PIE2.7 
.................... #byte IPR1 = 0xF9F 
.................... #bit    TMR1IP = IPR1.0 
.................... #bit    TMR2IP = IPR1.1 
.................... #bit    CCP1IP = IPR1.2 
.................... #bit    SSP1IP = IPR1.3 
.................... #bit    TX1IP = IPR1.4 
.................... #bit    RC1IP = IPR1.5 
.................... #bit    ADIP = IPR1.6 
.................... #byte PIR1 = 0xF9E 
.................... #bit    TMR1IF = PIR1.0 
.................... #bit    TMR2IF = PIR1.1 
.................... #bit    CCP1IF = PIR1.2 
.................... #bit    SSP1IF = PIR1.3 
.................... #bit    TX1IF = PIR1.4 
.................... #bit    RC1IF = PIR1.5 
.................... #bit    ADIF = PIR1.6 
.................... #byte PIE1 = 0xF9D 
.................... #bit    TMR1IE = PIE1.0 
.................... #bit    TMR2IE = PIE1.1 
.................... #bit    CCP1IE = PIE1.2 
.................... #bit    SSP1IE = PIE1.3 
.................... #bit    TX1IE = PIE1.4 
.................... #bit    RC1IE = PIE1.5 
.................... #bit    ADIE = PIE1.6 
.................... #byte HLVDCON = 0xF9C 
.................... #bit    HLVDL0 = HLVDCON.0 
.................... #bit    HLVDL1 = HLVDCON.1 
.................... #bit    HLVDL2 = HLVDCON.2 
.................... #bit    HLVDL3 = HLVDCON.3 
.................... #bit    HLVDEN = HLVDCON.4 
.................... #bit    IRVST = HLVDCON.5 
.................... #bit    BGVST = HLVDCON.6 
.................... #bit    VDIRMAG = HLVDCON.7 
.................... #byte OSCTUNE = 0xF9B 
.................... #bit    TUN0 = OSCTUNE.0 
.................... #bit    TUN1 = OSCTUNE.1 
.................... #bit    TUN2 = OSCTUNE.2 
.................... #bit    TUN3 = OSCTUNE.3 
.................... #bit    TUN4 = OSCTUNE.4 
.................... #bit    TUN5 = OSCTUNE.5 
.................... #bit    PLLEN = OSCTUNE.6 
.................... #bit    INTSRC = OSCTUNE.7 
.................... #byte TRISE = 0xF96 
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
.................... #bit    WPUE3 = TRISE.7 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
.................... #byte PORTE = 0xF84 
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #byte PORTB = 0xF81 
.................... #byte PORTA = 0xF80 
.................... #byte IPR5 = 0xF7F 
.................... #bit    TMR4IP = IPR5.0 
.................... #bit    TMR5IP = IPR5.1 
.................... #bit    TMR6IP = IPR5.2 
.................... #byte PIR5 = 0xF7E 
.................... #bit    TMR4IF = PIR5.0 
.................... #bit    TMR5IF = PIR5.1 
.................... #bit    TMR6IF = PIR5.2 
.................... #byte PIE5 = 0xF7D 
.................... #bit    TMR4IE = PIE5.0 
.................... #bit    TMR5IE = PIE5.1 
.................... #bit    TMR6IE = PIE5.2 
.................... #byte IPR4 = 0xF7C 
.................... #bit    CCP3IP = IPR4.0 
.................... #bit    CCP4IP = IPR4.1 
.................... #bit    CCP5IP = IPR4.2 
.................... #byte PIR4 = 0xF7B 
.................... #bit    CCP3IF = PIR4.0 
.................... #bit    CCP4IF = PIR4.1 
.................... #bit    CCP5IF = PIR4.2 
.................... #byte PIE4 = 0xF7A 
.................... #bit    CCP3IE = PIE4.0 
.................... #bit    CCP4IE = PIE4.1 
.................... #bit    CCP5IE = PIE4.2 
.................... #byte CM1CON0 = 0xF79 
.................... #bit    C1CH0 = CM1CON0.0 
.................... #bit    C1CH1 = CM1CON0.1 
.................... #bit    C1R = CM1CON0.2 
.................... #bit    C1SP = CM1CON0.3 
.................... #bit    C1POL = CM1CON0.4 
.................... #bit    C1OE = CM1CON0.5 
.................... //#bit    C1OUT = CM1CON0.6 
.................... #bit    C1ON = CM1CON0.7 
.................... #byte CM2CON0 = 0xF78 
.................... #bit    C2CH0 = CM2CON0.0 
.................... #bit    C2CH1 = CM2CON0.1 
.................... #bit    C2R = CM2CON0.2 
.................... #bit    C2SP = CM2CON0.3 
.................... #bit    C2POL = CM2CON0.4 
.................... #bit    C2OE = CM2CON0.5 
.................... //#bit    C2OUT = CM2CON0.6 
.................... #bit    C2ON = CM2CON0.7 
.................... #byte CM2CON1 = 0xF77 
.................... #bit    C2SYNC = CM2CON1.0 
.................... #bit    C1SYNC = CM2CON1.1 
.................... #bit    C2HYS = CM2CON1.2 
.................... #bit    C1HYS = CM2CON1.3 
.................... #bit    C2RSEL = CM2CON1.4 
.................... #bit    C1RSEL = CM2CON1.5 
.................... #bit    MC2OUT = CM2CON1.6 
.................... #bit    MC1OUT = CM2CON1.7 
.................... #byte SPBRGH2 = 0xF76 
.................... #byte SPBRG2 = 0xF75 
.................... #byte RCREG2 = 0xF74 
.................... #byte TXREG2 = 0xF73 
.................... #byte TXSTA2 = 0xF72 
.................... #bit    U2TX9D = TXSTA2.0 
.................... #bit    U2TRMT = TXSTA2.1 
.................... #bit    U2BRGH = TXSTA2.2 
.................... #bit    U2SENDB = TXSTA2.3 
.................... #bit    U2SYNC = TXSTA2.4 
.................... #bit    U2TXEN = TXSTA2.5 
.................... #bit    U2TX9 = TXSTA2.6 
.................... #bit    U2CSRC = TXSTA2.7 
.................... #byte RCSTA2 = 0xF71 
.................... #bit    U1RX9D = RCSTA2.0 
.................... #bit    U1OERR = RCSTA2.1 
.................... #bit    U1FERR = RCSTA2.2 
.................... #bit    U1ADDEN = RCSTA2.3 
.................... #bit    U1CREN = RCSTA2.4 
.................... #bit    U1SREN = RCSTA2.5 
.................... #bit    U1RX9 = RCSTA2.6 
.................... #bit    U1SPEN = RCSTA2.7 
.................... #byte BAUDCON2 = 0xF70 
.................... #bit    U1ABDEN = BAUDCON2.0 
.................... #bit    U1WUE = BAUDCON2.1 
.................... #bit    U1BRG16 = BAUDCON2.3 
.................... #bit    U1CKTXP = BAUDCON2.4 
.................... #bit    U1DTRXP = BAUDCON2.5 
.................... #bit    U1RCIDL = BAUDCON2.6 
.................... #bit    U1ABDOVF = BAUDCON2.7 
.................... #byte SSP2BUF = 0xF6F 
.................... #byte SSP2ADD = 0xF6E 
.................... #byte SSP2STAT = 0xF6D 
.................... #bit    SP2BF = SSP2STAT.0 
.................... #bit    SP2UA = SSP2STAT.1 
.................... #bit    SP2R = SSP2STAT.2 
.................... #bit    SP2S = SSP2STAT.3 
.................... #bit    SP2P = SSP2STAT.4 
.................... #bit    SP2D = SSP2STAT.5 
.................... #bit    SP2CKE = SSP2STAT.6 
.................... #bit    SP2SMP = SSP2STAT.7 
.................... #byte SSP2CON1 = 0xF6C 
.................... #bit    SP2SSPM0 = SSP2CON1.0 
.................... #bit    SP2SSPM1 = SSP2CON1.1 
.................... #bit    SP2SSPM2 = SSP2CON1.2 
.................... #bit    SP2SSPM3 = SSP2CON1.3 
.................... #bit    SP2CKP = SSP2CON1.4 
.................... #bit    SP2SSPEN = SSP2CON1.5 
.................... #bit    SP2SSPOV = SSP2CON1.6 
.................... #bit    SP2WCOL = SSP2CON1.7 
.................... #byte SSP2CON2 = 0xF6B 
.................... #bit    SP2SEN = SSP2CON2.0 
.................... #bit    SP2RSEN = SSP2CON2.1 
.................... #bit    SP2PEN = SSP2CON2.2 
.................... #bit    SP2RCEN = SSP2CON2.3 
.................... #bit    SP2ACKEN = SSP2CON2.4 
.................... #bit    SP2ACKDT = SSP2CON2.5 
.................... #bit    SP2ACKSTAT = SSP2CON2.6 
.................... #bit    SP2GCEN = SSP2CON2.7 
.................... #byte SSP2MSK = 0xF6A 
.................... #byte SSP2CON3 = 0xF69 
.................... #bit    SP2DHEN = SSP2CON3.0 
.................... #bit    SP2AHEN = SSP2CON3.1 
.................... #bit    SP2SBCDE = SSP2CON3.2 
.................... #bit    SP2SDAHT = SSP2CON3.3 
.................... #bit    SP2BOEN = SSP2CON3.4 
.................... #bit    SP2SCIE = SSP2CON3.5 
.................... #bit    SP2PCIE = SSP2CON3.6 
.................... #bit    SP2ACKTIM = SSP2CON3.7 
.................... #word CCPR2 = 0xF68 
.................... #byte CCP2CON = 0xF66 
.................... #bit    CCP2M0 = CCP2CON.0 
.................... #bit    CCP2M1 = CCP2CON.1 
.................... #bit    CCP2M2 = CCP2CON.2 
.................... #bit    CCP2M3 = CCP2CON.3 
.................... #bit    CCP2DC2B0 = CCP2CON.4 
.................... #bit    CCP2DC2B1 = CCP2CON.5 
.................... #bit    CCP2P2M0 = CCP2CON.6 
.................... #bit    CCP2P2M1 = CCP2CON.7 
.................... #byte PWM2CON = 0xF65 
.................... #bit    P2DC0 = PWM2CON.0 
.................... #bit    P2DC1 = PWM2CON.1 
.................... #bit    P2DC2 = PWM2CON.2 
.................... #bit    P2DC3 = PWM2CON.3 
.................... #bit    P2DC4 = PWM2CON.4 
.................... #bit    P2DC5 = PWM2CON.5 
.................... #bit    P2DC6 = PWM2CON.6 
.................... #bit    P2RSEN = PWM2CON.7 
.................... #byte ECCP2AS = 0xF64 
.................... #bit    P2SSBD0 = ECCP2AS.0 
.................... #bit    P2SSBD1 = ECCP2AS.1 
.................... #bit    P2SSAC0 = ECCP2AS.2 
.................... #bit    P2SSAC1 = ECCP2AS.3 
.................... #bit    CCP2AS0 = ECCP2AS.4 
.................... #bit    CCP2AS1 = ECCP2AS.5 
.................... #bit    CCP2AS2 = ECCP2AS.6 
.................... #bit    CCP2ASE = ECCP2AS.7 
.................... #byte PSTR2CON = 0xF63 
.................... #bit    STR2A = PSTR2CON.0 
.................... #bit    STR2B = PSTR2CON.1 
.................... #bit    STR2C = PSTR2CON.2 
.................... #bit    STR2D = PSTR2CON.3 
.................... #bit    STR2SYNC = PSTR2CON.4 
.................... #byte IOCB = 0xF62 
.................... #bit    IOCB4 = IOCB.4 
.................... #bit    IOCB5 = IOCB.5 
.................... #bit    IOCB6 = IOCB.6 
.................... #bit    IOCB7 = IOCB.7 
.................... #byte WPUB = 0xF61 
.................... #byte SLRCON = 0xF60 
.................... #bit    SLRA = SLRCON.0 
.................... #bit    SLRB = SLRCON.1 
.................... #bit    SLRC = SLRCON.2 
.................... #bit    SLRD = SLRCON.3 
.................... #bit    SLRE = SLRCON.4 
.................... #word CCPR3 = 0xF5F 
.................... #byte CCP3CON = 0xF5D 
.................... #bit    CCP3M0 = CCP3CON.0 
.................... #bit    CCP3M1 = CCP3CON.1 
.................... #bit    CCP3M2 = CCP3CON.2 
.................... #bit    CCP3M3 = CCP3CON.3 
.................... #bit    CCP3DC3B0 = CCP3CON.4 
.................... #bit    CCP3DC3B1 = CCP3CON.5 
.................... #bit    CCP3P3M0 = CCP3CON.6 
.................... #bit    CCP3P3M1 = CCP3CON.7 
.................... #byte PWM3CON = 0xF5C 
.................... #bit    P3DC0 = PWM3CON.0 
.................... #bit    P3DC1 = PWM3CON.1 
.................... #bit    P3DC2 = PWM3CON.2 
.................... #bit    P3DC3 = PWM3CON.3 
.................... #bit    P3DC4 = PWM3CON.4 
.................... #bit    P3DC5 = PWM3CON.5 
.................... #bit    P3DC6 = PWM3CON.6 
.................... #bit    P3RSEN = PWM3CON.7 
.................... #byte ECCP3AS = 0xF5B 
.................... #bit    P3SSBD0 = ECCP3AS.0 
.................... #bit    P3SSBD1 = ECCP3AS.1 
.................... #bit    P3SSAC0 = ECCP3AS.2 
.................... #bit    P3SSAC1 = ECCP3AS.3 
.................... #bit    CCP3AS0 = ECCP3AS.4 
.................... #bit    CCP3AS1 = ECCP3AS.5 
.................... #bit    CCP3AS2 = ECCP3AS.6 
.................... #bit    CCP3ASE = ECCP3AS.7 
.................... #byte PSTR3CON = 0xF5A 
.................... #bit    STR3A = PSTR3CON.0 
.................... #bit    STR3B = PSTR3CON.1 
.................... #bit    STR3C = PSTR3CON.2 
.................... #bit    STR3D = PSTR3CON.3 
.................... #bit    STR3SYNC = PSTR3CON.4 
.................... #word CCPR4 = 0xF59 
.................... #byte CCP4CON = 0xF57 
.................... #bit    CCP4M0 = CCP4CON.0 
.................... #bit    CCP4M1 = CCP4CON.1 
.................... #bit    CCP4M2 = CCP4CON.2 
.................... #bit    CCP4M3 = CCP4CON.3 
.................... #bit    CCP4DC4B0 = CCP4CON.4 
.................... #bit    CCP4DC4B1 = CCP4CON.5 
.................... #word CCPR5 = 0xF56 
.................... #byte CCP5CON = 0xF54 
.................... #bit    CCP5M0 = CCP5CON.0 
.................... #bit    CCP5M1 = CCP5CON.1 
.................... #bit    CCP5M2 = CCP5CON.2 
.................... #bit    CCP5M3 = CCP5CON.3 
.................... #bit    CCP5DC5B0 = CCP5CON.4 
.................... #bit    CCP5DC5B1 = CCP5CON.5 
.................... #byte TMR4 = 0xF53 
.................... #byte PR4 = 0xF52 
.................... #byte T4CON = 0xF51 
.................... #bit    T4CKPS0 = T4CON.0 
.................... #bit    T4CKPS1 = T4CON.1 
.................... #bit    TMR4ON = T4CON.2 
.................... #bit    T4OUTPS0 = T4CON.3 
.................... #bit    T4OUTPS1 = T4CON.4 
.................... #bit    T4OUTPS2 = T4CON.5 
.................... #bit    T4OUTPS3 = T4CON.6 
.................... #word TMR5 = 0xF50 
.................... #byte T5CON = 0xF4E 
.................... #bit    TMR5ON = T5CON.0 
.................... #bit    T5RD16 = T5CON.1 
.................... #bit    T5SYNC = T5CON.2 
.................... #bit    T5SOSCEN = T5CON.3 
.................... #bit    T5CKPS0 = T5CON.4 
.................... #bit    T5CKPS1 = T5CON.5 
.................... #bit    TMR5CS0 = T5CON.6 
.................... #bit    TMR5CS1 = T5CON.7 
.................... #byte T5GCON = 0xF4D 
.................... #bit    T5GSS0 = T5GCON.0 
.................... #bit    T5GSS1 = T5GCON.1 
.................... #bit    T5GVAL = T5GCON.2 
.................... #bit    T5GGO = T5GCON.3 
.................... #bit    T5GSPM = T5GCON.4 
.................... #bit    T5GTM = T5GCON.5 
.................... #bit    T5GPOL = T5GCON.6 
.................... #bit    TMR5GE = T5GCON.7 
.................... #byte TMR6 = 0xF4C 
.................... #byte PR6 = 0xF4B 
.................... #byte T6CON = 0xF4A 
.................... #bit    T6CKPS0 = T6CON.0 
.................... #bit    T6CKPS1 = T6CON.1 
.................... #bit    TMR6ON = T6CON.2 
.................... #bit    T6OUTPS0 = T6CON.3 
.................... #bit    T6OUTPS1 = T6CON.4 
.................... #bit    T6OUTPS2 = T6CON.5 
.................... #bit    T6OUTPS3 = T6CON.6 
.................... #byte CCPTMRS0 = 0xF49 
.................... #bit    C1TSEL0 = CCPTMRS0.0 
.................... #bit    C1TSEL1 = CCPTMRS0.1 
.................... #bit    C2TSEL0 = CCPTMRS0.3 
.................... #bit    C2TSEL1 = CCPTMRS0.4 
.................... #bit    C3TSEL0 = CCPTMRS0.6 
.................... #bit    C3TSEL1 = CCPTMRS0.7 
.................... #byte CCPTMRS1 = 0xF48 
.................... #bit    C4TSEL0 = CCPTMRS1.0 
.................... #bit    C4TSEL1 = CCPTMRS1.1 
.................... #bit    C5TSEL0 = CCPTMRS1.2 
.................... #bit    C5TSEL1 = CCPTMRS1.3 
.................... #byte SRCON0 = 0xF47 
.................... #bit    SRPR = SRCON0.0 
.................... #bit    SRPS = SRCON0.1 
.................... #bit    SRNQEN = SRCON0.2 
.................... #bit    SRQEN = SRCON0.3 
.................... #bit    SRCLK0 = SRCON0.4 
.................... #bit    SRCLK1 = SRCON0.5 
.................... #bit    SRCLK2 = SRCON0.6 
.................... #bit    SRLEN = SRCON0.7 
.................... #byte SRCON1 = 0xF46 
.................... #bit    SRRC1E = SRCON1.0 
.................... #bit    SRRC2E = SRCON1.1 
.................... #bit    SRRCKE = SRCON1.2 
.................... #bit    SRRPE = SRCON1.3 
.................... #bit    SRSC1E = SRCON1.4 
.................... #bit    SRSC2E = SRCON1.5 
.................... #bit    SRSCKE = SRCON1.6 
.................... #bit    SRSPE = SRCON1.7 
.................... #word CTMUCON = 0xF45 
.................... #byte CTMUICON = 0xF43 
.................... #bit    IRNG0 = CTMUICON.0 
.................... #bit    IRNG1 = CTMUICON.1 
.................... #bit    ITRIM0 = CTMUICON.2 
.................... #bit    ITRIM1 = CTMUICON.3 
.................... #bit    ITRIM2 = CTMUICON.4 
.................... #bit    ITRIM3 = CTMUICON.5 
.................... #bit    ITRIM4 = CTMUICON.6 
.................... #bit    ITRIM5 = CTMUICON.7 
.................... #byte VREFCON0 = 0xF42 
.................... #bit    FVRS0 = VREFCON0.4 
.................... #bit    FVRS1 = VREFCON0.5 
.................... #bit    FVRST = VREFCON0.6 
.................... #bit    FVREN = VREFCON0.7 
.................... #byte VREFCON1 = 0xF41 
.................... #bit    DACNSS = VREFCON1.0 
.................... #bit    DACPSS0 = VREFCON1.2 
.................... #bit    DACPSS1 = VREFCON1.3 
.................... #bit    DACOE = VREFCON1.5 
.................... #bit    DACLPS = VREFCON1.6 
.................... #bit    DACEN = VREFCON1.7 
.................... #byte VREFCON2 = 0xF40 
.................... #byte PMD0 = 0xF3F 
.................... #bit    TMR1MD = PMD0.0 
.................... #bit    TMR2MD = PMD0.1 
.................... #bit    TMR3MD = PMD0.2 
.................... #bit    TMR4MD = PMD0.3 
.................... #bit    TMR5MD = PMD0.4 
.................... #bit    TMR6MD = PMD0.5 
.................... #bit    UART1MD = PMD0.6 
.................... #bit    UART2MD = PMD0.7 
.................... #byte PMD1 = 0xF3E 
.................... #bit    CCP1MD = PMD1.0 
.................... #bit    CCP2MD = PMD1.1 
.................... #bit    CCP3MD = PMD1.2 
.................... #bit    CCP4MD = PMD1.3 
.................... #bit    CCP5MD = PMD1.4 
.................... #bit    MSSP1MD = PMD1.6 
.................... #bit    MSSP2MD = PMD1.7 
.................... #byte PMD2 = 0xF3D 
.................... #bit    ADCMD = PMD2.0 
.................... #bit    CMP1MD = PMD2.1 
.................... #bit    CMP2MD = PMD2.2 
.................... #bit    CTMUMD = PMD2.3 
.................... #byte ANSELE = 0xF3C 
.................... #byte ANSELD = 0xF3B 
.................... #byte ANSELC = 0xF3A 
.................... #bit    ANSC2 = ANSELC.2 
.................... #bit    ANSC3 = ANSELC.3 
.................... #bit    ANSC4 = ANSELC.4 
.................... #bit    ANSC5 = ANSELC.5 
.................... #bit    ANSC6 = ANSELC.6 
.................... #bit    ANSC7 = ANSELC.7 
.................... #byte ANSELB = 0xF39 
.................... #byte ANSELA = 0xF38 
.................... #bit    ANSA0 = ANSELA.0 
.................... #bit    ANSA1 = ANSELA.1 
.................... #bit    ANSA2 = ANSELA.2 
.................... #bit    ANSA3 = ANSELA.3 
.................... #bit    ANSA5 = ANSELA.5 
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
0B98:  MOVLB  1
0B9A:  CLRF   x76
....................  
0B9C:  CLRF   x77
....................  
0B9E:  MOVLB  2
0BA0:  CLRF   x2C
....................  
0BA2:  CLRF   x2D
....................  
0BA4:  BSF    F9D.5
....................  
0BA6:  MOVLB  0
0BA8:  GOTO   00F8 (RETURN)
....................  
....................  
....................  
....................  
....................  
....................  
....................  
0BAC:  MOVLB  1
0BAE:  MOVF   x77,W
0BB0:  INCF   x77,F
0BB2:  CLRF   03
0BB4:  ADDLW  C2
0BB6:  MOVWF  FE9
0BB8:  MOVLW  00
0BBA:  ADDWFC 03,W
0BBC:  MOVWF  FEA
0BBE:  MOVFF  FEF,397
0BC2:  MOVLB  3
....................  
....................  
0BC4:  MOVLB  1
0BC6:  MOVF   x77,W
0BC8:  SUBLW  B3
0BCA:  BC    0BCE
....................  
0BCC:  CLRF   x77
....................  
....................  
0BCE:  MOVLB  3
0BD0:  MOVFF  397,01
....................  
0BD4:  MOVLB  0
0BD6:  GOTO   0BF8 (RETURN)
....................  
....................  
....................  
*
1142:  MOVLW  B4
1144:  BSF    FD8.0
1146:  MOVLB  2
1148:  SUBFWB x2C,W
114A:  MOVLB  3
114C:  MOVWF  xE8
....................  
....................  
114E:  MOVF   xE7,F
1150:  BNZ   1158
1152:  MOVF   xE6,W
1154:  SUBWF  xE8,W
1156:  BC    11D2
....................  
1158:  MOVLW  78
115A:  MOVLB  2
115C:  ADDWF  x2C,W
115E:  MOVLB  3
1160:  MOVWF  xE9
1162:  MOVLW  01
1164:  MOVWF  xEA
1166:  BTFSC  FD8.0
1168:  INCF   xEA,F
116A:  MOVFF  3EA,FEA
116E:  MOVFF  3E9,FE9
1172:  MOVFF  3E5,FE2
1176:  MOVFF  3E4,FE1
117A:  MOVF   xE8,W
117C:  MOVWF  01
117E:  BZ    1188
1180:  MOVFF  FE6,FEE
1184:  DECFSZ 01,F
1186:  BRA    1180
....................  
1188:  MOVF   xE8,W
118A:  SUBWF  xE6,F
118C:  MOVLW  00
118E:  SUBWFB xE7,F
....................  
1190:  MOVF   xE8,W
1192:  ADDWF  xE4,W
1194:  MOVWF  xE9
1196:  MOVLW  00
1198:  ADDWFC xE5,W
119A:  MOVWF  xEA
119C:  MOVLW  01
119E:  MOVWF  FEA
11A0:  MOVLW  78
11A2:  MOVWF  FE9
11A4:  MOVFF  3EA,FE2
11A8:  MOVFF  3E9,FE1
11AC:  MOVFF  3E7,02
11B0:  MOVFF  3E6,01
11B4:  MOVF   01,F
11B6:  BZ    11BC
11B8:  INCF   02,F
11BA:  BRA    11C0
11BC:  MOVF   02,F
11BE:  BZ    11CC
11C0:  MOVFF  FE6,FEE
11C4:  DECFSZ 01,F
11C6:  BRA    11C0
11C8:  DECFSZ 02,F
11CA:  BRA    11C0
....................  
11CC:  MOVFF  3E6,22C
....................  
11D0:  BRA    121A
....................  
11D2:  MOVLW  78
11D4:  MOVLB  2
11D6:  ADDWF  x2C,W
11D8:  MOVLB  3
11DA:  MOVWF  xE9
11DC:  MOVLW  01
11DE:  MOVWF  xEA
11E0:  BTFSC  FD8.0
11E2:  INCF   xEA,F
11E4:  MOVFF  3EA,FEA
11E8:  MOVFF  3E9,FE9
11EC:  MOVFF  3E5,FE2
11F0:  MOVFF  3E4,FE1
11F4:  MOVFF  3E7,02
11F8:  MOVFF  3E6,01
11FC:  MOVF   01,F
11FE:  BZ    1204
1200:  INCF   02,F
1202:  BRA    1208
1204:  MOVF   02,F
1206:  BZ    1214
1208:  MOVFF  FE6,FEE
120C:  DECFSZ 01,F
120E:  BRA    1208
1210:  DECFSZ 02,F
1212:  BRA    1208
....................  
1214:  MOVF   xE6,W
1216:  MOVLB  2
1218:  ADDWF  x2C,F
....................  
....................  
121A:  MOVLB  2
121C:  MOVF   x2C,W
121E:  SUBLW  B4
1220:  BNZ   1224
....................  
1222:  CLRF   x2C
....................  
....................  
1224:  MOVLB  0
1226:  GOTO   0F98 (RETURN)
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
0BDA:  MOVLB  1
0BDC:  MOVF   x77,W
0BDE:  SUBWF  x76,W
0BE0:  BNZ   0BE8
....................  
0BE2:  MOVLW  00
0BE4:  MOVWF  01
0BE6:  BRA    0C0A
....................  
....................  
0BE8:  MOVFF  394,03
0BEC:  MOVFF  393,395
0BF0:  MOVFF  394,396
0BF4:  MOVLB  0
0BF6:  BRA    0BAC
0BF8:  MOVFF  396,FEA
0BFC:  MOVFF  395,FE9
0C00:  MOVFF  01,FEF
....................  
0C04:  MOVLW  01
0C06:  MOVWF  01
0C08:  MOVLB  1
....................  
0C0A:  MOVLB  0
0C0C:  GOTO   0D9A (RETURN)
....................  
....................  
....................  
*
0F84:  MOVFF  3E2,3E5
0F88:  MOVFF  3E1,3E4
0F8C:  MOVLB  3
0F8E:  CLRF   xE7
0F90:  MOVFF  3E3,3E6
0F94:  MOVLB  0
0F96:  BRA    1142
....................  
0F98:  BSF    F9D.4
....................  
....................  
....................  
....................  
0F9A:  GOTO   0FCC (RETURN)
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
00C6:  MOVLB  1
00C8:  MOVF   x76,W
00CA:  INCF   x76,F
00CC:  CLRF   03
00CE:  ADDLW  C2
00D0:  MOVWF  FE9
00D2:  MOVLW  00
00D4:  ADDWFC 03,W
00D6:  MOVWF  FEA
00D8:  MOVFF  FAE,FEF
....................  
00DC:  MOVF   x76,W
00DE:  SUBLW  B4
00E0:  BNZ   00E4
....................  
00E2:  CLRF   x76
....................  
....................  
00E4:  MOVLB  0
00E6:  BRA    00BA
....................  
00E8:  BTFSC  F9E.5
00EA:  BRA    00C6
....................  
00EC:  BSF    F9D.5
....................  
....................  
00EE:  BCF    F9E.5
00F0:  GOTO   006C
....................  
....................  
....................  
....................  
*
0912:  MOVLB  2
0914:  MOVF   x2C,W
0916:  SUBWF  x2D,W
0918:  BZ    0938
....................  
091A:  MOVF   x2D,W
091C:  INCF   x2D,F
091E:  CLRF   03
0920:  ADDLW  78
0922:  MOVWF  FE9
0924:  MOVLW  01
0926:  ADDWFC 03,W
0928:  MOVWF  FEA
092A:  MOVFF  FEF,FAD
....................  
092E:  MOVF   x2D,W
0930:  SUBLW  B4
0932:  BNZ   0936
....................  
0934:  CLRF   x2D
....................  
....................  
0936:  BRA    093A
....................  
0938:  BCF    F9D.4
....................  
....................  
....................  
093A:  BCF    F9E.4
093C:  MOVLB  0
093E:  GOTO   006C
....................  
....................  
....................  
....................  
....................  
*
00BA:  BTFSS  FAB.1
00BC:  BRA    00C2
....................  
00BE:  BCF    FAB.4
....................  
00C0:  BSF    FAB.4
....................  
....................  
00C2:  GOTO   00E8 (RETURN)
....................  
....................  
.................... #include <18F45K22.h> 
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #define LOADER_END 0x1FFF 
.................... #include <boot.h> 
.................... #undef LOADER_END 
.................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
.................... #define LOADER_END   0x1FFF 
.................... #define LOADER_SIZE  0x3FF 
....................  
.................... #ifndef _bootloader 
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
....................  
.................... /* when in operational software, keep out of the bootloader sections */ 
.................... #org 0, 0xfff {} 
.................... #org 0x1000, 0x1ffe {} 
....................  
.................... #else 
....................  
.................... /* when in the bootloader, keep out of the operational sections */ 
.................... #org 0x2000, 0x7ffe {} 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=64000000) 
.................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
.................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
.................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
.................... #define safe_write_program_memory(address, pointer, size) \ 
....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
....................  
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
*
0994:  MOVFF  3D6,3DC
0998:  MOVFF  3D5,3DB
099C:  MOVFF  3D8,3DE
09A0:  MOVFF  3D7,3DD
09A4:  MOVLB  3
09A6:  MOVF   xDA,F
09A8:  BNZ   09B0
09AA:  MOVF   xD9,W
09AC:  SUBLW  00
09AE:  BC    0A10
.................... { 
....................    if(*su1!=*su2) 
09B0:  MOVFF  3DB,FE9
09B4:  MOVFF  3DC,FEA
09B8:  MOVFF  FEF,3DF
09BC:  MOVFF  3DE,03
09C0:  MOVFF  3DD,FE9
09C4:  MOVFF  3DE,FEA
09C8:  MOVF   FEF,W
09CA:  SUBWF  xDF,W
09CC:  BZ    09FA
....................       return ((*su1<*su2)?-1:+1); 
09CE:  MOVFF  3DC,03
09D2:  MOVFF  3DB,FE9
09D6:  MOVFF  3DC,FEA
09DA:  MOVFF  FEF,3DF
09DE:  MOVFF  3DE,03
09E2:  MOVFF  3DD,FE9
09E6:  MOVFF  3DE,FEA
09EA:  MOVF   FEF,W
09EC:  SUBWF  xDF,W
09EE:  BC    09F4
09F0:  MOVLW  FF
09F2:  BRA    09F6
09F4:  MOVLW  01
09F6:  MOVWF  01
09F8:  BRA    0A14
.................... } 
09FA:  INCF   xDB,F
09FC:  BTFSC  FD8.2
09FE:  INCF   xDC,F
0A00:  INCF   xDD,F
0A02:  BTFSC  FD8.2
0A04:  INCF   xDE,F
0A06:  MOVF   xD9,W
0A08:  BTFSC  FD8.2
0A0A:  DECF   xDA,F
0A0C:  DECF   xD9,F
0A0E:  BRA    09A6
.................... return 0; 
0A10:  MOVLW  00
0A12:  MOVWF  01
.................... } 
0A14:  MOVLB  0
0A16:  RETURN 0
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... /* 
....................  * comm.h 
....................  * 
....................  *  Created on: Mar 23, 2017 
....................  *      Author: asaf 
....................  */ 
....................  
.................... #ifndef COMM_H_ 
.................... #define COMM_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdbool.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
....................  
.................... #define MSG_MAX_MESSAGE_LEN 80 
....................  
.................... #ifndef MIN 
.................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
.................... #endif 
.................... #ifndef MAX 
.................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
.................... #endif 
....................  
.................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
.................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
....................  
.................... void comm_init(); 
.................... bool comm_receive_message(void* buffer, uint16_t* size); 
.................... void comm_send_message(void* buffer, uint16_t size); 
....................  
....................  
....................  
.................... #endif /* COMM_H_ */ 
....................  
....................  
.................... #ifndef BOOT_VERSION_H_ 
.................... #define BOOT_VERSION_H_ 
....................  
.................... #define VERSION_DAY 22 
.................... #define VERSION_MONTH 7 
.................... #define VERSION_YEAR 2018 
.................... #define VERSION_MAJOR 0xB 
.................... #define VERSION_MINOR 1 
....................  
.................... #endif /* BOOT_VERSION_H_ */ 
....................  
....................  
.................... #ifndef MAIN_H_ 
.................... #define MAIN_H_ 
....................  
.................... #define MAIN_ADDRESS 0x2700 
....................  
.................... #define ATOMIC_SET(var, val)    do { \ 
....................                                       disable_interrupts(GLOBAL); \ 
....................                                       var = val; \ 
....................                                       enable_interrupts(GLOBAL); \ 
....................                                 } while(0); 
....................  
.................... #endif /* MAIN_H_ */ 
....................  
....................  
.................... #ifndef INCLUDE_TIMER_H_ 
.................... #define INCLUDE_TIMER_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdbool.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
....................  
.................... typedef void (*timer_func)(void* arg); 
....................  
.................... typedef struct { 
....................   //bool triggred; 
....................   uint32_t expTime; 
....................   void *arg; 
....................   timer_func func; 
.................... } timer_task_t; 
....................  
.................... #INLINE 
.................... uint32_t timer_get_us_count(); 
.................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg); 
.................... void timer_yield(); 
....................  
.................... #endif /* INCLUDE_TIMER_H_ */ 
....................  
....................  
.................... /* 
....................  * uart.h 
....................  * 
....................  *  Created on: Mar 23, 2017 
....................  *      Author: asaf 
....................  */ 
....................  
.................... #ifndef UART_H_ 
.................... #define UART_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... void uart_init(); 
.................... void uart_disable(); 
.................... uint8_t uart_get_byte_blocking(); 
.................... uint8_t uart_get_byte_nonblocking(uint8_t *dst); 
.................... void uart_send(void* buffer, uint8_t size); 
.................... void uart_clear_errors(); 
....................  
.................... #endif /* UART_H_ */ 
....................  
....................  
.................... /* 
....................  * message.h 
....................  * 
....................  *  Created on: Mar 23, 2017 
....................  *      Author: asaf 
....................  */ 
....................  
.................... #ifndef MESSAGE_H_ 
.................... #define MESSAGE_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include "calibration.h" 
.................... #ifndef CALIBRATION_H_ 
.................... #define CALIBRATION_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdbool.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
....................  
.................... #define CALIBRATION_AREA_START 0x4000 
.................... #define CALIBRATION_AREA_END 0x4FFF 
....................  
.................... typedef enum { 
....................   CALIBRATION_TABLE_PARAMS = 0, 
....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
....................   CALIBRATION_TABLE_MAX = 3 
.................... } calibration_table_id_t; 
....................  
.................... typedef enum { 
....................   PARAM_CAL_TBL_VERSION = 0, 
....................   PARAM_SERIAL_NUM = 1, 
....................   PARAM_TEMP_MULT = 2, 
....................   PARAM_FWD_MULT = 3, 
....................   PARAM_REV_TRESH = 4, 
....................   PARAM_INP_PWR_MULT = 5, 
....................   PARAM_PWR_CURRENT_MULT = 6, 
....................   PARAM_PRE_AMP_MULT = 7, 
....................   PARAM_ISENSE_PA1_MULT = 8, 
....................   PARAM_ISENSE_PA2_MULT = 9, 
....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
....................   PARAM_TX_ON_TIMING_USEC = 11, 
....................   PARAM_TX_OFF_TIMING_USEC = 12, 
....................   PARAM_PA_ON_TIMING_USEC = 13, 
....................   PARAM_PA_OFF_TIMING_USEC = 14, 
....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
.................... } calibration_param_t; 
....................  
.................... #define CALIBRATION_TABLE_INDEX_MAX 32 
....................  
.................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
.................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
.................... #INLINE 
.................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
.................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
....................  
.................... #endif /* CALIBRATION_H_ */ 
....................  
....................  
.................... enum { 
....................   NUM_ADC_SAMPLES = 4, 
.................... }; 
....................  
.................... enum { 
....................   OP_CONTROL_MESSAGE = 0x00, 
....................   OP_VERSION_REQUEST_MESSAGE = 0x02, 
....................   OP_CHANGE_MODE_MESSAGE = 0x03, 
....................   OP_SET_CALIBRATION_TABLE_MESSAGE = 0x04, 
....................   OP_GET_CALIBRATION_TABLE_MESSAGE = 0x05, 
....................   OP_SET_DATA_LINE_MESSAGE = 0x06, 
....................   OP_GET_DATA_LINE_MESSAGE = 0x07, 
....................   OP_FINISH_UPDATE_PROCESS_MESSAGE = 0x08, 
....................   OP_BIT_STATUS_REQUEST_MESSAGE = 0x09, 
.................... }; 
....................  
.................... enum { 
....................   OP_ACK_RESPONSE = 0x80, 
....................   OP_SF_STATUS_RESPONSE = 0x81, 
....................   OP_VERSION_RESPONSE = 0x82, 
....................   OP_GET_CALIBRATION_TABLE_RESPONSE = 0x85, 
....................   OP_SET_DATA_LINE_RESPONSE = 0x86, 
....................   OP_GET_DATA_LINE_RESPONSE = 0x87, 
....................   OP_BIT_STATUS_RESPONSE = 0x89, 
.................... }; 
....................  
.................... typedef enum { 
....................   MODE_OPERATIONAL = 0, 
....................   MODE_TECHNICIAN = 1, 
....................   MODE_MAINTENANCE = 2, 
.................... } software_mode_t; 
....................  
.................... enum { 
....................   CALIBRATION_TABLE_TEMP = 0, 
....................   CALIBRATION_TABLE_FWD = 1, 
....................   CALIBRATION_TABLE_REV = 2, 
....................   CALIBRATION_TABLE_INP = 3, 
....................   CALIBRATION_TABLE_CURRENT = 4, 
....................   CALIBRATION_TABLE_PA_BIAS = 5, 
....................   CALIBRATION_TABLE_TIMING = 6, 
....................   CALIBRATION_TABLE_GENERAL = 7, 
.................... }; 
....................  
.................... enum { 
....................   PROGRAMMING_STATUS_OK = 0, 
....................   PROGRAMMING_STATUS_ERROR = 1, 
.................... }; 
....................  
.................... typedef struct message_t { 
....................   uint8_t opcode; 
....................   uint8_t payload[]; /* this will include the payload and the crc */ 
.................... } message_t; 
....................  
.................... typedef struct generic_response_t { 
....................   uint8_t opcode; 
.................... } generic_response_t; 
....................  
.................... /* message payloads*/ 
....................  
.................... typedef struct control_bits_t { 
....................   uint8_t tx_on : 1; 
....................   uint8_t pa_gain : 3; 
....................   uint8_t tx_ant : 1; 
....................   uint8_t amplifier_operation_frequency : 1; 
....................   uint8_t reset : 1; 
....................   uint8_t dont_change : 1; 
.................... } control_bits_t; 
....................  
.................... typedef struct control_message_payload_t { 
....................   control_bits_t bits; 
....................   uint16_t control_identifier; 
.................... } control_message_payload_t; 
....................  
.................... typedef struct change_mode_message_payload_t { 
....................   uint8_t mode; 
.................... } change_mode_message_payload_t; 
....................  
....................  
.................... typedef struct set_calibration_table_message_payload_t { 
....................   uint8_t table_id; 
....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
.................... } set_calibration_table_message_payload_t; 
....................  
.................... typedef struct get_calibration_table_message_payload_t { 
....................   uint8_t table_id; 
.................... } get_calibration_table_message_payload_t; 
....................  
.................... typedef struct set_data_line_payload_t { 
....................   uint32_t address; 
....................   uint8_t data[64]; 
.................... } set_data_line_payload_t; 
....................  
.................... typedef struct get_data_line_payload_t { 
....................   uint32_t address; 
.................... } get_data_line_payload_t; 
....................  
.................... /* responses */ 
....................  
.................... typedef struct ack_response_t { 
....................   generic_response_t generic; 
.................... } ack_response_t; 
....................  
.................... typedef struct sf_status_response_t { 
....................   generic_response_t generic; 
....................   control_bits_t last_control_bits; 
....................   uint16_t tti_counter; 
....................   uint16_t control_identifier; 
....................   uint16_t fwd_power_values[NUM_ADC_SAMPLES]; 
.................... //  uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda move rev power to bit status 
....................   uint16_t input_power_values[NUM_ADC_SAMPLES]; 
....................   //uint16_t pre_amp_power_values[NUM_ADC_SAMPLES];		//yehuda move pre amp to bit status 
....................   uint16_t temperature; 
....................   uint16_t power_amplifier_current; 
....................   uint8_t reverse_power_status;							//Difference between forword power and reverse power compared to general calibration rev tresh param 
.................... } sf_status_response_t; 
....................  
.................... typedef struct bit_status_response_t { 
....................   generic_response_t generic; 
....................   control_bits_t last_control_bits; 
....................   uint16_t tti_counter; 
....................   uint8_t mode; 
....................   uint16_t pre_amp_power_values[NUM_ADC_SAMPLES]; 		//yehuda add pre amp to bit status 
....................   uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda add rev power to bit status 
.................... } bit_status_response_t; 
....................  
.................... typedef struct version_response_t { 
....................   generic_response_t generic; 
....................   uint8_t day; 
....................   uint8_t month; 
....................   uint16_t year; 
....................   uint8_t major; 
....................   uint8_t minor; 
....................   uint16_t serial_number; 
.................... } version_response_t; 
....................  
.................... typedef struct calibration_table_response_t { 
....................   generic_response_t generic; 
....................   uint8_t table_id; 
....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
.................... } calibration_table_response_t; 
....................  
.................... typedef struct set_data_line_response_t { 
....................   generic_response_t generic; 
....................   uint32_t address; 
....................   uint8_t status; 
.................... } set_data_line_response_t; 
....................  
.................... typedef struct get_data_line_response_t { 
....................   generic_response_t generic; 
....................   uint32_t address; 
....................   uint8_t data[64]; 
.................... } get_data_line_response_t; 
....................  
.................... #endif /* MESSAGE_H_ */ 
....................  
....................  
.................... #ifndef CALIBRATION_H_ 
.................... #define CALIBRATION_H_ 
....................  
.................... #include <stdint.h> 
.................... #include <stdbool.h> 
....................  
.................... #define CALIBRATION_AREA_START 0x4000 
.................... #define CALIBRATION_AREA_END 0x4FFF 
....................  
.................... typedef enum { 
....................   CALIBRATION_TABLE_PARAMS = 0, 
....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
....................   CALIBRATION_TABLE_MAX = 3 
.................... } calibration_table_id_t; 
....................  
.................... typedef enum { 
....................   PARAM_CAL_TBL_VERSION = 0, 
....................   PARAM_SERIAL_NUM = 1, 
....................   PARAM_TEMP_MULT = 2, 
....................   PARAM_FWD_MULT = 3, 
....................   PARAM_REV_TRESH = 4, 
....................   PARAM_INP_PWR_MULT = 5, 
....................   PARAM_PWR_CURRENT_MULT = 6, 
....................   PARAM_PRE_AMP_MULT = 7, 
....................   PARAM_ISENSE_PA1_MULT = 8, 
....................   PARAM_ISENSE_PA2_MULT = 9, 
....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
....................   PARAM_TX_ON_TIMING_USEC = 11, 
....................   PARAM_TX_OFF_TIMING_USEC = 12, 
....................   PARAM_PA_ON_TIMING_USEC = 13, 
....................   PARAM_PA_OFF_TIMING_USEC = 14, 
....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
.................... } calibration_param_t; 
....................  
.................... #define CALIBRATION_TABLE_INDEX_MAX 32 
....................  
.................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
.................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
.................... #INLINE 
.................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
.................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
....................  
.................... #endif /* CALIBRATION_H_ */ 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
0E32:  MOVLW  03
0E34:  MOVWF  FEA
0E36:  MOVLW  A1
0E38:  MOVWF  FE9
0E3A:  MOVFF  3A0,FE2
0E3E:  MOVFF  39F,FE1
0E42:  MOVFF  FE6,FEE
....................  
0E46:  BCF    FF2.6
0E48:  BCF    FF2.7
0E4A:  BTFSC  FF2.7
0E4C:  BRA    0E48
0E4E:  CLRF   FF8
0E50:  MOVLW  10
0E52:  MOVWF  FF7
0E54:  CLRF   FF6
0E56:  MOVLW  03
0E58:  MOVWF  FEA
0E5A:  MOVLW  A1
0E5C:  MOVWF  FE9
0E5E:  MOVLW  40
0E60:  MOVLB  3
0E62:  MOVWF  xE1
0E64:  MOVLB  0
0E66:  RCALL  0A38
0E68:  MOVLW  C0
0E6A:  IORWF  FF2,F
0E6C:  MOVLW  01
0E6E:  MOVLB  3
0E70:  MOVWF  xE1
0E72:  MOVLB  0
0E74:  RCALL  0A7A
....................  
0E76:  RETURN 0
....................  
....................  
....................  
....................  
*
096E:  CLRF   FF8
0970:  MOVLW  10
0972:  MOVWF  FF7
0974:  CLRF   FF6
0976:  MOVLW  02
0978:  MOVWF  FEA
097A:  MOVLW  30
097C:  MOVWF  FE9
097E:  MOVLB  3
0980:  CLRF   xDC
0982:  MOVLW  01
0984:  MOVWF  xDB
0986:  MOVLB  0
0988:  RCALL  0950
....................  
098A:  MOVLW  30
098C:  MOVWF  01
098E:  MOVLW  02
0990:  MOVWF  02
....................  
0992:  RETURN 0
....................  
....................  
*
0E78:  RCALL  096E
0E7A:  MOVFF  02,39E
0E7E:  MOVFF  01,39D
....................  
....................  
0E82:  MOVLB  3
0E84:  MOVFF  39E,03
0E88:  MOVFF  39D,39F
0E8C:  MOVFF  39E,3A0
0E90:  MOVF   x9C,W
0E92:  XORLW  FF
0E94:  MOVWF  01
0E96:  BTFSC  FE8.0
0E98:  BRA    0EA6
0E9A:  MOVFF  3A0,FEA
0E9E:  MOVFF  39F,FE9
0EA2:  BCF    FEF.0
0EA4:  BRA    0EB0
0EA6:  MOVFF  3A0,FEA
0EAA:  MOVFF  39F,FE9
0EAE:  BSF    FEF.0
....................  
0EB0:  MOVFF  39E,3A0
0EB4:  MOVFF  39D,39F
0EB8:  MOVLB  0
0EBA:  RCALL  0E32
....................  
0EBC:  RETURN 0
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
0FCE:  RCALL  096E
0FD0:  MOVFF  02,398
0FD4:  MOVFF  01,397
....................  
....................  
0FD8:  MOVLB  3
0FDA:  MOVFF  397,FE9
0FDE:  MOVFF  398,FEA
0FE2:  BSF    FEF.1
....................  
0FE4:  MOVFF  398,3A0
0FE8:  MOVFF  397,39F
0FEC:  MOVLB  0
0FEE:  RCALL  0E32
....................  
0FF0:  GOTO   1506 (RETURN)
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
0AC4:  BCF    xD0.0
....................  
*
0AA4:  MOVLW  80
0AA6:  MOVLB  3
0AA8:  MOVWF  x88
0AAA:  MOVLW  EF
0AAC:  MOVWF  x89
0AAE:  CLRF   x8A
0AB0:  MOVLW  F0
0AB2:  MOVWF  x8B
....................  
0AB4:  MOVLW  04
0AB6:  MOVWF  x8C
0AB8:  MOVLW  6E
0ABA:  MOVWF  x8D
0ABC:  MOVLW  D8
0ABE:  MOVWF  x8E
0AC0:  MOVLW  CF
0AC2:  MOVWF  x8F
....................  
....................  
....................  
....................  
*
0AC6:  CLRF   FF8
0AC8:  CLRF   FF7
0ACA:  CLRF   FF6
0ACC:  MOVLW  03
0ACE:  MOVWF  FEA
0AD0:  MOVLW  90
0AD2:  MOVWF  FE9
0AD4:  CLRF   xDC
0AD6:  MOVLW  40
0AD8:  MOVWF  xDB
0ADA:  MOVLB  0
0ADC:  RCALL  0950
....................  
....................  
0ADE:  MOVLW  03
0AE0:  MOVLB  3
0AE2:  MOVWF  xD6
0AE4:  MOVLW  90
0AE6:  MOVWF  xD5
0AE8:  MOVLW  03
0AEA:  MOVWF  xD8
0AEC:  MOVLW  88
0AEE:  MOVWF  xD7
0AF0:  CLRF   xDA
0AF2:  MOVLW  04
0AF4:  MOVWF  xD9
0AF6:  MOVLB  0
0AF8:  RCALL  0994
0AFA:  MOVF   01,F
0AFC:  BZ    0B1E
....................  
0AFE:  MOVLB  3
0B00:  BSF    xD0.0
....................  
0B02:  MOVLW  03
0B04:  MOVWF  FEA
0B06:  MOVLW  90
0B08:  MOVWF  FE9
0B0A:  MOVLW  03
0B0C:  MOVWF  FE2
0B0E:  MOVLW  88
0B10:  MOVWF  FE1
0B12:  MOVLW  04
0B14:  MOVWF  01
0B16:  MOVFF  FE6,FEE
0B1A:  DECFSZ 01,F
0B1C:  BRA    0B16
....................  
....................  
....................  
....................  
0B1E:  MOVLW  03
0B20:  MOVLB  3
0B22:  MOVWF  xD6
0B24:  MOVLW  98
0B26:  MOVWF  xD5
0B28:  MOVLW  03
0B2A:  MOVWF  xD8
0B2C:  MOVLW  8C
0B2E:  MOVWF  xD7
0B30:  CLRF   xDA
0B32:  MOVLW  04
0B34:  MOVWF  xD9
0B36:  MOVLB  0
0B38:  RCALL  0994
0B3A:  MOVF   01,F
0B3C:  BZ    0B5E
....................  
0B3E:  MOVLB  3
0B40:  BSF    xD0.0
....................  
0B42:  MOVLW  03
0B44:  MOVWF  FEA
0B46:  MOVLW  98
0B48:  MOVWF  FE9
0B4A:  MOVLW  03
0B4C:  MOVWF  FE2
0B4E:  MOVLW  8C
0B50:  MOVWF  FE1
0B52:  MOVLW  04
0B54:  MOVWF  01
0B56:  MOVFF  FE6,FEE
0B5A:  DECFSZ 01,F
0B5C:  BRA    0B56
....................  
....................  
....................  
0B5E:  MOVLB  3
0B60:  BTFSS  xD0.0
0B62:  BRA    0B92
....................  
0B64:  BCF    FF2.6
0B66:  BCF    FF2.7
0B68:  BTFSC  FF2.7
0B6A:  BRA    0B66
0B6C:  CLRF   FF8
0B6E:  CLRF   FF7
0B70:  CLRF   FF6
0B72:  MOVLW  03
0B74:  MOVWF  FEA
0B76:  MOVLW  90
0B78:  MOVWF  FE9
0B7A:  MOVLW  40
0B7C:  MOVWF  xE1
0B7E:  MOVLB  0
0B80:  RCALL  0A38
0B82:  MOVLW  C0
0B84:  IORWF  FF2,F
0B86:  MOVLW  01
0B88:  MOVLB  3
0B8A:  MOVWF  xE1
0B8C:  MOVLB  0
0B8E:  RCALL  0A7A
0B90:  MOVLB  3
....................  
....................  
0B92:  MOVLB  0
0B94:  GOTO   06D8 (RETURN)
....................  
....................  
*
122A:  MOVFF  393,395
122E:  MOVFF  392,394
....................  
....................  
....................  
1232:  MOVLB  3
1234:  CLRF   x96
1236:  CLRF   x97
1238:  CLRF   x98
123A:  CLRF   x99
123C:  CLRF   x9A
123E:  CLRF   x9B
....................  
1240:  MOVLW  86
1242:  MOVWF  x96
....................  
1244:  MOVFF  394,FE9
1248:  MOVFF  395,FEA
124C:  MOVFF  FEF,00
1250:  MOVFF  FEC,01
1254:  MOVFF  FEC,02
1258:  MOVFF  FEC,03
125C:  MOVFF  03,39A
1260:  MOVFF  02,399
1264:  MOVFF  01,398
1268:  MOVFF  00,397
....................  
126C:  CLRF   x9B
....................  
....................  
....................  
126E:  MOVFF  394,FE9
1272:  MOVFF  395,FEA
1276:  MOVFF  FEF,39C
127A:  MOVFF  FEC,39D
127E:  MOVFF  FEC,39E
1282:  MOVFF  FEC,39F
1286:  MOVF   x9F,F
1288:  BNZ   1294
128A:  MOVF   x9E,F
128C:  BNZ   1294
128E:  MOVF   x9D,W
1290:  SUBLW  3F
1292:  BC    12BC
1294:  MOVFF  394,FE9
1298:  MOVFF  395,FEA
129C:  MOVFF  FEF,39C
12A0:  MOVFF  FEC,39D
12A4:  MOVFF  FEC,39E
12A8:  MOVFF  FEC,39F
12AC:  MOVF   x9F,F
12AE:  BNZ   12BC
12B0:  MOVF   x9E,F
12B2:  BNZ   12BC
12B4:  MOVF   x9D,W
12B6:  SUBLW  4F
12B8:  BTFSC  FD8.0
12BA:  BRA    1398
12BC:  MOVFF  394,FE9
12C0:  MOVFF  395,FEA
12C4:  MOVFF  FEF,39C
12C8:  MOVFF  FEC,39D
12CC:  MOVFF  FEC,39E
12D0:  MOVFF  FEC,39F
12D4:  MOVF   x9F,F
12D6:  BNZ   12E2
12D8:  MOVF   x9E,F
12DA:  BNZ   12E2
12DC:  MOVF   x9D,W
12DE:  SUBLW  1F
12E0:  BC    1398
12E2:  MOVFF  394,FE9
12E6:  MOVFF  395,FEA
12EA:  MOVFF  FEF,39C
12EE:  MOVFF  FEC,39D
12F2:  MOVFF  FEC,39E
12F6:  MOVFF  FEC,39F
12FA:  MOVF   x9F,F
12FC:  BNZ   1398
12FE:  MOVF   x9E,F
1300:  BNZ   1398
1302:  MOVF   x9D,W
1304:  SUBLW  FF
1306:  BNC   1398
1308:  BNZ   1310
130A:  MOVF   x9C,W
130C:  SUBLW  FE
130E:  BNC   1398
....................  
1310:  MOVLB  0
1312:  CALL   096E
1316:  MOVFF  02,39D
131A:  MOVFF  01,39C
131E:  MOVLB  3
1320:  MOVFF  39C,FE9
1324:  MOVFF  39D,FEA
1328:  BTFSC  FEF.0
132A:  BRA    1334
....................  
132C:  CLRF   x9C
132E:  MOVLB  0
1330:  RCALL  0E78
1332:  MOVLB  3
....................  
....................  
....................  
1334:  BCF    FF2.6
1336:  BCF    FF2.7
1338:  BTFSC  FF2.7
133A:  BRA    1336
133C:  MOVF   x94,W
133E:  MOVWF  FE9
1340:  MOVF   x95,W
1342:  MOVWF  FEA
1344:  MOVFF  FEF,39C
1348:  MOVFF  FEC,39D
134C:  MOVFF  FEC,39E
1350:  MOVFF  FEC,39F
1354:  MOVF   FED,F
1356:  MOVF   FED,F
1358:  MOVF   FED,F
135A:  MOVLW  04
135C:  ADDWF  x94,W
135E:  MOVWF  xA0
1360:  MOVLW  00
1362:  ADDWFC x95,W
1364:  MOVWF  xA1
1366:  MOVFF  39E,FF8
136A:  MOVFF  39D,FF7
136E:  MOVFF  39C,FF6
1372:  MOVFF  3A1,FEA
1376:  MOVFF  3A0,FE9
137A:  MOVLW  40
137C:  MOVWF  xE1
137E:  MOVLB  0
1380:  CALL   0A38
1384:  MOVLW  C0
1386:  IORWF  FF2,F
1388:  MOVLW  01
138A:  MOVLB  3
138C:  MOVWF  xE1
138E:  MOVLB  0
1390:  CALL   0A7A
....................  
....................  
1394:  BRA    13A4
1396:  MOVLB  3
....................  
1398:  MOVLW  04
139A:  MOVWF  00
139C:  DECFSZ 00,F
139E:  BRA    139C
13A0:  BRA    13A2
13A2:  NOP   
....................  
....................  
....................  
13A4:  MOVLW  03
13A6:  MOVLB  3
13A8:  MOVWF  xDC
13AA:  MOVLW  96
13AC:  MOVWF  xDB
13AE:  CLRF   xDE
13B0:  MOVLW  06
13B2:  MOVWF  xDD
13B4:  MOVLB  0
13B6:  RCALL  0F9E
....................  
13B8:  RETURN 0
....................  
....................  
13BA:  MOVFF  393,395
13BE:  MOVFF  392,394
....................  
....................  
13C2:  MOVLB  3
13C4:  CLRF   x96
13C6:  CLRF   x97
13C8:  CLRF   x98
13CA:  CLRF   x99
13CC:  CLRF   x9A
13CE:  CLRF   x9B
13D0:  CLRF   x9C
13D2:  CLRF   x9D
13D4:  CLRF   x9E
13D6:  CLRF   x9F
13D8:  CLRF   xA0
13DA:  CLRF   xA1
13DC:  CLRF   xA2
13DE:  CLRF   xA3
13E0:  CLRF   xA4
13E2:  CLRF   xA5
13E4:  CLRF   xA6
13E6:  CLRF   xA7
13E8:  CLRF   xA8
13EA:  CLRF   xA9
13EC:  CLRF   xAA
13EE:  CLRF   xAB
13F0:  CLRF   xAC
13F2:  CLRF   xAD
13F4:  CLRF   xAE
13F6:  CLRF   xAF
13F8:  CLRF   xB0
13FA:  CLRF   xB1
13FC:  CLRF   xB2
13FE:  CLRF   xB3
1400:  CLRF   xB4
1402:  CLRF   xB5
1404:  CLRF   xB6
1406:  CLRF   xB7
1408:  CLRF   xB8
140A:  CLRF   xB9
140C:  CLRF   xBA
140E:  CLRF   xBB
1410:  CLRF   xBC
1412:  CLRF   xBD
1414:  CLRF   xBE
1416:  CLRF   xBF
1418:  CLRF   xC0
141A:  CLRF   xC1
141C:  CLRF   xC2
141E:  CLRF   xC3
1420:  CLRF   xC4
1422:  CLRF   xC5
1424:  CLRF   xC6
1426:  CLRF   xC7
1428:  CLRF   xC8
142A:  CLRF   xC9
142C:  CLRF   xCA
142E:  CLRF   xCB
1430:  CLRF   xCC
1432:  CLRF   xCD
1434:  CLRF   xCE
1436:  CLRF   xCF
1438:  CLRF   xD0
143A:  CLRF   xD1
143C:  CLRF   xD2
143E:  CLRF   xD3
1440:  CLRF   xD4
1442:  CLRF   xD5
1444:  CLRF   xD6
1446:  CLRF   xD7
1448:  CLRF   xD8
144A:  CLRF   xD9
144C:  CLRF   xDA
....................  
....................  
144E:  MOVLW  87
1450:  MOVWF  x96
....................  
1452:  MOVFF  394,FE9
1456:  MOVFF  395,FEA
145A:  MOVFF  FEF,00
145E:  MOVFF  FEC,01
1462:  MOVFF  FEC,02
1466:  MOVFF  FEC,03
146A:  MOVFF  03,39A
146E:  MOVFF  02,399
1472:  MOVFF  01,398
1476:  MOVFF  00,397
....................  
147A:  CLRF   FF8
147C:  MOVFF  398,FF7
1480:  MOVFF  397,FF6
1484:  MOVLW  03
1486:  MOVWF  FEA
1488:  MOVLW  9B
148A:  MOVWF  FE9
148C:  CLRF   xDC
148E:  MOVLW  40
1490:  MOVWF  xDB
1492:  MOVLB  0
1494:  CALL   0950
....................  
....................  
1498:  MOVLW  03
149A:  MOVLB  3
149C:  MOVWF  xDC
149E:  MOVLW  96
14A0:  MOVWF  xDB
14A2:  CLRF   xDE
14A4:  MOVLW  45
14A6:  MOVWF  xDD
14A8:  MOVLB  0
14AA:  RCALL  0F9E
....................  
14AC:  RETURN 0
....................  
....................  
....................  
14AE:  MOVLB  3
14B0:  CLRF   x94
14B2:  CLRF   x95
14B4:  CLRF   x96
14B6:  CLRF   x97
14B8:  CLRF   x98
14BA:  CLRF   x99
14BC:  CLRF   x9A
14BE:  CLRF   x9B
14C0:  CLRF   x9C
....................  
14C2:  MOVLW  82
14C4:  MOVWF  x94
....................  
14C6:  MOVLW  16
14C8:  MOVWF  x95
....................  
14CA:  MOVLW  07
14CC:  MOVWF  x96
....................  
14CE:  MOVWF  x98
14D0:  MOVLW  E2
14D2:  MOVWF  x97
....................  
14D4:  MOVLW  0B
14D6:  MOVWF  x99
....................  
14D8:  MOVLW  01
14DA:  MOVWF  x9A
....................  
14DC:  CLRF   x9C
14DE:  CLRF   x9B
....................  
14E0:  MOVLW  03
14E2:  MOVWF  xDC
14E4:  MOVLW  94
14E6:  MOVWF  xDB
14E8:  CLRF   xDE
14EA:  MOVLW  09
14EC:  MOVWF  xDD
14EE:  MOVLB  0
14F0:  RCALL  0F9E
....................  
14F2:  RETURN 0
....................  
....................  
14F4:  MOVLB  3
14F6:  SETF   x95
14F8:  SETF   x94
....................  
....................  
14FA:  CLRF   x96
....................  
14FC:  MOVLW  01
14FE:  MOVWF  x9C
1500:  MOVLB  0
1502:  RCALL  0E78
....................  
1504:  BRA    0FCE
....................  
1506:  MOVLW  80
1508:  MOVLB  3
150A:  MOVWF  x96
....................  
150C:  CLRF   FF8
150E:  MOVLW  07
1510:  MOVWF  FF7
1512:  MOVLW  F0
1514:  MOVWF  FF6
1516:  MOVLW  03
1518:  MOVWF  FEA
151A:  MOVLW  94
151C:  MOVWF  FE9
151E:  MOVLW  02
1520:  MOVWF  xE1
1522:  MOVLB  0
1524:  CALL   0A38
....................  
1528:  MOVLW  03
152A:  MOVLB  3
152C:  MOVWF  xDC
152E:  MOVLW  96
1530:  MOVWF  xDB
1532:  CLRF   xDE
1534:  MOVLW  01
1536:  MOVWF  xDD
1538:  MOVLB  0
153A:  RCALL  0F9E
....................  
153C:  RETURN 0
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
153E:  MOVLW  02
1540:  MOVLB  3
1542:  MOVWF  x91
1544:  MOVLW  3D
1546:  MOVFF  391,38C
154A:  MOVWF  x8B
....................  
....................  
....................  
154C:  CLRF   x8D
154E:  MOVF   x8D,W
1550:  SUBLW  03
1552:  BNC   15D6
....................  
1554:  MOVF   x8D,W
1556:  MULLW  03
1558:  MOVF   FF3,W
155A:  CLRF   x91
155C:  MOVWF  x90
155E:  MOVLW  31
1560:  ADDWF  x90,W
1562:  MOVWF  FE9
1564:  MOVLW  02
1566:  ADDWFC x91,W
1568:  MOVWF  FEA
156A:  MOVFF  FEF,392
156E:  MOVFF  38B,FE9
1572:  MOVFF  38C,FEA
1576:  MOVF   FEF,W
1578:  SUBWF  x92,W
157A:  BNZ   15D2
....................  
....................  
157C:  MOVFF  38C,38F
1580:  MOVFF  38B,38E
....................  
1584:  MOVLW  01
1586:  ADDWF  x8E,F
1588:  MOVLW  00
158A:  ADDWFC x8F,F
....................  
158C:  MOVF   x8D,W
158E:  MULLW  03
1590:  MOVF   FF3,W
1592:  CLRF   x91
1594:  MOVWF  x90
1596:  MOVLW  01
1598:  ADDWF  x90,W
159A:  MOVWF  01
159C:  MOVLW  00
159E:  ADDWFC x91,W
15A0:  MOVWF  03
15A2:  MOVF   01,W
15A4:  ADDLW  31
15A6:  MOVWF  FE9
15A8:  MOVLW  02
15AA:  ADDWFC 03,W
15AC:  MOVWF  FEA
15AE:  MOVFF  FEC,391
15B2:  MOVF   FED,F
15B4:  MOVFF  FEF,390
15B8:  MOVLW  03
15BA:  MOVWF  FEA
15BC:  MOVLW  90
15BE:  MOVWF  FE9
15C0:  MOVFF  38F,393
15C4:  MOVFF  38E,392
15C8:  MOVLB  0
15CA:  CALL   0942
....................  
15CE:  BRA    15D6
15D0:  MOVLB  3
....................  
....................  
15D2:  INCF   x8D,F
15D4:  BRA    154E
15D6:  MOVLB  0
....................  
15D8:  GOTO   1604 (RETURN)
....................  
....................  
....................  
....................  
....................  
15DC:  MOVLW  02
15DE:  MOVLB  3
15E0:  MOVWF  x8C
15E2:  MOVLW  3D
15E4:  MOVWF  x8B
15E6:  MOVLW  03
15E8:  MOVWF  x8E
15EA:  MOVLW  88
15EC:  MOVWF  x8D
15EE:  MOVLB  0
15F0:  GOTO   0D88
15F4:  MOVLB  3
15F6:  BCF    x8A.0
15F8:  BTFSC  01.0
15FA:  BSF    x8A.0
....................  
15FC:  BTFSS  x8A.0
15FE:  BRA    1604
....................  
1600:  MOVLB  0
1602:  BRA    153E
....................  
1604:  MOVLB  0
1606:  BRA    15DC
....................  
1608:  GOTO   06E2 (RETURN)
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
*
00FC:  RETURN 0
....................  
....................  
....................  
....................  
*
0100:  CLRF   FF8
0102:  BCF    FD0.7
0104:  BSF    07.7
0106:  CLRF   FEA
0108:  CLRF   FE9
010A:  MOVLW  70
010C:  MOVWF  FD3
010E:  BSF    F9B.6
0110:  BCF    F9B.7
0112:  CLRF   19
0114:  BSF    FB8.3
0116:  MOVLW  10
0118:  MOVWF  FAF
011A:  MOVLW  00
011C:  MOVWF  FB0
011E:  MOVLW  A6
0120:  MOVWF  FAC
0122:  MOVLW  90
0124:  MOVWF  FAB
0126:  CLRF   1D
0128:  CLRF   1C
012A:  CLRF   1B
012C:  CLRF   1A
012E:  MOVLW  35
0130:  MOVWF  FCD
0132:  CLRF   FCC
0134:  CLRF   FCF
0136:  CLRF   FCE
0138:  BCF    F9E.0
013A:  BCF    F92.4
013C:  BCF    F92.3
013E:  BCF    F89.3
0140:  BCF    F92.2
0142:  BCF    F89.2
0144:  MOVLW  70
0146:  MOVWF  FD3
0148:  BSF    F9B.6
014A:  BCF    F9B.7
014C:  MOVWF  FD3
014E:  BSF    F9B.6
0150:  BCF    F9B.7
0152:  MOVLB  3
0154:  SETF   x80
0156:  SETF   x7F
0158:  SETF   x7E
015A:  SETF   x7D
015C:  MOVF   FC1,W
015E:  ANDLW  F0
0160:  MOVWF  FC1
0162:  MOVLW  00
0164:  MOVLB  F
0166:  MOVWF  x38
0168:  MOVWF  x3C
016A:  MOVWF  x39
016C:  MOVWF  x3A
016E:  MOVWF  x3B
0170:  MOVLB  1
0172:  CLRF   x88
0174:  CLRF   F77
0176:  CLRF   F78
0178:  CLRF   F79
017A:  CLRF   1E
017C:  CLRF   1F
017E:  CLRF   20
0180:  CLRF   21
0182:  CLRF   22
0184:  CLRF   23
0186:  CLRF   24
0188:  CLRF   25
018A:  CLRF   26
018C:  CLRF   27
018E:  CLRF   28
0190:  CLRF   29
0192:  CLRF   2A
0194:  CLRF   2B
0196:  CLRF   2C
0198:  CLRF   2D
019A:  CLRF   2E
019C:  CLRF   2F
019E:  CLRF   30
01A0:  CLRF   31
01A2:  CLRF   32
01A4:  CLRF   33
01A6:  CLRF   34
01A8:  CLRF   35
01AA:  CLRF   36
01AC:  CLRF   37
01AE:  CLRF   38
01B0:  CLRF   39
01B2:  CLRF   3A
01B4:  CLRF   3B
01B6:  CLRF   3C
01B8:  CLRF   3D
01BA:  CLRF   3E
01BC:  CLRF   3F
01BE:  CLRF   40
01C0:  CLRF   41
01C2:  CLRF   42
01C4:  CLRF   43
01C6:  CLRF   44
01C8:  CLRF   45
01CA:  CLRF   46
01CC:  CLRF   47
01CE:  CLRF   48
01D0:  CLRF   49
01D2:  CLRF   4A
01D4:  CLRF   4B
01D6:  CLRF   4C
01D8:  CLRF   4D
01DA:  CLRF   4E
01DC:  CLRF   4F
01DE:  CLRF   50
01E0:  CLRF   51
01E2:  CLRF   52
01E4:  CLRF   53
01E6:  CLRF   54
01E8:  CLRF   55
01EA:  CLRF   56
01EC:  CLRF   57
01EE:  CLRF   58
01F0:  CLRF   59
01F2:  CLRF   5A
01F4:  CLRF   5B
01F6:  CLRF   5C
01F8:  CLRF   5D
01FA:  CLRF   5E
01FC:  CLRF   5F
01FE:  MOVLB  0
0200:  CLRF   x60
0202:  CLRF   x61
0204:  CLRF   x62
0206:  CLRF   x63
0208:  CLRF   x64
020A:  CLRF   x65
020C:  CLRF   x66
020E:  CLRF   x67
0210:  CLRF   x68
0212:  CLRF   x69
0214:  CLRF   x6A
0216:  CLRF   x6B
0218:  CLRF   x6C
021A:  CLRF   x6D
021C:  CLRF   x6E
021E:  CLRF   x6F
0220:  CLRF   x70
0222:  CLRF   x71
0224:  CLRF   x72
0226:  CLRF   x73
0228:  CLRF   x74
022A:  CLRF   x75
022C:  CLRF   x76
022E:  CLRF   x77
0230:  CLRF   x78
0232:  CLRF   x79
0234:  CLRF   x7A
0236:  CLRF   x7B
0238:  CLRF   x7C
023A:  CLRF   x7D
023C:  CLRF   x7E
023E:  CLRF   x7F
0240:  CLRF   x80
0242:  CLRF   x81
0244:  CLRF   x82
0246:  CLRF   x83
0248:  CLRF   x84
024A:  CLRF   x85
024C:  CLRF   x86
024E:  CLRF   x87
0250:  CLRF   x88
0252:  CLRF   x89
0254:  CLRF   x8A
0256:  CLRF   x8B
0258:  CLRF   x8C
025A:  CLRF   x8D
025C:  CLRF   x8E
025E:  CLRF   x8F
0260:  CLRF   x90
0262:  CLRF   x91
0264:  CLRF   x92
0266:  CLRF   x93
0268:  CLRF   x94
026A:  CLRF   x95
026C:  CLRF   x96
026E:  CLRF   x97
0270:  CLRF   x98
0272:  CLRF   x99
0274:  CLRF   x9A
0276:  CLRF   x9B
0278:  CLRF   x9C
027A:  CLRF   x9D
027C:  CLRF   x9E
027E:  CLRF   x9F
0280:  CLRF   xA0
0282:  CLRF   xA1
0284:  CLRF   xA2
0286:  CLRF   xA3
0288:  CLRF   xA4
028A:  CLRF   xA5
028C:  CLRF   xA6
028E:  CLRF   xA7
0290:  CLRF   xA8
0292:  CLRF   xA9
0294:  CLRF   xAA
0296:  CLRF   xAB
0298:  CLRF   xAC
029A:  CLRF   xAD
029C:  CLRF   xAE
029E:  CLRF   xAF
02A0:  CLRF   xB0
02A2:  CLRF   xB1
02A4:  CLRF   xB2
02A6:  CLRF   xB3
02A8:  CLRF   xB4
02AA:  CLRF   xB5
02AC:  CLRF   xB6
02AE:  CLRF   xB7
02B0:  CLRF   xB8
02B2:  CLRF   xB9
02B4:  CLRF   xBA
02B6:  CLRF   xBB
02B8:  CLRF   xBC
02BA:  CLRF   xBD
02BC:  CLRF   xBE
02BE:  CLRF   xBF
02C0:  CLRF   xC0
02C2:  CLRF   xC1
02C4:  CLRF   xC2
02C6:  CLRF   xC3
02C8:  CLRF   xC4
02CA:  CLRF   xC5
02CC:  CLRF   xC6
02CE:  CLRF   xC7
02D0:  CLRF   xC8
02D2:  CLRF   xC9
02D4:  CLRF   xCA
02D6:  CLRF   xCB
02D8:  CLRF   xCC
02DA:  CLRF   xCD
02DC:  CLRF   xCE
02DE:  CLRF   xCF
02E0:  CLRF   xD0
02E2:  CLRF   xD1
02E4:  CLRF   xD2
02E6:  CLRF   xD3
02E8:  CLRF   xD4
02EA:  CLRF   xD5
02EC:  CLRF   xD6
02EE:  CLRF   xD7
02F0:  CLRF   xD8
02F2:  CLRF   xD9
02F4:  CLRF   xDA
02F6:  CLRF   xDB
02F8:  CLRF   xDC
02FA:  CLRF   xDD
02FC:  CLRF   xDE
02FE:  CLRF   xDF
0300:  CLRF   xE0
0302:  CLRF   xE1
0304:  CLRF   xE2
0306:  CLRF   xE3
0308:  CLRF   xE4
030A:  CLRF   xE5
030C:  CLRF   xE6
030E:  CLRF   xE7
0310:  CLRF   xE8
0312:  CLRF   xE9
0314:  CLRF   xEA
0316:  CLRF   xEB
0318:  CLRF   xEC
031A:  CLRF   xED
031C:  CLRF   xEE
031E:  CLRF   xEF
0320:  CLRF   xF0
0322:  CLRF   xF1
0324:  CLRF   xF2
0326:  CLRF   xF3
0328:  CLRF   xF4
032A:  CLRF   xF5
032C:  CLRF   xF6
032E:  CLRF   xF7
0330:  CLRF   xF8
0332:  CLRF   xF9
0334:  CLRF   xFA
0336:  CLRF   xFB
0338:  CLRF   xFC
033A:  CLRF   xFD
033C:  CLRF   xFE
033E:  CLRF   xFF
0340:  MOVLB  1
0342:  CLRF   x00
0344:  CLRF   x01
0346:  CLRF   x02
0348:  CLRF   x03
034A:  CLRF   x04
034C:  CLRF   x05
034E:  CLRF   x06
0350:  CLRF   x07
0352:  CLRF   x08
0354:  CLRF   x09
0356:  CLRF   x0A
0358:  CLRF   x0B
035A:  CLRF   x0C
035C:  CLRF   x0D
035E:  CLRF   x0E
0360:  CLRF   x0F
0362:  CLRF   x10
0364:  CLRF   x11
0366:  CLRF   x12
0368:  CLRF   x13
036A:  CLRF   x14
036C:  CLRF   x15
036E:  CLRF   x16
0370:  CLRF   x17
0372:  CLRF   x18
0374:  CLRF   x19
0376:  CLRF   x1A
0378:  CLRF   x1B
037A:  CLRF   x1C
037C:  CLRF   x1D
037E:  CLRF   x1E
0380:  CLRF   x1F
0382:  CLRF   x20
0384:  CLRF   x21
0386:  CLRF   x22
0388:  CLRF   x23
038A:  CLRF   x24
038C:  CLRF   x25
038E:  CLRF   x26
0390:  CLRF   x27
0392:  CLRF   x28
0394:  CLRF   x29
0396:  CLRF   x2A
0398:  CLRF   x2B
039A:  CLRF   x2C
039C:  CLRF   x2D
039E:  CLRF   x2E
03A0:  CLRF   x2F
03A2:  CLRF   x30
03A4:  CLRF   x31
03A6:  CLRF   x32
03A8:  CLRF   x33
03AA:  CLRF   x34
03AC:  CLRF   x35
03AE:  CLRF   x36
03B0:  CLRF   x37
03B2:  CLRF   x38
03B4:  CLRF   x39
03B6:  CLRF   x3A
03B8:  CLRF   x3B
03BA:  CLRF   x3C
03BC:  CLRF   x3D
03BE:  CLRF   x3E
03C0:  CLRF   x3F
03C2:  CLRF   x40
03C4:  CLRF   x41
03C6:  CLRF   x42
03C8:  CLRF   x43
03CA:  CLRF   x44
03CC:  CLRF   x45
03CE:  CLRF   x46
03D0:  CLRF   x47
03D2:  CLRF   x48
03D4:  CLRF   x49
03D6:  CLRF   x4A
03D8:  CLRF   x4B
03DA:  CLRF   x4C
03DC:  CLRF   x4D
03DE:  CLRF   x4E
03E0:  CLRF   x4F
03E2:  CLRF   x50
03E4:  CLRF   x51
03E6:  CLRF   x52
03E8:  CLRF   x53
03EA:  CLRF   x54
03EC:  CLRF   x55
03EE:  CLRF   x56
03F0:  CLRF   x57
03F2:  CLRF   x58
03F4:  CLRF   x59
03F6:  CLRF   x5A
03F8:  CLRF   x5B
03FA:  CLRF   x5C
03FC:  CLRF   x5D
03FE:  CLRF   x5E
0400:  CLRF   x5F
0402:  CLRF   x60
0404:  CLRF   x61
0406:  CLRF   x62
0408:  CLRF   x63
040A:  CLRF   x64
040C:  CLRF   x65
040E:  CLRF   x66
0410:  CLRF   x67
0412:  CLRF   x68
0414:  CLRF   x69
0416:  CLRF   x6A
0418:  CLRF   x6B
041A:  CLRF   x6C
041C:  CLRF   x6D
041E:  CLRF   x6E
0420:  CLRF   x6F
0422:  CLRF   x70
0424:  CLRF   x71
0426:  CLRF   x72
0428:  CLRF   x73
042A:  CLRF   x74
042C:  CLRF   x75
042E:  CLRF   x76
0430:  CLRF   x77
0432:  CLRF   x78
0434:  CLRF   x79
0436:  CLRF   x7A
0438:  CLRF   x7B
043A:  CLRF   x7C
043C:  CLRF   x7D
043E:  CLRF   x7E
0440:  CLRF   x7F
0442:  CLRF   x80
0444:  CLRF   x81
0446:  CLRF   x82
0448:  CLRF   x83
044A:  CLRF   x84
044C:  CLRF   x85
044E:  CLRF   x86
0450:  CLRF   x87
0452:  CLRF   x88
0454:  CLRF   x89
0456:  CLRF   x8A
0458:  CLRF   x8B
045A:  CLRF   x8C
045C:  CLRF   x8D
045E:  CLRF   x8E
0460:  CLRF   x8F
0462:  CLRF   x90
0464:  CLRF   x91
0466:  CLRF   x92
0468:  CLRF   x93
046A:  CLRF   x94
046C:  CLRF   x95
046E:  CLRF   x96
0470:  CLRF   x97
0472:  CLRF   x98
0474:  CLRF   x99
0476:  CLRF   x9A
0478:  CLRF   x9B
047A:  CLRF   x9C
047C:  CLRF   x9D
047E:  CLRF   x9E
0480:  CLRF   x9F
0482:  CLRF   xA0
0484:  CLRF   xA1
0486:  CLRF   xA2
0488:  CLRF   xA3
048A:  CLRF   xA4
048C:  CLRF   xA5
048E:  CLRF   xA6
0490:  CLRF   xA7
0492:  CLRF   xA8
0494:  CLRF   xA9
0496:  CLRF   xAA
0498:  CLRF   xAB
049A:  CLRF   xAC
049C:  CLRF   xAD
049E:  CLRF   xAE
04A0:  CLRF   xAF
04A2:  CLRF   xB0
04A4:  CLRF   xB1
04A6:  CLRF   xB2
04A8:  CLRF   xB3
04AA:  CLRF   xB4
04AC:  CLRF   xB5
04AE:  CLRF   xB6
04B0:  CLRF   xB7
04B2:  CLRF   xB8
04B4:  CLRF   xB9
04B6:  CLRF   xBA
04B8:  CLRF   xBB
04BA:  CLRF   xBC
04BC:  CLRF   xBD
04BE:  CLRF   xBE
04C0:  CLRF   xBF
04C2:  CLRF   xC0
04C4:  CLRF   xC1
04C6:  CLRF   xC2
04C8:  CLRF   xC3
04CA:  CLRF   xC4
04CC:  CLRF   xC5
04CE:  CLRF   xC6
04D0:  CLRF   xC7
04D2:  CLRF   xC8
04D4:  CLRF   xC9
04D6:  CLRF   xCA
04D8:  CLRF   xCB
04DA:  CLRF   xCC
04DC:  CLRF   xCD
04DE:  CLRF   xCE
04E0:  CLRF   xCF
04E2:  CLRF   xD0
04E4:  CLRF   xD1
04E6:  CLRF   xD2
04E8:  CLRF   xD3
04EA:  CLRF   xD4
04EC:  CLRF   xD5
04EE:  CLRF   xD6
04F0:  CLRF   xD7
04F2:  CLRF   xD8
04F4:  CLRF   xD9
04F6:  CLRF   xDA
04F8:  CLRF   xDB
04FA:  CLRF   xDC
04FC:  CLRF   xDD
04FE:  CLRF   xDE
0500:  CLRF   xDF
0502:  CLRF   xE0
0504:  CLRF   xE1
0506:  CLRF   xE2
0508:  CLRF   xE3
050A:  CLRF   xE4
050C:  CLRF   xE5
050E:  CLRF   xE6
0510:  CLRF   xE7
0512:  CLRF   xE8
0514:  CLRF   xE9
0516:  CLRF   xEA
0518:  CLRF   xEB
051A:  CLRF   xEC
051C:  CLRF   xED
051E:  CLRF   xEE
0520:  CLRF   xEF
0522:  CLRF   xF0
0524:  CLRF   xF1
0526:  CLRF   xF2
0528:  CLRF   xF3
052A:  CLRF   xF4
052C:  CLRF   xF5
052E:  CLRF   xF6
0530:  CLRF   xF7
0532:  CLRF   xF8
0534:  CLRF   xF9
0536:  CLRF   xFA
0538:  CLRF   xFB
053A:  CLRF   xFC
053C:  CLRF   xFD
053E:  CLRF   xFE
0540:  CLRF   xFF
0542:  MOVLB  2
0544:  CLRF   x00
0546:  CLRF   x01
0548:  CLRF   x02
054A:  CLRF   x03
054C:  CLRF   x04
054E:  CLRF   x05
0550:  CLRF   x06
0552:  CLRF   x07
0554:  CLRF   x08
0556:  CLRF   x09
0558:  CLRF   x0A
055A:  CLRF   x0B
055C:  CLRF   x0C
055E:  CLRF   x0D
0560:  CLRF   x0E
0562:  CLRF   x0F
0564:  CLRF   x10
0566:  CLRF   x11
0568:  CLRF   x12
056A:  CLRF   x13
056C:  CLRF   x14
056E:  CLRF   x15
0570:  CLRF   x16
0572:  CLRF   x17
0574:  CLRF   x18
0576:  CLRF   x19
0578:  CLRF   x1A
057A:  CLRF   x1B
057C:  CLRF   x1C
057E:  CLRF   x1D
0580:  CLRF   x1E
0582:  CLRF   x1F
0584:  CLRF   x20
0586:  CLRF   x21
0588:  CLRF   x22
058A:  CLRF   x23
058C:  CLRF   x24
058E:  CLRF   x25
0590:  CLRF   x26
0592:  CLRF   x27
0594:  CLRF   x28
0596:  CLRF   x29
0598:  CLRF   x2A
059A:  CLRF   x2B
059C:  CLRF   x2C
059E:  CLRF   x2D
05A0:  CLRF   x2E
05A2:  CLRF   x2F
05A4:  CLRF   x30
05A6:  MOVLW  06
05A8:  MOVWF  x31
05AA:  MOVLW  12
05AC:  MOVWF  x33
05AE:  MOVLW  2A
05B0:  MOVWF  x32
05B2:  MOVLW  07
05B4:  MOVWF  x34
05B6:  MOVLW  13
05B8:  MOVWF  x36
05BA:  MOVLW  BA
05BC:  MOVWF  x35
05BE:  MOVLW  02
05C0:  MOVWF  x37
05C2:  MOVLW  14
05C4:  MOVWF  x39
05C6:  MOVLW  AE
05C8:  MOVWF  x38
05CA:  MOVLW  08
05CC:  MOVWF  x3A
05CE:  MOVLW  14
05D0:  MOVWF  x3C
05D2:  MOVLW  F4
05D4:  MOVWF  x3B
05D6:  CLRF   x3D
05D8:  CLRF   x3E
05DA:  CLRF   x3F
05DC:  CLRF   x40
05DE:  CLRF   x41
05E0:  CLRF   x42
05E2:  CLRF   x43
05E4:  CLRF   x44
05E6:  CLRF   x45
05E8:  CLRF   x46
05EA:  CLRF   x47
05EC:  CLRF   x48
05EE:  CLRF   x49
05F0:  CLRF   x4A
05F2:  CLRF   x4B
05F4:  CLRF   x4C
05F6:  CLRF   x4D
05F8:  CLRF   x4E
05FA:  CLRF   x4F
05FC:  CLRF   x50
05FE:  CLRF   x51
0600:  CLRF   x52
0602:  CLRF   x53
0604:  CLRF   x54
0606:  CLRF   x55
0608:  CLRF   x56
060A:  CLRF   x57
060C:  CLRF   x58
060E:  CLRF   x59
0610:  CLRF   x5A
0612:  CLRF   x5B
0614:  CLRF   x5C
0616:  CLRF   x5D
0618:  CLRF   x5E
061A:  CLRF   x5F
061C:  CLRF   x60
061E:  CLRF   x61
0620:  CLRF   x62
0622:  CLRF   x63
0624:  CLRF   x64
0626:  CLRF   x65
0628:  CLRF   x66
062A:  CLRF   x67
062C:  CLRF   x68
062E:  CLRF   x69
0630:  CLRF   x6A
0632:  CLRF   x6B
0634:  CLRF   x6C
0636:  CLRF   x6D
0638:  CLRF   x6E
063A:  CLRF   x6F
063C:  CLRF   x70
063E:  CLRF   x71
0640:  CLRF   x72
0642:  CLRF   x73
0644:  CLRF   x74
0646:  CLRF   x75
0648:  CLRF   x76
064A:  CLRF   x77
064C:  CLRF   x78
064E:  CLRF   x79
0650:  CLRF   x7A
0652:  CLRF   x7B
0654:  CLRF   x7C
0656:  CLRF   x7D
0658:  CLRF   x7E
065A:  CLRF   x7F
065C:  CLRF   x80
065E:  CLRF   x81
0660:  CLRF   x82
0662:  CLRF   x83
0664:  CLRF   x84
0666:  CLRF   x85
0668:  CLRF   x86
066A:  CLRF   x87
066C:  CLRF   x88
066E:  CLRF   x89
0670:  CLRF   x8A
0672:  CLRF   x8B
0674:  CLRF   x8C
....................  
0676:  BCF    FF2.6
0678:  BCF    FF2.7
067A:  BTFSC  FF2.7
067C:  BRA    0678
....................  
....................  
....................  
067E:  MOVLB  3
0680:  CLRF   x82
0682:  CLRF   x81
0684:  BCF    x83.0
0686:  MOVLB  0
0688:  RCALL  096E
068A:  MOVFF  02,385
068E:  MOVFF  01,384
....................  
0692:  MOVLB  3
0694:  MOVFF  384,FE9
0698:  MOVFF  385,FEA
069C:  BTFSC  FEF.0
069E:  BRA    06CE
....................  
06A0:  CLRF   FF8
06A2:  MOVLW  07
06A4:  MOVWF  FF7
06A6:  MOVLW  F0
06A8:  MOVWF  FF6
06AA:  MOVLW  03
06AC:  MOVWF  FEA
06AE:  MOVLW  81
06B0:  MOVWF  FE9
06B2:  CLRF   xDC
06B4:  MOVLW  02
06B6:  MOVWF  xDB
06B8:  MOVLB  0
06BA:  RCALL  0950
....................  
06BC:  MOVLB  3
06BE:  MOVF   x81,W
06C0:  SUBLW  D2
06C2:  BNZ   06CC
06C4:  MOVF   x82,W
06C6:  SUBLW  04
06C8:  BNZ   06CC
....................  
06CA:  BSF    x83.0
....................  
....................  
06CC:  BRA    06D0
....................  
06CE:  BSF    x83.0
....................  
....................  
....................  
06D0:  BTFSS  x83.0
06D2:  BRA    06EC
....................  
06D4:  MOVLB  0
06D6:  BRA    0AA4
....................  
06D8:  BRA    00F4
....................  
06DA:  MOVLW  C0
06DC:  IORWF  FF2,F
....................  
06DE:  GOTO   15DC
....................  
06E2:  MOVLW  00
06E4:  MOVWF  01
06E6:  BRA    070E
....................  
....................  
06E8:  BRA    070E
06EA:  MOVLB  3
....................  
....................  
06EC:  MOVLW  00
06EE:  MOVWF  03
06F0:  MOVLW  FC
06F2:  MOVWF  x86
06F4:  MOVFF  03,387
....................  
06F8:  MOVLW  27
06FA:  MOVWF  x87
06FC:  CLRF   x86
....................  
06FE:  MOVLW  03
0700:  MOVWF  FEA
0702:  MOVLW  86
0704:  MOVWF  FE9
0706:  MOVLB  0
0708:  RCALL  0942
....................  
070A:  MOVLW  00
070C:  MOVWF  01
....................  
....................  
....................  
....................  
.................... #include <18F45K22.h> 
070E:  BRA    070E
.................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... #device PIC18F45K22 
.................... #list 
....................  
.................... #device adc=10 
.................... #device pass_strings=in_ram 
....................  
.................... #define LOADER_END 0x1FFF 
.................... #include <boot.h> 
.................... #undef LOADER_END 
.................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
.................... #define LOADER_END   0x1FFF 
.................... #define LOADER_SIZE  0x3FF 
....................  
.................... #ifndef _bootloader 
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
....................  
.................... /* when in operational software, keep out of the bootloader sections */ 
.................... #org 0, 0xfff {} 
.................... #org 0x1000, 0x1ffe {} 
....................  
.................... #else 
....................  
.................... /* when in the bootloader, keep out of the operational sections */ 
.................... #org 0x2000, 0x7ffe {} 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOPUT 
.................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=64000000) 
.................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
.................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
.................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
....................  
.................... #opt 9 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
.................... #define safe_write_program_memory(address, pointer, size) \ 
....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
....................  
.................... #ifndef INCLUDE_TIMER_H_ 
.................... #define INCLUDE_TIMER_H_ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdbool.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
....................  
.................... typedef void (*timer_func)(void* arg); 
....................  
.................... typedef struct { 
....................   //bool triggred; 
....................   uint32_t expTime; 
....................   void *arg; 
....................   timer_func func; 
.................... } timer_task_t; 
....................  
.................... #INLINE 
.................... uint32_t timer_get_us_count(); 
.................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg); 
.................... void timer_yield(); 
....................  
.................... #endif /* INCLUDE_TIMER_H_ */ 
....................  
....................  
.................... /* 
....................  * message_handlers.h 
....................  * 
....................  *  Created on: Mar 26, 2017 
....................  *      Author: asaf 
....................  */ 
....................  
.................... #ifndef MESSAGE_HANDLERS_H_ 
.................... #define MESSAGE_HANDLERS_H_ 
....................  
.................... void init_message_handlers(); 
.................... void process_message(uint8_t* message, uint16_t length); 
.................... #INLINE 
.................... void perform_last_control_message(); 
.................... void control_handle_timer(); 
.................... void samp_if_needed(); 
....................  
.................... #endif /* MESSAGE_HANDLERS_H_ */ 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
